[article Version 1.34.0
    [quickbook 1.4]
    [source-mode c++]
    [purpose
        New Libraries: Foreach, Statechart, TR1, Typeof, Xpressive.

        Updated Libraries: Assign, Date_time, Filesystem, Function, Hash, Graph,
            MultiArray, Multi-Index, Optional, Parameter, Pointer Container,
            Python, Signals, Smart Pointer, String Algorithm, Wave]
    [authors [Witt, Thomas]]
    [last-revision Sat, 12 May 2007 12:00:00 GMT]
]

[include ext.qbk]
[download http://sourceforge.net/projects/boost/files/boost/1.34.0/]
[documentation /doc/libs/1_34_0/]

[section New Libraries]

* [phrase library..[@/doc/libs/1_34_0/doc/html/foreach.html Foreach Library]:] `BOOST_FOREACH`
  macro for easily iterating over the elements of a sequence, from Eric
  Niebler.
* [phrase library..[@/doc/libs/1_34_0/libs/statechart/doc/index.html Statechart Library]:]
  Arbitrarily complex finite state machines can be implemented in easily
  readable and maintainable C++ code, from Andreas Huber.
* [phrase library..[@/doc/libs/1_34_0/libs/tr1/index.html TR1 Library]:] An implementation of
  the C++ Technical Report on Standard Library Extensions, from John Maddock.
  This library does not itself implement the TR1 components, rather it's a thin
  wrapper that will include your standard library's TR1 implementation (if it
  has one), otherwise it will include the Boost Library equivalents, and import
  them into namespace `std::tr1`. Highlights include: Reference Wrappers, Smart
  Pointers, result_of, Function Object Binders, Polymorphic function wrappers,
  Type Traits, Random Number Generators and Distributions, Tuples, Fixed Size
  Array, Hash Function Objects, Regular Expressions, and Complex Number
  Additional Algorithms.
* [phrase library..[@/doc/libs/1_34_0/doc/html/typeof.html Typeof Library]:] Typeof operator
  emulation, from Arkadiy Vertleyb and Peder Holt.
* [phrase library..[@/doc/libs/1_34_0/doc/html/xpressive.html Xpressive Library]:] Regular
  expressions that can be written as strings or as expression templates, and
  that can refer to each other and themselves recursively with the power of
  context-free grammars, from Eric Niebler.

[endsect]

[section Updated Libraries]

* [phrase library..[@/doc/libs/1_34_0/libs/assign/index.html Assign Library]:] 
  * Support for `ptr_map<key,T>` via the new function `ptr_map_insert()`
  * Support for initialization of [@/doc/libs/1_34_0/libs/ptr_container/index.html Pointer
    Containers] when the containers hold pointers to an abstract base class.
* [phrase library..[@/doc/libs/1_34_0/doc/html/date_time.html Date_time library]:] 
  * Support for new US/Canada timezone rules and other bug fixes. See
    [@/doc/libs/1_34_0/doc/html/date_time/details.html#changes Change History] for details. 
* [phrase library..[@/doc/libs/1_34_0/libs/filesystem/doc/index.htm Filesystem Library]:] Major
  upgrade in preparation for submission to the C++ Standards Committee for TR2.
  Changes include: 
  * [@/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Internationalization
    Internationalization], provided by class templates ['basic_path],
    ['basic_filesystem_error], ['basic_directory_iterator], and
    ['basic_directory_entry].
  * [@/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Simplification Simplification] of the
    path interface by eliminating special constructors to identify native
    formats.
  * [@/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Rationalization Rationalization] of
    predicate function design, including the addition of several new
    functions.
  * Clearer specification by reference to
    [@/doc/libs/1_34_0/libs/filesystem/doc/design.htm#POSIX-01 POSIX], the ISO/IEEE Single
    Unix Standard, with provisions for Windows and other operating systems.
  * [@/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Preservation Preservation] of existing
    user code whenever possible.
  * [@/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#More_efficient More efficient] directory
    iteration.
  * Addition of a
    [@/doc/libs/1_34_0/libs/filesystem/doc/tr2_proposal.html#Class-template-basic_recursive_directory_iterator
    recursive directory iterator].
* [phrase library..[@/doc/libs/1_34_0/libs/function/index.html Function Library]:]
  Boost.Function now implements a small buffer optimization, which can
  drastically improve the performance when copying or constructing
  Boost.Function objects storing small function objects. For instance,
  `bind(&X:foo, &x, _1, _2)` requires no heap allocation when placed into a
  Boost.Function object.
* [phrase library..[@/doc/libs/1_34_0/libs/functional/hash/index.html Functional/Hash Library]:] 
  * Use declarations for standard classes, so that the library doesn't need
    to include all of their headers
  * Deprecated the [^<boost/functional/hash/*.hpp>] headers.
  * Add support for the `BOOST_HASH_NO_EXTENSIONS` macro, which disables the
    extensions to TR1
  * Minor improvements to the hash functions for floating point numbers.
* [phrase library..[@/doc/libs/1_34_0/libs/graph/doc/index.html Graph Library]:] 
  * [@/doc/libs/1_34_0/libs/graph/doc/maximum_matching.html
    `edmonds_maximum_cardinality_matching`], from Aaron Windsor.
  * [@/doc/libs/1_34_0/libs/graph/doc/lengauer_tarjan_dominator.htm
    `lengauer_tarjan_dominator_tree`], from JongSoo Park.
  * [@/doc/libs/1_34_0/libs/graph/doc/compressed_sparse_row.html
    `compressed_sparse_row_graph`], from Jeremiah Willcock and Douglas Gregor
    of Indiana University.
  * [@/doc/libs/1_34_0/libs/graph/doc/sorted_erdos_renyi_gen.html
    `sorted_erdos_renyi_iterator`], from Jeremiah Willcock of Indiana
    University.
  * [@/doc/libs/1_34_0/libs/graph/doc/biconnected_components.html `biconnected_components`] now
    supports a visitor and named parameters, from Janusz Piwowarski.
  * [@/doc/libs/1_34_0/libs/graph/doc/adjacency_matrix.html `adjacency_matrix`] now models the
    [@/doc/libs/1_34_0/libs/graph/doc/BidirectionalGraph.html Bidirectional Graph] concept.
  * [@/doc/libs/1_34_0/libs/graph/doc/dijkstra_shortest_paths.html `dijkstra_shortest_paths`]
    now calls `vis.initialize_vertex` for each vertex during initialization.
  * ['Note:] the name of the compiled library for the
    [@/doc/libs/1_34_0/libs/graph/doc/read_graphviz.html GraphViz reader] has changed to
    [^boost_graph] (from [^bgl-viz]) to match Boost conventions.
  * See the [@/doc/libs/1_34_0/libs/graph/doc/history.html#1.34.0 complete revision history]
    for more information.
* [phrase library..[@/doc/libs/1_34_0/libs/multi_array/index.html MultiArray Library]:]
  Boost.MultiArray now by default provides range-checking for `operator[]`.
  Range checking can be disabled by defining the macro `BOOST_DISABLE_ASSERTS`
  before including [^multi_array.hpp]. A bug in `multi_array::resize()` related
  to storage orders was fixed.
* [phrase library..[@/doc/libs/1_34_0/libs/multi_index/doc/index.html Multi-index Containers
  Library]:] 
  * New [@/doc/libs/1_34_0/libs/multi_index/doc/tutorial/indices.html#rnd_indices random access
    indices].
  * Non key-based indices feature new
    [@/doc/libs/1_34_0/libs/multi_index/doc/tutorial/indices.html#rearrange rearrange
    facilities].
  * This version also includes a number of optimizations and usage
    improvements. For a complete list of changes, see the library
    [@/doc/libs/1_34_0/libs/multi_index/doc/release_notes.html#boost_1_34 release notes].
* [phrase library..[@/doc/libs/1_34_0/libs/optional/index.html Optional Library]:] 
  * `boost::none_t and boost::none` now added to Optional's documentation
  * Relational operators now directly support arguments of type `'T'` and
    `'none_t'`
  * operator->() now also works with reference types.
  * Helper functions `make_optional(val), make_optional(cond,val) and
    get_optional_value_or(opt,alternative_value)` added.
  * Constructor taking a boolean condition (as well as a value) added.
  * Member function `get_value_or(alternative_value)` added.
  * Incompatbility bug with mpl::apply<> fixed.
  * Converting assignment bug with uninitialized lvalues fixed.
* [phrase library..[@/doc/libs/1_34_0/libs/parameter/index.html Parameter Library]:] 
  * Every ArgumentPack is now a valid
    [@/doc/libs/1_34_0/libs/mpl/doc/refmanual/forward-sequence.html MPL Forward Sequence.]
  * Support for unnamed arguments (those whose keyword is deduced from their
    types) is added.
  * Support for named and unnamed template arguments is added.
  * New overload generation macros solve the
    [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1385.htm
    forwarding problem] directly.
  * See also the Python library changes, below.
* [phrase library..[@/doc/libs/1_34_0/libs/ptr_container/index.html Pointer Container Library]:] 
  * Support for serialization via [@/doc/libs/1_34_0/libs/serialization/index.html
    Boost.Serialization.]
  * Exceptions can be disabled by defining the macro
    BOOST_PTR_CONTAINER_NO_EXCEPTIONS before including any header. This macro
    is defined by default if BOOST_NO_EXCEPTIONS is defined.
  * Additional `std::auto_ptr<T>` overloads added s.t. one can also pass
    `std::auto_ptr<T>` instead of only `T*` arguments to member functions.
  * `transfer()` now has weaker requirements s.t. one can transfer objects from
    `ptr_container<Derived>` to `ptr_container<Base>`,
* [phrase library..[@/doc/libs/1_34_0/libs/python/index.html Python Library]:] 
  * Boost.Python now automatically appends C++ signatures to docstrings. The
    new [@/doc/libs/1_34_0/libs/python/doc/v2/docstring_options.html [^ docstring_options.hpp]]
    header is available to control the content of docstrings.
  * [@/doc/libs/1_34_0/libs/python/doc/v2/stl_iterator.html#stl_input_iterator-spec
    `stl_input_iterator`], for turning a Python iterable object into an STL
    input iterator, from Eric Niebler.
  * Support for `void*` conversions is added.
  * Integrated support for wrapping C++ functions built with the parameter
    library; keyword names are automatically known to docsstrings.
  * Enhancements to the API for better embedding support
    (`boost::python::import()`, `boost::python::exec()`, and
    `boost::python::exec_file()`).
* [phrase library..[@/doc/libs/1_34_0/doc/html/signals.html Signals Library]:] More improvements to signal invocation performance from Robert Zeh.
* [phrase library..[@/doc/libs/1_34_0/libs/smart_ptr/smart_ptr.htm Smart Pointers Library]:] 
  * [@/doc/libs/1_34_0/libs/smart_ptr/shared_ptr.htm#allocator_constructor Allocator support]
    as proposed in
    [@http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1851.pdf N1851]
    (162 Kb PDF).
  * [@/doc/libs/1_34_0/libs/smart_ptr/pointer_cast.html `pointer_cast`] and
    [@/doc/libs/1_34_0/libs/smart_ptr/pointer_to_other.html `pointer_to_other`] utilities to
    allow pointer-independent code, from Ion Gaztanaga.
* [phrase library..[@/doc/libs/1_34_0/libs/algorithm/string/index.html String Algorithm Library]:] 
  * `lexicographical_compare`
  * `join`
  * New comparison predicates `is_less`, `is_not_greater`. 
  * Negative indexes support (like Perl) in various algorihtms (`*_head/tail`,
    `*_nth`). 
* [phrase library..[@/doc/libs/1_34_0/libs/wave/index.html Wave Library]:] 
  * Wave now correctly recognizes pp-number tokens as mandated by the C++
    Standard, which are converted to C++ tokens right before they are returned
    from the library.
  * Several new preprocessing hooks have been added. For a complete description
    please refer to the related documentation page:
    [@/doc/libs/1_34_0/libs/wave/doc/class_reference_ctxpolicy.html The Context Policy].
  * Shared library (dll) support has been added for the generated Wave
    libraries.
  * The overall error handling has been improved. It is now possible to recover
    and continue after an error or a warning was issued.
  * Support for optional comment and/or full whitespace preservation in the
    generated output stream has been added.
  * The Wave library now performs automatic include guard detection to avoid
    accessing header files more than once, if appropriate. 
  * Full interactive mode has been added to the Wave tool. Now the Wave tool
    can be used just like Python or Perl for instance to interactively try out
    your BOOST_PP macros. Additionally it is now possible to load and save the
    current state of an interactive session (macro tables et.al.).
  * The overall performance has been improved by upto 40-60%, depending on the
    concrete files to process. 
  * Support for new pragmas has been added allowing to control certain library
    features from inside the preprocessed sources (partial output redirection,
    control of generated whitespace and #line directives).
  * Optional support for #pragma message "..." has been added. 
  * This version also includes a number of bug fixes and usage improvements.
    For a complete list of changes, see the libraries [@/doc/libs/1_34_0/libs/wave/ChangeLog
    change log].

[endsect]

[section Supported Compilers]

Boost is tested on a wide range of compilers and platforms. Since Boost
libraries rely on modern C++ features not available in all compilers, not all
Boost libraries will work with every compiler. The following compilers and
platforms have been extensively tested with Boost, although many other
compilers and platforms will work as well. For more information, see the
[@https://www.boost.org/regression/release/user/ regression test results].

* [@http://developer.apple.com/ Apple GCC] 4.0.1 on Mac OS X.
* [@http://www.codegear.com/products/cppbuilder Borland C++] 5.8.2 on Windows.
* [@http://gcc.gnu.org/ GNU C++] 
    * 3.2.x., 3.3.x, 3.4.x, 4.0.x, 4.1.x on Linux 
    * 4.1.x on Solaris 
    * 3.4.x on Windows 
* [@http://h30097.www3.hp.com/cplus/ HP aC++ A.06.14].
* [@http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm
  Intel C++] 9.1 on Windows, 9.0 on Linux.
* [@http://www.metrowerks.com/ Metrowerks CodeWarrior] 9.4 on Windows.
* [@http://msdn.microsoft.com/visualc/ Microsoft Visual C++] 6.0 (sp5, with and
  without STLport), 7.0, 7.1, 8.0. Note: Boost does not support the
  non-standard "Safe" C++ Library shipping with Visual C++ 8.0, which may
  result in many spurious warnings from Boost headers and other
  standards-conforming C++ code. To suppress these warnings, define the macro
  `_SCL_SECURE_NO_DEPRECATE`.
* [@http://developers.sun.com/sunstudio/compilers_index.html Sun Studio 11] on
  Solaris.

[endsect]

[section Acknowledgements]

[@/users/people/thomas_witt.html Thomas Witt] managed this release.

A great number of people contributed their time and expertise to make this
release possible. Special thanks go to Vladimir Prus for making Boost.Build
version 2 a reality, David Abrahams for authoring a new getting started guide
and Greg D. for answering countless questions.

[endsect]
