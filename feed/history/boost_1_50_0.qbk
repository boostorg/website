[article Version 1.50.0
    [quickbook 1.5]
    [source-mode c++]
    [purpose New Libraries: Algorithm, Functional/OverloadedFunction,
    LocalFunction, Utility/IdentityType.
    Updated Libraries: Accumulators, Array, Asio, Bimap, Chrono, Concept Check,
    Filesystem, Foreach, Graph, Geometry, Hash, Iostreams, Iterator, MultiArray,
    Lexical cast, Locale, MSM, Program Options, PropertyMap, Proto, Ratio,
    ScopeExit, Thread, Unordered, Wave, xpressive]
    [authors [Dawes, Beman]]
    [last-revision Thu, 28 Jun 2012 08:48:57 -0400]
]

[include ext.qbk]

[status released]
[download http://sourceforge.net/projects/boost/files/boost/1.50.0/]
[documentation /doc/libs/1_50_0/]

[section Patches]

* [@/patches/1_50_0/001-unordered.patch Boost.Unordered patch] - Fixes a bug when
  compiled using a C++11 compiler, but with a C++03 allocator. When inserting
  elements, `allocator_traits` detects that the node can be constructed using an
  accidental implicit conversion which causes several problems.

* [@http://cppcms.com/files/locale/boost_locale_utf.patch Locale Patch] -
  Fixes a bug which causes `boost::locale::utf::utf_traits` to accept
  some invalid UTF-8 sequences, which is a possible security flaw.

[endsect]

[section New Libraries]

* [phrase library..[@/libs/algorithm/ Algorithm]:]
  A collection of useful generic algorithms, from Marshall Clow. This includes several different searching algorithms, as well as most of the new algorithms from the C++11 standard library
* [phrase library..[@/libs/functional/overloaded_function/ Functional/OverloadedFunction]:]
  Overload different functions into a single function object, from Lorenzo Caminiti.
* [phrase library..[@/libs/local_function/ LocalFunction]:]
  Program functions locally, within other functions, directly within the scope where they are needed, from Lorenzo Caminiti.
* [phrase library..[@/libs/utility/identity_type/ Utility/IdentityType]:]
  Wrap types within round parenthesis so they can always be passed as macro parameters, from Lorenzo Caminiti.

[endsect]

[section Updated Libraries]

* [phrase library..[@/libs/accumulators/ Accumulators]:]
  * add missing `#include <boost/throw_exception.hpp>`, fixes [@https://svn.boost.org/trac/boost/ticket/6702 #6702].
  * work around for msvc which allows ctor templates to be copy ctors, fixes [@https://svn.boost.org/trac/boost/ticket/6535 #6535].
  * shorten filenames to meet boost guidelines, fixes [@https://svn.boost.org/trac/boost/ticket/6196 #6196].

* [phrase library..[@/libs/array/ Array]:]
  * add support for Boost.Hash [@https://svn.boost.org/trac/boost/ticket/6791 #6791].

* [phrase library..[@/libs/asio/ Asio]:]
  * Changed the `epoll_reactor` backend to do lazy registration for `EPOLLOUT`
    events.
  * Fixed the `epoll_reactor` handling of out-of-band data, which was broken by
    an incomplete fix in the last release.
  * Changed Asio's SSL wrapper to respect OpenSSL's `OPENSSL_NO_ENGINE` feature
    test `#define` ([@https://svn.boost.org/trac/boost/ticket/6432 #6432]).
  * Fixed `windows::object_handle` so that it works with Windows compilers that
    support C++11 move semantics (such as [^g++]).
  * Improved the performance of strand rescheduling.
  * Added support for [^g++] 4.7 when compiling in C++11 mode
    ([@https://svn.boost.org/trac/boost/ticket/6620 #6620]).
  * Fixed a problem where `signal_set` handlers were not being delivered when
    the `io_service` was constructed with a `concurrency_hint` of 1
    ([@https://svn.boost.org/trac/boost/ticket/6657 #6657]).

* [phrase library..[@/libs/bimap/ Bimap]:]
  * Remove spurious dependency on Boost.Serialization, fixes [@https://svn.boost.org/trac/boost/ticket/3868 #3868].
  * Solve unused constructor parameter warning, fixes [@https://svn.boost.org/trac/boost/ticket/5749 #5749].
  * Add key_type and mapped_type (leaving data_type for backward compatibility) typedefs to map views, fixes [@https://svn.boost.org/trac/boost/ticket/6031 #6031].

* [phrase library..[@/libs/chrono/ Chrono]:]
 * Fixed Bugs:
   * [@https://svn.boost.org/trac/boost/ticket/6361 #6361] integer overflow in boost::chrono::process_real_cpu_clock::now() under Windows 32bits.
   * [@https://svn.boost.org/trac/boost/ticket/6628 #6628] compiler warning in process_cpu_clocks.hpp.
   * [@https://svn.boost.org/trac/boost/ticket/6666 #6666] thread_clock.hpp needs pthread.h.

* [phrase library..[@/libs/concept_check/ Concept Check]:]
  * Fixed:
    * [@https://svn.boost.org/trac/boost/ticket/6738 #6738] Shadowed variable warning.

* [phrase library..[@/libs/filesystem/ Filesystem]:]
  * Remove Filesystem Version 2 from the distribution. Version 3 is now
    the only distributed version. Those still using V2 are urged to
    migrate to V3 as soon as possible.
  * Add constexpr value_type preferred_separator to class path.
  * Fix [@https://svn.boost.org/trac/boost/ticket/5118 #5118],
    `replace_extension` doesn't work as specified in
    documentation. The documentation, implementation, and test cases have
    all had fixes applied. The documentation had failed to mention that
    any existing extension is removed. The behavior for simple cases has
    been reverted to the Version 2 behavior, but with corrections so that
    complex replacements now work. Two test cases from
    [@https://svn.boost.org/trac/boost/ticket/5118 #5118] have been added.
  * Fix [@https://svn.boost.org/trac/boost/ticket/3737 #3737],
    Boost.Filesystem does not compile on Windows Mobile.
    On Windows, `<sys/stat.h>` is no longer included.
  * Fix [@https://svn.boost.org/trac/boost/ticket/4065 #4065],
    Boost Filesystem lexicographic path comparison
    inconsistent. This required multiple source code bug fixes and code
    cleanup, correcting problems not related to lexicographical issues.
  * Add class path member function compare for consistency with std::string.
  * Tighten `BOOST_FILESYSTEM_DYN_LINK` and
    `BOOST_FILESYSTEM_STATIC_LINK` logic in `filesystem/config.hpp` so that
    one or the other is always defined, and both being defined is a
    `#error`.
  * Fix [@https://svn.boost.org/trac/boost/ticket/6690 #6690] and
    [@https://svn.boost.org/trac/boost/ticket/6737 #6737],
    resolving static linking related problems
    with VC++ 8 through 11. Note that this fix may reintroduce codecvt
    thread safety problems
    [@https://svn.boost.org/trac/boost/ticket/4889 #4889],
    [@https://svn.boost.org/trac/boost/ticket/6320 #6320],
    for these compilers if static linking is used.
  * Add `path::operator+=` and concat functions to tack on things like
    suffixes or numbers. Suggested by Ed Smith-Rowland and others.
  * Fix [@https://svn.boost.org/trac/boost/ticket/6809 #6809],
    Implementation of `filesystem::rename()` method for MS
    Windows is wrong, by adding `MOVEFILE_COPY_ALLOWED` to deal with renames
    across drives, volumes, file systems. Fix has no effect on non-Windows
    systems.
  * Fix [@https://svn.boost.org/trac/boost/ticket/6819 #6819],
    A path operand with a source that was a one character
    array was treated as empty, even if it wasn't empty. Such arrays can
    occur in unions or in code using C variable length array idioms.
  * Fix [@https://svn.boost.org/trac/boost/ticket/6932 #6932],
    create_directories throws exception even if `error_code`
    is specified.

* [phrase library..[@/libs/foreach/ Foreach]:]
  * Revert fix for [@https://svn.boost.org/trac/boost/ticket/6131 #6131] which caused more harm than good.

* [phrase library..[@/libs/geometry/ Geometry]:]
 * Fixed Bugs:
   * the return type of comparable projected point strategy for integer points was wrong (integer), fixed
   * several robustness issues in intersection of segments and polygons, fixed
   * invalid intersection output is filtered out
   * disjoint for multi_polygon's might incorrectly return true, fixed
 * Solved tickets
   * [@https://svn.boost.org/trac/boost/ticket/6585 6585] patch for alternative syntax multipoint, applied
   * [@https://svn.boost.org/trac/boost/ticket/6584 6584] patch for bug in distance, applied
   * [@https://svn.boost.org/trac/boost/ticket/5730 5730] same issue as 6584, fixed
   * [@https://svn.boost.org/trac/boost/ticket/6166 6166] patch for missing transformation, applied
   * [@https://svn.boost.org/trac/boost/ticket/6696 6696] invalid intersection output, was (by chance) already fixed in Trunk before reported
 * Additional functionality
   * added algorithm "touches" (OGC SF compliant) for *polygon/*polygon
  
* [phrase library..[@/libs/graph/ Graph]:]
 * Fixed Bugs:
   * [@https://svn.boost.org/trac/boost/ticket/4622 #4622] clear_vertex on a vertex with a self-loop can cause a segmentation fault.
   * [@https://svn.boost.org/trac/boost/ticket/6033 #6033] Lowpoint map calculated by biconnected_components(...) is sometimes wrong.
   * [@https://svn.boost.org/trac/boost/ticket/6242 #6242] isomorphism doesn't reset mapping.
   * [@https://svn.boost.org/trac/boost/ticket/6435 #6435] cube_topology documentation should say 3D, not 2D.
   * [@https://svn.boost.org/trac/boost/ticket/6520 #6520] small_world_1_70_6_0p02.png is broken in documentation of graph_parallel.
   * [@https://svn.boost.org/trac/boost/ticket/6564 #6564] BGL copy constructor for subgraph does not track local vertices/edges.
   * [@https://svn.boost.org/trac/boost/ticket/6573 #6573] BGL: boost::isomorphism routine fails with large graphs.
   * [@https://svn.boost.org/trac/boost/ticket/6583 #6583] Dijkstra Visitor Concept docs probably show wrong type for variable.
   * [@https://svn.boost.org/trac/boost/ticket/6647 #6647] BGL strong_components do not compile on MSVC 8.
   * [@https://svn.boost.org/trac/boost/ticket/6656 #6656] Dependent type in subgraph used without typename.
   * [@https://svn.boost.org/trac/boost/ticket/6707 #6707] is_straight_line_drawing.hpp missing #include <map>.
   * [@https://svn.boost.org/trac/boost/ticket/6708 #6708] Make bool boost::intersects() in is_straight_line_drawing.hpp inline?
   * [@https://svn.boost.org/trac/boost/ticket/6739 #6739] Cannot use write_graphviz_dp with a constified subgraph.
   * [@https://svn.boost.org/trac/boost/ticket/6858 #6858] boost::get() calls wrongly resolved by g++.
   * [@https://svn.boost.org/trac/boost/ticket/6892 #6892] VertexIndexGraph concept not required for bron_kerbosch_all_cliques().
   * Other bugs and warnings not in Trac.

* [phrase library..[@/libs/functional/hash/ Hash]:]
  * Support `std::array` and `std::tuple` when available
    ([@https://svn.boost.org/trac/boost/ticket/6806 #6806]).
  * Avoid gcc's `-Wfloat-equal` warning
    ([@https://svn.boost.org/trac/boost/ticket/6771 #6771]).
  * Add deprecation warning to the long deprecated
    `boost/functional/detail/container_fwd.hpp`.

* [phrase library..[@/libs/iostreams/ Iostreams]:]
  * Improved gzip support
    ([@https://svn.boost.org/trac/boost/ticket/5908 #5908]).
  * Update tests for latest Boost.Filesystem and Boost.Test.
  * Fix some documentation errors
    ([@https://svn.boost.org/trac/boost/ticket/6530 #6530],
    [@https://svn.boost.org/trac/boost/ticket/6650 #6650]).

* [phrase library..[@/libs/iterator/ Iterator]:]
  * Fixed:
    * [@https://svn.boost.org/trac/boost/ticket/5127 #5127] Incorrect result_of usage in transform_iterator
    * [@https://svn.boost.org/trac/boost/ticket/5697 #5697] iterator_facade::operator-> is broken for proxy references

* [phrase library..[@/libs/multi_array/ MultiArray]:]
  * Concepts bug fix and Workaround for Visual Studio 2010
    ([@https://svn.boost.org/trac/boost/ticket/4874 #4874])
  * Fix to assert.cpp test case
    ([@https://svn.boost.org/trac/boost/changeset/78498 Patch])

* [phrase library..[@/libs/conversion/lexical_cast.htm Lexical cast]:]
  * `boost::bad_lexical_cast` exception is now globaly visible and can be catched even if code is compiled with -fvisibility=hidden
  * Now it is possible to compile and use library with disabled exceptions [@https://svn.boost.org/trac/boost/ticket/5800 #5800]
  * Better performance, less memory usage and bugfixes for `boost::iterator_range<character_type*>` conversions
  * Fixed bugs and warnings: [@https://svn.boost.org/trac/boost/ticket/6645 #6645], [@https://svn.boost.org/trac/boost/ticket/6562 #6562], [@https://svn.boost.org/trac/boost/ticket/6812 #6812], [@https://svn.boost.org/trac/boost/ticket/6852 #6852], [@https://svn.boost.org/trac/boost/ticket/6717 #6717], [@https://svn.boost.org/trac/boost/ticket/6670 #6770], [@https://svn.boost.org/trac/boost/ticket/6504 #6504].

* [phrase library..[@/libs/locale/ Locale]:]
  * Fixed build issues with STLPort library
  * Boost.System is now required depenency
  * Fixed bugs [@https://svn.boost.org/trac/boost/ticket/6635 #6635], [@https://svn.boost.org/trac/boost/ticket/6833 #6833]

* [phrase library..[@/libs/math/ Math]:]
  * Promoted math constants to be 1st class citizens,
    including convenient access to the most widely used
    built-in float, double, long double via three namespaces.
  * Added the Owen's T function and Skew Normal distribution written by Benjamin Sobotta.
  * Added Hankel functions.
  * Corrected issue [@https://svn.boost.org/trac/boost/ticket/6627 #6627 nonfinite_num_put formatting of 0.0 is incorrect]
    based on a patch submitted by K R Walker.
  * Changed constant initialization mechanism so that it is thread safe even for user-defined types, also
    so that user defined types get the full precision of the constant, even when `long double` does not.  
    So for example 128-bit rational approximations will work with UDT's and do the right thing, even though
    `long double` may be only 64 or 80 bits.
  * Fixed issue in `bessel_jy` which causes Y[sub 8.5](4[pi]) to yield a NaN.
    
* [phrase library..[@/libs/msm/ MSM]:]
  * eUML : better syntax for front-ends defined with eUML as transition table only. Caution: Breaking Change![@https://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table]
  * Bugfix: graph building was only working if initial_state defined as a sequence.
  * Bugfix: flags defined for a Terminate or Interrupt state do not break the blocking function of these states any more.
  * Bugfix: multiple deferred events from several regions were not working in every case.
  * Bugfix: visitor was passed by value to submachines.
  * Bugfix: no_transition was not called for submachines who send an event to themselves.
  * Fixed warnings with gcc.

* [phrase library..[@/libs/program_options/ Program Options]:]
  * Improved error reporting
    ([@ https://svn.boost.org/trac/boost/changeset/77827 Patch from Leo Goodstadt]).
  * Support for customizing name of option's value in help messages
    ([@https://svn.boost.org/trac/boost/ticket/4781 #4781])  
  * Fixed compilation with gcc 4.7 ([@https://svn.boost.org/trac/boost/ticket/6790 #6790]).

* [phrase library..[@/libs/property_map/ PropertyMap]:]
 * Fixed Bugs:
   * [@https://svn.boost.org/trac/boost/ticket/6539 #6539] the return type of get() is not documented correctly.
   * [@https://svn.boost.org/trac/boost/ticket/6721 #6721] property_map_traits documentation does not mention reference.

* [phrase library..[@/libs/proto/ Proto]:]
  * Use `decltype`-based `result_of` if and only if the compiler implements N3276.
  * For C++11, force parameter to `mpl::eval_if_c` and `mpl::if_c` to be `bool`.
  * Disable [^'__forceinline not inlined'] warning on msvc.

* [phrase library..[@/libs/ratio/ Ratio]:]
 * Fixed Bugs:
   * [@https://svn.boost.org/trac/boost/ticket/6498 #6498] boost::ratio won't compile with default settings.

* [phrase library..[@/libs/scope_exit/ ScopeExit]:]
 * New Features:
   * Use variadic macros to specify captures as commas-separated lists (but kept preprocessor sequence syntax for backward compatibility).
   * Capture the object in scope using `this_`.
   * Support empty captures using `void`.
   * Implicit lambda-like captures using `BOOST_SCOPE_EXIT_ALL` on compilers that support C++11 lambda functions.

* [phrase library..[@/libs/thread/ Thread]:]
 * New Features:
   * [@https://svn.boost.org/trac/boost/ticket/1850 #1850] Request for unlock_guard  to compliment lock_guard.
   * [@https://svn.boost.org/trac/boost/ticket/2637 #2637] Request for shared_mutex duration timed_lock and timed_lock_shared.
   * [@https://svn.boost.org/trac/boost/ticket/2741 #2741] Proposal to manage portable and non portable thread attributes.
   * [@https://svn.boost.org/trac/boost/ticket/3567 #3567] Request for shared_lock_guard.
   * [@https://svn.boost.org/trac/boost/ticket/6194 #6194] Adapt to Boost.Move.
   * [@https://svn.boost.org/trac/boost/ticket/6195 #6195] c++11 compliance: Provide the standard time related interface using Boost.Chrono.
   * [@https://svn.boost.org/trac/boost/ticket/6217 #6217] Enhance Boost.Thread shared mutex interface following Howard Hinnant proposal.
   * [@https://svn.boost.org/trac/boost/ticket/6224 #6224] c++11 compliance: Add the use of standard noexcept on compilers supporting them.
   * [@https://svn.boost.org/trac/boost/ticket/6226 #6226] c++11 compliance: Add explicit bool conversion from locks.
   * [@https://svn.boost.org/trac/boost/ticket/6228 #6228] Add promise constructor with allocator following the standard c++11.
   * [@https://svn.boost.org/trac/boost/ticket/6230 #6230] c++11 compliance: Follows the exception reporting mechanism as defined in the c++11.
   * [@https://svn.boost.org/trac/boost/ticket/6266 #6266] Breaking change: thread destructor should call terminate if joinable.
   * [@https://svn.boost.org/trac/boost/ticket/6269 #6269] Breaking change: thread move assignment should call terminate if joinable.
   * [@https://svn.boost.org/trac/boost/ticket/6272 #6272] c++11 compliance: Add thread::id hash specialization.
   * [@https://svn.boost.org/trac/boost/ticket/6273 #6273] c++11 compliance: Add cv_status enum class and use it on the conditions wait functions.
   * [@https://svn.boost.org/trac/boost/ticket/6231 #6231] Add BasicLockable requirements in the documentation to follow c++11.
   * [@https://svn.boost.org/trac/boost/ticket/6342 #6342] c++11 compliance: Adapt the one_flag to the c++11 interface.
   * [@https://svn.boost.org/trac/boost/ticket/6671 #6671] upgrade_lock: missing mutex and release functions.
   * [@https://svn.boost.org/trac/boost/ticket/6672 #6672] upgrade_lock:: missing constructors from time related types.
   * [@https://svn.boost.org/trac/boost/ticket/6675 #6675] upgrade_lock:: missing non-member swap.
   * Added missing packaged_task::result_type and packaged_task:: constructor with allocator.
   * Added packaged_task::reset()
 * Fixed Bugs:
   * [@https://svn.boost.org/trac/boost/ticket/2575 #2575] Bug- Boost 1.36.0 on Itanium platform.
   * [@https://svn.boost.org/trac/boost/ticket/4345 #4345] thread::id and joining problem with cascade of threads.
   * [@https://svn.boost.org/trac/boost/ticket/4921 #4921] BOOST_THREAD_USE_DLL and BOOST_THREAD_USE_LIB are crucial and need to be documented.
   * [@https://svn.boost.org/trac/boost/ticket/5013 #5013] documentation: boost::thread: pthreas_exit causes terminate().
   * [@https://svn.boost.org/trac/boost/ticket/5173 #5173] boost::this_thread::get_id is very slow.
   * [@https://svn.boost.org/trac/boost/ticket/5351 #5351] interrupt a future get boost::unknown_exception.
   * [@https://svn.boost.org/trac/boost/ticket/5516 #5516] Upgrade lock is not acquired when previous upgrade lock releases if another read lock is present.
   * [@https://svn.boost.org/trac/boost/ticket/5990 #5990] shared_future<T>::get() has wrong return type.
   * [@https://svn.boost.org/trac/boost/ticket/6174 #6174] packaged_task doesn't correctly handle moving results.
   * [@https://svn.boost.org/trac/boost/ticket/6222 #6222] Compile error with SunStudio: unique_future move.
   * [@https://svn.boost.org/trac/boost/ticket/6673 #6673] shared_lock: move assign doesn't works with c++11.
   * [@https://svn.boost.org/trac/boost/ticket/6674 #6674] shared_mutex: try_lock_upgrade_until doesn't works.
   * Fix issue signaled on the ML with task_object(task_object const&) in presence of task_object(task_object&&)

* [phrase library..[@/libs/unordered/ Unordered]:]
  * Fix equality for `unordered_multiset` and `unordered_multimap`.
  * Implement `reserve`
    ([@https://svn.boost.org/trac/boost/ticket/6857 #6857]).
  * Avoid gcc's `-Wfloat-equal` and `-Wshadow` warnings
    ([@https://svn.boost.org/trac/boost/ticket/6190 #6190],
    [@https://svn.boost.org/trac/boost/ticket/6771 #6771]).
  * Fix namespace issue with bcp
    ([@https://svn.boost.org/trac/boost/ticket/6905 #6905]).
  * Fix Sun workarounds
    ([@https://svn.boost.org/trac/boost/ticket/6784 #6784]).
  * Some internal changes to bucket allocation.
  * See the
    [@/doc/html/unordered/changes.html#unordered.changes.boost_1_50_0
    change log] for full details.

* [phrase library..[@/libs/wave/index.html Wave]:]
  * Wave V2.3.2, see the [@/libs/wave/ChangeLog Changelog] for details.

* [phrase library..[@/libs/xpressive/ xpressive]:]
  * Remove very ugly `lexical_cast` hack with a slightly less ugly one.
  * Replace MPL assert with static assert since it's problematic in C++11, fixes [@https://svn.boost.org/trac/boost/ticket/6846 #6846].

[/

* /TODO/: [phrase library..[@/libs/spirit/ Spirit]:]
  * Spirit Vx.x, see the
    '[@/doc/libs/1_xx_x/libs/spirit/doc/html/spirit/what_s_new/spirit_x_x.html What's New]'
    section for details.

]

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Intel: 11.1
  * LLVM Clang 2.8
  * GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2
  * GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
* OS X:
  * Intel: 11.1
  * GCC: 4.4.4
  * GCC, C++0x mode: 4.4.4
* Windows:
  * Visual C++ 8.0, 9.0, 10.0
  * GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1, 4.7.0
* FreeBSD:
  * GCC 4.2.1, 32 and 64 bit
* QNX:
  * QCC, C++0x mode: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0

Boost's additional test compilers include:

* Linux:
  * Clang from subversion
  * GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.3, 4.6.2
  * GCC, C++0x mode: 4.3.4, 4.4.4, 4.5.3, 4.6.2
  * pgCC: 11.9
  * Intel: 10.1, 11.1, 12.0, 12.1
  * Visual Age 10.1
* OS X:
  * Clang from subversion
  * Intel 11.1, 12.0
  * GCC: 4.4.4
  * GCC, C++0x mode: 4.4.4
* Windows:
  * Visual C++ 8.0, 10.0
  * Visual C++ with STLport: 9.0
  * Visual C++, Windows Mobile 5, with STLport: 9.0
  * GCC, mingw: 4.4.0, 4.4.7, 4.5.2, 4.5.4, 4.6.4, 4.7.0
  * GCC, C++0x mode, mingw: 4.5.2
* AIX:
  * IBM XL C/C++ Enterprise Edition, V12.1.0.0
* FreeBSD:
  * GCC 4.2.1, 32 and 64 bit
* Solaris:
  * Sun 5.10

[endsect]

[section Acknowledgements]

[@/users/people/beman_dawes.html Beman Dawes],
Eric Niebler,
[@/users/people/rene_rivera.html Rene Rivera],
Daniel James, Vladimir Prus and Marshall Clow
managed this release.

[endsect]


