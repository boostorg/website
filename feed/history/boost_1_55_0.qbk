[article Version 1.55.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries: Predef.
        Updated Libraries: Accumulators, Any, Asio, Atomic,
        Config, Chrono, Circular Buffer, Container, Context, Coroutine,
        Filesystem, Fusion, Geometry, Graph, Hash, Interprocess, Intrusive,
        Lexical Cast, Log, Math, Meta State Machine, Move, Multiprecision,
        Multi-index Containers, MPI, Phoenix, Polygon, PropertyMap,
        Rational, Thread, Timer, Type Traits, Unordered, Utility,
        Variant, Wave, xpressive.
    ]
    [authors [Clow, Marshall]]
    [last-revision Mon, 11 Nov 2013 11:50:20 -0800]
]

[import ext.qbk]

[documentation /doc/libs/1_55_0/]
[status released]
[download http://sourceforge.net/projects/boost/files/boost/1.55.0/]

[section Other Downloads]

* [@https://sourceforge.net/projects/boost/files/boost-binaries/1.55.0/
   Windows binaries]
* [@https://sourceforge.net/projects/boost/files/boost-docs/1.55.0/
   PDF documentation] (only for BoostBook based documentation).

[endsect]

[section News]

Support was removed from [@/libs/config/ Config] for some very old versions
of compilers. The new minimum requirements are:

* Digitial Mars 8.41
* GCC 3.3
* Intel 6.0
* Visual C++ 7.1

[*Note:] This is just the mininimum requirements for Config. Some Boost
libraries may have higher mininimum requirements and not support all
platforms or compilers.

Other compilers are currently unchanged, but we are considering removing
support for some other old compilers. *Candidates* for removal are:

* Metroworks C++ (i.e. codewarrior)
* SunPro 5.7 and earlier
* Borland C++ Builder 2006 (5.82) and earlier

If you're using any of these, please let us know on the mailing lists.
We will take into account any feedback received before making a decision.

[endsect]

[section:known_bugs Known Bugs with Visual Studio 2013/Visual C++ 12]

Visual Studio 2013 was released quite late in the release process, so there
exist several unresolved issues. These include:

* Serialization can't compile because of a missing include.
* Using `has_member_function_callable_with` from Boost.Container's
  `allocator_traits` causes a compile error ([ticket 9332]).
* In libraries such as Unordered and MultiIndex, calling overloaded functions
  with initializer lists can result in a compile error, with Visual C++
  claiming that the overloads are ambiguous. This is a Visual C++ bug and it
  isn't clear if there's a good workaround. This won't affect code that doesn't
  use initializer lists, or uses an initializer list that doesn't require an
  implicit conversion (i.e. an initializer list of the container's exact value
  type).
* Thread: `ex_scoped_thread` compile fails ([ticket 9333]).

[endsect]

[section Patches]

# [@/patches/1_55_0/001-log_fix_dump_avx2.patch Log patch]:
  fixes incorrect output of the
  [@https://www.boost.org/doc/libs/1_55_0/libs/log/doc/html/log/detailed/utilities.html#log.detailed.utilities.manipulators.dump dump]
  manipulator, when used on AVX2-enabled CPU (e.g. Intel Haswell).
  
[endsect]

[section New Libraries]

* [phrase library..[@/libs/predef/ Predef]:] This library defines a set of
  compiler, architecture, operating system, library, and other version numbers
  from the information it can gather of C, C++, Objective C, and Objective C++
  predefined macros or those defined in generally available headers, from Rene
  Rivera.

[endsect]

[section Updated Libraries]

* [phrase library..[@/libs/accumulators/ Accumulators]:]
  * [ticket 7915] Fix silly typos.
  * [ticket 8850] Fix MSVC warnings.
  * [ticket 8262] Rename `average` to `fdiv`.

* [phrase library..[@/libs/any/ Any]:]
  * `boost::bad_any_cast` exception is now visible across modules [ticket 8751].
  * Added `clear()` member function.
  * Added missing `BOOST_NOEXCEPT`.
  * Fixed issue with const rvalues [ticket 9215].

* [phrase library..[@/libs/asio/ Asio]:]
  * Implemented a limited port to Windows Runtime. This support requires that the
    language extensions be enabled. Due to the restricted facilities exposed by
    the Windows Runtime API, the port also comes with the following caveats:
    * The core facilities such as the `io_service`, `strand`, buffers, composed
      operations, timers, etc., should all work as normal.
    * For sockets, only client-side TCP is supported.
    * Explicit binding of a client-side TCP socket is not supported.
    * The `cancel()` function is not supported for sockets. Asynchronous
      operations may only be cancelled by closing the socket.
    * Operations that use `null_buffers` are not supported.
    * Only `tcp::no_delay` and `socket_base::keep_alive` options are supported.
    * Resolvers do not support service names, only numbers. I.e. you must
      use "80" rather than "http".
    * Most resolver query flags have no effect.
  * Fixed a regression (introduced in Boost 1.54) where, on some platforms, errors
    from `async_connect` were not correctly propagated through to the completion
    handler ([ticket 8795]).
  * Fixed a Windows-specific regression (introduced in Boost 1.54) that occurs when
    multiple threads are running an `io_service`. When the bug occurs, the result
    of an asynchronous operation (error and bytes transferred) is incorrectly
    discarded and zero values used instead. For TCP sockets this results in
    spurious end-of-file notifications ([ticket 8933]).
  * Fixed a bug in handler tracking, where it was not correctly printing out some
    handler IDs ([ticket 8808]).
  * Fixed the comparison used to test for successful synchronous accept
    operations so that it works correctly with unsigned socket descriptors
    ([ticket 8752]).
  * Ensured the signal number is correctly passed to the completion handler when
    starting an `async_wait` on a signal that is already raised ([ticket 8738]).
  * Suppressed a g++ 4.8+ warning about unused typedefs ([ticket 8980]).
  * Enabled the move optimisation for handlers that use the default invocation
    hook ([ticket 8624]).
  * Clarified that programs must not issue overlapping `async_write_at`
    operations ([ticket 8669]).
  * Changed the Windows `HANDLE` backend to treat `ERROR_MORE_DATA` as a
    non-fatal error when returned by `GetOverlappedResult` for a synchronous
    read ([ticket 8722]).
  * Visual C++ language extensions use `generic` as a keyword. Added a
    workaround that renames the namespace to `cpp_generic` when those language
    extensions are in effect.
  * Fixed some asynchronous operations that missed out on getting `async_result`
    support in Boost 1.54. In particular, the buffered stream templates have been
    updated so that they adhere to current handler patterns ([ticket 9000],
    [ticket 9001]).
  * Enabled move support for Microsoft Visual Studio 2012 ([ticket 8959]).
  * Added `use_future` support for Microsoft Visual Studio 2012.
  * Removed a use of `std::min` in the Windows IOCP backend to avoid a
    dependency on the `<algorithm>` header ([ticket 8758]).
  * Eliminated some unnecessary handler copies.
  * Fixed various minor and cosmetic issues in code and documentation
    (including [ticket 8347], [ticket 8950], [ticket 8953], [ticket 8965],
    [ticket 8997]).

* [phrase library..[@/libs/atomic/ Atomic]:]
  * Added support for 64-bit atomic operations on x86 target for GCC, MSVC and compatible compilers. The support is enabled when it is known at compile time that the target CPU supports required instructions.
  * Added support for 128-bit atomic operations on x86-64 target for GCC and compatible compilers. The support is enabled when it is known at compile time that the target CPU supports required instructions. The support can be tested for with the new `BOOST_ATOMIC_INT128_LOCK_FREE` macro.
  * Added a more efficient implementation of `atomic<>` based on GCC `__atomic*` intrinsics available since GCC 4.7.
  * Added support for more ARM v7 CPUs, improved detection of Thumb 2.
  * Added support for x32 (i.e. 64-bit x86 with 32-bit pointers) target on GCC and compatible compilers.
  * Removed dependency on Boost.Thread.
  * Internal lock pool now includes proper padding and alignment to avoid false sharing.
  * Fixed compilation with Intel compiler on Windows. Removed internal macro duplication when compiled on Windows.
  * Some code refactoring to use C++11 features when available.

* [phrase library..[@/libs/chrono/ Chrono]:]
  * ['Fixed Bugs:]
    * [@http://svn.boost.org/trac/boost/ticket/7868 #7868] `chrono_io` parses time incorrectly (1.53 and 1.52)
    * [@http://svn.boost.org/trac/boost/ticket/9028 #9028] Typo in `boost/chrono/stopwatches/formatters/base_formatter.hpp`
    * [@http://svn.boost.org/trac/boost/ticket/9147 #9147] uninitialized `std::tm`

* [phrase library..[@/libs/circular_buffer/ Circular Buffer]:]
  * Added support for rvalue references and rvalue references emulation
    using Boost.Move. Values are moved only if value type has noexcept move
    constructor and noexcept move assignment operator [ticket 7888]. Now
    Circular Buffer is usable with move-only types.
  * Much better documentation.
  * [@http://svn.boost.org/trac/boost/ticket/5362 #5362]
    circular_buffer does not compile with `BOOST_NO_EXCEPTIONS`.
  * [@http://svn.boost.org/trac/boost/ticket/7025 #7025]
    circular buffer reports warning: " type qualifiers ignored on function
    return type" while compile.
  * [@http://svn.boost.org/trac/boost/ticket/7950 #7950]
    Eliminate W4-warnings under VS2005 - warning C4913: user defined binary
    operator ',' exists but no overload could convert all operands, default
    built-in binary operator ',' used.

* [phrase library..[@/libs/config/ Config]:]
  * [*Breaking change:] Removed support for some older compilers.
    The new minimum compiler versions are:
    [itemized_list
        [Digitial Mars 8.41]
        [GCC 3.3]
        [Intel 6.0]
        [Visual C++ 7.1]
    ]
    Other compilers are unchanged.

* [phrase library..[@/libs/container/ Container]:]
  *  Implemented [link container.main_features.scary_iterators SCARY iterators].
  *  Fixed bugs [@https://svn.boost.org/trac/boost/ticket/8269 #8269],
                [@https://svn.boost.org/trac/boost/ticket/8473 #8473],
                [@https://svn.boost.org/trac/boost/ticket/8892 #8892],
                [@https://svn.boost.org/trac/boost/ticket/9009 #9009],
                [@https://svn.boost.org/trac/boost/ticket/9064 #9064],
                [@https://svn.boost.org/trac/boost/ticket/9092 #9092],
                [@https://svn.boost.org/trac/boost/ticket/9108 #9108].

* [phrase library..[@/libs/context/ Context]:]
  * [@http://svn.boost.org/trac/boost/ticket/8650 #8650] SSE2 intrinsics

* [phrase library..[@/libs/coroutine/ Coroutine]:]
  * New interface (unidirectional data transfer).
  * [@http://svn.boost.org/trac/boost/ticket/8782 #8782] no best alternative
  * [@http://svn.boost.org/trac/boost/ticket/8801 #8801] auto-linking

* [phrase library..[@/libs/filesystem/ Filesystem]:]
  * Fixed Android compilation [ticket 8706].

* [phrase library..[@/libs/fusion/ Fusion]:]
  * [ticket 8759] specialization of `convert_impl` for `map_tag`

* [phrase library..[@/libs/geometry/index.html Geometry]:]
  * ['Additional functionality]
    * Added centroid for segment type
    * Added intersects() and disjoints() for Segment-Box and Linestring-Box
    * Added rtree creation using packing algorithm
    * Added contains() and covers() spatial query predicates
    * Added iterative queries
  * ['Bugfixes]
    * In some cases .back() or .clear() was called, violating the usage of Concepts. Fixed for the reported cases
  * ['Solved tickets]
    * [@https://svn.boost.org/trac/boost/ticket/6958 6958] Intersection generates self-intersection. Caused by spike, fixed
    * [@https://svn.boost.org/trac/boost/ticket/8364 8364] Invalid input exception, caused by spikes in previous steps, fixed
    * [@https://svn.boost.org/trac/boost/ticket/8365 8365] Invalid input exception, caused by spikes in previous steps, fixed
    * [@https://svn.boost.org/trac/boost/ticket/8969 8969] boost::geometry::model::point single argument constructor should be explicit
    * [@https://svn.boost.org/trac/boost/ticket/8825 8825] Patch adding member variable documentation to doxygen_xml2qbk
    * [@https://svn.boost.org/trac/boost/ticket/8652 8652] Intersection fails for triangle-triangle intersection. Caused by spike, fixed
    * [@https://svn.boost.org/trac/boost/ticket/9047 9047] Boost files that include themselves (strategies/intersection.hpp), fixed

* [phrase library..[@/libs/graph/index.html Graph]:]
  * `void` is no longer allowed as a bundled property type (for example, in the
    VertexProperties template parameters to graph types); it did not work
    reliably before, but a static assertion now forbids it entirely.  Use
    `boost::no_property` instead.
  * Added support for `finish_edge` visitor event point in depth-first search;
    the change should be backward-compatible with visitors that do not have
    that member function.
  * Disabled building of tests on Sun compiler.
  * Multiple source vertices are supported in non-named-parameter versions of
    `breadth_first_visit`, `breadth_first_search`, `dijkstra_shortest_paths`,
    and `dijkstra_shortest_paths_no_init`.  This feature is not yet documented;
    to use it, replace the single parameter for the source vertex in each of
    these functions by two input iterators of the same type containing the
    source vertices to use.
  * Added Hawick circuits algorithm; contributed by Louis Dionne.
  * Added edge coloring algorithm; contributed by Maciej Piechotka.
  * Added min-cost max-flow algorithm; contributed by Piotr Wygocki.
  * Bugs and feature requests from Trac fixed: [ticket 5269], [ticket 8317],
    [ticket 8433], [ticket 8791], [ticket 8877], [ticket 8986], [ticket 9012],
    [ticket 9080].

* [phrase library..[@/libs/functional/hash/ Hash]:]
  * Simplify a SFINAE check so that it will hopefully work on Sun 5.9
    ([ticket 8822]).
  * Suppress Visual C++ infinite loop warning ([ticket 8568]).

* [phrase library..[@/libs/interprocess/ Interprocess]:]
  *  Fixed bugs [@https://svn.boost.org/trac/boost/ticket/7156 #7156],
                [@https://svn.boost.org/trac/boost/ticket/7164 #7164],
                [@https://svn.boost.org/trac/boost/ticket/8277 #8277],
                [@https://svn.boost.org/trac/boost/ticket/8976 #8976],
                [@https://svn.boost.org/trac/boost/ticket/9065 #9065],
                [@https://svn.boost.org/trac/boost/ticket/9073 #9073],
                [@https://svn.boost.org/trac/boost/ticket/9008 #9008].

* [phrase library..[@/libs/intrusive/ Intrusive]:]
  *  [*Source breaking]: Deprecated `xxx_dont_splay` functions from splay containers.
     Deprecated `splay_set_hook` from splay containers, use `bs_set_hook` instead.
     Both will be removed in Boost 1.56.
  *  [*ABI breaking]: Hash containers' end iterator was implemented pointing to one-past the end of the bucket array
     (see [@https://svn.boost.org/trac/boost/ticket/8698 #8698]) causing severe bugs when values to be inserted
     where allocated next to the bucket array. End iterator implementation was changed to point to the beginning
     of the bucket array.
  *  Big refactoring in order to reduce template and debug symbol bloat. Test object files have been slashed
     to half in MSVC compilers in Debug mode. Toolchains without Identical COMDAT Folding (ICF) should notice size improvements.
  *  Implemented [link intrusive.scary_iterators SCARY iterators].

* [phrase library..[@/libs/conversion/lexical_cast.htm Lexical cast]:]
  * `std::bad_alloc` exceptions are now are not converted to
    `boost::bad_lexical_cast` [ticket 8966].
  * Added static assert that checks for `std::numeric_limits`
    specializations if they are required for conversion. Use `BOOST_HAS_INT128`
    for detecting 128 bit integers support [ticket 8790].
  * Documentation improved and more usage examples added.

* [phrase library..[@/libs/log/ Log]:]
  * General changes:
    * Added a new configuration macro `BOOST_LOG_WITHOUT_DEFAULT_FACTORIES`. By defining this macro the user can disable compilation of the default filter and formatter factories used by settings parsers. This can substantially reduce binary sizes while still retaining support for settings parsers.
    * Rewritten some of the parsers to reduce the compiled binary size. The rewritten parsers are more robust in detecting ambiguous and incorrect input.
    * The following headers are deprecated: `boost/log/utility/intrusive_ref_counter.hpp`, `boost/log/utility/explicit_operator_bool.hpp`, `boost/log/utility/empty_deleter.hpp`. These headers will be removed in future releases. The contents of these headers were moved to other libraries.
  * Bug fixes:
    * Fixed `timer` attribute generating incorrect time readings on Windows on heavy thread contention when `QueryPerformanceCounter` API was used.
    * Fixed a bug in the filter parser that prevented using parsed filters with some attributes.
    * Fixed thread id formatting discrepancies between the default sink and formatters.
    * Closed tickets: [ticket 8815], [ticket 8819], [ticket 8915], [ticket 8917], [ticket 9139], [ticket 9140], [ticket 9153], [ticket 9155].
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.

* [phrase library..[@/libs/math/ Math]:]
  * Suppress numerous warnings (mostly from GCC-4.8 and MSVC)
    [@https://svn.boost.org/trac/boost/ticket/8384 #8384],
    [@https://svn.boost.org/trac/boost/ticket/8855 #8855],
    [@https://svn.boost.org/trac/boost/ticket/9107 #9107],
    [@https://svn.boost.org/trac/boost/ticket/9109 #9109]..
  * Fixed PGI compilation issue
    [@https://svn.boost.org/trac/boost/ticket/8333 #8333].
  * Fixed PGI constant value initialization issue that caused erf to generate
    incorrect results [@https://svn.boost.org/trac/boost/ticket/8621 #8621].
  * Prevent macro expansion of some C99 macros that are also C++ functions
    [@https://svn.boost.org/trac/boost/ticket/8732 #8732] and
    [@https://svn.boost.org/trac/boost/ticket/8733 #8733]..
  * Fixed Student's T distribution to behave correctly with huge degrees of
    freedom (larger than the largest representable integer)
    [@https://svn.boost.org/trac/boost/ticket/8837 #8837].
  * Make some core functions usable with `long double` even when the platform
    has no standard library `long double` support
    [@https://svn.boost.org/trac/boost/ticket/8940 #8940].
  * Fix error handling of distributions to catch invalid scale and location
    parameters when the random variable is infinite
    [@https://svn.boost.org/trac/boost/ticket/9042 #9042] and
    [@https://svn.boost.org/trac/boost/ticket/9126 #9126].
  * Add workaround for broken <tuple> in Intel C++ 14
    [@https://svn.boost.org/trac/boost/ticket/9087 #9087].
  * Improve consistency of argument reduction in the elliptic integrals
    [@https://svn.boost.org/trac/boost/ticket/9104 #9104].
  * Fix bug in inverse incomplete beta that results in cancellation errors when
    the beta function is really an arcsine or Student's T distribution.
  * Fix issue in Bessel I and K function continued fractions that causes
    spurious over/underflow.
  * Add improvement to non-central chi squared distribution quantile due to
    Thomas Luu.

* [phrase library..[@/libs/move/ Move]:]
  *  Fixed bugs  [@https://svn.boost.org/trac/boost/ticket/7952 #7952],
                 [@https://svn.boost.org/trac/boost/ticket/8764 #8764],
                 [@https://svn.boost.org/trac/boost/ticket/8765 #8765],
                 [@https://svn.boost.org/trac/boost/ticket/8842 #8842],
                 [@https://svn.boost.org/trac/boost/ticket/8979 #8979].

* [phrase library..[@/libs/msm/ Meta State Machine]:]
  * New feature: interrupt states now support a sequence of events to end the interruption.
  * Fixed Trac [ticket 8686].

* [phrase library..[@/libs/multiprecision/ Multiprecision]:]
  * Added support for Boost.Serialization.
  * Suppressed some GCC warnings.  See
    [@https://svn.boost.org/trac/boost/ticket/8872 8872].
  * Fixed bug in pow for large integer arguments.  See
    [@https://svn.boost.org/trac/boost/ticket/8809 8809].
  * Fixed bug in pow for calculation of 0[super N].  See
    [@https://svn.boost.org/trac/boost/ticket/8798 8798].
  * Fixed bug in fixed precision cpp_int IO code that causes conversion to
    string to fail when the bit count is very small (less than CHAR_BIT).  See
    [@https://svn.boost.org/trac/boost/ticket/8745 8745].
  * Fixed bug in cpp_int that causes left shift to fail when a fixed precision
    type would overflow. See
    [@https://svn.boost.org/trac/boost/ticket/8741 8741].
  * Fixed some cosmetic warnings from cpp_int.  See
    [@https://svn.boost.org/trac/boost/ticket/8748 8748].
  * Fixed calls to functions which are required to be macros in C99.  See
    [@https://svn.boost.org/trac/boost/ticket/8732 8732].
  * Fixed bug that causes construction from INT_MIN, LONG_MIN etc to fail in
    cpp_int.  See [@https://svn.boost.org/trac/boost/ticket/8711 8711].

* [phrase library..[@/libs/multi_index/index.html Multi-index Containers]:]
  * Boost.MultiIndex has been brought to a higher level of compliance with C++11.
    [itemized_list
      [`multi_index_container` is now efficiently movable.]
      [Initializer lists supported.]
      [Emplace functions provided.]
      [Non-copyable elements (such as `std::unique_ptr<T>`) supported. This includes
      insertion of a range \[`first`,`last`) where the iterators point to a type that
      is convertible to that of the element: no copy construction happens in the
      process.]
      [Random access indices provide `shrink_to_fit()`.]
    ]
    Refer to the [@/libs/multi_index/doc/compiler_specifics.html compiler specifics]
    section for limitations on pre-C++11 compilers.
  * The following classes are deprecated:
    * [@/libs/multi_index/doc/reference/key_extraction.html#member_offset `member_offset`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit `const_mem_fun_explicit`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit `mem_fun_explicit`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_equal_to `composite_key_result_equal_to`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_less `composite_key_result_less`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_greater `composite_key_result_greater`],
    * [@/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_hash `composite_key_result_hash`].
  * Maintenance fixes.

* [phrase library..[@/libs/mpi/ MPI]:]
  * Replaced calls to deprecated MPI functions
  * Added support for multi-threaded initialization
  * Added in-place collectives

* [phrase library..[@/libs/phoenix/ Phoenix]:]
  * [ticket 9049] `phoenix::function` constructor is constexpr.

* [phrase library..[@/libs/polygon/ Polygon]:]
  * Updated CGAL part of the Voronoi benchmark with patches from Sebastien Loriot. Updated documentation.
  * Added polygon decomposition capability to polygon_90_set_data container (patch from Intel). Updated documentation.
  * Bugs fixed from Trac: [ticket 8197].

* [phrase library..[@/libs/property_map/index.html PropertyMap]:]
  * dynamic_properties objects can now be built by non-destructively chaining
    `.property(name, pm)` calls.  Example:
    ```
    boost::dynamic_properties()
      .property("color", color_map)
      .property("pos", position_map)
    ```
  * The use of raw pointers as property maps is deprecated; it often failed on
    Visual Studio in the past.  This usage has been removed from all tests and
    examples in Boost.Graph.  The replacement to use for vertex properties in
    graphs (the most common use for this feature) is:
    ```
    boost::make_iterator_property_map(
      <pointer or container .begin() iterator>,
      get(boost::vertex_index, <graph object>))
    ```
    (Note: the lack of namespace qualification on get() in this code is
    necessary for generic code).  Outside a graph context, the closest
    equivalent is:
    ```
    boost::make_iterator_property_map(
      <pointer>,
      boost::typed_identity_property_map<std::size_t>())
    ```
    There are commented-out static assertions on lines 151 and 159 of
    `<boost/property_map/property_map.hpp>` that can be un-commented to find
    deprecated uses of pointers in user code.

* [phrase library..[@/libs/rational Rational]:]
  * Added `lowest` and `max_digits10`, members of std::numeric_limits added in
    C++11, to the unit-test code.  Needed since Boost.Test refers to one of
    them when compiled in C++11 mode.
  * Changed initialization of some internal variables to something that cannot
    be a narrowing conversion, which fixes issue [ticket 5855].  Needed since
    narrowing conversions are an error in C++11.

* [phrase library..[@/libs/smart_ptr/index.html SmartPtr]:]
  * Added `boost/smart_ptr/intrusive_ref_counter.hpp` header, extracted from Boost.Log. The header implements a mixin base class that adds support for `intrusive_ptr` to user's classes.

* [phrase library..[@/libs/thread/ Thread]:]
  * ['New Features:]
    * [@http://svn.boost.org/trac/boost/ticket/8519 #8519]
      Synchro: Update class barrier with a completion function.
    * [@http://svn.boost.org/trac/boost/ticket/8515 #8515]
      Async: Add `shared_future::then`.
    * [@http://svn.boost.org/trac/boost/ticket/8519 #8519]
      Synchro: Update class barrier with a completion function
    * [@http://svn.boost.org/trac/boost/ticket/8615 #8615]
      Async: Replace make_future/make_shared_future by make_ready_future.
    * [@http://svn.boost.org/trac/boost/ticket/8627 #8627]
      Async: Add future<>::unwrap and unwrapping constructor.
    * [@http://svn.boost.org/trac/boost/ticket/8677 #8677]
      Async: Add future<>::get_or.
    * [@http://svn.boost.org/trac/boost/ticket/8678 #8678]
      Async: Add future<>::fallback_to.
    * [@http://svn.boost.org/trac/boost/ticket/8891 #8891]
      upgrade_to_unique_lock: missing mutex() function.
    * [@http://svn.boost.org/trac/boost/ticket/8955 #8955]
      Request for more efficient way to get exception_ptr from future.
  * ['Fixed Bugs:]
    * [@http://svn.boost.org/trac/boost/ticket/7461 #7461]
      detail::win32::ReleaseSemaphore may be called with count_to_release equal to 0
    * [@http://svn.boost.org/trac/boost/ticket/8070 #8070]
      prefer GetTickCount64 over GetTickCount
    * [@http://svn.boost.org/trac/boost/ticket/8768 #8768]
      win32 condition_variable::wait_until infinite wait in rare cases.
    * [@http://svn.boost.org/trac/boost/ticket/8817 #8817]
      Boost Thread Windows CE _createthreadex handling breaks mingw w64.
    * [@http://svn.boost.org/trac/boost/ticket/8943 #8943]
      Failed to compile code using boost::call_once with Intel C++ Composer XE 2013 on Windows.
    * [@http://svn.boost.org/trac/boost/ticket/8931 #8931]
      Typos in external_locking reference.
    * [@http://svn.boost.org/trac/boost/ticket/9029 #9029]
      Misprint in documentation.
    * [@http://svn.boost.org/trac/boost/ticket/9037 #9037]
      gcc -Wshadow gives warnings in condition_variable{,_fwd}.hpp.
    * [@http://svn.boost.org/trac/boost/ticket/9041 #9041]
      Boost.Thread DSO's may need to link with Boost.Atomic.
    * [@http://svn.boost.org/trac/boost/ticket/9048 #9048]
      boost::scoped_thread useless ctor with variadic template arguments.
    * [@http://svn.boost.org/trac/boost/ticket/9079 #9079]
      Condition variable will wait forever for some timepoint values (Win).

* [phrase library..[@/libs/timer/ Timer]:]
  * Fixed compilation on Intel compiler [ticket 8956].

* [phrase library..[@/libs/type_traits/ Type Traits]:]
  * Added `is_copy_contructible` trait [ticket 8802].

* [phrase library..[@/libs/unordered/ Unordered]:]
  * Avoid some warnings ([ticket 8851], [ticket 8874]).
  * Avoid exposing some detail functions via. ADL on the iterators.
  * Work around variadic parameter bug in Visual Studio 2013.
    The compiler still has problems with initializer lists,
    but it might not be possible to work around those.

* [phrase library..[@/libs/utility/index.html Utility]:]
  * `boost::result_of` can be set to use TR1 protocol by default and fall back to `decltype` if the function object does not support it (like C++11 lambda functions, for example). Define `BOOST_RESULT_OF_USE_TR1_WITH_DECLTYPE_FALLBACK` configuration macro to enable this mode.
  * Improved support for C++11 in the `boost::base_from_member` class template. The class implements perfect forwarding for the constructor arguments, if the compiler supports rvalue references, variadic templates and function template default arguments.
  * Added `boost/utility/explicit_operator_bool.hpp` and `boost/utility/empty_deleter.hpp` headers, which were extracted from Boost.Log. The headers implement utilities for defining explicit conversion operators to `bool` and a deleter function object that does nothing, respectively.

* [phrase library..[@/libs/variant/ Variant]:]
  * Fixed compilation of constructor and assignment operator with const
    rvalues input parameters [ticket 8988].
  * Fixed compilation of move assignment operator for situations when one
    of the variant template classes has nothrow copy constructor and throwing
    move constructor [ticket 8772].
  * Fix compilation on exception-disabled environments [ticket 8717].
  * Fix unreachable code warnings [ticket 8665].
  * Removed duplicate code [ticket 7601].

* [phrase library..[@/libs/wave/ Wave]:]
  * See the [@/libs/wave/ChangeLog Changelog] for details.

* [phrase library..[@/libs/xpressive xpressive]:]
  * [ticket 8843] throw instead of assert at incomplete charset
  * [ticket 8880] remove unused local typedef
  * [ticket 8882] use RAII instead of try/catch in sequence_stack.hpp
  * [ticket 8474] make xpressive play nice with clang's -Wimplicit-fallthrough diagnostic

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/quickbook Quickbook]:]
  * Quickbook 1.6 finalized, see the
    [@/doc/html/quickbook/versions.html#language_versions.1_6
    Quickbook documentation for details].

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Clang: 3.3, 3.2, 3.1, 3.0
  * Clang, C++11, libc++: 3.4, 3.3
  * GCC: 4.8.1, 4.7.3, 4.6.3, 4.5.3, 4.4.7
  * GCC, C++11: 4.8.1
  * GCC, C++98: 4.8.1
* OS X:
  * GCC: 4.2
  * Apple Clang: 5.0
  * Apple Clang, C++11: 5.0
* Windows:
  * GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7
  * Visual C++: 11.0, 10.0, 9.0
[/ TODO: Check if this is running.
* FreeBSD:
  * GCC: 4.2.1
]

Boost's additional test compilers include:

* OS X:
  * Apple Clang: 5.0
  * Apple Clang, C++11: 5.0
  * Clang: trunk
  * Clang, C++11: trunk
  * GCC: 4.2.1
* Linux:
  * Clang: 3.3, 3.2, 3.1, 3.0, trunk
  * Clang, C++11: 3.4
  * Clang, C++11, libc++: 3.4, 3.3
  * GCC: 4.9.0 (experimental), 4.8.1, 4.7.3, 4.6.4, 4.5.3, 4.4.7
  * GCC, C++11: 4.8.1
  * GCC, C++98: 4.8.1
  * Intel: 13.0.1, 12.1.6
* Windows:
  * GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7
  * Visual C++: 11.0, 10.0, 9.0
[/ TODO: Check if this is running.
* FreeBSD:
  * GCC: 4.2.1
]

[endsect]

[section Acknowledgements]

[@/users/people/beman_dawes.html Beman Dawes],
Eric Niebler,
[@/users/people/rene_rivera.html Rene Rivera],
Daniel James, Vladimir Prus and Marshall Clow
managed this release.

[endsect]
