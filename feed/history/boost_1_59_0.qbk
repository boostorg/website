[article Version 1.59.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        [/
        New Libraries:
        Coroutine2
        ]
        Updated Libraries:
        Container, Context, Coroutine, Fusion, Interprocess, Intrusive, Log,
        Move, Multi-index Containers, Predef, Program Options, Test.
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[status beta]
[download http://sourceforge.net/projects/boost/files/boost/1.59.0.beta.1/]
[download_basename boost_1_59_0_b1]
[documentation /doc/libs/1_59_0_b1/]

[/
[section New Libraries]

* [phrase library..[@/libs/coroutine2/ Coroutine2]:]
  An extendible and configurable type-conversion framework,
  from Vladimir Batov.

[endsect]
]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * `shared_ptr` is movable and supports aliasing ([ticket 1234]).
]

* [phrase library..[@/libs/container/ Container]:]
  * [@https://github.com/boostorg/container/pull/26 GitHub #26: ['Fix bug in stable_vector::capacity()]]. Thanks to timsong-cpp/Arindam Mukerjee.
  * [@https://github.com/boostorg/container/pull/27 GitHub #27: ['fix stable_vector's index_of's doxygen comment]]. Thanks to kariya-mitsuru.
  * [@https://svn.boost.org/trac/boost/ticket/11380 Trac #11380: ['"Container library std forward declarations incorrect in std_fwd.hpp on libc++ with gcc"]].
  * [@https://svn.boost.org/trac/boost/ticket/11388 Trac #11388: ['"boost::container::list::emplace_back broken on Visual Studio 2010"]].
  * [@https://svn.boost.org/trac/boost/ticket/11339 Trac #11339: ['"VC12 LNK2005 error with boost::container::adaptive_pool"]].

* [phrase library..[@/libs/context/ Context]:]
  * [ticket 11223] check support for std::integer_sequence
  * execution_context uses internally Windows Fibers with BOOST_USE_WINFIBERS 
  * support of assember for MinGW on Windows (32bit)
 
* [phrase library..[@/libs/coroutine/ Coroutine]:]
  * [ticket 10978] remove additional semicolons
  * [ticket 11230] coroutine_error returns dangling exception message pointer
  * [ticket 11234] doesn't compile when used with boost::range::algorithms
  * [ticket 11356] coroutines segfaults with BOOST_USE_SEGMENTED_STACKS
  
* [phrase library..[@/libs/fusion/ Fusion]:]
  * Add a new concept, `Unbounded Sequence` for sequence and `Unbounded Iterator` for iterator.
    Currently, `Unbounded Sequence` affects the behaviour of `fusion::(value_)at(_c)` and `fusion::(value_)at_key`. `Unbounded Iterator` has no effect (reserved for future release).
    For more details, see [@libs/fusion/doc/html/fusion/sequence/concepts/unbounded_sequence.html Unbounded Sequence] and
    [@/libs/fusion/doc/html/fusion/iterator/concepts/unbounded_iterator.html Unbounded Iterator]. ([@https://github.com/boostorg/fusion/pull/85 pull-request 85])
  * Support C++11 variadic templates for `fusion::list`. ([@https://github.com/boostorg/fusion/pull/84 pull-request 84])
  * ['Fixed bugs:]
    * Fix missing include `<utility>`. ([ticket 11161])
    * Revert some constexpr support, regression in 1.58.0. ([ticket 11211], [ticket 11267])
    * Fix compile error with fold due to missing include. ([ticket 11249])
    * Fix compile error with adapting an empty struct, regression in 1.58.0. ([ticket 11269])
    * Remove use of obsolete (and incorrect) workaround for sequence comparison, it affects MSVC-8 and earlier. ([@https://github.com/boostorg/fusion/pull/78 pull-request 78])
    * Fix compile error while copying a sequece which derived from fusion::list, regression in 1.58.0. ([@https://github.com/boostorg/fusion/pull/87 pull-request 87])
    * Fix compile error on copying a fusion::tuple. ([ticket 11140])
    * Add workarounds for GCC 4.6 with constexpr. ([ticket 11517])

* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * [@https://svn.boost.org/trac/boost/ticket/5139 ( Trac #5139 ( (['"Initial Stream Position in Boost.Interprocess.Vectorstream"])].
  * [@https://github.com/boostorg/interprocess/pull/19 GitHub Pull #19 (['"Fix exception visibility"])]. Thanks to Romain-Geissler.

* [phrase library..[@/libs/intrusive/ Intrusive]:]
  *  Implemented [link intrusive.map_multimap map and multimap-like interfaces].
  *  Refactored hashtable containers to reduce template instantiations.

* [phrase library..[@/libs/lexical_cast/ Lexical Cast]:]
  * Fixed warnings
  * Simplified metaprogramming (thanks to Edward Diener)

* [phrase library..[@/libs/log/ Log]:]
  * General changes:
    * On systems with [@https://gcc.gnu.org/wiki/Visibility symbol visibility] support (e.g. Linux) the library is now built with all internal symbols hidden.
    * *Breaking change:* The library has been ported to Boost.TypeIndex for its underlying type info management tool. This affected the following public interfaces:
      * `invalid_type` exceptions thrown by the library now have `typeindex::type_index` attached as the description of the offending type. The type was previously identified by `type_info_wrapper`.
      * Boost.Exception `type_info_info` error information now contains `typeindex::type_index` instead of `type_info_wrapper`.
      * `attribute_value::get_type()` now returns `typeindex::type_index` instead of `type_info_wrapper`. User-defined attribute value implementations should be similarly changed (the `attribute_value::impl::get_type()` virtual method now also returns `typeindex::type_index`).
    * `type_info_wrapper` component has been deprecated and will be removed in future releases. Boost.TypeIndex is recommended as a replacement.
    * Removed the previously deprecated headers: `boost/log/utility/intrusive_ref_counter.hpp`, `boost/log/utility/explicit_operator_bool.hpp`, `boost/log/utility/empty_deleter.hpp`.
    * Added support for building the library for OpenBSD. ([ticket 11446])
    * Improved internal implementation of the event synchronization primitive used for asynchronous logging. ([ticket 11398])
  * Bug fixes:
    * Fixed incorrect behavior of `attribute_value_set::insert()` and `attribute_value_set` constructor in some cases. ([ticket 11190])
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.
  
* [phrase library..[@/libs/move/ Move]:]
  *  Changed `unique_ptr`'s converting constructor taking the source by value in C++03 compilers to allow simple conversions
  from convertible types returned by value.
  * [@https://svn.boost.org/trac/boost/ticket/11229 Trac #11229: ['"vector incorrectly copies move-only objects using memcpy"]],  

* [phrase library..[@/libs/multi_index/index.html Multi-index Containers]:]
  * Added [@/libs/multi_index/doc/tutorial/indices.html#rnk_indices ranked indices].
  * Maintenance fixes.

* [phrase library..[@/libs/predef/ Predef]:]
  * Fix many problems with `predef_check` functionality.
  * Update SunPro detection to accomodate latest version of compiler from Oracle.
  * Add `and` and `or` logical operators for `predef_check` expression on the Boost Build side.
  * Fix `BOOST_ARCH_PARISC` to correctly spelled name.
  * Fix `MAKE_YYYYM` macros to correctly limit the month.

* [phrase library..[@/libs/program_options/ Program Options]:]

  * Fix compilation errors, missing dllexport and warnings with MSVC and MinGW
    (Daniela Engert, Marcel Raad).
  * Fix unintialized fields (Zoey Greer).
  * Stop options with implicit value from consuming separate tokens (Michael John Decker).
  * Make multitoken limit be max int, not 32K (Hans Hohenfeld).
  * Code formatting and documentation fixes (Jurko GospodnetiÄ‡, Lauri Nurmi).
  * Minimal support for no-rtti build (Minmin Gong)
  * Don't increment environment pointer past the end (Vladimir Prus)

* [phrase library..[@/libs/test/ Boost.Test v3]:]
  * Major new features
    * `BOOST_TEST` generic assertion
    * data driven test cases
    * test units can now have /attributes/ for finer control over tests behavior (logical grouping, test dependencies, test enabling/disabling)
    * CLI learned `colour_output` and `list_content`, extended unit test filtering (negation, labels)
    * refactored and rewritten documentation using quickbook
  * Addressed issues:
    * [ticket 2018] [ticket 2450] [ticket 2600] [ticket 2717] [ticket 2759] [ticket 3182] [ticket 3316] [ticket 3392] [ticket 3402] [ticket 3445]
    * [ticket 3463] [ticket 3542] [ticket 3481] [ticket 3495] [ticket 3592] [ticket 3595] [ticket 3623] [ticket 3664] [ticket 3784] [ticket 3785]
    * [ticket 3811] [ticket 3834] [ticket 3896] [ticket 3932] [ticket 3938] [ticket 3964] [ticket 3978] [ticket 3979] [ticket 4161] [ticket 4275]
    * [ticket 4389] [ticket 4434] [ticket 4587] [ticket 4806] [ticket 4911] [ticket 4923] [ticket 4924] [ticket 4982] [ticket 5008] [ticket 5036]
    * [ticket 5262] [ticket 5374] [ticket 5412] [ticket 5563] [ticket 5582] [ticket 5599] [ticket 5718] [ticket 5729] [ticket 5870] [ticket 5972]
    * [ticket 6002] [ticket 6071] [ticket 6074] [ticket 6161] [ticket 6766] [ticket 6712] [ticket 6748] [ticket 7046] [ticket 7136] [ticket 7410] [ticket 7894]
    * [ticket 8201] [ticket 8272] [ticket 8467] [ticket 8862] [ticket 8895] [ticket 9179] [ticket 9272] [ticket 9390] [ticket 9409] [ticket 9537]
    * [ticket 9539] [ticket 9581] [ticket 9960] [ticket 10318] [ticket 10394] [ticket 10888] [ticket 11054] [ticket 11347] [ticket 11358] [ticket 11359]

* [phrase library..[@/libs/type_index/ TypeIndex]:]
  * Removed dependencies on some of the Boost libraries to improve compilation times and modularity
  * Warnings fixed in tests and other maintainance improvements were done.

* [phrase library..[@/libs/variant/ Variant]:]
  * Fixed missing include in element_index.hpp [ticket 11196], [ticket 11283]
  * Fixed `boost::apply_visitor` usage with C++14 and const references [ticket 11251], [ticket 11285]
  * Relaxed compile time checks for all the `get<reference>(variant_variable)` functions (thanks to Nicolas Cornu) 

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Clang: 3.4
  * Clang, C++14: 3.6
  * GCC: 4.4.7, 4.8.2, 4.9.3
  * GCC, C++11: 4.4.7
  * GCC, C++14: 4.9.3
  * Intel: 15.0
* Windows:
  * Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
* Android:
  * Clang: 3.6
  * GCC: 4.8, 4.9
* SunOS:
  * Sun: 6.0
* QNX:
  * QCC: 4.4.2

Boost's additional test compilers include:

* Linux:
  * Clang: 3.0, 3.1, 3.2, 3.3, 3.4
  * Clang, C++14: 3.6, 3.7
  * GCC: 4.4.7, 4.5.3, 4.6.4, 4.7.3, 4.8.1, 5.1.0, 6.0.0
  * GCC, C++11: 4.4.7
  * GCC, C++14: 4.9.3, 5.1.1
  * Intel: 15.0
* Android:
  * Clang: 3.6
  * GCC: 4.8, 4.9
* FreeBSD:
  * Clang: 3.4.1
  * GCC: 4.8.5, 5.1.0, 6.0.0

[endsect]

[section Acknowledgements]

[@/users/people/beman_dawes.html Beman Dawes],
Eric Niebler,
[@/users/people/rene_rivera.html Rene Rivera],
Daniel James, Vladimir Prus and Marshall Clow
managed this release.

[endsect]

[/

For final release:

[status released]
[download http://sourceforge.net/projects/boost/files/boost/1.56.0/]
[download_basename boost_1_56_0]
[documentation /doc/libs/1_56_0/]

Fill in 'authors' field, and date (I normally just copy the date from
the email requesting that I update the site).

Remove this comment.
]
