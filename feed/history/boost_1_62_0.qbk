[article Version 1.62.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Fiber, QVM
        Updated Libraries:
        Chrono, Circular Buffer, Container, Context, Coroutine2,
        DLL, Functional/Forward, Interprocess, Intrusive,
        Lexical Cast, Log, Math, Phoenix, Regex, Test,
        Thread, TypeIndex, Unordered, Variant.
    ]
    [authors [Rivera, Rene]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/ Add attributes here as release progresses. See end of file for details. ]
[documentation /doc/libs/master/]

[section New Libraries]

* [phrase library..[@/libs/fiber/ Fiber]:]
  Framework for userland-threads/fibers, from Oliver Kowalke.

* [phrase library..[@/libs/qvm/doc/index.html QVM]:]
  Boost QVM is a generic library for working with quaternions, vectors and
  matrices of static size with the emphasis on 2, 3 and 4-dimensional
  operations needed in graphics, video games and simulation applications, from
  Emil Dotchevski.

[endsect]

[section Updated Libraries]

* [phrase library..[@/libs/chrono/ Chrono]:]
  * [@http://svn.boost.org/trac/boost/ticket/11330 #11330] boost::chrono::duration default constructor doesn't initialize rep_
  * [@http://svn.boost.org/trac/boost/ticket/11618 #11618] Chrono IO V2 doc ios_state.hpp does not exist
  * [@http://svn.boost.org/trac/boost/ticket/11631 #11631] boost chrono io v2 does not let you support custom clocks  

* [phrase library..[@/libs/circular_buffer/ Circular Buffer]:]
  * Debug implementation is no longer used by default in debug mode. Debug implementation does not have the same thread safety guarantees as the normal (release) implementation or other containers. As a result of this change `BOOST_CB_DISABLE_DEBUG` macro is no longer used. `BOOST_CB_ENABLE_DEBUG=1` should be defined instead to enable debug support. ([ticket 6277])

* [phrase library..[@/libs/container/ Container]:]
  * Fixed bugs:
    * [@https://svn.boost.org/trac/boost/ticket/9481  Trac #9481:  ['"Minor comment typo in Boost.Container"]].
    * [@https://svn.boost.org/trac/boost/ticket/9689  Trac #9689:  ['"Add piecewise_construct to boost::container"]].
    * [@https://svn.boost.org/trac/boost/ticket/11170 Trac #11170: ['"Doc slip for index_of"]].
    * [@https://svn.boost.org/trac/boost/ticket/11802 Trac #11802: ['"Incorrect ordering after using insert() with ordered_range_t on a flat_multiset with a non-default sort order"]].
    * [@https://svn.boost.org/trac/boost/ticket/12117 Trac #12117: ['"flat_set constructor with ordered_unique_range"]].
    * [@https://svn.boost.org/trac/boost/ticket/12177 Trac #12177: ['"vector::priv_merge uses unqualified uintptr_t"]].
    * [@https://svn.boost.org/trac/boost/ticket/12183 Trac #12183: ['"GCC 6.1 thinks boost::container::string violates strict aliasing"]].
    * [@https://svn.boost.org/trac/boost/ticket/12256 Trac #12256: ['"set<std::pair<int,int>>::insert cause compilation error in debug configuration in Visual Studio 2012"]].
    * [@https://svn.boost.org/trac/boost/ticket/12273 Trac #12273: ['"static_vector max_size() and capacity() should be constant expressions"]].
      Added constant `static_vector<>::static_capacity` to use the configured capacity in constant expressions.
    * [@https://svn.boost.org/trac/boost/ticket/12286 Trac #12286: ['"PMR flat_map from Boost Container does not compile"]].
    * [@https://svn.boost.org/trac/boost/ticket/12296 Trac #12296: ['"{deque,string} combine for a memory leak"]].
    * [@https://svn.boost.org/trac/boost/ticket/12319 Trac #12319: ['"`flat_set` should be nothrow move constructible"]].
  * Revised noexcept expressions of default and move constructors in all containers.
  * Implemented C++17 `insert_or_assign`/`try_emplace` for [classref boost::container::map map] and [classref boost::container::flat_map flat_map].
  * Implemented C++17 `extract`/`insert(node)` for [classref boost::container::map map], [classref boost::container::multimap multimap],
     [classref boost::container::set set], [classref boost::container::multiset multiset].
  
* [phrase library..[@/libs/context/ Context]:]
  * [ticket 12215] all stack corrupted on Windows using default fixedsize_stack
  * [ticket 12242] build issue with Intel C++ compiler for MacOS
  * fix stack unwinding for execution_context_v1

* [phrase library..[@/libs/coroutine/ Coroutine:]
  * deprecated in favour of Coroutine2

* [phrase library..[@/libs/coroutine2/ Coroutine2]:]
  * [ticket 12221] coroutine<>::push_type function starts without pushing
  * do not swallow exceptions thrown at coroutine<>::push_type construction

* [phrase library..[@/libs/dll/ DLL]:]
  * Mangled symbols and classes loading was implemented by Klemens Morgenstern
  * Suppress a 'unused parameter' warning in detail::aggressive_ptr_cast [https://github.com/apolukhin/Boost.DLL/pull/9 pull-request 9]
  * Allowed to query non-existant sections [https://github.com/apolukhin/Boost.DLL/pull/32 pull-request 32]
  * More tests and docs

* [phrase library..[@/libs/functional/forward/ Functional/Forward]:]
  * Fix C++11 compile error.

* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Fixed bug [@https://github.com/boostorg/interprocess/pull/27 GitHub Pull #27 (['"Fix undefined behavior"])].
   
* [phrase library..[@/libs/intrusive/ Intrusive]:]
  *  Fixed bugs:
    *  [@https://svn.boost.org/trac/boost/ticket/11476 Boost Trac #11476: ['has_member_function_callable_with.hpp is massively broken with BOOST_NO_CXX11_DECLTYPE]]
    *  [@https://svn.boost.org/trac/boost/ticket/11994 Boost Trac #11994: ['Support intrusive container key extractors that return the key by value]]
    *  [@https://svn.boost.org/trac/boost/ticket/12184 Boost Trac #12184: ['clang -Wdocumentation warning]]
    *  [@https://svn.boost.org/trac/boost/ticket/12190 Boost Trac #12190: ['Intrusive List + Flat Map combination crashes]]
    *  [@https://svn.boost.org/trac/boost/ticket/12229 Boost Trac #12229: ['intrusive::unordered_set<T>::rehash() broken]]
    *  [@https://svn.boost.org/trac/boost/ticket/12245 Boost Trac #12245: ['bstree uses a shared static size_traits for constant_time_size<false>]]

* [phrase library..[@/libs/lexical_cast/ Lexical Cast]:]
  * Fix incorrect static assertion [ticket 11759]

* [phrase library..[@/libs/log/ Log]:]
  * New features:
    * Added new tools for inter-process logging on a local machine. The implementation includes a resource name wrapper, an inter-process message queue and a sink backend.
    * Added a new character decorator called `max_size_decor`. The new decorator allows to limit the output of its adopted formatter up to the specified length.
  * Bug fixes:
    * Fixed that logging streams could retain formatting settings across different log records. ([ticket 12178])
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.
  
* [phrase library..[@/libs/math/ Math]:]
  * New Features:
    * Enabled all the special function code to work correctly with types whose precision can change at runtime: for example type `mpfr_float` from Boost.Multiprecision.
  * Patches:
    * Fix `tgamma_delta_ratio` for cases where the delta is small compared to the base.
    * Fix misc GCC-4.4 test failures.

* [phrase library..[@/libs/phoenix/ Phoenix]:]
  * Fix compilation for MSVC 10. [@https://github.com/boostorg/phoenix/pull/18 pull-request 18]
  * Remove unused preprocessed files. [@https://github.com/boostorg/phoenix/pull/28 pull-request 28]
  * Fix erroneous doc for switch_ statement. [ticket 8156]
  * Cleanup config unordered. [@https://github.com/boostorg/phoenix/pull/33 pull-request 33]
  * Suppress unused placeholder warnings.
  * Fix too few arguments error on binary math functions.
  
* [phrase library..[@/libs/regex/ Regex]:]
  * Fix buffer over-run error when parsing certain invalid regexes, see [@https://svn.boost.org/trac/boost/ticket/12222 #12222].
  * Fix detection of ICU in library build, see [@https://svn.boost.org/trac/boost/ticket/12152 #12152].
  * Fix bug in case sensitivity change, see [@https://svn.boost.org/trac/boost/ticket/11940 #11940].
  * Allow types wider than int in `\x{}` expressions (for char32_t etc), see [@https://svn.boost.org/trac/boost/ticket/11988 #11988].


* [phrase library..[@/libs/test/ Test]:]
  * Boost.test v3.3 see the
    '[@/doc/libs/1_62_0/libs/test/doc/html/boost_test/change_log.html Change log]'
    section for details.
  * New features
    * dataset driven test-cases have now a unique name and all sample tests of a dataset
      live inside the same test suite
    * Boost.test learned a new command line switch, `--logger` for setting a test logger
      as well as its parameter in one command
    * Boost.test learned to have several loggers at the same time, each of which having
      their own log level and sink
    * Boost.test learned a new logger, `JUNIT`, that is able to output Junit/xUnit compatible
      streams
    * It is now possible to specify several test filters through the environment variable
      `BOOST_TEST_RUN_FILTERS`
  * Bug fixes
    * [ticket 8707], [ticket 8834], [ticket 11128], [ticket 11845]
    * [ticket 11859], [ticket 12024], [ticket 12103], [ticket 12224]
    * [@https://github.com/boostorg/test/pull/81 PR81]

* [phrase library..[@/libs/thread/ Thread]:]
  * [@http://svn.boost.org/trac/boost/ticket/12102 #12102] condition_variable_fwd.hpp fails to compile when BOOST_THREAD_PROVIDES_INTERRUPTIONS is disabled
  * [@http://svn.boost.org/trac/boost/ticket/12120 #12120] Performance improvement in thread/barrier.hpp
  * [@http://svn.boost.org/trac/boost/ticket/12146 #12146] make_exceptional_future is not mentioned in the docs
  * [@http://svn.boost.org/trac/boost/ticket/12202 #12202] shared_lock should be in shared_mutex header
  * [@http://svn.boost.org/trac/boost/ticket/12371 #12371] boost thread/future.hpp fails to build
  * #88 fix typos in boost::upgrade_lock
  * #89 fix a bug in upgrade_to_unique_lock<>::operator=()
  * #90 fix a bug in try_lock_wrapper<>::operator=()
  * #91 Add shared_lock_guard to the included lock types
  * #92 Fixed compilation with MSVC-8.  
  * #93 Fix variable shadowing warnings (Clang)
  * #94 fix bugs in boost::barrier
  * #95 fix a mistake in boost::completion_latch
  * #96 rename async_func.hpp to invoker.hpp.
  * #97 fix a mistake in sync_timed_queue<>::pull_until()


* [phrase library..[@/libs/type_index/ TypeIndex]:]
  * `ctti_type_index` was made constexpr in C++14. Now it is possible to retrieve actual name of the type as `const char*` at compile time. So we can do a lot of interesting things at *compile time*: check namespace of a type, sort types according to their lexical representation, check that type is a template type and so on... A few examples were provided.
  * Fixed issue with `noexcept` on MSVC in type names and issue with space in type name (pulled from klemens-morgenstern/develop)
  * Fixed typos [https://github.com/boostorg/type_index/pull/7 pull-request 7]
  * Improved CI testing


* [phrase library..[@/libs/unordered/ Unordered]:]
  * Remove use of deprecated `boost::iterator`.
  * Fixed an exception safety issue in assignment of `unordered_multiset`
    and `unordered_multimap`.
  * See the [@/doc/html/unordered/changes.html changelog] for more details.

* [phrase library..[@/libs/variant/ Variant]:]
  * Fixed variant construction from classes derived from variant [ticket 7120], [ticket 10278], [ticket 12155]
  * Variant constructors and assignment operators now do not participate in overload resolutions if variant can not hold the input type [ticket 5871], [ticket 11602]
  * Fixed the issue with implicit conversion operator in C++11 [ticket 8555]
  * Fixed comparisons when variant holds non-const reference [ticket 11751]
  * Fixed noexcept for variant's move-assignment [ticket 11696]
  * Fixed double quotes in includes [ticket 12057]
  * Dropped BOOST_VARIANT_NO_REFERENCE_SUPPORT macro and dropped support for compilers without SFINAE [ticket 12250]
  * Suppress implicit instantiation of MPL end iterator
  * Multiple minor fixes (typos, missing includes)

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Clang: 3.0, 3.8.0
  * Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.0
  * Clang, C++14: 3.5, 3.6, 3.7, 3.8.0, 3.8.1, 3.9.0
  * GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.2.0, 6.1.1
  * GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.3, 5.2.0, 6.1.1
  * GCC, C++14: 5.2.0, 5.3.0, 5.4.1, 6.1.1
  * Intel: 16.0
  * Intel, C++11: 16.0
  * Intel, C++14: 16.0
* Windows:
  * GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
  * GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
  * GCC, C++14, mingw: 6.1.0
  * Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
* Android:
  * Clang: 3.6, 3.7, 3.8
  * GCC: 4.9, 5.4, 6.1
* FreeBSD:
  * Clang: 3.4.1, 3.7
  * GCC: 4.8.5, 5.4.0, 6.1.1
* QNX:
  * QCC: 4.4.2
* SunOS:
  * Oracle Solaris Studio: 12.5
  * Oracle Solaris Studio, C++11: 12.5

Boost's additional test compilers include:

* Linux:
  * Clang: 3.0, 3.8
  * Clang, c++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8
  * Clang, c++14: 3.5, 3.6, 3.7, 3.8, 3.9
  * GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.4, 5.2.0, 6.1.1
  * GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.3, 5.2.0, 6.1.1
  * GCC, C++14: 5.2.0, 5.3.0, 5.4.1, 6.1.1, 7.0.0 (experimental)
  * Intel: 16.0
  * Intel, C++11: 16.0
  * Intel, C++14: 16.0
* OS X:
  * Apple Clang: 7.3.0
  * G++: 6.1.0
* Windows:
  * Clang: 3.8.1
  * GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
  * GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
  * GCC, C++14, mingw: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
  * GCC, cygwin: 5.4.0
  * Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
* Android:
  * Clang: 3.6, 3.7, 3.8 
  * GCC: 4.9, 5.4, 6.1
* FreeBSD:
  * Clang, C++11: 3.4.1, 3.7.0
  * GCC, C++11: 4.8.5. 5.4.0, 6.1.1
* Haiku:
  * GCC, C++11: 5.4.0
* QNX:
  * QCC: 4.4.2
* SunOS:
  * Oracle Solaris Studio: 12.5
  * Oracle Solaris Studio, C++11: 12.5

[endsect]

[section Acknowledgements]

[@/users/people/beman_dawes.html Beman Dawes],
Eric Niebler,
[@/users/people/rene_rivera.html Rene Rivera],
Daniel James, Vladimir Prus and Marshall Clow
managed this release.

[endsect]
