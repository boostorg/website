[article Version 1.70.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries: Outcome, Histogram.
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[section Known Issues]

These are patches from library authors which were found too late to be fixed
in the release. Be careful as they have not been through the normal testing
process.

* Fix moved-from executor in idle ping timeout ([github beast 1599])
  * [@/patches/1_70_0/0001-beast-fix-moved-from-executor.patch Beast patch]

[endsect]

[section New Libraries]

* [phrase library..[@/libs/outcome/ Outcome]:] A set of tools for reporting and handling
  function failures in contexts where ['directly] using C++ exception handling is unsuitable,
  from Niall Douglas.

* [phrase library..[@/libs/histogram/ Histogram]:] Fast and extensible multi-dimensional
  histograms with convenient interface for C++14, from Hans Dembinski.

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * See examples below:
  * fixed an old trac issue ([ticket 1234]).
  * fixed this GitHub issue [github interprocess 1234].
  * fixed some bug with a PR [github_pr interprocess 1234].
  * [@https://www.google.com [*link to something]]
  * [*bold text]
  * [role green [*bold green text]]
  * \u26a1 use unicode
  * Keep the list of libraries in alphabetical order please.
]

* [phrase library..[@/libs/asio/ Asio]:]
  * This release includes a number of new features, bug fixes, performance enhancements,
    and documentation improvements. Notable changes include:
    * Added the ability to use custom I/O executors with I/O objects (such as sockets).
    * Added a new `async_result` form with an `initiate` static member function.
    * Updated the Coroutines TS support and promoted it to the `asio` namespace.
    * Added a new `DynamicBuffer_v2` concept which is CopyConstructible.
    * Added a new `async_compose` function that simplifies the implementation of
      user-defined asynchronous operations.
    * Added a `make_strand` helper function.
    * Relaxed the completion condition type requirements to only require
      move-constructibility rather than copy-constructibility.
    * Added a constructor for `local::basic_endpoint` that takes a `string_view`.
    * Added the noexcept qualifier to various functions.
    * Added a new `BOOST_ASIO_DISABLE_VISIBILITY` configuration `#define`.
    * Enabled recycling of the memory used to type-erase a function object with the
      polymorphic executor.
    * Changed receive operations to return the correct number of bytes transferred
      when truncation (`error::message_size`) occurs on a datagram-oriented socket.
    * Fixed calculation of absolute timeout when the backend uses
      `pthread_cond_timedwait`.
    * Changed the range-based asynchronous connect operation to deduce the
      `EndpointSequence` iterator type.
    * Fixed `buffer_sequence_begin` and `buffer_sequence_end` to prevent implicit
      conversion.
    * Ensured SSL handshake errors are propagated to the peer before the local
      operation completes.
    * Suppressed the `eof` error on SSL shutdown as it actually indicates success.
    * Added a fallback error code for when we OpenSSL produces an
      `SSL_ERROR_SYSCALL` result without an associated error.
    * Changed composed asynchronous read and write operations to move buffer sequence objects.
    * Fixed a macOS-specific warning about the deprecation of `OSMemoryBarrier`.
    * Fixed compile errors that occur when using the composed read and write
      operations with MSVC 11.0.
    * Improved `dispatch`, `post` and `defer` documentation.
    * Fixed a Windows-specific memory leak that may occur when `system_executor` is used.
  * Consult the [@/doc/libs/1_70_0/doc/html/boost_asio/history.html Revision History] for further details.

* [phrase library..[@/libs/beast/ Beast]:]
  [*BIG Update!!!]
  * Some APIs have changed.
  * The [@/libs/beast/doc/html/beast/quickref.html reference]
    shows a star '''&#9733;''' next to each new item.
  * Beast needs your help!
    * [@https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast Tell Us]
      how you or your company use Beast
    * Please
      [@https://github.com/boostorg/beast/issues/new report]
      any bugs, feature requests, or general feedback
    * Join the [@https://cppalliance.org/slack/ [*C++ Slack Workspace]] for
      free and chat with us in the #beast and #boost channels   
    * Don't forget to [@https://github.com/boostorg/beast star the repository] \u2b50!
  * More tutorials, code like the pros!
    * [@/libs/beast/doc/html/beast/using_io/asio_refresher.html Networking Refresher]
      teaches you from the ground up.
    * Updated [@/libs/beast/doc/html/beast/using_io/writing_composed_operations/echo.html Asynchronous Echo] example
    * Updated [@/libs/beast/doc/html/beast/using_io/writing_composed_operations/detect_ssl.html [*Detect SSL]] composed operation tutorial
    * [@/libs/beast/example/websocket/server/chat-multi websocket-chat-multi]
      threaded chat server with a JavaScript
      [@/libs/beast/example/websocket/server/chat-multi/chat_client.html browser client]
  * [@/libs/beast/doc/html/beast/ref/boost__beast__basic_stream.html `basic_stream`] and
    [@/libs/beast/doc/html/beast/ref/boost__beast__tcp_stream.html `tcp_stream`] offer:
    * Timeouts: `async_read_some`, `async_write_some` complete with
      [@/libs/beast/doc/html/beast/ref/boost__beast__error.html `error::timeout`] on expiration!     
    * Traffic-shaping policies
      [@/libs/beast/doc/html/beast/ref/boost__beast__simple_rate_policy.html `simple`] and
      [@/libs/beast/doc/html/beast/ref/boost__beast__unlimited_rate_policy.html `unlimited`],
      or a user-defined
      [@/libs/beast/doc/html/beast/concepts/RatePolicy.html ['RatePolicy]]!
    * Put the strand directly on the socket using
      [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1322r0.html P1322R0],
      no more `bind_executor` at call sites!
  * Base classes
    [@/libs/beast/doc/html/beast/ref/boost__beast__async_base.html `async_base`] and
    [@/libs/beast/doc/html/beast/ref/boost__beast__stable_async_base.html `stable_async_base`] and
    handle all composed operation boilerplate for you.
  * [@/libs/beast/doc/html/beast/ref/boost__beast__ssl_stream.html `ssl_stream`] provides a
    movable, assignable SSL stream with a flat write optimization.
  * All asynchronous operations use Asio's `async_initiate` for efficient integration with Coroutines TS.
  * \u26a1 [*['faster compilation]], define `BOOST_BEAST_SEPARATE_COMPILATION` and
    `#include <boost/beast/src.hpp>`
    in one of your .cpp files!
  * See the full
    [@/libs/beast/doc/html/beast/release_notes.html Release Notes]
    for a complete list of changes.
    
* [phrase library..[@/libs/context/ Context]:]
   * [github context 91]: cleanup of stack if creating ucontext fails 
   * [github context 97]: add missing BOST_CONTEXT_DECL in stack_context 
   * [github context 98]: fix jump_i386_sysv_macho writing garbage to the x87 control word

* [phrase library..[@/libs/coroutine2/ Coroutine2]:]
    * [github coroutine2 28]: don't crash on pthread_cancel

* [phrase library..[@/libs/dll/ DLL]:]
  * New macro [@/libs/dll/BOOST_DLL_USE_STD_FS.html BOOST_DLL_USE_STD_FS]. Define it to `1` to make the Boost.DLL use C++17's `std::filesystem::path`, `std::system_error` and `std::error_code` ([github dll 21]). Note that exception types change from `boost::system::system_error` to `std::system_error`, so make sure to update `catch`es.
  * Significant rewrite of the dynamic loadable detection and decoration logic. More precise errors are now reported in case of loading failures. Added `shared_library::decorate()` function that returns a decorated path to the library without doing any platform related queries and detections. Prefer using `shared_library::load` and `shared_library` constructors for better results (many thanks to Lo√Øc Touraine for the work [github_pr dll 23]).
  * CI hardening, docs updates, typos fixes, cleanups and many portability fixes.

* [phrase library..[@/libs/dynamic_bitset/ Dynamic Bitset]:]
  * Disabled hardware-assisted popcount (added in 1.69.0) on MSVC due to undefined behavior
    on older CPUs. ([github dynamic_bitset 33] [github_pr dynamic_bitset 35])
    
* [phrase library..[@/libs/fiber/ Fiber]:]
    * [github fiber 191]: ignore unused argument warning
    * [github fiber 196]: fix high contention on remote_ready_splk_

* [phrase library..[@/libs/filesystem/ Filesystem]:]
  * Fixed a few instances of dereferencing `std::string::end()` in `path` implementation.
  * Fixed program termination in case of out of memory condition in directory iterators constructors and operations accepting a reference to `error_code`. ([github filesystem 58])
  * Fixed possible linking errors caused by missing definitions of static members of `path`. ([ticket 12759])
  * Fixed possible use of uninitialized data in directory iterator increment operation on Linux.
  * Added support for movability to directory iterators.
  * Added file status query overloads for `directory_entry`. This avoids a relatively expensive OS query when file status is requested for a result of dereferencing a directory iterator. ([github_pr filesystem 55])
  * Reworked `current_path` and `read_symlink` implementation to avoid possible memory exhaustion on broken or tampered with filesystems. The functions now have an internal limit of the path size they will accept from the OS, which is currently 16 MiB.
  * Increased the size of the internal buffer used by `copy_file`.

* [phrase library..[@/libs/integer/ Integer]:]
  * Added Extended Euclidean Algorithm and Modular Multiplicative Inverse function. (Nick Thompson, [github_pr integer 11])

* [phrase library..[@/libs/log/ Log]:]
  * New features:
    * Added support for generating another log file name before collecting the file in the text file sink backend. This allows to combine appending to an existing log file with timestamps and file counters in log filenames, and, consequently, file collection in general.
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.

* [phrase library..[@/libs/math/ Math]:]
  * New features:
    * Add Lanczos smoothing derivatives
    * Move `numerical_differentiation.hpp` from `boost/math/tools/` to `boost/math/differentiation/finite_difference.hpp`.
    * Add mean, variance, skewness, kurtosis, median, Gini coefficient, and median absolute deviation to `tools/univariate_statistics.hpp`.
    * Add correlation coefficients and covariance to `tools/bivariate_statistics.hpp`
    * Add absolute Gini coefficient, Hoyer sparsity, oracle SNR, and the /M/[sub 2]/M/[sub 4] SNR estimator to `tools/signal_statistics.hpp`.
    * Add total variation, l0, l1, l2, and sup norms, as well as corresponding distance functions to `tools/norms.hpp`.
    * Add move constructors for polynomials, support complex coefficients, add `.prime()` and `.integrate()` methods.
    * Add `quadratic_roots` to `tools/roots.hpp`.
    * Add support for complex-valued functions to Newton's method in `roots.hpp`.
    * Add Catmull-Rom interpolator.

* [phrase library..[@/libs/mp11/ Mp11]:]
  * Renamed `mp_invoke` to `mp_invoke_q`
  * Added `mp_similar`
  * Added `mp_set_union`, `mp_set_intersection`, `mp_set_difference`
  * Added `mp_not_fn`
  * Added `mp_transform_first`, `mp_transform_second`, `mp_transform_third`
  * Added `mp_filter`
  * Added `mp_eval_if_not`, `mp_eval_or`, `mp_valid_q`
  * Added `mp_back`, `mp_pop_back`

* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * `size_type` and `difference_type` are now defined as the allocator's same-named types.
    This will not make any difference in the vast majority of cases, but allows for some
    degree of control of resulting internal structures via user-defined allocator types
    (see issue [github multi_index 17] for motivation). For the moment being, this change
    is not documented in the reference section (i.e., it has semi-official status). 
  * Maintenance work.
  
* [phrase library..[@/libs/multiprecision/ Multiprecision]:]
  * Fix various conversion issues in the traits classes, check for compatibility with Boost.Optional.
  * Prevent instantiation of `std::numeric_limits` on any old type when checking for convertibility.  See [@https://github.com/boostorg/multiprecision/issues/98 #98].
  * Update variable precision code to account for arbitrary precision integers.  See [@https://github.com/boostorg/multiprecision/issues/103 #103].
  * Add support for XML serialization archives.
  * Fix bug in fixed precision iostream formatting in `mpf_float` and `mpfr_float`.  See [@https://github.com/boostorg/multiprecision/issues/113 #113].
  * Add more overloads for special functions which are better handled natively by MPFR.
  * Fixed bug in generic `exp` implementation which could cause invariant failure.
  * Fixed generic conversion from float to integer to avoid undefined behaviour.  See [@https://github.com/boostorg/multiprecision/issues/110 #110].

* [phrase library..[@/libs/poly_collection/ PolyCollection]:]
  * Improved handling of stateful allocators and allocator propagation traits,
    after an error reported by Billy O'Neal ([github_pr poly_collection 9]).
  * Fixed a potentially serious bug with an internal cache structure.

* [phrase library..[@/libs/spirit/ Spirit]:]
  * Removed use of deprecated `boost/detail/iterator.hpp` header. [github_pr spirit 432]
  * X3
    * Integer parsers should now handle user defined types. [github_pr spirit 429]
    * [/^] [*Note:] The `check_overflow` trait default implementation now relies on
      `std::numeric_limits<T>::is_bounded` instead of `boost::integer_traits<T>::is_integral`.
    * Removed sequence into plain parsing. Now it triggers a compile time error
      instead of silently parsing the the sequence and taking the last value as a result. [github_pr spirit 439]
    * Fixed `parse_rule` instantiation with `BOOST_SPIRIT_INSTANTIATE` when:
      * A rule has no attribute. [github_pr spirit 455]
      * An actual attribute is not of type a rule was declared with. [github_pr spirit 456] [github spirit 457]
    * [/^] A [*huge] thanks goes out to [@https://github.com/Xeverous Xeverous]
      for reporting a regression in [github spirit 453].
    * Fixed unneded attribute synthesization and no-transformation attribute
      reference pass-through in rules. [github spirit 444] [github_pr spirit 449] [github_pr spirit 452]
    * Removed broken 1.0#INF parser. It was poorly documented and never worked. [github spirit 415] [github_pr spirit 458] [ticket 8699]
    * The undocumented `make_attribute` trait was removed due to bugs [github_pr spirit 449]
      and to simplify attribute transformation. [github_pr spirit 460]
    * [/^] If you were using it to workaround bugs in attribute transformation -
      they should not be needed anymore as of this release.
    * The integer value parser now respects `std::numeric_limits<T>::digits10` value. [github_pr spirit 469]
    * Fixed underflow check for a `(Min % Base) == 0` corner case. [github_pr spirit 469]
    * Fixed an output value on overflow of IgnoreOverflowDigits=true integer parser. [github_pr spirit 470]
    * Container attribute elements were copyied, but not moved. [github_pr spirit 472]
    * Special handling of references in `transform_attribute` was removed. [github_pr spirit 480]
  * V2
    * Macro name collisions and namespace conflicts with Boost.Endian were fixed. [github_pr spirit 349] [github_pr spirit 482]
    * utree
      * Fixed UB in tag getter due to left shift of negative value. [github_pr spirit 423]
      * Fixed double-conversion (`spirit::string -> std::string -> spirit::string`). [github_pr spirit 462]
    * Qi
      * Added static asserts for rule skipper type problems. [github_pr spirit 427]
      * The `check_overflow` trait default implementation now relies on
        `std::numeric_limits<T>::is_bounded` instead of `boost::integer_traits<T>::is_integral` [github_pr spirit 429]
      * Integer parsers should now handle user defined types. [github_pr spirit 429]
      *[/^] [*Note:] The `check_overflow` trait default implementation now relies on
        `std::numeric_limits<T>::is_bounded` instead of `boost::integer_traits<T>::is_integral`.
      * Removed broken 1.0#INF parser. It was poorly documented and never worked. [github spirit 415] [github_pr spirit 458] [ticket 8699]
      * The undocumented `make_attribute` trait was merged into `transform_attribute` trait. [github_pr spirit 471]
      * The `pre_transform`, `post_transform`, and `fail_transform` utility functions
        were removed in favor of directly using `pre`/`post`/`fail` of the transform trait. [github_pr spirit 467]
      * The integer value parser now respects `std::numeric_limits<T>::digits10` value. [github_pr spirit 469]
      * Fixed underflow check for a `(Min % Base) == 0` corner case. [github_pr spirit 469]
      * Fixed an output value on overflow of IgnoreOverflowDigits=true integer parser. [github_pr spirit 470]
      * Special handling of references in `transform_attribute` was removed. [github_pr spirit 480]
    * Lex
      * Fixed UB in default constructor of lexer with user specified token type. [github_pr spirit 420]
  * Classic:
    * Fixed `position_iterator` forming reference to local when the
      underlying iterator dereference operator returns a non-reference type. [github_pr spirit 422] [ticket 9737]

* [phrase library..[@/libs/stacktrace/ Stacktrace]:]
  * Build fix for iOS 32-bit ARM (many thanks to Ivan Ponomarev for providing the fix [github_pr stacktrace 70])
  * Fixed multiple typos, warnings and updated the docs.

* [phrase library..[@/libs/test/ Test]:]
  * Boost.test v3.10 see the
    [@/libs/test/doc/html/boost_test/change_log.html Changes log]
    for more details.
  * Breaking changes:
    * Boost.Test `minimal.hpp` is now showing a deprecation warning,
    * Change in floating point comparison may fail tests that were silently not using 
      the floating point comparison logic prior to this release,
    * Internal API change to `unit_test_log_formatter`, see detailed change log,
  
  * New feature:
    * Floating point comparison has been extended to capture non-floating point
      and arithmetic operands: expressions like `BOOST_TEST(3.0001 == 3)`
      now use floating point support of Boost.Test,
    * Custom datasets are not required to declare the `sample` type field anymore,
    * Extending template test cases from `std::tuple` to any variadic definition,
    * Windows support for timed tests,
    * Timed test on test-suites,
    * Removed dependency to Boost.Timer,
    * New macro `BOOST_TEST_INFO_SCOPE` for scoped context declaration,
    * Improved `BOOST_TEST_CONTEXT` syntax
    
  * Bug fixes and pull requests:
    * Trac tickets: [ticket 7397], [ticket 9434], [ticket 13106], [ticket 13418]
    * GitHub Issues: [github test 133], [github test 138], [github test 141], [github test 157], 
      [github test 160], [github test 174], [github test 176], [github test 177], [github test 180],
      [github test 181], [github test 194], [github test 196], [github test 198], [github test 199], 
      [github test 202], [github test 203], [github test 204]
    * GitHub Pull Requests: [github_pr test 171], [github_pr test 172], [github_pr test 182], 
      [github_pr test 183], [github_pr test 184], [github_pr test 190], [github_pr test 195],
      [github_pr test 195], [github_pr test 197], [github_pr test 205]

* [phrase library..[@/libs/type_index/ TypeIndex]:]
  * Support for the GHS C++ compiler added (many thanks to Brandon Castellano for providing the patch [github_pr type_index 28])
  * Optimized string and type comparisons (many thanks to Andrey Semashev for providing the patch [github_pr type_index 23])
  * Fixed clang-win compilation (many thanks to Peter Dimov for providing the patch [github_pr type_index 25])
  * CI hardening.

* [phrase library..[@/libs/type_traits/ TypeTraits]:]
  * Added is_bounded_array and is_unbounded_array (Glen Fernandes).
  * Added copy_reference and copy_cv_ref (Glen Fernandes).
  * Improved support for msvc with /clr option.
  * Misc compiler compatibility fixes.

* [phrase library..[@/libs/variant/ Variant]:]
  * Many cleanups and internal improvements, many thanks to Nikita Kniazev ([github_pr variant 55], [github_pr variant 56], [github_pr variant 57]) and Louis Dionne ([github_pr variant 51])
  * CI hardening.


* [phrase library..[@/libs/numeric/ublas/ uBlas]:]
  * Addition of tensor framework (many thanks to Cem Bassoy [github_pr ublas 65])
  * Addition of basic OpenCL support (many thanks to Fady Essam [github_pr ublas 59])
  * Integration of basic benchmark suite (many thanks to Stefan Seefeld [github_pr ublas 57])  
  * CI integration and hardening


[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Clang: 3.0, 4.0.1, 6.0.1
  * Clang, C++0x: 3.0
  * Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
  * Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0
  * Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
  * GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
  * GCC, C++0x: 4.4.7
  * GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
  * GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
  * GCC, C++17: 7.3.0, 8.0.1
  * Intel, C++14: 18.0
* OS X:
  * Apple Clang: 9.0.0, 9.1.0, 10.0.0
  * Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
  * Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
  * Apple Clang, C++17: 9.1.0, 10.0.0
  * Apple Clang, C++1z: 9.0.0
  * Apple Clang, C++2a: 10.0.0
* Windows:
  * GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
  * GCC, C++0x: 4.6.4
  * GCC, C++11: 4.7.3, 4.8.1, 4.9.3
  * GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
  * GCC, C++17: 7.1.0, 7.2.0, 7.3.0
  * Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
* FreeBSD:
  * Clang: 4.0.0
  * Clang, C++11: 4.0.0
  * Clang, C++14: 4.0.0
  * Clang, C++1z: 4.0.0

Boost's additional test compilers include:

* Linux:
  * Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
  * Clang, C++0x: 3.0
  * Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
  * Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2, 6.0.1, 7.0.0, 8.0.0
  * Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
  * GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
  * GCC, C++0x: 4.4.7
  * GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
  * GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
  * GCC, C++17: 7.3.0, 8.0.1
  * Intel, C++14: 18.0
* OS X:
  * Apple Clang: 9.0.0, 9.1.0, 10.0.0
  * Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
  * Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
  * Apple Clang, C++17: 9.1.0, 10.0.0
  * Apple Clang, C++1z: 9.0.0
  * Apple Clang, C++2a: 10.0.0
* Windows:
  * GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
  * GCC, C++0x: 4.6.4
  * GCC, C++11: 4.7.3, 4.8.1, 4.9.3
  * GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
  * GCC, C++17: 7.1.0, 7.2.0, 7.3.0
  * Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
* FreeBSD:
  * Clang: 4.0.0
  * Clang, C++11: 4.0.0
  * Clang, C++14: 4.0.0
  * Clang, C++1z: 4.0.0

[endsect]

[section Acknowledgements]

Daniel James, Vladimir Prus, Marshall Clow and Michael Caisse managed this release.

[endsect]
