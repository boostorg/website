[article Version 1.70.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* /TODO/

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * `shared_ptr` is movable and supports aliasing ([ticket 1234]).
]

* [phrase library..[@/libs/beast/ Beast]:]
  [role red [*BIG Update!]] The
    [link beast.quickref [*reference]] shows a star [role green \u2605] next to each new item.
  * [*Beast needs your help!]
    * [@https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast [*Tell Us]]
      how you or your company use Beast.
    * Please
      [@https://github.com/boostorg/beast/issues/new report]
      any bugs, feature requests, or general feedback.
    * Chat with us at the [*#beast] and [*#boost] channels in the
      [@https://cppalliance.org/slack/ [*C++ Slack Workspace]].
    * Don't forget to \u2b50 \u2b50 \u2b50 
      [@https://github.com/boostorg/beast [*star the repository]]
      \u2b50 \u2b50 \u2b50 !
  * [role green [*More tutorials]], code like the pros!
    * [link beast.using_io.asio_refresher Networking Refresher] teaches you from the ground up.
    * Updated [link beast.using_io.writing_composed_operations.echo Asynchronous Echo] example
    * Updated [link beast.using_io.writing_composed_operations.detect_ssl [*Detect SSL Handshake]],
      now a [link beast.ref.boost__beast__async_detect_ssl public api]!
    * [@../../example/websocket/server/chat-multi websocket-chat-multi]
      threaded chat server with a JavaScript browser client.
  * [link beast.ref.boost__beast__basic_stream `basic_stream`] and
    [link beast.ref.boost__beast__basic_stream `tcp_stream`] offer:
    * Timeouts:
      [link beast.ref.boost__beast__basic_stream.async_read_some `async_read_some`],
      [link beast.ref.boost__beast__basic_stream.async_write_some `async_write_some`]
      complete with
      [link beast.ref.boost__beast__error `error::timeout`] on expiration!     
    * Traffic-shaping policies
      [link beast.ref.boost__beast__simple_rate_policy `simple`] and
      [link beast.ref.boost__beast__unlimited_rate_policy `unlimited`],
      or a user-defined
      [link beast.concepts.RatePolicy ['RatePolicy]]!
    * Put the strand directly on the socket using
      [@http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1322r0.html P1322R0],
      no more `bind_executor` at call sites!
  * Base classes
    [link beast.ref.boost__beast__async_op_base `async_op_base`] and
    [link beast.ref.boost__beast__stable_async_op_base `stable_async_op_base`]
    handle all composed operation boilerplate for you.
  * [link beast.ref.boost__beast__ssl_stream `ssl_stream`] provides a
    movable, assignable SSL stream with a flat write optimization.
  * All asynchronous operations use Asio's
    [@boost:/doc/html/boost_asio/reference/async_initiate.html `async_initiate`]
    for efficient integration with Coroutines TS.
  * \u26a1 [*['faster compilation]], define `BOOST_BEAST_SPLIT_COMPILATION` and include
    [@../../include/boost/beast/src.hpp src.hpp] in one of your .cpp files!
  * See the full [link beast.release_notes [*Release Notes]] for a complete list
    of changes.

* [phrase library..[@/libs/filesystem/ Filesystem]:]
  * Fixed a few instances of dereferencing `std::string::end()` in `path` implementation.
  * Fixed program termination in case of out of memory condition in directory iterators constructors and operations accepting a reference to `error_code`. ([github filesystem 58])
  * Fixed possible linking errors caused by missing definitions of static members of `path`. ([ticket 12759])
  * Fixed possible use of uninitialized data in directory iterator increment operation on Linux.
  * Added support for movability to directory iterators.
  * Added file status query overloads for `directory_entry`. This avoids a relatively expensive OS query when file status is requested for a result of dereferencing a directory iterator. ([github_pr filesystem 55])
  * Reworked `current_path` and `read_symlink` implementation to avoid possible memory exhaustion on broken or tampered with filesystems. The functions now have an internal limit of the path size they will accept from the OS, which is currently 16 MiB.
  * Increased the size of the internal buffer used by `copy_file`.

* [phrase library..[@/libs/integer/ Integer]:]
  * Added Extended Euclidean Algorithm and Modular Multiplicative Inverse function. (Nick Thompson, [github_pr integer 11])

* [phrase library..[@/libs/log/ Log]:]
  * New features:
    * Added support for generating another log file name before collecting the file in the text file sink backend. This allows to combine appending to an existing log file with timestamps and file counters in log filenames, and, consequently, file collection in general.
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.

* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * `size_type` and `difference_type` are now defined as the allocator's same-named types.
    This will not make any difference in the vast majority of cases, but allows for some
    degree of control of resulting internal structures via user-defined allocator types
    (see issue [github multi_index 17] for motivation). For the moment being, this change
    is not documented in the reference section (i.e., it has semi-official status). 
  * Maintenance work.
* [phrase library..[@/libs/poly_collection/ PolyCollection]:]
  * Improved handling of stateful allocators and allocator propagation traits,
    after an error reported by Billy O'Neal ([github_pr poly_collection 9]).
  * Fixed a potentially serious bug with an internal cache structure.

* /TODO/

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
