[article Version 1.71.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* [phrase library..[@/libs/variant2/ Variant2]:] A never-valueless, strong guarantee
  implementation of `std::variant`, from Peter Dimov.

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* /TODO/

* [phrase library..[@/libs/core/ Core]:]
  * Added `boost/core/alloc_construct.hpp` header, which provides a set of functions for allocator aware and exception safe construction and destruction of objects and arrays. (Glen Fernandes)
  * Added `boost/core/first_scalar.hpp` header, which provides the `first_scalar` function for obtaining a pointer to the first scalar element of an array. Given a pointer of type `T*` they return a pointer of type `remove_all_extents_t<T>*`. (Glen Fernandes)
  * Added `boost/core/noinit_adaptor.hpp` header, providing `noinit_adaptor` class template, that converts any allocator into one whose `construct(ptr)` performs default initialization via placement new, and whose `destroy(ptr)` invokes `value_type` destructor directly. (Glen Fernandes)
  * Added `boost/core/default_allocator.hpp` header, providing `default_allocator` class template, which can serve as a minimal default allocator that has interface similar to C++20 `std::allocator`, supports configurations with disabled exceptions and does not have `std` as an associated namespace. The allocator uses `operator new`/`operator delete` for allocating memory. (Glen Fernandes)
  * In `boost/core/uncaught_exceptions.hpp` header, added workarounds for better compatibility with QNX SDP 7.0 when libc++/libc++abi libraries are used. (Andrey Semashev, [github core 59])
  * The `boost/detail/sp_typeinfo.hpp` header is now marked as deprecated and will be removed in a future release. `boost/core/typeinfo.hpp` should be used instead. (Peter Dimov)

* [phrase library..[@/libs/dynamic_bitset/ Dynamic Bitset]:]
  * Enabled hardware-assisted popcount on MSVC ([github_pr dynamic_bitset 38]).
  * Added support for boost::hash and std::hash ([github_pr dynamic_bitset 45]).
  * Support copy-initialization with default constructor ([github_pr dynamic_bitset 48]).

* [phrase library..[@/libs/endian/ Endian]:]
  * Clarified requirements on the value type template parameter
  * Added support for `float` and `double`
  * Added `endian_load`, `endian_store`
  * Updated `endian_reverse` to correctly support all non-`bool` integral types
  * Moved deprecated names to the deprecated header `endian.hpp`

* [phrase library..[@/libs/filesystem/ Filesystem]:]
  * Fixed incorrect `error_code` returned from directory iterator increment when `readdir_r` is used.
  * For `path`, fixed rvalue-aware `operator/` return type to return an rvalue instead of rvalue reference. This fixes leaving a dangling reference in the user's code if the result of `operator/` is bound to a const reference. ([github filesystem 110])
  * Fixes for better compatibility with Windows CE. ([github_pr filesystem 24])
  * Added minimal support for CMake. ([github_pr filesystem 106])

* [phrase library..[@/libs/flyweight/index.html Flyweight]:]
  * Maintenance work.

* [phrase library..[@/libs/iostreams/ IoStreams]:]
  * Fixed processing of multi-stream files ([github_pr iostreams 87]).
  * Added support for multi-threaded LZMA ([github_pr iostreams 95]).

* [phrase library..[@/libs/log/ Log]:]
  * New features:
    * Improved support for C++17 `std::string_view` in `basic_formatting_ostream`. The string view can now participate in character code conversion on output.
    * Added `auto_newline` formatter and stream manipulator. It can be used to ensure that formatted output always ends with a newline while avoiding duplicate newlines.
    * In the output stream, text file and text multi-file sink backends added support for configuring behavior with regard to appending a trailing newline to every formatted log record. Use `auto_newline_mode` named parameter of the backend constructor or call the `set_auto_newline_mode` method on the sink backend.
    * [*Note:] The default behavior with regard to trailing newlines added by sink backends has changed slightly compared to the previous Boost.Log releases. The backends will now only add a trailing newline if there isn't one in the formatted log message string already. In previous releases a newline was added unconditionally.
    * Added support for passing arbitrary function objects in the `filter` and `format` named parameters to sink constructors and convenience functions for initializing sinks. For example, it is now possible to specify C++11 lambda functions directly in these parameters. ([github log 63])
    * In the default filter and formatter factories used in filter and formatter parsers, added support for severity level attribute values of type `boost::log::trivial::severity_level`. For filters, the support is limited to attributes with "Severity" name.
  * Bug fixes:
    * Fixed incorrect parsing of components of the rotated file names while scanning for files in the text file sink backend. If the file name pattern ended with a placeholder (for example, a file counter), the `scan_for_files` method would not find files matching that pattern in the target storage, leaving them unmanaged. In particular, such files would not be deleted to free target storage. ([github log 78])
    * Updated `basic_formatting_ostream` and `basic_record_ostream` to make it possible to overload stream output operators for pointers to user-defined types. User-defined `operator<<` overloads taking `std::basic_ostream` and a pointer argument should now be picked up by the compiler when the pointer is being written to one of Boost.Log streams. ([github log 84])
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.

* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * Added [@/libs/multi_index/doc/tutorial/key_extraction.html#x_mem_fun variants of `const_mem_fun` and `mem_fun`]
    for differently qualified member functions
    (issue [github multi_index 24]). 
  * Terse [@/libs/multi_index/doc/reference/key_extraction.html#key `key`]
    specification syntax now correctly handles `noexcept`-specified member functions
    (issue [github multi_index 24]). 

* [phrase library..[@/libs/parameter/doc/html/index.html Parameter]:]
  * Upgraded keyword generation macro `BOOST_PARAMETER_TEMPLATE_KEYWORD`
    ([github_pr parameter 15]).
  * Moved keyword generation macro `BOOST_PARAMETER_NESTED_KEYWORD` from
    [@/libs/accumulators/doc/html/index.html Accumulators] to this library
    ([github_pr parameter 28]).
  * Added support for `std::reference_wrapper` and `std::ref()`
    ([github_pr parameter 16]).
  * Moved `boost::parameter::required`, `boost::parameter::optional`, and
    `boost::parameter::deduced` metafunction definitions to their own header
    files in directory boost/parameter ([github_pr parameter 18]).
  * Added support for Boost.[@/libs/parameter/doc/html/index.html
    Parameter]-enabled function call operators ([github_pr parameter 20]).
  * Added support for parameter category qualifiers "forward", "consume", and
    "move_from" (current qualifiers are "in", "out", and "in_out")
    ([github_pr parameter 21]) ([github_pr parameter 23]) based on
    [@http://www.modernescpp.com/index.php/c-core-guidelines-how-to-pass-function-parameters].
    Added new usage syntax `BOOST_PARAMETER_NAME((object-name), namespace-name) qualifier(tag-name))`
    and `BOOST_PARAMETER_NAME(qualifier(name))`.  (Existing code that uses
    qualifiers directly and correctly with `BOOST_PARAMETER_FUNCTION` and
    other code generation macros should remain unaffected for now, so no
    breaking changes.)  The reason for the change in usage is to enable
    applying of parameter category constraints to
    Boost.[@/libs/parameter/doc/html/index.html Parameter]-enabled functions
    and constructors invoked through argument composition.  (Otherwise, it is
    currently possible to use argument composition to bypass parameter
    category constraints applied in `BOOST_PARAMETER_FUNCTION` et. al.)
  * Added support for perfect forwarding ([github_pr parameter 23])
    ([github_pr parameter 26]), so that `parameter::parameters::operator()`
    can accept non-`const` rvalues.  As a positive side effect,
    Boost.[@/libs/parameter/doc/html/index.html Parameter]-enabled functions
    and constructors are no longer bound by `BOOST_PARAMETER_MAX_ARITY` on
    compilers that support perfect forwarding.  User code can now check for
    this support by detecting the configuration macro
    `BOOST_PARAMETER_HAS_PERFECT_FORWARDING`, or manually turn off this
    support by defining the configuration macro
    `BOOST_PARAMETER_DISABLE_PERFECT_FORWARDING`.
  * Added metafunctions `boost::parameter::is_argument_pack` ([github_pr parameter 27]),
    `boost::parameter::are_tagged_arguments` ([github_pr parameter 52]), and
    `boost::parameter::result_of::compose` ([github_pr parameter 75]).
  * Added variadic function template `boost::parameter::compose()` which takes
    in named arguments and returns them in an argument pack
    ([github_pr parameter 52]).  For compilers that do not support perfect
    forwarding, the configuration macro `BOOST_PARAMETER_COMPOSE_MAX_ARITY`
    determines the maximum number of arguments that
    `boost::parameter::compose()` can take in ([github_pr parameter 61]).
  * Added code generation macros
    `BOOST_PARAMETER_BASIC_FUNCTION_CALL_OPERATOR`,
    `BOOST_PARAMETER_BASIC_CONST_FUNCTION_CALL_OPERATOR`,
    `BOOST_PARAMETER_NO_SPEC_FUNCTION`,
    `BOOST_PARAMETER_NO_SPEC_MEMBER_FUNCTION`,
    `BOOST_PARAMETER_NO_SPEC_CONST_MEMBER_FUNCTION`,
    `BOOST_PARAMETER_NO_SPEC_FUNCTION_CALL_OPERATOR`,
    `BOOST_PARAMETER_NO_SPEC_CONST_FUNCTION_CALL_OPERATOR`,
    `BOOST_PARAMETER_NO_SPEC_CONSTRUCTOR`, and
    `BOOST_PARAMETER_NO_SPEC_NO_BASE_CONSTRUCTOR` ([github_pr parameter 52]).
  * Added support for Boost.[@/libs/mp11/doc/html/mp11.html MP11]
    ([github_pr parameter 47]) ([github_pr parameter 66])
    ([github_pr parameter 70]).  User code can now check for this support by
    detecting the configuration macro `BOOST_PARAMETER_CAN_USE_MP11`, or
    manually turn off this support by defining the configuration macro
    `BOOST_PARAMETER_DISABLE_MP11_USAGE`.
  * Improved support for parameter-dependent return types via SFINAE
    ([github_pr parameter 73]).

* [phrase library..[@/libs/poly_collection/ PolyCollection]:]
  * Maintenance work.
    
* [phrase library..[@/libs/smart_ptr/ SmartPtr]:]
  * Added aliasing constructors to `weak_ptr`
  * Added `weak_ptr<T>::empty()`
  * Added `enable_shared_from`, `shared_from`, and `weak_from`

* [phrase library..[@/libs/uuid/ Uuid]:]
  * [*Breaking change:] MD5 name-based uuid generation was corrected to be identical
    on all endian systems.  Define `BOOST_UUID_COMPAT_PRE_1_71_MD5` to keep the result
    in a format compatible with 1.66 through 1.70.  This does not affect the default
    name-based uuid generation which is based on SHA1. ([github_pr uuid 109])

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
