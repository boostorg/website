[article Version 1.74.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

* [phrase library..[@/libs/stl_interfaces/ STLInterfaces]:] A library of CRTP
  bases to ease the writing of STL views, iterators, and sequence containers,
  from Zach Laine.

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* /TODO/

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/beast/ Beast]:]
  * Accommodate upstream changes in Asio.
  * [github beast 1913] Fix standalone compilation error with std::string_view.
  * [github beast 1925] [1916] Fix compile errors on Visual Studio with /std:c++latest.
  * [github beast 1924] Fix c++20 deprecation warning in span_body.
  * [github beast 1920] Fix use buffered_read_stream with use_awaitable.
  * [github beast 1918] Fix async_detect_ssl with use_awaitable.
  * [github beast 1944] Fix FILE namespace qualification.
  * [github beast 1942] Fix http read bytes_transferred.
  * [github beast 1943] Fix basic_stream expires_after.
  * [github beast 1897] Parser body_limit is optional (API Change).
  * [github beast 1934] Remove deprecated interfaces (API Change).
  * [github beast 1956] Deprecate string_param (API Change).
  * [github beast 1980] Fix `max` compile error.
  * [github beast 1949] iless and iequal take part in Heterogeneous Lookup.

* [phrase library..[@/libs/bimap/ Bimap]:]
  * Correct allocator usage (fixes C++20 compilation). (Glen Fernandes)

* [phrase library..[@/libs/config/ Config]:]
  * Implement `BOOST_NO_CXX11_OVERRIDE` and `BOOST_OVERRIDE`. (Glen Fernandes)

* [phrase library..[@/libs/core/ Core]:]
  * Implemented the allocator access utilities which provide a replacement for
    `allocator_traits` with individual traits and functions for each facility.
    They support the C++11 allocator model when possible and provide a fallback
    for C++98 compatibility. These are now used in Circular_Buffer, Wave,
    Lockfree, Heap, Smart_Ptr, Dynamic_Bitset, Format, Bimap and more.
    (Glen Fernandes)

* [phrase library..[@/libs/endian/ Endian]:]
  * Enabled scoped enumeration types in `endian_reverse`.
  * Enabled `bool`, `enum`, `float`, `double` in `endian_reverse_inplace`.
  * Added an overload of `endian_reverse_inplace` for arrays.

* [phrase library..[@/libs/flyweight/index.html Flyweight]:]
  * Maintenance work.

* [phrase library..[@/libs/format/ Format]:]
  * Correct allocator usage (fixes C++20 compilation). (Glen Fernandes)
  
* [phrase library..[@/libs/heap/ Heap]:]
  * Correct destruction of top node in `skew_heap`. (Glen Fernandes)
  * Correct and simplify allocator use. (Glen Fernandes)

* [phrase library..[@/libs/mp11/ Mp11]:]
  * Improved compilation performance of `mp_with_index<N>` for large `N`.
  * Added `tuple_transform` (contributed by Hans Dembinski.)
  
* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * Added [@/libs/multi_index/doc/tutorial/basics.html#node_handling node extraction and insertion]
    following the analogous interface of associative containers as introduced in C++17.
    This feature has also been extended to non key-based indices, in contrast to C++
    standard library sequence containers, which do not provide such functionality.
  * Clarified documentation on read/write key extractors (issue [github multi_index 32]).
  * Maintenance work.

* [phrase library..[@/libs/nowide/ Nowide]:]
  * The library now requires a C++11-compliant compiler and stdlib
  * LFS: Add support for files > 2 GB where the underlying system supports it
  * Generic UTF conversion functions are now available in the `boost::nowide::utf namespace`
  * Add support for `stat` with UTF-8 paths

* [phrase library..[@/libs/poly_collection/ PolyCollection]:]
  * Fixed internal ambiguity problem between `boost::type_erasure::any` and
    `boost::any` (issue [github poly_collection 17]).
  * Maintenance work.

* [phrase library..[@/libs/polygon/ Polygon]:]
  * C++20 fixed for `event_comparison_type`, `vertex_equality_predicate_type`,
    and `voronoi_predicates`. (Glen Fernandes)

* [phrase library..[@/libs/smart_ptr/ SmartPtr]:]
  * Added `owner_equals` to `shared_ptr`, `weak_ptr`, `local_shared_ptr`.
  * Added `owner_hash_value` to `shared_ptr`, `weak_ptr`.
  * Added `owner_equal_to`, `owner_hash`.
  * Added `std::hash` specializations for `shared_ptr`, `local_shared_ptr`.
  * Added `boost::hash` support to, and `std::hash`, `std::equal_to`
    specializations for, `weak_ptr`.

* [phrase library..[@/libs/system/ System]:]
  * `operator bool()` now returns `failed()` instead of `value() != 0`.

* [phrase library..[@/libs/type_traits/ Type_Traits]:]
  * Implemented `conjunction`, `disjunction`, `negation`,
    `is_trivially_copyable`, `is_scoped_enum`, and `is_unscoped_enum`.
    (Glen Fernandes)

* [phrase library..[@/libs/variant2/ Variant2]:]
  * Added support for derived types in `visit`.
  * Improved compilation performance for many (hundreds of) alternatives.
  * Added support for `visit<R>`.

* [phrase library..[@/libs/wave/ Wave]:]
  * Implement C++20 features for variadics, including `__VA_OPT__` ([github_pr wave 75])
  * Implement `__has_include` ([github_pr wave 102])
  * Introduce new sample: `check_macro_naming`, useful with Boost itself ([github_pr wave 97])
  * Fix compilation issue caused by `std::allocator` member removal in C++20 ([github_pr wave 72])
  * Repair Xpressive lexer and `token_statistics` sample ([github_pr wave 79])
  * Repair lexertl lexer ([github_pr wave 78])
  * Ensure hooks are run on predefined macros as well ([github_pr wave 87])
  * Various minor bug fixes
  * C++98/03 support is now deprecated and will be removed in 1.77

* [phrase library..[@/libs/yap/ YAP]:]
  * Fixed compilation errors for placeholders; they now work in the general case,
    and in particular work with yap::print().
  * constexpr all the YAP.
  * Fix printing of correct value category in yap::print().
  * Doc clarification.

* /TODO/

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/boostbook/ Boostbook]:]
  * Change encoding of generated documentation from US-ASCII to UTF-8.
    (Glen Fernandes)

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
