[article Version 1.76.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        Updated Libraries: Asio, Atomic, Beast, Bind, Container, Core, DLL,
        Filesystem, GIL, Intrusive, Interprocess, JSON, LexicalCast, Log, Math,
        Move, Multiprecision, Nowide, Optional, Outcome, Parameter, PFR,
        PolyCollection, Predef, PropertyTree, Regex, StackTrace, TypeTraits,
        Variant2.
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* No new libraries

[endsect]

[section Updated Libraries]

* [phrase library..[@/libs/asio/ Asio]:]
  * Added `ip::scope_id_type` type alias.
  * Added `ip::port_type` type alias.
  * Added `std::hash` specialisations for IP addresses.
  * Added `std::hash` specialisations for `ip::basic_endpoint<>`.
  * Refactored SFINAE usage to improve compile times.
  * Added friendship support to customisation points, and made most customisations private.
  * Changed `any_io_executor` to a "strong typedef"-style class.
  * Fixed `experimental::as_single` to work with handler hook deprecation.
  * Ensured pthread condition variable attributes are cleaned up on all platforms.
  * Clarified thread safety notes on sockets and descriptors.
  * Ensured `errno` is not overwritten if `socket()` fails on macOS/FreeBSD.
  * Fixed work tracking for `io_context` and `thread_pool` executors when move-assigned.
  * Ensured internal `call_stack` objects are accessed only from implementation files.
  * Fixed I/O object move-assignment to ensure the executor is left in a valid state.
  * Fixed detection of compiler support for defaulted template argument on functions with MSVC.
  * Prevented the `blocking.always` property from being used with `strand<>`, as it
    did not produce the correct semantics.
  * Removed deprecated file [^asio/impl/src.cpp].

* [phrase library..[@/libs/atomic/ Atomic]:]
  * Fixed compilation with MSVC for ARM. ([github_pr atomic 49])

* [phrase library..[@/libs/beast/ Beast]:]
  * This update brings minor bug fixes and revamped CI reporting.
  * We'd love to know how you or your company use Beast, consider adding an
    entry to the
    [@https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast Companies and Individuals Using Beast]
    list.
  * See the full
    [@/libs/beast/doc/html/beast/release_notes.html Release Notes]
    for a complete list of changes.

* [phrase library..[@/libs/bind/ Bind]:]
  * Add support for using the standard C++11 placeholders with `boost::bind`.
  * Update `boost::apply` to use variadic templates and perfect forwarding.

* [phrase library..[@/libs/continer/ Container]:]
  * Added [[no-discard]] attribute in all containers to catch bugs related to unused return values.
  * Replaced default standard exception classes with Boost.Container own classes, reducing considerably the included files overhead.
    Example: in MSVC 19 `boost/container/vector.hpp` preprocessed file size reduces from 1,5MB to 930KB. If you still want to use
    standard exception classes, you can define `BOOST_CONTAINER_USE_STD_EXCEPTIONS` before using any Boost.Container class.
  * Fixed bugs/issues:
    * [@https://github.com/boostorg/container/issues/102    GitHub #102: ['"flat_map::insert ambiguous with initializer list & pairs that need to convert"]].
    * [@https://github.com/boostorg/container/issues/139    GitHub #139: ['"flat_map merge and iterators"]].
    * [@https://github.com/boostorg/container/issues/141    GitHub #141: ['"small_vector does not propagate no throw properties of move operation of contained type"]].
    * [@https://github.com/boostorg/container/issues/164    GitHub #164: ['"Compile error when using `pmr::map` with a `std::pair`; works when using a `std::tuple`"]].
    * [@https://github.com/boostorg/container/issues/171    GitHub #171: ['"deque::clear() uses undefined behaviour"]].

* [phrase library..[@/libs/core/ Core]:]
  * Add implicit conversion between compatible reference wrappers.
  * Add `boost/core/cmath.hpp`, a portable implementation of the floating point
    classification functions from `<cmath>`.
  * Add `boost/core/bit.hpp`, a portable implementation of the C++20 standard header
    `<bit>`.
  * Fix `BOOST_TEST_EQ`, `BOOST_TEST_NE` for character types under C++20.
  * Revise allocator access utilities (now support VS2013, and no workarounds use
    `allocator_traits`.)

* [phrase library..[@/libs/dll/ DLL]:]
  * [*BREAKING CHANGE]: `boost::dll::import` was renamed to `boost::dll::import_symbol` to avoid collision with C++20 `import` keyword.
  * Updated docs, including FAQ section.

* [phrase library..[@/libs/filesystem/ Filesystem]:]
  * Updated compatibility with WASI platform. ([github_pr filesystem 169])
  * Fixed an exception being thrown by `path::remove_filename` if the path is "////". ([github filesystem 176])
  * Fixed `create_directories` disregarding errors from file status query operations issued internally. This could result in incorrect error codes returned by `create_directories`. ([github filesystem 182])

* [phrase library..[@/libs/geometry/ Geometry]:]
  * Improvements
    * [github_pr geometry 670] New IOs to_wkt() and from_wkt() (thanks to Baidyanath Kundu).
    * [github_pr geometry 756] Non cartesian and robust convex hulls.
    * [github_pr geometry 768] Umbrella strategies for relops, setops, index, buffer and more (undocumented for now).
    * [github_pr geometry 797] New azimuth() algorithm.
    * [github_pr geometry 801] Improved accuracy in geographic area computations.
    * [github_pr geometry 820] Parameter scale added to svg_mapper.
  * Bugfixes
    * [github_pr geometry 808] Fixed compilation error with rtree serialization enabled (thanks to Tristan Carel).
    * [github_pr geometry 815] Fixed issue in buffer().
    * Various fixes in set operations and buffer.
  * Breaking changes
    * Removed strategy convex_hull::graham_andrew.

* [phrase library..[@/libs/gil/ GIL]:]
  * BREAKING: In next release, we are going to drop support for GCC 5.
    We will also change the required minimum C++ version from C++11 to C++14.

* [phrase library..[@/libs/histogram/ Histogram]:]
  * This release contains critical fixes, please check that your results are not affected.
  * See [@/libs/histogram/doc/html/histogram/history.html Release Notes] for details.

* [phrase library..[@/libs/intrusive/ Intrusive]:]
  * Reduced compile-time dependencies:
    * `linear_slist_algorithms` use a simple node_ptr instead of std::pair on return.
    * `list`/`slist` use `operator <`/`operator ==` instead of `std::equal_to`/`std::less`.
  * Fixed [@https://github.com/boostorg/intrusive/issues/54  GitHub #54: ['set.rbegin() looks like O(log(N))]]

* [phrase library..[@/libs/interprocess/ Interprocess]:]
  *  Added `wchar_t` API support for named resources in operating systems that offer native wide character API (e.g. Windows).
     The following classes were updated with `wchar_t` name support:
    * `file_mapping`
    * `managed_mapped_file`
    * `managed_shared_memory`
    * `managed_windows_shared_memory`
    * `shared_memory_object`
    * `windows_shared_memory_object`
    * `file_lock`
    * `named_condition`
    * `named_condition_any`
    * `named_mutex`
    * `named_recursive_mutex`
    * `named_semaphore`
    * `named_sharable_mutex`
    * `named_upgradable_mutex`
    * `message_queue`
  * Added `BOOST_INTERPROCESS_FORCE_NATIVE_EMULATION` macro option to disable the use of generic emulation code for process
    shared synchronization primitives instead of native POSIX or Winapi functions.
  * Fixed bugs:
    * [@https://github.com/boostorg/interprocess/issues/76  GitHub #76  (['"Cygwin compilation errors"])].
    * [@https://github.com/boostorg/interprocess/pull/83    GitHub #83  (['"Add BOOST_INTERPROCESS_FORCE_NATIVE_EMULATION option"])].
    * [@https://github.com/boostorg/interprocess/pull/92    GitHub #92  (['"bufferstream: Correct MSVC compilation warning"])].
    * [@https://github.com/boostorg/interprocess/pull/106   GitHub #106 (['"Use fallocate on truncate_file"])].
    * [@https://github.com/boostorg/interprocess/issues/120 GitHub #120 (['"segment_manager customization"])].
    * [@https://github.com/boostorg/interprocess/issues/122 GitHub #122 (['"Mark constructors/assignment/swap noexcept where possible"])].
    * [@https://github.com/boostorg/interprocess/issues/126 GitHub #126 (['"_ReadWriteBarrier is deprecated warning when compiling with clang-cl.exe"])].

* [phrase library..[@/libs/json/ JSON]:]
  * [@https://cppalliance.org/pdf/C%20Plus%20Plus%20Alliance%20-%20Boost%20JSON%20Security%20Assessment%202020%20-%20Assessment%20Report%20-%2020210317.pdf Security Report] from Bishop Fox.
  * ([github json 481]) Refactored `value_from` implementation; user
    customizations are now always preferred over library-provided overloads.
  * ([github json 484]) Fix imprecise parsing for some floating point numbers.
  * ([github json 485]) Fix link errors in standalone mode, when used alongside Boost.
  * ([github json 497]) Fix Boost.Build builds on GCC 4.8.

* [phrase library..[@/libs/lexical_cast/ LexicalCast]:]
  * Dropped dependency on Boost.Math (thanks to Peter Dimov [github lexical_cast 37], [github lexical_cast 39]).
  * Fixes for the CI and coverage (thanks to  Sam Darwin from "The C++ Alliance" [github lexical_cast 38],  [github lexical_cast 42]).

* [phrase library..[@/libs/log/ Log]:]
  * Bug fixes:
    * Corrected a formal race condition in the thread-safe log record queue implementation used in the `unbounded_fifo_queue` policy of the `asynchronous_sink` frontend. The race could be detected by TSAN, but it was not a real problem on most current CPU architectures and compilers. ([github log 139])
    * When copying a logger with a channel attribute (e.g. `channel_logger`), the channel attribute is now deep-copied from the original logger. This means that modifying the channel in the new logger will no longer affect the original logger.
    * Replaced the use of `std::allocator<void>` in template parameters with a new tag type `boost::log::use_std_allocator` to silence libc++ warnings about the former being deprecated in C++17 and later. The tag indicates that the instantiated template should be using a specialization of `std::allocator` internally to allocate dynamic memory, so the change has no functional effect. ([github log 141])
    * Boost.Log no longer defines `__MSVCRT_VERSION__` macro on MinGW and MinGW-w64. Defining this macro caused incompatibility with UCRT, which is available as an option in recent MinGW-w64. ([github_pr log 149])
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.

* [phrase library..[@/libs/math/ Math]:]
  * [*Breaking Change:] C++03 support is now removed, a C++11 or later conformant compiler is now required to use this library.
  * Added [link math_toolkit.z_test Z-test].
  * Added execution policy support to univariate and bivariate statistics: enables parallel execution (requires C++17 and `<execution>`).
  * Big update/improvement on CI testing.
  * Bivariate statistics now have integer support.
  * T-Test now has integer support.
  * Linear regression now has integer support.
  * Correct PDF of the beta distribution at the endpoints.
  * Correct use of Stirling's approximation in certain multiprecision cases, fixes [@https://github.com/boostorg/math/issues/396 #396].
  * Eliminate -Wimplicit-int-float-conversion on clang.
  * Fix some constexpr issues in quaternion/octonion.
  * Minor performance fix to tanh_sinh integration.
  * Update hypergeometric functions internal scaling to allow for 64-bit (long long) exponents with multiprecision types.

* [phrase library..[@/libs/move/ Move]:]
   * [@https://github.com/boostorg/move/issues/35 Git Issue #35: ['"New nothrow move traits are incomplete"]].

* [phrase library..[@/libs/multiprecision/ Multiprecision]:]
  * [*BREAKING CHANGE]: Massive refactoring and code simplification makes C++11 an absolute requirement.
  * Use BOOST_TRY/CATCH in headers so code can be used in exception-free environments.
  * Correct corner case in pow, fixes [@https://github.com/boostorg/multiprecision/issues/277 #277]. 
  * Correct exception type thrown to match docs in lsb/msb: fixes [@https://github.com/boostorg/multiprecision/issues/257 #257].
  * Allow moves and operators between related but different types (ie types with the same allocator), fixes [@https://github.com/boostorg/multiprecision/issues/278 #278].

* [phrase library..[@/libs/nowide/ Nowide]:]
  * Fix discarding of characters for text file streams when seek or sync functions are used and newlines were converted (e.g. on Windows)
  * Fix potential use-after-free bug when reusing (via `open`) a file stream that has been closed
  * Fix potential invalid memory access when using a file stream that has been moved or swapped to where the source had a put-back character or was set to unbuffered mode
  * Fix compatibility with ucrt runtime by not defining `__MSVCRT_VERSION__`
  * Known issues: Read performance for text files is degraded. Binary files and writing is unaffected.

* [phrase library..[@/libs/optional/ Optional]:]
  * Fixed MSVC warning C4702.
  
* [phrase library..[@/libs/outcome/ Outcome]:]
  * Announcements:
    * BREAKING CHANGE: After a year and three major Boost releases announcing this upcoming change, this is the FIRST RELEASE of the v2.2 branch. This branch has a number of major breaking changes to the Outcome v2.1 which shipped in Boost 1.75 and earlier, see the documentation for details.
  * Enhancements:
    * VS2019.8 changed how to enable Coroutines, which caused Outcome to not compile on that compiler.
    * If on C++ 20, we now use C++ 20 `[[likely]]` instead of compiler-specific markup to indicate when TRY has likely success or failure.
    * BREAKING CHANGE: Previously the value of `spare_storage(const basic_result|basic_outcome *) noexcept` was not propagated over `BOOST_OUTCOME_TRY`, which causes things like stack backtraces captured at the point of construction of an errored result to get dropped at every `TRY` point. This has been fixed by adding an optional `spare_storage` to `success_type<T>` and `failure_type<T>`, as well as to `auto success(T &&, ...)` and `auto failure(T &&, ...)`.
  * Bug fixes:
    * Boost.Outcome should now compile with `BOOST_NO_EXCEPTIONS` defined. Thanks to Emil, maintainer of Boost.Exception, making a change for me, Boost.Outcome should now compile with C++ exceptions globally disabled. You won't be able to use `boost::exception_ptr` as it can't be included if C++ exceptions are globally disabled.
    * BREAKING CHANGE [@https://github.com/ned14/outcome/issues/244 #244] It came as a shock to learn that `BOOST_OUTCOME_TRY` had been broken since the inception of this library for certain corner case code, which required a breaking change in how TRY works. See [@https://boostorg.github.io/outcome/changelog.html the changelog in the documentation for more detail].

* [phrase library..[@/libs/parameter/ Parameter]:]
  * Added a workaround for MSVC 2015 code miscompilation when an rvalue was used as a default value of a named parameter of a function. ([github_pr parameter 109], [github log 132])

* [phrase library..[@/libs/pfr/ PFR]:]
  * Fixed reflection of types with missing `const` in SFINAE expressions in template constructor. Now reflection of aggregates with `std::optional<std::chrono::duration<???>>` fields works on any Standard Library implementation, even if LWG3050 is not fixed.
  * Comparison functions are now `constexpr` [github pfr 52]
  * Fixed numerous typos in docs (thanks to Phil Miller [github pfr 63])

* [phrase library..[@/libs/poly_collection/ PolyCollection]:]
  * Worked around [@https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95888 GCC bug]
    affecting GCC versions 9.3-10.2 (issue [github poly_collection 20]).

* [phrase library..[@/libs/predef/ Predef]:]
  * Version 1.13
  * Add `ARCH_PPC_64` predef.
  * Fix `ARCH_WORD_BITS*` redefinition warnings/errors.
  * Add `ARCH_E2K`, Elbrus 2000, architecture from Konstantin Ivlev.
  * Fix not handling recent C++ version that go above 10.x version.
  * Version 1.12
  * Switch to using the endian.h header on OpenBSD. (Brad Smith)
  * Fix not handling recent versions of stdcxx that go above version 9.
  * Fix including sub-BSD OS headers directly causing redef warnings.
  * Add CI testing of direct inclusion of all headers.
  * Add CI testing on FreeBSD for clang and gcc.
  * Add `WORD_BITS` set of predefs to detect the architecture word size.
    Initial implementation inspired by submission from Mikhail Komarov.
  * Add CI testing for Cygwin 32 and 64.

* [phrase library..[@/libs/property_tree/ PropertyTree]:]
  * Property Tree has a new maintainer.
  * Fix usage of deprecated Boost.Bind features.
  * Link to Wikipedia fixed.
  * Use BOOST_OVERRIDE to fix GCC warnings.
  * Add extensive CI testing.

* [phrase library..[@/libs/regex/ Regex]:]
  * Regex is now header only except in C++03 mode.
  * Support for C++03 is now deprecated.
  * The library can now be used "standalone" without the rest of Boost being present.

* [phrase library..[@/libs/stacktrace/ Stacktrace]:]
  * Better support for pre-C++11 builds on clang [github stacktrace 102].
  * Bigger warning for [*do not use boost::stacktrace::stacktrace in signal handlers] [github stacktrace 71].
  
* [phrase library..[@/libs/type_traits/ TypeTraits]:]
  * Fix for Visual Studio managed code projects.

* [phrase library..[@/libs/variant2/ Variant2]:]
  * Improved generated code for the double buffered case.

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/build/ Build]:]
  * Includes release of [@/tools/build/doc/html/#_version_4_4_1 B2 version 4.4.1].

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Clang: 3.0, 4.0.1, 6.0.1
  * Clang, C++0x: 3.0
  * Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
  * Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
    6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
  * Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
  * GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
  * GCC, C++0x: 4.4.7
  * GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
  * GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
  * GCC, C++17: 7.3.0, 8.0.1
  * Intel, C++14: 18.0
* OS X:
  * Apple Clang: 9.0.0, 9.1.0, 10.0.0, 11.0.0
  * Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0, 11.0.0
  * Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0, 11.0.0
  * Apple Clang, C++17: 9.1.0, 10.0.0, 11.0.0
  * Apple Clang, C++1z: 9.0.0
  * Apple Clang, C++2a: 10.0.0, 11.0.0
* Windows:
  * GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
  * GCC, C++0x: 4.6.4
  * GCC, C++11: 4.7.3, 4.8.1, 4.9.3
  * GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
  * GCC, C++17: 7.1.0, 7.2.0, 7.3.0
  * Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
* FreeBSD:
  * Clang: 4.0.0
  * Clang, C++11: 4.0.0
  * Clang, C++14: 4.0.0
  * Clang, C++1z: 4.0.0

Boost's additional test compilers include:

* Linux:
  * Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
  * Clang, C++0x: 3.0
  * Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
  * Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
    6.0.1, 7.0.0, 8.0.0
  * Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
  * GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
  * GCC, C++0x: 4.4.7
  * GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
  * GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
  * GCC, C++17: 7.3.0, 8.0.1
  * Intel, C++14: 18.0
* OS X:
  * Apple Clang: 9.0.0, 9.1.0, 10.0.0
  * Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
  * Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
  * Apple Clang, C++17: 9.1.0, 10.0.0
  * Apple Clang, C++1z: 9.0.0
  * Apple Clang, C++2a: 10.0.0
* Windows:
  * GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
  * GCC, C++0x: 4.6.4
  * GCC, C++11: 4.7.3, 4.8.1, 4.9.3
  * GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
  * GCC, C++17: 7.1.0, 7.2.0, 7.3.0
  * Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
* FreeBSD:
  * Clang: 4.0.0
  * Clang, C++11: 4.0.0
  * Clang, C++14: 4.0.0
  * Clang, C++1z: 4.0.0

[endsect]

[section Acknowledgements]

Marshall Clow, Michael Caisse and Glen Fernandes managed this release.

[endsect]
