[article Version 1.76.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* No new libraries

[endsect]

[section Updated Libraries]

* [phrase library..[@/libs/beast/ Beast]:]
  * This update brings minor bug fixes and revamped CI reporting.
  * We'd love to know how you or your company use Beast, consider adding an
    entry to the
    [@https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast Companies and Individuals Using Beast]
    list.
  * See the full
    [@/libs/beast/doc/html/beast/release_notes.html Release Notes]
    for a complete list of changes.

* [phrase library..[@/libs/bind/ Bind]:]
  * Add support for using the standard C++11 placeholders with `boost::bind`.
  * Update `boost::apply` to use variadic templates and perfect forwarding.

* [phrase library..[@/libs/dll/ DLL]:]
  * [*BREAKING CHANGE]: `boost::dll::import` was renamed to `boost::dll::import_symbol` to avoid collision with C++20 `import` keyword.
  * Updated docs, including FAQ section.

* [phrase library..[@/libs/gil/ GIL]:]
  * BREAKING: In next release, we are going to drop support for GCC 5.
    We will also change the required minimum C++ version from C++11 to C++14.

* [phrase library..[@/libs/json/ JSON]:]
  * [@https://cppalliance.org/pdf/C%20Plus%20Plus%20Alliance%20-%20Boost%20JSON%20Security%20Assessment%202020%20-%20Assessment%20Report%20-%2020210317.pdf Security Report] from Bishop Fox.
  * ([github json 481]) Refactored `value_from` implementation; user
    customizations are now always preferred over library-provided overloads.
  * ([github json 484]) Fix imprecise parsing for some floating point numbers.
  * ([github json 485]) Fix link errors in standalone mode, when used alongside Boost.
  * ([github json 497]) Fix Boost.Build builds on GCC 4.8.

* [phrase library..[@/libs/lexical_cast/ LexicalCast]:]
  * Dropped dependency on Boost.Math (thanks to Peter Dimov [github lexical_cast 37], [github lexical_cast 39]).
  * Fixes for the CI and coverage (thanks to  Sam Darwin from "The C++ Alliance" [github lexical_cast 38],  [github lexical_cast 42]).

* [phrase library..[@/libs/math/ Math]:]
  * [*Breaking Change:] C++03 support is now removed, a C++11 or later conformant compiler is now required to use this library.
  * Added [link math_toolkit.z_test Z-test].
  * Added execution policy support to univariate and bivariate statistics: enables parallel execution (requires C++17 and `<execution>`).
  * Big update/improvement on CI testing.
  * Bivariate statistics now have integer support.
  * T-Test now has integer support.
  * Linear regression now has integer support.
  * Correct PDF of the beta distribution at the endpoints.
  * Correct use of Stirling's approximation in certain multiprecision cases, fixes [@https://github.com/boostorg/math/issues/396 #396].
  * Eliminate -Wimplicit-int-float-conversion on clang.
  * Fix some constexpr issues in quaternion/octonion.
  * Minor performance fix to tanh_sinh integration.
  * Update hypergeometric functions internal scaling to allow for 64-bit (long long) exponents with multiprecision types.

* [phrase library..[@/libs/multiprecision/ Multiprecision]:]
  * [*BREAKING CHANGE]: Massive refactoring and code simpification makes C++11 an absolute requirement.
  * Use BOOST_TRY/CATCH in headers so code can be used in exception-free environments.
  * Correct corner case in pow, fixes [@https://github.com/boostorg/multiprecision/issues/277 #277]. 
  * Correct exception type thrown to match docs in lsb/msb: fixes [@https://github.com/boostorg/multiprecision/issues/257 #257].
  * Allow moves and operators between related but different types (ie types with the same allocator), fixes [@https://github.com/boostorg/multiprecision/issues/278 #278].

* [phrase library..[@/libs/outcome/ Outcome]:]
  * Announcements:
    * BREAKING CHANGE: After a year and three major Boost releases announcing this upcoming change, this is the FIRST RELEASE of the v2.2 branch. This branch has a number of major breaking changes to the Outcome v2.1 which shipped in Boost 1.75 and earlier, see the documentation for details.
  * Enhancements:
    * VS2019.8 changed how to enable Coroutines, which caused Outcome to not compile on that compiler.
    * If on C++ 20, we now use C++ 20 `[[likely]]` instead of compiler-specific markup to indicate when TRY has likely success or failure.
    * BREAKING CHANGE: Previously the value of `spare_storage(const basic_result|basic_outcome *) noexcept` was not propagated over `BOOST_OUTCOME_TRY`, which causes things like stack backtraces captured at the point of construction of an errored result to get dropped at every `TRY` point. This has been fixed by adding an optional `spare_storage` to `success_type<T>` and `failure_type<T>`, as well as to `auto success(T &&, ...)` and `auto failure(T &&, ...)`.
  * Bug fixes:
    * Boost.Outcome should now compile with `BOOST_NO_EXCEPTIONS` defined. Thanks to Emil, maintainer of Boost.Exception, making a change for me, Boost.Outcome should now compile with C++ exceptions globally disabled. You won't be able to use `boost::exception_ptr` as it can't be included if C++ exceptions are globally disabled.
    * BREAKING CHANGE [@https://github.com/ned14/outcome/issues/244 #244] It came as a shock to learn that `BOOST_OUTCOME_TRY` had been broken since the inception of this library for certain corner case code, which required a breaking change in how TRY works. See [@https://boostorg.github.io/outcome/changelog.html the changelog in the documentation for more detail].

* [phrase library..[@/libs/pfr/ PFR]:]
  * Fixed reflection of types with missing `const` in SFINAE expressions in template constructor. Now reflection of aggregates with `std::optional<std::chrono::duration<???>>` fields works on any Standard Library implementation, even if LWG3050 is not fixed.
  * Comparison functions are now `constexpr` [github pfr 52]
  * Fixed numerous typos in docs (thanks to Phil Miller [github pfr 63])

* [phrase library..[@/libs/poly_collection/ PolyCollection]:]
  * Worked around [@https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95888 GCC bug]
    affecting GCC versions 9.3-10.2 (issue [github poly_collection 20]).

* [phrase library..[@/libs/predef/ Predef]:]
  * Version 1.13
  * Add `ARCH_PPC_64` predef.
  * Fix `ARCH_WORD_BITS*` redefinition warnings/errors.
  * Add `ARCH_E2K`, Elbrus 2000, architecture from Konstantin Ivlev.
  * Fix not handling recent C++ version that go above 10.x version.
  * Version 1.12
  * Switch to using the endian.h header on OpenBSD. (Brad Smith)
  * Fix not handling recent versions of stdcxx that go above version 9.
  * Fix including sub-BSD OS headers directly causing redef warnings.
  * Add CI testing of direct inclusion of all headers.
  * Add CI testing on FreeBSD for clang and gcc.
  * Add `WORD_BITS` set of predefs to detect the architecture word size.
    Initial implementation inspired by submission from Mikhail Komarov.
  * Add CI testing for Cygwin 32 and 64.

* [phrase library..[@/libs/property_tree/ PropertyTree]:]
  * Property Tree has a new maintainer.
  * Fix usage of deprecated Boost.Bind features.
  * Link to Wikipedia fixed.
  * Use BOOST_OVERRIDE to fix GCC warnings.
  * Add extensive CI testing.

* [phrase library..[@/libs/regex/ Regex]:]
  * Regex is now header only except in C++03 mode.
  * Support for C++03 is now deprecated.
  * The library can now be used "standalone" without the rest of Boost being present.

* [phrase library..[@/libs/stacktrace/ Stacktrace]:]
  * Better support for pre-C++11 builds on clang [github stacktrace 102].
  * Bigger warning for [*do not use boost::stacktrace::stacktrace in signal handlers] [github stacktrace 71].
  
* [phrase library..[@/libs/type_traits/ Type Traits]:]
  * Fix for Visual Studio managed code projects.

* [phrase library..[@/libs/variant2/ Variant2]:]
  * Improved generated code for the double buffered case.

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/build/ Build]:]
  * Includes release of [@/tools/build/doc/html/#_version_4_4_1 B2 version 4.4.1].

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Clang: 3.0, 4.0.1, 6.0.1
  * Clang, C++0x: 3.0
  * Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
  * Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
    6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
  * Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
  * GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
  * GCC, C++0x: 4.4.7
  * GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
  * GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
  * GCC, C++17: 7.3.0, 8.0.1
  * Intel, C++14: 18.0
* OS X:
  * Apple Clang: 9.0.0, 9.1.0, 10.0.0, 11.0.0
  * Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0, 11.0.0
  * Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0, 11.0.0
  * Apple Clang, C++17: 9.1.0, 10.0.0, 11.0.0
  * Apple Clang, C++1z: 9.0.0
  * Apple Clang, C++2a: 10.0.0, 11.0.0
* Windows:
  * GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
  * GCC, C++0x: 4.6.4
  * GCC, C++11: 4.7.3, 4.8.1, 4.9.3
  * GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
  * GCC, C++17: 7.1.0, 7.2.0, 7.3.0
  * Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
* FreeBSD:
  * Clang: 4.0.0
  * Clang, C++11: 4.0.0
  * Clang, C++14: 4.0.0
  * Clang, C++1z: 4.0.0

Boost's additional test compilers include:

* Linux:
  * Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
  * Clang, C++0x: 3.0
  * Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
  * Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
    6.0.1, 7.0.0, 8.0.0
  * Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
  * GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
  * GCC, C++0x: 4.4.7
  * GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
  * GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
  * GCC, C++17: 7.3.0, 8.0.1
  * Intel, C++14: 18.0
* OS X:
  * Apple Clang: 9.0.0, 9.1.0, 10.0.0
  * Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
  * Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
  * Apple Clang, C++17: 9.1.0, 10.0.0
  * Apple Clang, C++1z: 9.0.0
  * Apple Clang, C++2a: 10.0.0
* Windows:
  * GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
  * GCC, C++0x: 4.6.4
  * GCC, C++11: 4.7.3, 4.8.1, 4.9.3
  * GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
  * GCC, C++17: 7.1.0, 7.2.0, 7.3.0
  * Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
* FreeBSD:
  * Clang: 4.0.0
  * Clang, C++11: 4.0.0
  * Clang, C++14: 4.0.0
  * Clang, C++1z: 4.0.0

[endsect]

[section Acknowledgements]

Marshall Clow, Michael Caisse and Glen Fernandes managed this release.

[endsect]
