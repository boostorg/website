[article Version 1.78.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        Updated Libraries: Asio, Assert, Atomic, Beast, Core, Describe, DLL,
        Filesystem, Geometry, JSON, Lambda2, Log, Math, MultiIndex,
        Multiprecision, Nowide, PFR, Predef, Regex, System, Utility, Variant2.
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section Known Issues]

These are patches from library authors which were found too late to be fixed
in the release.

* Boost.Build silently skips installation of library headers and binaries in some cases,
  see [@https://github.com/bfgroup/b2/issues/104 #104].
  * Fixed in [@https://github.com/bfgroup/b2/pull/113 PR#113], [@/patches/1_78_0/0001-b2-fix-install.patch patch].
* Boost.Atomic fails to build when targeting UWP, see [github atomic 54]. [@/patches/1_78_0/0002-atomic-fix-uwp-build.patch Patch].

[endsect]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* No new libraries.

[endsect]

[section Updated Libraries]


[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/asio/ Asio]:]
  * Added an io_uring backend that may optionally be used for all I/O objects,
    including sockets, timers, and posix descriptors.
  * Added support for files, with new new classes for stream-oriented and
    random-access files. This feature currently supports I/O completion ports on
    Windows, and io_uring on Linux.
  * Added support for portable pipes on POSIX and Windows (when I/O completion
    ports are available).
  * Added support for registered buffers, which are optimised when using the
    io_uring backend.
  * Added experimental support for channels, that may be used to send and queue
    completions as messages.
  * Implemented improvements to `experimental::coro`.
  * Disabled `aligned_alloc` on [^clang] when using an MSVC runtime.
  * Changed to use a faster implementation for `ip::network_v4::canonical()`.
  * Added template specialisations for common uses to improve compile time.
  * Reduced the size of `io_context` executors to a single pointer.
  * Increased the small object buffer size for `execution::any_executor` and
    `any_io_executor`.
  * Fixed multi-signature handling when variadic templates are disabled.
  * Fixed compatibility with new versions of [^gcc] and [^clang].
  * Fixed compilation on Solaris.
  * Fixed defence against Qt-defined macros when building with MSVC.
  * Improved error messages emitted by `ssl` facilities.
  * Fixed `bind_executor` compatibility with completion tokens.
  * Fixed build errors when `BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT` is defined.
  * Added missing move assignment operator to `awaitable<>`.
  * Fixed an access violation when using coroutines with MSVC, due to incorrect
    alignment of allocated memory.
  * Fixed a cleanup issue in `experimental::parallel_group` that occured when
    the execution context was shut down with parallel operations still pending.
  * Added clarifications to the documentation on concurrency hints.
  * Added documentation on error handling techniques for C++20 coroutines.
  * Fixed various warnings.
  * Consult the [@/doc/libs/1_78_0/doc/html/boost_asio/history.html Revision
    History] for further details.

* [phrase library..[@/libs/assert/ Assert]:]
  * Added `source_location::to_string`.

* [phrase library..[@/libs/atomic/ Atomic]:]
  * Use process-local futex operations on Android for non-IPC waiting and notifying operations.
  * Added support for Linux targets that only define `SYS_futex_time64` syscall, such as riscv32.
  * Added a workaround for incorrect result of `std::alignment_of` on clang 8 for 64-bit types on 32-bit x86 targets.
  * Added a ulock backend for waiting and notifying operations on Darwin systems since Mac OS 10.12, iOS 10.0, tvOS 10.0 or watchOS 3.0.
  * On Windows, corrected discrepancy between [^['atomic-type]::always_has_native_wait_notify] and the corresponding capability macros when targeting Windows 8 or later. The library will now directly use `WaitOnAddress` and related APIs from public headers and therefore require user to link with `synchronization.lib` if the user requires Windows 8 or later by defining `BOOST_USE_WINAPI_VERSION`, `_WIN32_WINNT` or similar macros. The library is linked automatically on compilers that support auto-linking (e.g. MSVC).
  * Added support for types with padding bits, except unions, on compilers that provide a way to clear the padding bits. This feature is supported by gcc 11 and MSVC 14.2 (compiler version 19.27) and newer, as well as other compilers supporting similar intrinsics. On compilers that don't allow to clear the padding bits, types with padding are still generally not supported with the exception of 80-bit `long double` on x86 targets. A new `BOOST_ATOMIC_NO_CLEAR_PADDING` capability macro is defined to indicate when clearing the padding is not supported.
  * Initializing constructors of `atomic_ref` and `ipc_atomic_ref` no longer use atomic instructions to clear the padding bits in the referenced object. This reduces the cost of the atomic reference construction.
  * Initializing constructors of `atomic` and `ipc_atomic` are now `constexpr` for enums, classes and floating point types. For classes and floating point types, the constructors are `constexpr` if the compiler supports `constexpr` `std::bit_cast`, the type has no padding bytes and no padding is required to implement native atomic operations.
  * In accordance with C++20, default constructors of `atomic` and `ipc_atomic` now perform value initialization of the contained object. For types without a user-defined default constructor, this means the default-constructed atomic will be zero-initialized.
  * Added a workaround for compilation error on AIX caused by the assembler tool not supporting numeric labels. ([github_pr atomic 50])
  * Added a workaround for compilation error with Visual Studio 2015 prior to Update 3. ([github atomic 52])
  * See [@/doc/html/atomic/changelog.html changelog] for more details.

* [phrase library..[@/libs/beast/ Beast]:]
  * This maintenance update brings minor bug fixes and updated CI reporting.
  * Fixed security vulnerability CVE-2016-9840 in zlib implementation.
  * Fixed WebSocket permessage_deflate implementation. This should result in an increase in compression performance
    when using Beast WebSockets.
  * Removed the test stream and test framework's dependency on RTTI. You can now use our handy test stream to check your
    embedded asynchronous communications code!
  * We'd love to know how you or your company use Beast, consider adding an
    entry to the
    [@https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast Companies and Individuals Using Beast]
    list.
  * See the full
    [@/libs/beast/doc/html/beast/release_notes.html Release Notes]
    for a complete list of changes.

* [phrase library..[@/libs/core/ Core]:]
  * Added a generic implementation to `<boost/core/cmath.hpp>`, enabled when `BOOST_CORE_USE_GENERIC_CMATH`
    is defined or when the platform does not provide the necessary facilities in `<cmath>`.
  * Added `boost::core::type_name`, a utility function that returns the name of a type as a string.
  * Added `boost::span`, a C++11 implementation of C++20's `std::span` (Glen Fernandes).

* [phrase library..[@/libs/describe/ Describe]:]
  * Added `has_describe_enumerators`, `has_describe_bases`, `has_describe_members`.
  * Added `enum_to_string`, `enum_from_string`.
  * Added relational and stream insertion operators.
  * Added `descriptor_by_name`, `descriptor_by_pointer`.

* [phrase library..[@/libs/dll/ DLL]:]
  * Fixed missing #include, thanks to Denis Blank ([github_pr dll 54])
  * Dropped TravisCI in favor of GithubAction CI

* [phrase library..[@/libs/filesystem/ Filesystem]:]
  * [*v4:] `path::filename` and `path::iterator` no longer return an implicit trailing dot (".") element if the path ends with a directory separator. Instead, an empty path is returned, similar to C++17 std::filesystem. This also affects other methods that are defined in terms of iterators or filename, such as `path::stem`, `path::compare` or `lexicographical_compare`. For example, `path("a/b/") == path("a/b/.")` no longer holds true. ([github filesystem 193])
  * [*v4:] `path::lexically_normal` no longer produce a trailing dot (".") element and omits a directory separator after a trailing dot-dot ("..") element in the normalized paths.
  * [*v4:] `path` append operations now consider root name and root directory in the appended path. If the appended path is absolute, or root name is present and differs from the source path, the resulting path is equivalent to the appended path. If root directory is present, the result is the root directory and relative path rebased on top of the root name of the source path. Otherwise, the behavior is similar to v3. ([github filesystem 214])
  * `path::lexically_normal` now converts directory separators to preferred separators in the root name of the normalized paths.
  * Optimized overloads of `path::assign`, `path::append`, `path::concat` and the corresponding operators to avoid unnecessary path copying and reduce the amount of code redundancy.
  * On POSIX systems, fixed `absolute(p, base)` returning a path with root name `base.root_name()` if `p` starts with a root directory. In such a case `p` is already an absolute path and should be returned as is.
  * `create_directories` no longer reports an error if the input path consists entirely of dot (".") and dot-dot ("..") elements. The implementation is no longer using recursion internally and therefore is better protected from stack overflow on extremely long paths.
  * On Windows, `remove` now supports deleting read-only files. The operation will attempt to reset the read-only attribute prior to removal. Note that this introduces a possibility of the read-only attribute being left unset, if the operation fails and the original value of the attribute fails to be restored. This also affects `remove_all`. ([github filesystem 216])
  * `remove_all` now returns `static_cast< uintmax_t >(-1)` in case of error, similar to C++17 std::filesystem.
  * Fixed a linking error about unresolved references to Boost.ContainerHash functions when user's code includes `boost/filesystem/path.hpp` but not `boost/container_hash/hash.hpp` and the compiler is set to preserve unused inline functions. ([github filesystem 215])
  * Added a workaround for MSVC and compatible compilers eliminating path globals cleanup in release builds. This could lead to a memory leak if Boost.Filesystem shared library was repeatedly loaded and unloaded in the process. ([github filesystem 217])

* [phrase library..[@/libs/geometry/ Geometry]:]
  * Improvements
    * [github_pr geometry 894] Optimization and refactoring of rtree queries.
    * [github_pr geometry 913] DynamicGeometry and GeometryCollection support in various algorithms (undocumented for now).
    * [github_pr geometry 922] DynamicGeometry and GeometryCollection support in distance (undocumented for now).
  * Solved issues
    * [github geometry 867] Poor performance of rtree query iterator with nearest predicate for big k.
    * [github geometry 870] Compilation error in boost::geometry::self_turns.
    * [github geometry 896] Assertion failure in get_turns with BOOST_GEOMETRY_NO_ROBUSTNESS.
  * Bugfixes
    * [github_pr geometry 906] Invalid result of buffer on macos-11 with clang-12.
    * [github_pr geometry 921] Compilation errors with c++20 (various compilers) and gcc-5.
    * Various fixes in set operations and buffer.

* [phrase library..[@/libs/json/ JSON]:]
  * Standalone mode of the library is deprecated.
  * Allow external libraries to forward declare `value_to` and `value_from`.
  * Fixed signed integer overflow in number parsing.
  * Add support for `/Zc:implicitNoexcept-` on MSVC.

* [phrase library..[@/libs/lambda2/ Lambda2]:]
  * Added special cases in `operator<<` and `operator>>` when
    the first argument is a stream, to allow `std::cout << _1`.
  * Added `operator->*`.
  * Added `first`, `second`.

* [phrase library..[@/libs/log/ Log]:]
  * General changes:
    * Updated detection of `std::codecvt` specializations for `char16_t` and `char32_t` for compatibility with C++17 and later. ([github_pr log 159])
    * Added support for C++17 `std::byte` type to receive methods of the inter-process message queue.
    * On Windows, when building the library for Windows 8 or later, the library will use `nt62` tag in the version namespace to denote the target OS ABI. For example, the version namespace could be named as `v2_mt_nt62`. This name will be part of all symbols exported by the library. Use the `BOOST_USE_WINAPI_VERSION` macro consistenly when building Boost and your code to request the minimum target Windows version.
    * Improved performance of SSSE3 and AVX2 implementations of the `dump` stream manipulator.
    * Added support for CMake build system. Only library build is supported at this moment, Boost.Build is still used for running tests.
  * Bug fixes:
    * Fixed a race condition on POSIX systems in `reliable_message_queue::open_or_create` or the equivalent constructor. Multiple threads or processes calling `open_or_create` concurrently with sending or receiving messages from the same queue could end up corrupting the queue contents and potentially crashing the process. ([github log 162])
    * Added a workaround for `b2 install` failing on Windows because of missing `boost_log_setup` library if `BOOST_LOG_WITHOUT_SETTINGS_PARSERS` is defined. ([github log 164])
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.

* [phrase library..[@/libs/math/ Math]:]
  * Add support for cubic roots.
  * Add support for `constexpr` versions of various standard library math routines.
  * Add support for Bezier polynomials.
  * Improve worst-case tanh-sinh integration performance.
  * Disable inadvertant use of integral types in integration routines.
  * Minor update for erf approximations when the result is with 2ulp of 1.
  * Allow Bernoulli code to be used on platforms with no atomic integers.
  * Improve the mode of the non-central Chi Squared distribution.
  * Improve certain edge cases for <cstdfloat> complex-valued elementary functions, see [@https://github.com/boostorg/math/issues/507 #507].

* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * Added `contains` to key-based indices (issue [github multi_index 35]).
  * Added `merge` operations to key-based indices. The functionality goes beyond
    the standard specification for (unordered) associative containers in a number
    of ways, most notably:
    [itemized_list
      [The source index can be of any type, including non key-based indices.]
      [Partial merge is provided: for instance, `x.merge(y,first,last)` merges
      only the elements of `y` within \[`first`,`last`).]
    ]
  * Previous versions of `splice` for sequenced and random access indices were
    destructive, i.e. elements were copy-inserted into the destination and then
    erased from the source. Now, `splice` is based on node transfer much as
    `merge` in key-based indices, and has been similarly extended to accept source
    indices of any type: in fact, `splice` can be regarded as a frontend to the
    same functionality provided by `merge` in key-based indices. For reasons of
    backwards compatibility, the destructive behavior of `splice` has been retained
    in the case that the source and destination containers have unequal allocators.
  * The fact has been documented that index iterator types do only depend on
    `node_type` and the position of the index in its `multi_index_container`,
    (except for hashed indices, where uniqueness/non-uniqueness is also a
    dependency). This has implications on the validity of iterators to elements
    transferred by `merge` or `splice`. This property is a variant of what has been
    called [@https://wg21.link/n2980 SCARY iterators] in the C++ standard mailing
    lists. SCARYness is currently (August 2021) not mandated for standard
    containers.
  * Iterator SCARYness is now also preserved in
    [@/libs/multi_index/doc/tutorial/debug.html#safe_mode safe mode].

* [phrase library..[@/libs/multiprecision/ Multiprecision]:]
  * Rework rational_adaptor to remove dependency on Boost.Rational and improve performance.
  * Fix issue with type_traits and clang, see [@https://github.com/boostorg/multiprecision/issues/383 #383].
  * Fixed buggy Lehmer's GCD routine, see [@https://github.com/boostorg/multiprecision/issues/370 #370].
  * Fix mpc_complex constructors so that lossy conversions are explicit, see [@https://github.com/boostorg/multiprecision/issues/363 #363].
  * Correct miscellaneous configuration issues (Intel intrinsic usage and Apple clang).
  * Correct some iostream operators for unsigned char types.
  * Correct mpq_rational conversions to integer types, see [@https://github.com/boostorg/multiprecision/issues/342 #342].

* [phrase library..[@/libs/nowide/ Nowide]:]
  * Breaking Change: `do_unshift` for the UTF-32 specialization of `utf8_codecvt` now correctly returns `noconv` instead of `ok`
  * Remove unnecessary branch in `utf8_codecvt` for UTF-16 output
  * Suppress deprecation warnings in MSVC when using `utf8_codecvt` with unicode char types
  * Fix possible double-free when setting a custom buffer (`setbuf`) after `filebuf` already allocated an internal buffer

* [phrase library..[@/libs/pfr/ PFR]:]
  * Added missing `#include <memory>` for inclusion of `std::addressof`
  * Fixed -Wzero-length-array warning when dealing with empty aggregates
  * Fixed compilation on msvc compilers <= 1920 (thanks to Alexey Romanov aka @alexey-romanov)
  * Added basic CMakeLists.txt support (thanks to @pdimov aka Peter Dimov)
  * Multiple improvements for docs, including links to https://github.com/apolukhin/pfr_non_boost
  * Added misc/strip_boost_namespace.sh script to remove `boost::` and `BOOST_` prefixes

* [phrase library..[@/libs/predef/ Predef]:]
  * Version 1.13.1
  * Fix spelling of "epoch".
  * Add missing parenthesis in sparc.h (from tkoecker).
  * Update documentation to use Rouge code styling and Amber general style.

* [phrase library..[@/libs/regex/ Regex]:]
  * [*Breaking Change:] Change \B to be the opposite of \b as per Perl behaviour.
  * Change w32_regex_traits.hpp so that windows.h is no longer included. 
  * Fxed fuzzing related issues [@https://github.com/boostorg/regex/issues/151 #151], 
    [@https://github.com/boostorg/regex/issues/152 #152], 
    [@https://github.com/boostorg/regex/issues/153 #153], 
    [@https://github.com/boostorg/regex/issues/156 #156].

* [phrase library..[@/libs/system/ System]:]
  * Added support for source locations to `error_code`.
  * Added `error_code::to_string`, `error_condition::to_string`, `error_code::what`.
  * `system_error::what()` now contains the source location, if present.
  * Added `result<T, E = error_code>`, a class holding either a value or an
    error, defined in `<boost/system/result.hpp>`.

* [phrase library..[@/libs/utility/ Utility]:]
  * Library documentation converted to QuickBook (thanks to Alan de Freitas, [github_pr utility 79]).

* [phrase library..[@/libs/variant2/ Variant2]:]
  * Added `<boost/variant2.hpp>`.
  * Added `unsafe_get<I>`.
  * Added `visit_by_index`.
  * Added `operator<<`.

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/build/ Build]:]
  * Includes release of [@/tools/build/doc/html/#_version_4_7_2 B2 version 4.7.2].

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0
  * Clang, C++11: 3.4, 11.0.0
  * Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0
  * Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0
  * Clang, C++20: 11.0.0, 12.0.0, 13.0.0

  * GCC: 4.6.3, 11
  * GCC, C++11: 4.7.3, 4.8.5, 11
  * GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11
  * GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11
  * GCC, C++20: 8.0.1, 9.1.0, 10, 11

* OS X:
  * Apple Clang: 11.0.3
  * Apple Clang, C++11: 11.0.3
  * Apple Clang, C++14: 11.0.3
  * Apple Clang, C++17: 11.0.3
  * Apple Clang, C++20: 11.0.3

* Windows:
  * Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2

[endsect]

[section Acknowledgements]

Marshall Clow, Michael Caisse and Glen Fernandes managed this release.

[endsect]
