[article Version 1.80.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* /TODO/

[endsect]

[section Updated Libraries]

* [phrase library..[@/libs/atomic/ Atomic]:]
  * Improved portability of endianness checks on ARM, AArch32 and AArch64 targets. ([github atomic 59])
  * Fixed compilation with MSVC 14.0 (Visual Studio 2015) in C++17 mode. ([github atomic 61])

* [phrase library..[@/libs/filesystem/ Filesystem]:]
  * On Windows, added a fallback implementation for querying file attributes in case if the file cannot be opened with `ERROR_ACCESS_DENIED` error. This may allow `status` and `symlink_status` to succeed for system files and directories that are not reparse points or symlinks. ([github filesystem 234])
  * On Windows, added a workaround for FAT/exFAT filesystems that produce `ERROR_INVALID_PARAMETER` when querying file attributes. This affected `status` and `symlink_status`, which reported that files do not exist, and directory iterators, which failed to construct, as well as other dependent operations. ([github filesystem 236], [github filesystem 237])

* [phrase library..[@/libs/iterator/ Iterator]:]
  * For C++11 and later, added support for perfect forwarding of values written to `function_output_iterator`. ([github_pr iterator 73])
  * Added protection against writing to `function_output_iterator` a result of dereferencing another `function_output_iterator`.

* [phrase library..[@/libs/leaf/ LEAF]:]
  * API breaking change: throw leaf::exception(....) now becomes leaf::throw_exception(....)
  * Fixed a bug in support for a rare build configuration (exception handling enabled, diagnostics disabled)
  * Using nullptr instead of 0 throughout
  * Fixed pedantic warnings

* [phrase library..[@/libs/log/ Log]:]
  * Bug fixes:
    * Fixed binding incorrect local address in UDP socket-based `syslog_backend` when IPv6 address is used for the syslog server. ([github log 181])
    * Added a workaround for a [@https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105857 bug] in libstdc++ from gcc 11.2. When `max_size_decor` was used on a formatting stream, `std::codecvt::do_length` incorrectly accessed the input buffer and caused a buffer overflow.
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.

* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * Maintenance work.

* [phrase library..[@/libs/stl_interfaces/ STLInterfaces]:]
  * Fix [github stl_interfaces 53]: "missing 'typename' prior to dependent type
    name 'C::const_iterator'"
  * Fix [github stl_interfaces 54]: "Concept check fails on .data() of a view
    on contiguous iterator_interface instantiations"
  * New additions to make it easy to write views and view adaptors that
    work like, and interoperate with, the ones in the standard library:
    * Add workalikes for C++23's `std::bind_back()` and
      `std::range_adaptor_closure` for pre-C++23 code.
    * Add templates `closure` and `adaptor` to make writing view adaptors
      easier, following the examples in
      [@https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2387r3.html
      P2387].

* [phrase library..[@/libs/system/ System]:]
  * When an `error_code` is converted to `std::error_code` and then back
    to `error_code`, the original is now restored, if possible.
  * Reworked the conversion from `error_category` to `std::error_category`
    to avoid the one-time allocation that shows up on leak checkers.
  * Added a constructor that allows replacing the source location of an
    `error_code`, and a corresponding `assign`.
  * Added a converting constructor to `result`.

* [phrase library..[@/libs/unordered/ Unordered]:]
  Major update:
  * [@/libs/unordered/doc/html/unordered.html#buckets_fast_closed_addressing_implementation Refactor]
    internal implementation to be dramatically faster
  * Allow `final` `Hasher` and `KeyEqual` objects
  * Update documentation, adding benchmark graphs and notes on the new internal data structures

* [phrase library..[@/libs/utility/ Utility]:]
  * In `string_view`/`string_ref`, fixed `max_size` returning incorrect value. ([github utility 91])
  * Removed `noexcept` specifier from `string_view::compare` as it may throw on some input arguments. ([github utility 94])
  * In `string_view`/`string_ref`, added support for calling `substr` with no arguments. ([github utility 96])
  * Added `string_view::contains` methods that were introduced in C++23. ([github utility 93])

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* /TODO/

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/build/ Build]:]
  * Includes release of [@/tools/build/doc/html/#_version_4_9_2 B2 version 4.9.2].

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
