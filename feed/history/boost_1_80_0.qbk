[article Version 1.80.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* No new libraries.

[endsect]

[section Updated Libraries]

* [phrase library..[@/libs/atomic/ Atomic]:]
  * Improved portability of endianness checks on ARM, AArch32 and AArch64 targets. ([github atomic 59])
  * Fixed compilation with MSVC 14.0 (Visual Studio 2015) in C++17 mode. ([github atomic 61])

* [phrase library..[@/libs/beast/ Beast]:]
  * Fix CVE-2018-25032 in zlib streams
  * Add `http::message_generator`: a type-erased buffers generator for `http::message`
  * Improve interoperability with `std::string_view` by using `boost::core::string_view` (API change)
  * Use `span` from Boost.Core (API change)
  * Use `static_string` from Boost.StaticString (API change)
  * See the full [@/libs/beast/doc/html/beast/release_notes.html Release Notes] for a complete list of changes.

* [phrase library..[@/libs/filesystem/ Filesystem]:]
  * On Windows, added a fallback implementation for querying file attributes in case if the file cannot be opened with `ERROR_ACCESS_DENIED` error. This may allow `status` and `symlink_status` to succeed for system files and directories that are not reparse points or symlinks. ([github filesystem 234])
  * On Windows, added a workaround for FAT/exFAT filesystems that produce `ERROR_INVALID_PARAMETER` when querying file attributes. This affected `status` and `symlink_status`, which reported that files do not exist, and directory iterators, which failed to construct, as well as other dependent operations. ([github filesystem 236], [github filesystem 237])

* [phrase library..[@/libs/gil/ GIL]:]
  [*NOTICE:] We are planning BREAKING switch to C++17 as minimum required C++ language version in one or two releases after Boost 1.80 ([github gil 676])
  * Added
    * GSoC 2020: Added Perona-Malik anisotropic diffusion algorithm ([github_pr gil 500])
    * GSoC 2020: Added histogram class and related functionality ([github_pr gil 499])
    * GSoC 2020: Added histogram equalization feature ([github_pr gil 514])
    * GSoC 2020: Added histogram matching algorithm ([github_pr gil 515])
    * GSoC 2020: Added ability to stack images either horizontally (`hstack`) or vertically (`vstack`) ([github_pr gil 506])
    * GSoC 2020: Added adaptive histogram equalization algorithm ([github_pr gil 516])
    * GSoC 2020: Added Standard Hough Transform and circle rasterization ([github_pr gil 512])
    * GSoC 2020: Added Bresenham's algorithm for line rasterization ([github_pr gil 512])
    * GSoC 2021: Added rotation of image by arbitrary angle around its center ([github_pr gil 565])
    * GSoC 2021: Added rasterization support for ellipse based on "An Efficient Ellipse-Drawing Algorithm" by Jerry Van Aken ([github_pr gil 585])
    * Added `image` constructor from compatible view ([github_pr gil 520])
    * Added inverse function for affine `matrix3x2` ([github_pr gil 527])
    * Added standard morphological transformations ([github_pr gil 541])
    * Added `for_each_pixel` overload for `any_image` ([github_pr gil 648])
    * Added C++17 polymorphic memory resource typedefs for `image` class ([github_pr gil 529])
  * Changed
    * [*BREAKING:] The required minimum C++ version is changed from from C++11 to C++14.
      Currently, large parts of GIL still compile with a C++11 compiler. However,
      there is no guarantee that it stays that way, and any compilers that do not
      support at least C++14 are considered unsupported as of now.
    * [*BREAKING:] `any_color_converted_view()` is deprecated and will be removed in the next release.
      Use `color_converted_view()` instead, which provides the same feature.
    * [*BREAKING:] `apply_operation` for `any_image` is deprecated and will be removed in the next release.
      Use `variant2::visit` instead, which provides the same feature. ([github_pr gil 656])
    * Moved numeric extension to core ([github_pr gil 573])
    * Added support for C++17's `<filesystem>` ([github_pr gil 636])
      The availability of the `std::filesystem` is detected automatically,
      unless the `BOOST_GIL_IO_USE_BOOST_FILESYSTEM` macro is defined that forces
      the preference of the Boost.Filesystem.
    * Renamed `pixel_multiply_t` to `pixel_multiplies_t` and `pixel_divide_t` to `pixel_divides_t` ([github_pr gil 655])
    * Renamed `io/dynamic_io_new.hpp` to `io/detail/dynamic.hpp` ([github_pr gil 653])
    * Moved function `construct_method` into `boost::gil::detail` namespace as it was only used by other implementation details ([github_pr gil 653])
    * Made `packed_pixel` trivially copyable and assignable ([github_pr gil 679])
    * Replace deprecated libtiff v4.3 typedefs with C99 fixed-size integers ([github_pr gil 685])
  * Removed
    * [*BREAKING:] Removed support for GCC 5 ([github_pr gil 572])
    * Removed deprecated.hpp ([github_pr gil 627])
  * Fixed
    * Fixed conversion from RGB to HSL ([github_pr gil 505])
    * Fixed conversion from RGB to signed CMYK ([github_pr gil 522])
    * Removed unnecessary numeric cast in hsv.hpp ([github_pr gil 530])
    * Fixed default constructor for `homogeneous_color_base` for reference pixel elements ([github_pr gil 542])
    * Fixed returning reference to local temporary object in `subchroma_image_view` ([github_pr gil 556])
    * Added missing header guards in diffusion.hpp ([github_pr gil 568])
    * Fixed `any_image_view<>::const_t` ([github_pr gil 526])
    * Fixed C++20 incompatibilities in I/O extensions ([github_pr gil 617])
    * Ensured all examples build without errors ([github_pr gil 628])
    * Fixed `convolve_2d` for images with `float32_t` channel model ([github_pr gil 577])
    * Fixed `for_each_pixel` for non-1d iterable views ([github_pr gil 621])
    * Fixed: `is_equal_to_sixteen` in PNG I/O was less-than test ([github_pr gil 650])
    * Re-allow `devicen_t` with two components ([github_pr gil 654])
      It was unintentionally removed in Boost 1.72
    * Fixed memory leak in `image` class for empty dimensions ([github_pr gil 649])
  * Acknowledgements
    * Cypre55, Samuel Debionne, Mike-Devel, Edward Diener, Peter Dimov, Omar Emara, Dhruva Gole, Nicolas Herry, Eugene K, Avinal Kumar, Gaurav Kumar, Marco Langer, Pranam Lashkari, Mateusz Łoskot, Giovanni Mascellani, Debabrata Mandal, Gopi Krishna Menon, René Ferdinand Rivera Morell, Felix Morgner, Harshit Pant, Paul92, André Schröder, Scramjet911, Siddharth, Dirk Stolle, Prathamesh Tagore, theroyn, Olzhas Zhumabek

* [phrase library..[@/libs/iterator/ Iterator]:]
  * For C++11 and later, added support for perfect forwarding of values written to `function_output_iterator`. ([github_pr iterator 73])
  * Added protection against writing to `function_output_iterator` a result of dereferencing another `function_output_iterator`.

* [phrase library..[@/libs/leaf/ LEAF]:]
  * API breaking change: throw leaf::exception(....) now becomes leaf::throw_exception(....)
  * Fixed a bug in support for a rare build configuration (exception handling enabled, diagnostics disabled)
  * Using nullptr instead of 0 throughout
  * Fixed pedantic warnings

* [phrase library..[@/libs/locale/ Locale]:]
  * Deprecated support for C++03 and earlier, C++11 will be required in the next release
  * Provide `-sICU_LINK_LOCALE` as a temporary replacement for `-sICU_LINK` which is incompatible with Boost.Regex. `-sICU_LINK_LOCALE` and `-sICU_LINK` are deprecated and will be replaced by `ICU_*_NAME` options to be compatible with Boost.Regex
  * Fix UB/assertion failure in the ICU `collator` implementation when transforming empty strings
  * Fix some issues related to visibility of classes in shared libraries (Unix only)
  * Fix compatibility with C++20 mode
  * Fix compatibility with `BOOST_USE_WINDOWS_H`
  * Fix build failures due to missing includes
  * Handle or suppress many warnings which makes the build log cleaner

* [phrase library..[@/libs/log/ Log]:]
  * Bug fixes:
    * Fixed binding incorrect local address in UDP socket-based `syslog_backend` when IPv6 address is used for the syslog server. ([github log 181])
    * Added a workaround for a [@https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105857 bug] in libstdc++ from gcc 11.2. When `max_size_decor` was used on a formatting stream, `std::codecvt::do_length` incorrectly accessed the input buffer and caused a buffer overflow.
  * See [@/libs/log/doc/html/log/changelog.html changelog] for more details.

* [phrase library..[@/libs/multi_index/ Multi-index Containers]:]
  * Maintenance work.

* [phrase library..[@/libs/nowide/ Nowide]:]
  * Major performance improvement for Bulk I/O with files
  * `basic_filebuf`: Fix wrong return value of `sync` when `fflush` failed
  * `basic_filebuf`: Fix possible undefined behavior in a corner case when nothing was actually written but buffer is in "write" mode
  * `basic_filebuf`: Limit putback of characters (i.e. `pbackfail`) only allowing putback of buffered characters (may be only 1 character)

* [phrase library..[@/libs/stl_interfaces/ STLInterfaces]:]
  * Fix [github stl_interfaces 53]: "missing 'typename' prior to dependent type
    name 'C::const_iterator'"
  * Fix [github stl_interfaces 54]: "Concept check fails on .data() of a view
    on contiguous iterator_interface instantiations"
  * New additions to make it easy to write views and view adaptors that
    work like, and interoperate with, the ones in the standard library:
    * Add workalikes for C++23's `std::bind_back()` and
      `std::range_adaptor_closure` for pre-C++23 code.
    * Add templates `closure` and `adaptor` to make writing view adaptors
      easier, following the examples in
      [@https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2387r3.html
      P2387].

* [phrase library..[@/libs/system/ System]:]
  * When an `error_code` is converted to `std::error_code` and then back
    to `error_code`, the original is now restored, if possible.
  * Reworked the conversion from `error_category` to `std::error_category`
    to avoid the one-time allocation that shows up on leak checkers.
  * Added a constructor that allows replacing the source location of an
    `error_code`, and a corresponding `assign`.
  * Added a converting constructor to `result`.

* [phrase library..[@/libs/unordered/ Unordered]:]
  Major update:
  * [@/libs/unordered/doc/html/unordered.html#buckets_fast_closed_addressing_implementation Refactor]
    internal implementation to be dramatically faster
  * Allow `final` `Hasher` and `KeyEqual` objects
  * Update documentation, adding benchmark graphs and notes on the new internal data structures

* [phrase library..[@/libs/utility/ Utility]:]
  * In `string_view`/`string_ref`, fixed `max_size` returning incorrect value. ([github utility 91])
  * Removed `noexcept` specifier from `string_view::compare` as it may throw on some input arguments. ([github utility 94])
  * In `string_view`/`string_ref`, added support for calling `substr` with no arguments. ([github utility 96])
  * Added `string_view::contains` methods that were introduced in C++23. ([github utility 93])
  * In `string_view`, added asserts in `remove_prefix`/`remove_suffix` methods to enforce the precondition that the prefix/suffix length does not exceed the string view size. The previous (undocumented) behavior of silently clamping the prefix/suffix length is deprecated and will be removed in a future release. ([github utility 92])

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

[endsect]

[section Updated Tools]

* [phrase library..[@/tools/build/ Build]:]
  * Includes release of [@/tools/build/doc/html/#_version_4_9_2 B2 version 4.9.2].

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

Boost's primary test compilers are:

* Linux:
  * Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0
  * Clang, C++11: 3.4, 11.0.0
  * Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0
  * Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0
  * Clang, C++20: 11.0.0, 12.0.0, 13.0.0

  * GCC: 4.6.3, 11
  * GCC, C++11: 4.7.3, 4.8.5, 11
  * GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11
  * GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11
  * GCC, C++20: 8.0.1, 9.1.0, 10, 11

* OS X:
  * Apple Clang: 11.0.3
  * Apple Clang, C++11: 11.0.3
  * Apple Clang, C++14: 11.0.3
  * Apple Clang, C++17: 11.0.3
  * Apple Clang, C++20: 11.0.3

* Windows:
  * Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2

[endsect]

[section Acknowledgements]

Marshall Clow, Michael Caisse and Glen Fernandes managed this release.

[endsect]
