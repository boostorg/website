[article Version 1.87.x
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* /TODO/

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/compat/ Compat]:]
  * Added `to_array.hpp` (contributed by Ruben Perez Hidalgo.)

* [phrase library..[@/libs/flyweight/index.html Flyweight]:]
  * Added [@/libs/flyweight/doc/tutorial/configuration.html#concurrent_factory `concurrent_factory`],
    a factory based on a concurrent container from [@/libs/unordered/ Boost.Unordered]
    that provides excellent performance in multithreaded scenarios.
  * Marked as `noexcept` those `boost::flyweight` operations previously documented
    as not throwing (issue [github flyweight 15]).

* [phrase library..[@/libs/mp11/ Mp11]:]
  * Added `mp_lambda` (contributed by Joaquin M Lopez Munoz)

* [phrase library..[@/libs/smart_ptr/ SmartPtr]:]
  * C++03 is no longer supported, a C++11 compiler is required.
    This includes GCC 4.8 or later, and MSVC 14.0 or later.
  * The functionality enabled by the macros `BOOST_SP_ENABLE_DEBUG_HOOKS`,
    `BOOST_SP_USE_STD_ALLOCATOR`, `BOOST_SP_USE_QUICK_ALLOCATOR`,
    `BOOST_AC_USE_SPINLOCK`, `BOOST_AC_USE_PTHREADS`, `BOOST_SP_USE_SPINLOCK`,
    and `BOOST_SP_USE_PTHREADS` has been deprecated and support for it
    will be removed in a future release.

* [phrase library..[@/libs/stl_interfaces/ STLInterfaces]:]
  * Correct misdocumented requirements for sequence container `swap`; the
    expected return type is `void`, not `bool`.
    ([@https://github.com/boostorg/stl_interfaces/issues/71 #71])
  * Add `[[no_unique_address]]` to the data members of the adaptors in
    `view_adaptor.hpp`. ([@https://github.com/boostorg/stl_interfaces/issues/65
    #65])
  * Enable deducing `this` for recent versions of Clang and MSVC that support
    it, but do not advertise that support via `__cpp_explicit_this_parameter`.
    ([@https://github.com/boostorg/stl_interfaces/pull/68 PR#68])

* [phrase library..[@/libs/unordered/ Unordered]:]
  * [*Major update.]
  * Added concurrent, node-based containers `boost::concurrent_node_map` and
    `boost::concurrent_node_set`.
  * Added `insert_and_visit(x, f1, f2)` and similar operations to concurrent containers,
    which allow for visitation of an element right after insertion (by contrast,
    `insert_or_visit(x, f)` only visits the element if insertion did _not_ take place).
  * Made visitation exclusive-locked within certain `boost::concurrent_flat_set`
    operations to allow for safe mutable modification of elements ([github_pr unordered 265]).
  * In Visual Studio Natvis, supported any container with an allocator that uses fancy
    pointers. This applies to any fancy pointer type, as long as the proper Natvis
    customization point "Intrinsic" functions are written for the fancy pointer type.
  * Added GDB pretty-printers for all containers and iterators. For a container with an
    allocator that uses fancy pointers, these only work if the proper pretty-printer is
    written for the fancy pointer type itself.
  * Fixed `std::initializer_list` assignment issues for open-addressing containers
    ([github_pr unordered 277]).
  * Allowed non-copyable callables to be passed to the `std::initializer_list` overloads of
    `insert_{and|or}_[c]visit` for concurrent containers, by internally passing a
    `std::reference_wrapper` of the callable to the iterator-pair overloads.

* [phrase library..[@/libs/url/ URL]:]
  * feat: set_params supports encoding_opts. ([@https://github.com/boostorg/url/issues/856 #856])
  * refactor: no deprecated variant2 alias from API. ([@https://github.com/boostorg/url/issues/857 #857]) 
  * refactor: query_rule consistent interpretation. ([@https://github.com/boostorg/url/issues/864 #864]) 

* [phrase library..[@/libs/uuid/ UUID]:]
  * Restored the ability to construct a `constexpr uuid` that was inadvertently lost in 1.86.

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

Marshall Clow, Glen Fernandes and Ion Gazta√±aga managed this release.

[endsect]
