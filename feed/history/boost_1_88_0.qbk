[article Version 1.88.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* [phrase library..[@/libs/hash2/ Hash2]:] An extensible hashing framework,
  from Peter Dimov and Christian Mazakas.

* [phrase library..[@/libs/mqtt5/ MQTT5]:] MQTT5 client library built on top of Boost.Asio,
  from Ivica Siladić, Bruno Iljazović, and Korina Šimičević.

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/array/ Array]:]
  * Converted documentation to AsciiDoc (Christian Mazakas).
  * Added `noexcept` and `constexpr` as appropriate.
  * Marked obsolete functions as deprecated.
  * Removed obsolete compiler workarounds.
  * Changed `array<T, 0>::begin()`, `cbegin()`, `end()`, `cend()` to return `nullptr`, enabling `constexpr`.
    This matches the behavior of `std::array`.
  * Removed local `hash_value` overload; `boost::hash` supports array-like types natively.
  * `array<T, 0>` can now be initialized with `= {{}}`.
  * Added `operator<=>`.

* [phrase library..[@/libs/assert/ Assert]:]
  * When `BOOST_ASSERT_HANDLER_IS_NORETURN` is defined, `boost::assertion_failed`
    and `boost::assertion_failed_msg` are declared as `BOOST_NORETURN`.

* [phrase library..[@/libs/locale/ Locale]:]
  * Raised required ICU version to at least 4.8.1
  * Dropped support for ICU 50.1
  * Fixed parsing of integers with input strings in floating point format ([github_pr locale 241])
  * Support parsing and formatting of `uint64_t` values with the ICU backend ([github_pr locale 246])
  * Support `char8_t` on more platforms

* [phrase library..[@/libs/mp11/ Mp11]:]
  * Fixed `mp_from_sequence` for non-integral values (accidentally broken in 1.83.0 due to offset support)

* [phrase library..[@/libs/nowide/ Nowide]:]
  * Make `getenv` thread-safe ([github_pr nowide 191])

* [phrase library..[@/libs/poly_collection/ PolyCollection]:]
  * Added `boost::variant_collection`, a closed polymorphic collection similar
    in behavior to `std::vector<std::variant<...>>`. 

* [phrase library..[@/libs/smart_ptr/ SmartPtr]:]
  * Fix `operator<<` for wide streams (accidentally broken in 1.87.0)

* [phrase library..[@/libs/unordered/ Unordered]:]
  * Migrated the documentation to a multipage format using Antora.

* [phrase library..[@/libs/variant2/ Variant2]:]
  * Use the smallest appropriate unsigned type for the index.

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* /TODO/

Boost's additional test compilers include:

* /TODO/

[endsect]

[section Acknowledgements]

/TODO/

[endsect]
