[article Version 1.89.0
    [quickbook 1.6]
    [source-mode c++]
    [purpose
        New Libraries:
        Updated Libraries:
        [/ Please don't add updated libraries yet, it
           can create unnecessary merge conflicts.]
    ]
    [authors [Dawes, Beman]]
    [/ last-revision is used for the final release date]
    [last-revision ]
]

[import ext.qbk]

[/
Formatting reference: https://www.boost.org/doc/tools/quickbook/
Please keep the list of libraries sorted in lexicographical order.
]

[section New Libraries]

[/ Example:
* [phrase library..[@/libs/accumulators/ Accumulators]:] Framework for
  incremental calculation, and collection of statistical accumulators, from Eric Niebler.
]

* [phrase library..[@/libs/bloom/ Bloom]:]
  Bloom filters, from Joaquín M López Muñoz.

[endsect]

[section Updated Libraries]

[/ Example:
* [phrase library..[@/libs/interprocess/ Interprocess]:]
  * Added anonymous shared memory for UNIX systems.
  * Move semantics for shared objects ([ticket 1932]).
  * Conform to `std::pointer_traits` requirements ([github_pr interprocess 32])
  * Fixed `named_condition_any` fails to notify ([github interprocess 62])
]

* [phrase library..[@/libs/any/ Any]:]
  * [*Initial support for C++20 Modules]. See the docs for more info.

* [phrase library..[@/libs/atomic/ Atomic]:]
  * Added TSAN instrumentation in asm-based x86, AArch32, AArch64 and PPC backends. This silences TSAN false errors for code using Boost.Atomic for thread synchronization.
  * Following the announcement in Boost 1.84, removed support for Windows versions older than Windows 10.
    * A note to MinGW-w64 users. Since Windows SDK headers on MinGW-w64 define `_WIN32_WINNT` to an older Windows version by default, you may need to define `_WIN32_WINNT=0x0A00` or `BOOST_USE_WINAPI_VERSION=0x0A00` when compiling Boost.Atomic and the code that uses Boost.Atomic.
  * Support for Windows CE is deprecated and will be removed in a future release.
  * Added support for timed waiting operations.
  * Exposed `thread_pause` operation, which can be used as a backoff measure in spin loops. Added support for PowerPC and improved support for AArch64 in `thread_pause`.
  * Removed `BOOST_ATOMIC_NO_ATOMIC_FLAG_INIT` macro definition. Since the library now requires C++11, `BOOST_ATOMIC_FLAG_INIT` is always supported.
  * Enabled bitwise operations for atomic enumerations. This can be useful when enumerations are used to implement bit masks.

* [phrase library..[@/libs/beast/ Beast]:]
  * Fixes
    * Conditionally defined `immediate_executor_type` in `async_base`.
    * Added missing `cstdint` header to `detail/cpu_info.hpp`.
    * Fixed `std::is_trivial` deprecation warnings.
    * `handshake_timeout` now applies to closing handshakes during reads.
  * Improvements
    * Replaced `detail/work_guard.hpp` with `net::executor_work_guard`.
    * Fixed portability issues for building tests in MinGW.
  * Documentation
    * Removed moved sections from documentation.
    * Removed superfluous log messages from tests.
  * Acknowledgements
    * yliu1021

* [phrase library..[@/libs/charconv Charconv]:]
  * Fixed a performance degradation with `from_chars` for integer types
  * Fixed rounding and trailing decimal place bugs with `to_chars` for specified precisions with floating point types

* [phrase library..[@/libs/cobalt/ Cobalt]:]
  * Move assign fixed for generator & promise.
  * Fixed internal exceptions
  * Added IO library. Cobalt.io provides a large subset of asio as a compiled library.

* [phrase library..[@/libs/compat/ Compat]:]
  * Added `move_only_function.hpp`.

* [phrase library..[@/libs/container_hash/ ContainerHash]:]
  * Added the `hash_is_avalanching` trait class.

* [phrase library..[@/libs/conversion/ Conversion]:]
   * Added an ability to use `polymorphic_downcast` and `polymorphic_cast` in constexpr (requires C++20).

* [phrase library..[@/libs/core/ Core]:]
  * Fixed `bit_ceil` to return 1 for input 0 as per specification. ([github_pr core 199])
  * Added support for `std::format` to `boost::core::string_view`. ([github core 190])

* [phrase library..[@/libs/detail/ Detail]:]
  * Operators generated by `BOOST_BITMASK` now use underlying type of the enum to implement bitwise operators. The operators are marked `noexcept` and `constexpr`, when possible.
  * The function `bitmask_set` generated by `BOOST_BITMASK` is marked deprecated. In a future release, `BOOST_BITMASK` will stop producing this function. Users are recommended to use double negation (`!!mask`) to test if the value is zero. This affects e.g. enums defined in Boost.Filesystem.

* [phrase library..[@/libs/dll/ DLL]:]
   * Fixed compiling and exporting on Cygwin. Many thanks to [@https://github.com/Luohaothu Luohao Wang]
     for the PR!
   * Fixed building on FreeBSD. Thanks to [@https://github.com/agokhale ash] for the bug report!
   * Added `BOOST_DLL_USE_STD_FS` CMake option to match the preprocessor option. Thanks to
     [@https://github.com/yurybura Yury Bura] for the PR!

* [phrase library..[@/libs/filesystem/ Filesystem]:]
  * Corrected ASAN warnings about comparing pointers to potentially unrelated objects in `path::append`. ([github filesystem 335])

* [phrase library..[@/libs/geometry/ Geometry]:]
  * Major improvements
    * [github_pr geometry 1369] Rewrite of traversal
    * [github_pr geometry 1402] Add geometry polyhedral surface
  * Improvements
    * [github_pr geometry 1404] Performance improvements in buffer
    * [github_pr geometry 1405] Avoid static variables and functions in header files
  * Breaking changes
    * [github_pr geometry 1401] Remove deprecated headers
  * Solved issues
    * [github geometry 1221] Difference with rectilinear multipolygon with integer coordinates produces invalid polygon with disconnected interior
    * [github geometry 1295] Wrong result in intersection (result polygon is equal to the biggest of the input polygons)
    * [github geometry 1349] Difference of polygons giving wrong result
    * [github geometry 1382] Buffer operation creates self-intersection
    * Various fixes of errors and warnings

* [phrase library..[@/libs/hash2/ Hash2]:]
  * Added Blake2 algorithm (`blake2s_256`, `blake2b_512`).
  * Added XXH3 algorithm (`xxh3_128`).

* [phrase library..[@/libs/iterator/ Iterator]:]
  * Fixed `filter_iterator` copy/converting constructor, which could previously produce an invalid iterator. ([github iterator 92])
  * Removed usage of `is_trivial` in `iterator_facade` as it is deprecated in C++26. ([github iterator 93])
  * `iterator_facade::operator[]` now always returns a proxy rather than conditionally returning a value or a proxy. This allows users to bind a reference to the result of the operator, regardless of whether the value type is trivially-copyable. ([github iterator 61])
  * The proxy returned by `iterator_facade::operator[]` now supports forwarding dereferencing operators to the referenced value. This allows `it[n]->foo()` and `(*it[n]).foo()` expressions to compile.
  * The proxy returned by `iterator_facade::operator[]` now implementes perfect forwarding in its assignment operator.

* [phrase library..[@/libs/json/ JSON]:]
  * Revamped documentation.
  * Optionals that are ranges are categorised as optionals.
  * Described class support is enabled for types with bases.

* [phrase library..[@/libs/log/ Log]:]
  * Added support for `BOOST_LOG_WITHOUT_ASIO` configuration macro, which can be used to remove the dependency on Boost.Asio and disable the related functionality.
  * Use locale-independent formatting of the file counter in `text_file_backend` when composing log file names. This fixes failures in the subsequent parsing of the file names in `file_collector::scan_for_files`. ([github_pr log 246])
  * Added a new `wrap_filter` utility that simplifies injecting user-defined function objects in filtering expressions.  ([github log 195])

* [phrase library..[@/libs/math/ Math]:]
  * Add explicit C++14 `<type_traits>` and `constexpr` requirement to builds
  * Collected fixes for GPU support on a variety of platforms
  * Fix lower incomplete gamma function with x = 0
  * Fix the external archive error in the jSO algorithm
  * Fix numeric underflow in ibeta
  * Fix inverse ibeta for large values of a and b
  * Fix variadic functions to make them safe with C++26

* [phrase library..[@/libs/mqtt5/ MQTT5]:]
  * Fixed incorrect parsing of URI paths in the list of brokers ([github mqtt5 31]).
  * Default Maximum Packet Size now explicitly set in the `CONNECT` packet. ([github mqtt5 33]).
  * Fixed high CPU usage with large Maximum Packet Size values ([github mqtt5 33]).

* [phrase library..[@/libs/multiprecision/ Multiprecision]:]
  * [*Major update.]
  * Adds a new backend type: `cpp_double_fp_backend`
  * Fixes a namespace collision with Boost.Serialization

* [phrase library..[@/libs/mysql/ MySQL]:]
  * The `caching_sha2_password` authentication plugin can now be used without TLS.
    This is the default in MySQL 8 and above. Plaintext connections that attempt to
    use this plugin no longer fail with `client_errc::auth_plugin_requires_ssl`
    ([github mysql 313]).
  * Fixed a problem causing `client_errc::incomplete_message` to be returned
    during connection establishment when the target database does not exist
    and the `caching_sha2_password` is used. The appropriate server-generated
    diagnostic is now returned. See issues [github mysql 468] and [github mysql 488].
  * The handshake algorithm is now more resilient to protocol violations
    ([github mysql 469]).
  * Fixed a build failure with gcc-15 due to a missing include ([github_pr mysql 475]).
    Thanks [@https://github.com/hhoffstaette hhoffstaette] for the PR.
  * Added [@https://www.boost.org/doc/libs/master/libs/mysql/doc/html/mysql/benchmarks.html benchmarks against the official drivers].
  * Optimized `metadata` representation to be faster to construct and take less memory
    ([github mysql 461]).
  
* [phrase library..[@/libs/pfr/ PFR]:]
   * Rewrite C++20 module following the new recommended Boost practice. See the docs for more info.
   * Fixed C++26 compilation on modern clang compilers. Thanks to
     [@https://github.com/MBkkt Valery Mironov] for the report!
   * Support types that use 'Arrays of Length Zero' compiler extension.
   * Fixed typos. Thanks to [@https://github.com/TryKuhn Egor] for highlighting the issues!
   * Return `std::array<std::string_view, 0>` type for `boost::pfr::names_as_array(empty_struct{})`
     to allow compilation of `for (std::string_view name : boost::pfr::names_as_array(empty_struct{}))`.
     Many thanks to [@https://github.com/sabudilovskiy sabudilovskiy] for the bug report!

* [phrase library..[@/libs/process/ process]:]
   * Added `v1.hpp` to emulate v1 `process.hpp` include.
   * Fix to windows path escaping
   * Fixed exit-code issue wehre terminate & async_wait lead to a loss of the exit-code value.

* [phrase library..[@/libs/random/ Random]:]
   * Fix NAN being generated by `beta_distribution`
   * Improve the performance of `beta_distribution::operator()`

* [phrase library..[@/libs/type_index/ TypeIndex]:]
   * [*Initial support for C++20 Modules]. See the docs for more info.

* [phrase library..[@/libs/unordered/ Unordered]:]
  * Deprecated `boost::unordered::hash_is_avalanching` is now a using-declaration of
    `boost::hash_is_avalanching` in `<boost/container_hash/hash_is_avalanching.hpp>`.
    Use that header directly instead. `<boost/unordered/hash_traits.hpp>` will be
    removed in the future.
  * Added `pull(const_iterator)` to open-addressing containers. This operation allows for
    efficient removal and retrieval of an element via move construction.

* [phrase library..[@/libs/histogram/ Histogram]:]
  * Update CMake minimum version and Python detection in CMake
  * Improve documentation
    * Add example on how to make an axis which accepts multiple value types that are not implicitly convertible
    * Show how to use `histogram::fill` with a multidimensional histogram efficiently when data per dimension is already available as contiguous data
  * Don't use deprecated form of user-defined literal operator
  * Add support for modular build structure with b2
  * Fixed warnings in MSVC about narrowed types
  * Added collector accumulator, which stores all values in a bin
  * Internal changes to tests and classes in detail namespace

[endsect]


[section Updated Tools]

* [phrase library..[@/tools/build/ Build]:]
  * Includes release of [@/tools/build/doc/html/#_version_5_3_2 B2 version 5.3.2].

[endsect]

[section Compilers Tested]

Boost's primary test compilers are:

* Linux:
  * Clang, C++03: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++11: 3.4, 11.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0
  * Clang, C++20: 11.0.0, 12.0.0, 13.0.0, 14.0.0, 15.0.0

  * GCC, C++03: 4.6.3, 11, 12
  * GCC, C++11: 4.7.3, 4.8.5, 11, 12
  * GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11, 12
  * GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11, 12
  * GCC, C++20: 8.0.1, 9.1.0, 10, 11, 12

* OS X:
  * Apple Clang, C++03: 11.0.3
  * Apple Clang, C++11: 11.0.3
  * Apple Clang, C++14: 11.0.3
  * Apple Clang, C++17: 11.0.3
  * Apple Clang, C++20: 11.0.3

* Windows:
  * Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2, 14.3

[endsect]

[section Acknowledgements]

Marshall Clow, Glen Fernandes and Ion Gaztañaga managed this release.

[endsect]
