<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:boostbook="urn:boost.org:boostbook">
  <channel>
    <generator>Boost Website Site Tools</generator>
    <title>Release notes for work in progress boost</title>
    <link>http://www.boost.org/</link>
    <description></description>
    <language>en-us</language>
    <copyright>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)</copyright>
<item><title>Version 1.59.0</title><link>http://www.boost.org/users/history/version_1_59_0.html</link><guid>http://www.boost.org/users/history/version_1_59_0.html</guid><pubDate>In Progress</pubDate><description>



  &lt;div id=&quot;version_1_59_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0_b1/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://github.com/boostorg/container/pull/26&quot;&gt;GitHub
                #26: &lt;em&gt;Fix bug in stable_vector::capacity()&lt;/em&gt;&lt;/a&gt;.
                Thanks to timsong-cpp/Arindam Mukerjee.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://github.com/boostorg/container/pull/27&quot;&gt;GitHub
                #27: &lt;em&gt;fix stable_vector's index_of's doxygen comment&lt;/em&gt;&lt;/a&gt;.
                Thanks to kariya-mitsuru.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11380&quot;&gt;Trac #11380:
                &lt;em&gt;&amp;quot;Container library std forward declarations incorrect
                in std_fwd.hpp on libc++ with gcc&amp;quot;&lt;/em&gt;&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11388&quot;&gt;Trac #11388:
                &lt;em&gt;&amp;quot;boost::container::list::emplace_back broken on Visual
                Studio 2010&amp;quot;&lt;/em&gt;&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11339&quot;&gt;Trac #11339:
                &lt;em&gt;&amp;quot;VC12 LNK2005 error with boost::container::adaptive_pool&amp;quot;&lt;/em&gt;&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0_b1/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11223&quot;&gt;#11223&lt;/a&gt; check support for std::integer_sequence
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                execution_context uses internally Windows Fibers with BOOST_USE_WINFIBERS
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                support of assember for MinGW on Windows (32bit)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0_b1/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10978&quot;&gt;#10978&lt;/a&gt; remove additional semicolons
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11230&quot;&gt;#11230&lt;/a&gt; coroutine_error returns dangling exception message pointer
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11234&quot;&gt;#11234&lt;/a&gt; doesn't compile when used with boost::range::algorithms
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11356&quot;&gt;#11356&lt;/a&gt; coroutines segfaults with BOOST_USE_SEGMENTED_STACKS
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0_b1/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add a new concept, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Unbounded&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;Sequence&lt;/span&gt;&lt;/code&gt; for sequence and
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Unbounded&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;Iterator&lt;/span&gt;&lt;/code&gt;
                for iterator. Currently, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Unbounded&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;Sequence&lt;/span&gt;&lt;/code&gt; affects the behaviour
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_c&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;at_key&lt;/span&gt;&lt;/code&gt;. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Unbounded&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;Iterator&lt;/span&gt;&lt;/code&gt; has no effect
                (reserved for future release). For more details, see &lt;a href=&quot;http://www.boost.org/users/history/libs/fusion/doc/html/fusion/sequence/concepts/unbounded_sequence.html&quot;&gt;Unbounded
                Sequence&lt;/a&gt; and &lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0_b1/libs/fusion/doc/html/fusion/iterator/concepts/unbounded_iterator.html&quot;&gt;Unbounded
                Iterator&lt;/a&gt;. (&lt;a href=&quot;https://github.com/boostorg/fusion/pull/85&quot;&gt;pull-request
                85&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support C++11 variadic templates for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;list&lt;/span&gt;&lt;/code&gt;.
                (&lt;a href=&quot;https://github.com/boostorg/fusion/pull/84&quot;&gt;https://github.com/boostorg/fusion/pull/84&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix missing include &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
                      (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11161&quot;&gt;#11161&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Revert some constexpr support, regression in 1.58.0. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11211&quot;&gt;#11211&lt;/a&gt;,
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11267&quot;&gt;#11267&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix compile error with fold due to missing include. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11249&quot;&gt;#11249&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix compile error with adapting an empty struct, regression
                      in 1.58.0. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11269&quot;&gt;#11269&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Remove use of obsolete (and incorrect) workaround for sequence
                      comparison, it affects MSVC-8 and earlier. (&lt;a href=&quot;https://github.com/boostorg/fusion/pull/78&quot;&gt;pull-request
                      78&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fix compile error while copying a sequece which derived from
                      fusion::list, regression in 1.58.0. (&lt;a href=&quot;https://github.com/boostorg/fusion/pull/87&quot;&gt;pull-request
                      87&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0_b1/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5139&quot;&gt;( Trac
                #5139 ( (&lt;em&gt;&amp;quot;Initial Stream Position in Boost.Interprocess.Vectorstream&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/19&quot;&gt;GitHub
                Pull #19 (&lt;em&gt;&amp;quot;Fix exception visibility&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                Thanks to Romain-Geissler.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0_b1/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;span class=&quot;link&quot;&gt;map and multimap-like
                interfaces&lt;/span&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Refactored hashtable containers to reduce template instantiations.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0_b1/libs/log/&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                General changes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      On systems with &lt;a href=&quot;https://gcc.gnu.org/wiki/Visibility&quot;&gt;symbol
                      visibility&lt;/a&gt; support (e.g. Linux) the library is now
                      built with all internal symbols hidden.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;strong&gt;Breaking change:&lt;/strong&gt; The library
                      has been ported to Boost.TypeIndex for its underlying type
                      info management tool. This affected the following public interfaces:
                      &lt;ul&gt;
                        &lt;li&gt;
                          &lt;div&gt;
                            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;invalid_type&lt;/span&gt;&lt;/code&gt;
                            exceptions thrown by the library now have &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;typeindex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;type_index&lt;/span&gt;&lt;/code&gt; attached
                            as the description of the offending type. The type was
                            previously identified by &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_info_wrapper&lt;/span&gt;&lt;/code&gt;.
                          &lt;/div&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                          &lt;div&gt;
                            Boost.Exception &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_info_info&lt;/span&gt;&lt;/code&gt;
                            error information now contains &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;typeindex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;type_index&lt;/span&gt;&lt;/code&gt;
                            instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_info_wrapper&lt;/span&gt;&lt;/code&gt;.
                          &lt;/div&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                          &lt;div&gt;
                            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; now returns &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;typeindex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;type_index&lt;/span&gt;&lt;/code&gt; instead
                            of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_info_wrapper&lt;/span&gt;&lt;/code&gt;.
                            User-defined attribute value implementations should be
                            similarly changed (the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; virtual method now
                            also returns &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;typeindex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;type_index&lt;/span&gt;&lt;/code&gt;).
                          &lt;/div&gt;
                        &lt;/li&gt;
                      &lt;/ul&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_info_wrapper&lt;/span&gt;&lt;/code&gt;
                      component has been deprecated and will be removed in future
                      releases. Boost.TypeIndex is recommended as a replacement.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Removed the previously deprecated headers: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intrusive_ref_counter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;explicit_operator_bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for building the library for OpenBSD. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11446&quot;&gt;#11446&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Improved internal implementation of the event synchronization
                      primitive used for asynchronous logging. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11398&quot;&gt;#11398&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed incorrect behavior of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_value_set&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_value_set&lt;/span&gt;&lt;/code&gt;
                      constructor in some cases. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11190&quot;&gt;#11190&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0_b1/libs/log/doc/html/log/changelog.html&quot;&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0_b1/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;/code&gt;'s
                converting constructor taking the source by value in C++03 compilers
                to allow simple conversions from convertible types returned by value.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11229&quot;&gt;Trac #11229:
                &lt;em&gt;&amp;quot;vector incorrectly copies move-only objects using
                memcpy&amp;quot;&lt;/em&gt;&lt;/a&gt;,
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0_b1/libs/multi_index/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0_b1/libs/multi_index/doc/tutorial/indices.html#rnk_indices&quot;&gt;ranked
                indices&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0_b1/libs/predef/&quot;&gt;Predef&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix many problems with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;predef_check&lt;/span&gt;&lt;/code&gt;
                functionality.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Update SunPro detection to accomodate latest version of compiler
                from Oracle.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt;&lt;/code&gt; logical operators for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;predef_check&lt;/span&gt;&lt;/code&gt; expression on the
                Boost Build side.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ARCH_PARISC&lt;/span&gt;&lt;/code&gt;
                to correctly spelled name.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;MAKE_YYYYM&lt;/span&gt;&lt;/code&gt; macros
                to correctly limit the month.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0_b1/libs/program_options/&quot;&gt;Program Options&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix compilation errors, missing dllexport and warnings with MSVC
                and MinGW (Daniela Engert, Marcel Raad).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix unintialized fields (Zoey Greer).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Stop options with implicit value from consuming separate tokens (Michael
                John Decker).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make multitoken limit be max int, not 32K (Hans Hohenfeld).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Code formatting and documentation fixes (Jurko Gospodnetić, Lauri
                Nurmi).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minimal support for no-rtti build (Minmin Gong)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Don't increment environment pointer past the end (Vladimir Prus)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/libs/1_59_0_b1/libs/test/&quot;&gt;Boost.Test v3&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Major new features
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_TEST&lt;/span&gt;&lt;/code&gt;
                      generic assertion
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      data driven test cases
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      test units can now have &lt;em&gt;attributes&lt;/em&gt; for
                      finer control over tests behavior (logical grouping, test dependencies,
                      test enabling/disabling)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      CLI learned &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;colour_output&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;list_content&lt;/span&gt;&lt;/code&gt;,
                      extended unit test filtering (negation, labels)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      refactored and rewritten documentation using quickbook
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Addressed issues:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2018&quot;&gt;#2018&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2450&quot;&gt;#2450&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2600&quot;&gt;#2600&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2717&quot;&gt;#2717&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2759&quot;&gt;#2759&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3182&quot;&gt;#3182&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3316&quot;&gt;#3316&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3392&quot;&gt;#3392&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3402&quot;&gt;#3402&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3445&quot;&gt;#3445&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3463&quot;&gt;#3463&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3542&quot;&gt;#3542&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3481&quot;&gt;#3481&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3495&quot;&gt;#3495&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3592&quot;&gt;#3592&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3595&quot;&gt;#3595&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3623&quot;&gt;#3623&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3664&quot;&gt;#3664&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3784&quot;&gt;#3784&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3785&quot;&gt;#3785&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3811&quot;&gt;#3811&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3834&quot;&gt;#3834&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3896&quot;&gt;#3896&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3932&quot;&gt;#3932&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3938&quot;&gt;#3938&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3964&quot;&gt;#3964&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3978&quot;&gt;#3978&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3979&quot;&gt;#3979&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4161&quot;&gt;#4161&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4275&quot;&gt;#4275&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4389&quot;&gt;#4389&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4434&quot;&gt;#4434&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4587&quot;&gt;#4587&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4806&quot;&gt;#4806&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4911&quot;&gt;#4911&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4923&quot;&gt;#4923&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4924&quot;&gt;#4924&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4982&quot;&gt;#4982&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5008&quot;&gt;#5008&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5036&quot;&gt;#5036&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5262&quot;&gt;#5262&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5374&quot;&gt;#5374&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5412&quot;&gt;#5412&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5563&quot;&gt;#5563&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5582&quot;&gt;#5582&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5599&quot;&gt;#5599&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5718&quot;&gt;#5718&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5729&quot;&gt;#5729&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5870&quot;&gt;#5870&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5972&quot;&gt;#5972&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6002&quot;&gt;#6002&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6071&quot;&gt;#6071&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6074&quot;&gt;#6074&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6161&quot;&gt;#6161&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6766&quot;&gt;#6766&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6712&quot;&gt;#6712&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6748&quot;&gt;#6748&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7046&quot;&gt;#7046&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7136&quot;&gt;#7136&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7410&quot;&gt;#7410&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7894&quot;&gt;#7894&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8201&quot;&gt;#8201&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8272&quot;&gt;#8272&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8467&quot;&gt;#8467&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8862&quot;&gt;#8862&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8895&quot;&gt;#8895&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9179&quot;&gt;#9179&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9272&quot;&gt;#9272&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9390&quot;&gt;#9390&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9409&quot;&gt;#9409&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9537&quot;&gt;#9537&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9539&quot;&gt;#9539&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9581&quot;&gt;#9581&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9960&quot;&gt;#9960&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10318&quot;&gt;#10318&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10394&quot;&gt;#10394&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10888&quot;&gt;#10888&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11054&quot;&gt;#11054&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11347&quot;&gt;#11347&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11358&quot;&gt;#11358&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11359&quot;&gt;#11359&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_59_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.6
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.8.2, 4.9.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 15.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Android:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.6
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8, 4.9
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          SunOS:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun: 6.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2, 3.3, 3.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.6, 3.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.4, 4.7.3, 4.8.1, 5.1.0, 6.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.3, 5.1.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 15.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Android:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.6
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8, 4.9
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8.5, 5.1.0, 6.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_59_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.58.0</title><link>http://www.boost.org/users/history/version_1_58_0.html</link><guid>http://www.boost.org/users/history/version_1_58_0.html</guid><pubDate>Fri, 17 Apr 2015 08:53:58 +0100</pubDate><description>



  &lt;div id=&quot;version_1_58_0.known_issue&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Known Issue&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Boost.Python will fail to build if it is complied agains a version of python
          that is one of: 3.0.X, 3.1.X, 3.2.X, 3.3.X. Versions 2.X and 3.4+ are not
          affected. This is fixed in &lt;a href=&quot;https://github.com/boostorg/python/commit/3e405b6fd5db5615bbef241763de070118222ca7&quot;&gt;git&lt;/a&gt;.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Boost.Fusion has a regression with non-constexpr types. &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11211&quot;&gt;#11211&lt;/a&gt;
  This
          is fixed in some PRs: &lt;a href=&quot;https://github.com/boostorg/fusion/pull/70&quot;&gt;Github
          PR #70&lt;/a&gt;, &lt;a href=&quot;https://github.com/boostorg/fusion/pull/71&quot;&gt;Github
          PR #71&lt;/a&gt;, &lt;a href=&quot;https://github.com/boostorg/fusion/pull/72&quot;&gt;Github
          PR #72&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Patches:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_58_0/0001-Fix-exec_file-for-Python-3-3.4.patch&quot;&gt;0001-Fix-exec_file-for-Python-3-3.4.patch&lt;/a&gt;
          (for libs/python).
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_58_0/0002-Fix-a-regression-with-non-constexpr-types.patch&quot;&gt;0002-Fix-a-regression-with-non-constexpr-types.patch&lt;/a&gt;
          (for libs/fusion).
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_58_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/endian&quot;&gt;Endian&lt;/a&gt;:&lt;/span&gt;
  Types and conversion functions
          for correct byte ordering and more regardless of processor endianness.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/sort/&quot;&gt;Sort&lt;/a&gt;:&lt;/span&gt;
  Includes spreadsort, a general-case
          hybrid radix sort that is faster than O(n*log(n))
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_58_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured errors generated by Windows' &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ConnectEx&lt;/span&gt;&lt;/code&gt;
                function are mapped to their portable equivalents (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10744&quot;&gt;#10744&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DISABLE_CONNECTEX&lt;/span&gt;&lt;/code&gt;
                to allow use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ConnectEx&lt;/span&gt;&lt;/code&gt;
                to be explicitly disabled.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a race condition in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;object_handle&lt;/span&gt;&lt;/code&gt;
                when there are pending wait operations on destruction (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10624&quot;&gt;#10624&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed IPv6 address parsing on FreeBSD, where a trailing scope ID
                would cause conversion to fail with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EINVAL&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Worked around shared library visibility issues by ensuring Asio types
                use default visibility (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9465&quot;&gt;#9465&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11070&quot;&gt;#11070&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the SSL wrapper to call the password callback when loading
                an in-memory key (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10828&quot;&gt;#10828&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed false SSL error reports by ensuring that the SSL error queue
                is cleared prior to each operation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                bug that may result in spurious 'short read' errors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed a redundant null pointer check in the SSL engine (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10088&quot;&gt;#10088&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added options for disabling TLS v1.1 and v1.2 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10690&quot;&gt;#10690&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed use of deprecated OpenSSL function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ERR_remove_state&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed detection of various C++11 features with Clang (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8835&quot;&gt;#8835&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10884&quot;&gt;#10884&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed detection of C++11 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;/code&gt;
                with &lt;tt&gt;g++&lt;/tt&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10982&quot;&gt;#10982&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed multicast test to treat certain &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;join_group&lt;/span&gt;&lt;/code&gt;
                failures as non-fatal.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Decoupled Asio unit tests from Boost.Test (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11116&quot;&gt;#11116&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the tutorial to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;endl&lt;/span&gt;&lt;/code&gt;
                to ensure output is flushed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an unsigned integer overflow reported by Clang's integer sanitizer.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for move-only return types when using a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;yield_context&lt;/span&gt;&lt;/code&gt; object with asynchronous
                operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;yield_context&lt;/span&gt;&lt;/code&gt;
                to allow reentrant calls to the completion handler from an initiating
                function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated detection of Windows Runtime to work with latest Windows
                SDK.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Version&lt;/em&gt; 2.0.5
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10778&quot;&gt;#10778&lt;/a&gt;
                      VC14 CTP4 Atomic don't compile with boost::chrono durations
                      which are not TriviallyCopyable
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10840&quot;&gt;#10840&lt;/a&gt;
                      Missing std:: qualifier for puts call in test_7868.cpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10851&quot;&gt;#10851&lt;/a&gt;
                      Missing std:: qualifier for puts call in time_point_output.cpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10893&quot;&gt;#10893&lt;/a&gt;
                      Minor doc typo in Boost.Chrono
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10992&quot;&gt;#10992&lt;/a&gt;
                      Chrono IO state savers inconsistent with Boost.IO state savers
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10995&quot;&gt;#10995&lt;/a&gt;
                      duration_put::put_value truncates fractional part
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11006&quot;&gt;#11006&lt;/a&gt;
                      Impossible to instantiate time_fmt_io_saver due to several
                      errors.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11012&quot;&gt;#11012&lt;/a&gt;
                      chrono_io v2 fail to compile with boost::chrono::duration&amp;lt;
                      boost::rational&amp;lt;int&amp;gt; &amp;gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Experimental &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;small_vector&lt;/span&gt;&lt;/code&gt;
                container.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Massive dependency reorganization. Now &lt;em&gt;Boost.Container&lt;/em&gt;
                depends on very basic utilities like Boost.Core and &lt;em&gt;Boost.Intrusive&lt;/em&gt;.
                Preprocessed code size have decreased considerably and compilation
                times have improved.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;nth&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;index_of&lt;/span&gt;&lt;/code&gt; functions to containers
                with random-access iterators (except &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_string&lt;/span&gt;&lt;/code&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++17's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_traits&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Allocator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;is_always_equal&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated containers to implement new constructors as specified in
                &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2210&quot;&gt;2210.
                Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9931&quot;&gt;#9931:
                      &lt;em&gt;&amp;quot;flat_map::insert(ordered_unique_range_t...)
                      fails with move_iterators&amp;quot;&lt;/em&gt;&lt;/a&gt; (reopened).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11076&quot;&gt;#11076:
                      &lt;em&gt;&amp;quot;Unqualified calls to memmove/memcpy in container/detail/copy_move_algo.hpp&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10790&quot;&gt;Trac
                      #10790 (&lt;em&gt;long long errors from container&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10808&quot;&gt;Trac
                      #10808 (&lt;em&gt;compare equal operator of vector is broken&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Source Breaking&lt;/em&gt;: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_allocator_adaptor&lt;/span&gt;&lt;/code&gt;'s
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;propagate_on_container_copy_assignment&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;propagate_on_container_move_assignment&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;propagate_on_container_swap&lt;/span&gt;&lt;/code&gt;
                are no longer &lt;code&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;integral_constant&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; types. The dependency reorganization
                needed to break with those classes to avoid MPL dependencies, and
                interoperability with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;integral_constant&lt;/span&gt;&lt;/code&gt;
                was not guaranteed. Code assumming &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;true_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;false_type&lt;/span&gt;&lt;/code&gt;
                on this will not compile. As a workaround, use the guaranteed internal
                &lt;code&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value&lt;/span&gt;&lt;/code&gt;
                constant: &lt;code&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;integral_constant&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;scoped_allocator_adaptor&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Allocator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;propagate_on_container_move_assignment&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                support for ARM/iOS (32+64 bit)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                class execution_context (C++14)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/&quot;&gt;Conversion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_pointer_downcast&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_pointer_cast&lt;/span&gt;&lt;/code&gt;
                functions were added (thanks to Boris Rasin) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10780&quot;&gt;#10780&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                All the functions now throw exceptions using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documnetation update
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/date_time/&quot;&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Restored &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;to_time_t&lt;/span&gt;&lt;/code&gt;
                function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Renamed variable v_type to var_type so it longer conflicts with an
                AIX system variable.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documnetation fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/flyweight/&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added hash support both with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hash&lt;/span&gt;&lt;/code&gt;
                and &lt;a href=&quot;http://www.boost.org/doc/html/hash.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hash&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
                This can be optionally &lt;a href=&quot;http://www.boost.org/libs/flyweight/doc/reference/flyweight.html#disable_hash_support&quot;&gt;disabled&lt;/a&gt;
                to avoid clashes with legacy code where this support has already
                been defined by the user.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/function/&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for functions accepting C++11 rvalues and Boost.Move
                rvalues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10585&quot;&gt;#10585&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/factory/&quot;&gt;Functional/Factory&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minor breaking change: the default template parameter to indicate
                that it shouldn't use an allocator is now &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/code&gt;,
                instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none_t&lt;/span&gt;&lt;/code&gt;.
                For details, see the &lt;a href=&quot;http://www.boost.org/libs/functional/factory/doc/html/#boost_functional_factory.changes&quot;&gt;changelog&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Automatic hash creation function (&lt;a href=&quot;https://github.com/boostorg/fusion/pull/12&quot;&gt;Github
                PR #12&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New ADAPT_STRUCT, ADAPT_ADT, ADAPT_ASSOC_ that deduce the members
                types (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9516&quot;&gt;#9516&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add convert implementation for Boost.Tuple and std::tuple.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add mpl::clear implementation for Boost.Tuple and std::tuple.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Use boost::declval instead of std::declval, (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10190&quot;&gt;#10190&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;blank&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8622&quot;&gt;#8622&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add result_of::{copy,move} (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5886&quot;&gt;#5886&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better constexpr and noexcept support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved SFINAE Friendliness of many metafunctions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10676&quot;&gt;#10676&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10443&quot;&gt;#10443&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                result_of::size::value and result_of::size::type::value are the same
                type now (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7304&quot;&gt;#7304&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                result_of::at&amp;lt;Seq, N&amp;gt;::type is now defined when sizeof of sequence
                is less than N (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6507&quot;&gt;#6507&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7651&quot;&gt;#7651&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix missing includes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8457&quot;&gt;#8457&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Many documentation fixes &amp;amp; improvements (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6090&quot;&gt;#6090&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5324&quot;&gt;#5324&lt;/a&gt;,
                &lt;a href=&quot;https://github.com/boostorg/fusion/pull/33&quot;&gt;GitHub PR
                #33&lt;/a&gt;, &lt;a href=&quot;https://github.com/boostorg/fusion/pull/53&quot;&gt;GitHub
                PR #53&lt;/a&gt;, &lt;a href=&quot;https://github.com/boostorg/fusion/pull/56&quot;&gt;GitHub
                PR #56&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm num_segments, returning the number of segments
                      of a geometry
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New overload for is_valid algorithm, that takes a string reference
                      as a second argument and fills it with a message related to
                      the validity or invalidity of the geometry
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New overload for is_valid algorithm, that takes an enum reference
                      as a second argument and fills it with a value related to the
                      validity or invalidity of the geometry
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Disjoint and intersects support the following geometry combinations:
                      point/multipoint, multipoint/multipoint, multipoint/segment,
                      multipoint/box
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Improvements:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Buffer now supports flat-ends for linestrings with a bend close
                      to the start (such that buffered segment crosses flat-end).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Buffer performance is improved significantly
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Partition performance is improved significantly for polygons,
                      potentially enhancing all overlay operations
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Solved tickets:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8379&quot;&gt;#8379&lt;/a&gt;
                      Invalid comparison of the result of determinant
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10108&quot;&gt;#10108&lt;/a&gt;
                      Error in overlay operations in specific cases where geometries
                      touch at one point
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10201&quot;&gt;#10201&lt;/a&gt;
                      Suggestion to use different function to compare coordinates
                      [wontfix]
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10467&quot;&gt;#10467&lt;/a&gt;
                      Template parameter name coliding with B0 macro name defined
                      in termios.h
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10640&quot;&gt;#10640&lt;/a&gt;
                      Invalid result of buffer() for CCW Polygons.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10666&quot;&gt;#10666&lt;/a&gt;
                      MSVC compiler warning C4127: conditional expression is constant
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10747&quot;&gt;#10747&lt;/a&gt;
                      Error in rescaling causing errors in areal/areal set operations
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10770&quot;&gt;#10770&lt;/a&gt;
                      Buffer fails for large distances, or rough round joins, where
                      concavities where not intersected properly
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10658&quot;&gt;#10658&lt;/a&gt;
                      sym_difference yields bad result for int polygons
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10835&quot;&gt;#10835&lt;/a&gt;
                      Difference of multilinestring and polygon yields wrong result
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10861&quot;&gt;#10861&lt;/a&gt;
                      Rtree failing to compile for Value being a pair or a tuple
                      containing pointer to Geometry and the default equal_to&amp;lt;&amp;gt;
                      used
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10863&quot;&gt;#10863&lt;/a&gt;
                      Template parameter name coliding with B0 macro name defined
                      in termios.h (duplicate of 10467)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10887&quot;&gt;#10887&lt;/a&gt;
                      Invalid result of within() and relate() for Linear/MultiPolygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10890&quot;&gt;#10890&lt;/a&gt;
                      Invalid result of disjoint() for Point/Segment.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10904&quot;&gt;#10904&lt;/a&gt;
                      Invalid calculation of most significant Dimension of a segment
                      in relate_cartesian_segments strategy
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10912&quot;&gt;#10912&lt;/a&gt;
                      Invalid result of within() and relate() for Areal/Areal
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10951&quot;&gt;#10951&lt;/a&gt;
                      Tests failing on windows with intel compiler due to lack of
                      /bigobj flag.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10957&quot;&gt;#10957&lt;/a&gt;
                      Assertion failure and invalid results of various relational
                      operations.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10958&quot;&gt;#10958&lt;/a&gt;
                      Invalid results of disjoint() L/L and L/A.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10959&quot;&gt;#10959&lt;/a&gt;
                      Assertion failure in get_turns() used with no_rescale_policy.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10960&quot;&gt;#10960&lt;/a&gt;
                      Invalid result of get_turns() for L/A, missing turn.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10961&quot;&gt;#10961&lt;/a&gt;
                      Invalid result of get_turns() for L/A, invalid turn for a Linear
                      spike.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11112&quot;&gt;#11112&lt;/a&gt;
                      Compilation failure on Solaris due to a CS name clash (used
                      for a macro on this platform)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11121&quot;&gt;#11121&lt;/a&gt;
                      Invalid result of difference() for integral coordinates
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in multipoint/polygon multipoint/multipolygon distance
                      computation (wrong detection of points inside the areal geometry)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in flatten_iterator's assignment operator causing an access
                      violation
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in Cartesian segment-segment intersection strategy when
                      one segment degenerates to a point and is collinear to the
                      other non-degenerate segment
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in centroid(), non-deterministic result if calculated for
                      e.g. a Polygon with zero-area.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for joins with a limited number of points
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for round joins with limited number of points
                      around sharp corners
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for joins with large buffer distances
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for round ends with an odd number of points
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for flat ends with large buffer distances
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for interior rings with large negative buffer
                      distances
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in closing_iterator not working properly when the input
                      range is empty
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in is_simple, not handling properly closed simple linestrings
                      within multilinestrings
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in rtree constructors taking a pair of Iterators or a Range
                      (packing algorithm), the use of reference to destroyed temporary
                      when Iterator's reference is not true reference, e.g. for some
                      of the Range Adaptors. It also affects distance() and comparable_distance().
                      This bug may cause unexpected behavior of the rtree or distance()
                      algorithm, e.g. an assertion failure or a SEGFAULT.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in rtree count() member function, the use of reference
                      to destroyed temporary when object of type convertible but
                      not the same as value_type or indexable_type is passed. If
                      this happens, wrong result may be returned, in most cases 0.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bugs related to the handling of Ranges, preventing compilation
                      of Geometries using non-Container Ranges in some algorithms
                      (thanks to Samuel Debionne)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed strict aliasing violation (&lt;a href=&quot;https://github.com/boostorg/functional/pull/3&quot;&gt;GitHub
                #3&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced some compile-time dependencies. Updated to Boost.Container
                changes.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/13&quot;&gt;GitHub
                      Pull #13 (&lt;em&gt;&amp;quot;haiku: we don't have XSI shared memory,
                      so don't try to use it&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced compile-time dependencies, headers, and the use of Boost.Preprocessor,
                specially for hooks and iterators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6720&quot;&gt;Boost
                      Trac #6720: &lt;em&gt;intrusive::unordered_set::clear_and_dispose
                      does not compile on VC11 Beta when passed a stateless lambda&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10771&quot;&gt;Boost
                      Trac #10771: &lt;em&gt;remove_if is broken for slist&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10853&quot;&gt;Boost
                      Trac #10853: &lt;em&gt;problem with detection of const_cast_from&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10987&quot;&gt;Boost
                      Trac #10987: &lt;em&gt;bug in any_xxx_node_traits, returning
                      by reference&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Now std::stream is used for conversions to float numbers &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5660&quot;&gt;#5660&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6975&quot;&gt;#6975&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10639&quot;&gt;#10639&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed thread id formatting.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed process id formatting. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10926&quot;&gt;#10926&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed build failure on GNU Hurd.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed incorrect behavior of text file sink backend in case
                      if free space on the file system gets exhausted. The sink will
                      no longer create lots of empty files in attempt to recover.
                      (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11016&quot;&gt;#11016&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed incorrect behavior of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_set&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; in some cases. The inserted
                      elements could have made some previously inserted elements
                      not findable. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11106&quot;&gt;#11106&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed incorrect behavior of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_value_set&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; if a large number of attribute
                      values are inserted into the set. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11148&quot;&gt;#11148&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href=&quot;http://www.boost.org/libs/log/doc/html/log/changelog.html&quot;&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added two new special functions - trigamma and polygamma.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Large update to the Elliptic integral code to use Carlson's latest
                algorithms - these should be more stable, more accurate and slightly
                faster than before. Also added support for Carlson's RG integral.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added ellint_d, jacobi_zeta and heuman_lambda elliptic integrals.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed namespace scope constants so they are constexpr on conforming
                compilers, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10901&quot;&gt;#10901&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed various cases of spurious under/overflow in the incomplete
                beta and gamma functions, plus the elliptic integrals, with thanks
                to Rocco Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix 3-arg legendre_p and legendre_q functions to not call the policy
                based overload if the final argument is not actually a policy.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cleaned up some dead code in the incomplete beta function, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10985&quot;&gt;#10985&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed extreme-value pdf for large valued inputs, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10938&quot;&gt;#10938&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Switched documentation to use SVG rather than PNG graphs and equations
                - browsers seem to have finally caught up!
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_MOVE_BASE&lt;/span&gt;&lt;/code&gt;
                utility.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adl_move_swap&lt;/span&gt;&lt;/code&gt;
                utility.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced dependencies on other Boost libraries to make the library
                a bit more lightweight.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11044&quot;&gt;Trac
                      #11044: &lt;em&gt;&amp;quot;boost::rv inherits off union, when
                      such passed as template argument&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The efficiency of lookup operations has improved in situations where
                they involve the generation of temporary values of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;key_type&lt;/span&gt;&lt;/code&gt;. Consider for instance
                the following code:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;
  &lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;identifier&quot;&gt;indexed_by&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;
    &lt;span class=&quot;identifier&quot;&gt;ordered_unique&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;multi_t&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;special&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;identifier&quot;&gt;multi_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;=...;&lt;/span&gt;
&lt;span class=&quot;identifier&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;boost&amp;quot;&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// passed a const char*, not a std::string    &lt;/span&gt;
&lt;/pre&gt;
              &lt;div&gt;
                In previous versions of the library, the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;find&lt;/span&gt;&lt;/code&gt;
                operation generates several temporary &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;/code&gt;s
                (one every time an internal comparison is made). In sufficiently
                advanced compilers, this is now avoided so that only one temporary
                is created.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;frexp&lt;/span&gt;&lt;/code&gt; to
                always be non-expression template generating, see: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10993&quot;&gt;10993&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved support of cpp_dec_float on Cygwin and other platforms with
                missing long double support, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10924&quot;&gt;10924&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved noexcept support and added some more tests, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10990&quot;&gt;10990&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various workarounds applied for Intel-15.0 and Solaris-12.4 compilers.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/optional/&quot;&gt;Optional&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved documentation; documented IO operations and header files.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none_t&lt;/span&gt;&lt;/code&gt; is no longer convertible
                      from literal 0. This avoids a bug where &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;rational&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;oi&lt;/span&gt;
                      &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;;&lt;/span&gt;&lt;/code&gt; would initialize an optional
                      object with no contained value.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a way to manually disable move semantics: just define
                      macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_OPTIONAL_CONFIG_NO_RVALUE_REFERENCES&lt;/span&gt;&lt;/code&gt;.
                      This can be used to work around &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10399&quot;&gt;#10399&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10825&quot;&gt;#10825&lt;/a&gt;
                      Improved the trick that prevents streaming out &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;/code&gt; without header
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional_io&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      by using safe-bool idiom.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11087&quot;&gt;#11087&lt;/a&gt;
                      It is no longer possible to assign &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;U&lt;/span&gt;&lt;/code&gt;
                      is not assignable or convertible to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10839&quot;&gt;#10839&lt;/a&gt;
                      Value accessors now work correctly on rvalues of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/phoenix/&quot;&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Version 3.2.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Phoenix now has a &lt;em&gt;lazy list&lt;/em&gt; implementation
                      as an optional extension.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Example:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      A new example &lt;em&gt;bind_goose&lt;/em&gt; shows the compatibility
                      between &lt;em&gt;boost bind&lt;/em&gt; and &lt;em&gt;boost
                      phoenix bind&lt;/em&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10927&quot;&gt;#10927&lt;/a&gt;
                      Missing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;/code&gt; qualifier for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fabs&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;phoenix&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stdlib&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cmath&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cpp&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11085&quot;&gt;#11085&lt;/a&gt;
                      Missing qualifier for pow call in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;phoenix&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function_tests&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cpp&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixes for a number of cases failing with &lt;em&gt;bind&lt;/em&gt;,
                      &lt;em&gt;lambda&lt;/em&gt; and &lt;em&gt;let&lt;/em&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/predef/&quot;&gt;Predef&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Version 1.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Visual Studio 2015 detection.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added detection of Haiku OS.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix Android endian detection.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;predef_check&lt;/span&gt;&lt;/code&gt;
                program and BBv2 integration for build configuration checks.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/random/&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added non_central_chi_squared_distribution.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Version&lt;/em&gt; 4.5.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Experimental Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9600&quot;&gt;#9600&lt;/a&gt;
                      Async: Add task_region
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10611&quot;&gt;#10611&lt;/a&gt;
                      Add emplace promise::set_value and emplace make_ready_future
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10826&quot;&gt;#10826&lt;/a&gt;
                      Add scheduled executor operations
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11048&quot;&gt;#11048&lt;/a&gt;
                      Add a serial_executor based on continuations
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6787&quot;&gt;#6787&lt;/a&gt;
                      boost::thread::sleep() hangs if system time is rolled back
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10734&quot;&gt;#10734&lt;/a&gt;
                      Submit method work differently on different executors, some
                      throw exception and some silently ignore error (thread_executor
                      and inline_executor)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10736&quot;&gt;#10736&lt;/a&gt;
                      Task exceptions silently ignored. I think std::terminate solution
                      from N3785 and std::thread is better choice and more consistent.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10737&quot;&gt;#10737&lt;/a&gt;
                      In serial_executor we have infinite wait if task throw exception.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10822&quot;&gt;#10822&lt;/a&gt;
                      Boost.Thread fails to compile on Android
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10824&quot;&gt;#10824&lt;/a&gt;
                      Boost.Thread 1.57 breaks Windows XP compatibility for SP2 and
                      below.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10963&quot;&gt;#10963&lt;/a&gt;
                      future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::then Has No Implementation
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10964&quot;&gt;#10964&lt;/a&gt;
                      future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::unwrap().then() Deadlocks
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10968&quot;&gt;#10968&lt;/a&gt;
                      The futures returned by async() and future::then() are not
                      blocking.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10971&quot;&gt;#10971&lt;/a&gt;
                      shared_future::get()/get_or() must be const
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10972&quot;&gt;#10972&lt;/a&gt;
                      shared_future::then() can be called multiple times.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10979&quot;&gt;#10979&lt;/a&gt;
                      Support T&amp;amp; type deduction when the make_ready_future parameter
                      is reference_wrapper&amp;lt;T&amp;gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10996&quot;&gt;#10996&lt;/a&gt;
                      Thread physical_concurrency() is failing on Windows
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11035&quot;&gt;#11035&lt;/a&gt;
                      BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE not defined for Android
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11053&quot;&gt;#11053&lt;/a&gt;
                      The attached code results in a R6025 - pure virtual function
                      call in run_thread_exit_callbacks
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_erasure/&quot;&gt;TypeErasure&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation with MSVC 12.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_index/&quot;&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Link time assertions added on platforms that support it
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/units&quot;&gt;Units&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix for base units with arbitrary dimensions.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix move assignment with stateful, propagate_on_container_move_assign
                allocators (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10777&quot;&gt;#10777&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix potential overflow when calculating number of buckets to allocate
                (&lt;a href=&quot;https://github.com/boostorg/unordered/pull/4&quot;&gt;GitHub
                #4&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Other minor changes, see &lt;a href=&quot;http://www.boost.org/doc/html/unordered/changes.html&quot;&gt;changelog&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change:&lt;/strong&gt; Compile time checked
                getter is now used by default in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;VariantT&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_get&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;VariantT&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;. New getter asserts that type &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;U&lt;/span&gt;&lt;/code&gt; is one of the types that can
                be stored in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;VariantT&lt;/span&gt;&lt;/code&gt;.
                Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT&lt;/span&gt;&lt;/code&gt;
                to change default behavior. See &lt;a href=&quot;http://www.boost.org/doc/html/variant/reference.html#header.boost.variant.get_hpp&quot;&gt;get.hpp&lt;/a&gt;
                and &lt;a href=&quot;http://www.boost.org/doc/html/variant/reference.html#header.boost.variant.polymorphic_get_hpp&quot;&gt;polymorphic_get.hpp&lt;/a&gt;
                descriptions for more info &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/547&quot;&gt;#547&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing comparison operators to variant &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8620&quot;&gt;#8620&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10811&quot;&gt;#10811&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multiple documentations fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10273&quot;&gt;#10273&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10653&quot;&gt;#10653&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Variadic templats enabled on Clang &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10832&quot;&gt;#10832&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Autodetection of return types for visitors in C++14, which makes
                it possible to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;apply_visitor&lt;/span&gt;&lt;/code&gt;
                with generic lambdas &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10837&quot;&gt;#10837&lt;/a&gt;:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;apply_visitor&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;special&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;special&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;identifier&quot;&gt;variant_instance&lt;/span&gt;
&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved swap functions &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10882&quot;&gt;#10882&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Many improvements to variadic templates, even more methods support
                variadics.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multiple bugfixes and testing improvements including Coveralls integration
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_58_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5, 3.6
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.9.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.8.1, 4.8.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7, 4.8.4, 4.9.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.7, 4.5.4, 4.6.3, 4.7.3, 4.8.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2, 3.3, 3.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5, 3.6
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.6.4, 4.7.3, 4.8.1, 4.9.2, 5.0.0 (experimental)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7, 4.8.4, 4.9.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.7, 4.5.4, 4.6.4, 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Android
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4, 3.5
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8, 4.9
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_58_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.57.0</title><link>http://www.boost.org/users/history/version_1_57_0.html</link><guid>http://www.boost.org/users/history/version_1_57_0.html</guid><pubDate>Mon, 3 Nov 2014 15:55:36 -0600</pubDate><description>



  &lt;div id=&quot;version_1_57_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                RTTI is not required any more (&lt;a href=&quot;http://www.boost.org/libs/type_index&quot;&gt;TypeIndex&lt;/a&gt;
                library is used for RTTI emulation)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8958&quot;&gt;#8958&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed the &lt;tt&gt;kqueue&lt;/tt&gt; reactor so that it works on FreeBSD
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10606&quot;&gt;#10606&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an issue in the &lt;tt&gt;kqueue&lt;/tt&gt; reactor which resulted
                in spinning when using serial ports on Mac OS (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10496&quot;&gt;#10496&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;tt&gt;kqueue&lt;/tt&gt; reactor support for read-only file
                descriptors (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10367&quot;&gt;#10367&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a compile error when using the &lt;tt&gt;/dev/poll&lt;/tt&gt;
                reactor (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10350&quot;&gt;#10350&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10572&quot;&gt;#10572&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the Windows backend to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;WSASocketW&lt;/span&gt;&lt;/code&gt;,
                as &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;WSASocketA&lt;/span&gt;&lt;/code&gt; has
                been deprecated (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10534&quot;&gt;#10534&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some warnings reported by Visual C++ 2013 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10376&quot;&gt;#10376&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed integer type used in the WinRT version of the byte-order conversion
                functions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10539&quot;&gt;#10539&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed documentation to indicate that &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                are not made available when including the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                convenience header (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10567&quot;&gt;#10567&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Explicitly marked &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;/code&gt;
                as deprecated. Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;/code&gt;
                instead.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer/&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some warnings and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_if_noexcept&lt;/span&gt;&lt;/code&gt;
                from Boost.Move is used &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7888&quot;&gt;#7888&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HAS_PRAGMA_DETECT_MISMATCH&lt;/span&gt;&lt;/code&gt;
                macro was added
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;initializer_list&lt;/span&gt;&lt;/code&gt;.
                Contributed by Robert Matusewicz.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed double destruction bugs in vector and backward expansion capable
                allocators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10263&quot;&gt;Trac
                      #10263 (&lt;em&gt;&amp;quot;AIX 6.1 bug with sched_yield() function
                      out of scope&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://github.com/boostorg/container/pull/16&quot;&gt;GitHub
                      #16: &lt;em&gt;Fix iterators of incomplete type containers&lt;/em&gt;&lt;/a&gt;.
                      Thanks to Mikael Persson.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                optionally register stacks with valgrind
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10386&quot;&gt;#10386&lt;/a&gt; MSVC link error in asymmetric_coroutine.hpp: symbol already
                defined
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10536&quot;&gt;#10536&lt;/a&gt; call to 'begin(...pull_coroutine&amp;lt; R &amp;gt; &amp;amp; c)'
                is ambiguous
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/flyweight/&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added serialization support via &lt;a href=&quot;http://www.boost.org/libs/serialization/&quot;&gt;Boost
                Serialization&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;flyweight&lt;/span&gt;&lt;/code&gt; default
                constructor was made explicit in Boost 1.56, which introduces a regression
                in some initialization scenarios. The former non-explicit default
                constructor has been restored (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10439&quot;&gt;#10439&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Improvements&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The support of parameters convertible to value_type in rtree
                      insert(), remove() and count() functions
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Solved tickets&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8402&quot;&gt;8402&lt;/a&gt;
                      Implicit conversion warnings
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9354&quot;&gt;9354&lt;/a&gt;
                      Bug in winding strategy affecting within() and covered_by()
                      for non-cartesian coordinate systems
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10177&quot;&gt;10177&lt;/a&gt;
                      Missing include
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10345&quot;&gt;10345&lt;/a&gt;
                      Distance fails to compile for some coordinate types
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10398&quot;&gt;10398&lt;/a&gt;
                      Wrong neighbour check in buffer, calculating turns
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10421&quot;&gt;10421&lt;/a&gt;
                      Invalid Point-Box distance for spherical CS
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10615&quot;&gt;10615&lt;/a&gt;
                      Rtree constructor feature request
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10643&quot;&gt;10643&lt;/a&gt;
                      Invalid point_on_surface() result for big coordinates
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10668&quot;&gt;10668&lt;/a&gt;
                      Implicit conversion warnings (duplicated 8402)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Several fixes of bugs in algorithm buffer
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in point_on_surface() for CCW Polygons (extreme_points())
                      and numerical issue (thanks to Matt Amos)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in disjoint() for A/A fixed by replacement of point_on_surface()
                      with point_on_border() (thanks to Matt Amos)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The result of convex_hull(), duplicated Point in open output,
                      too small number of Points for 1- and 2-Point input
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Imprecision for big coordinates in centroid(), fixed by Points
                      translation (related with ticket 10643)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      for_each_segment() not taking into account the last segment
                      of open Geometry
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;/code&gt;,
                now forwards boost::interprocess::unique_ptr to the general purpose
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;movelib&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;/code&gt; class from &lt;strong&gt;Boost.Move&lt;/strong&gt;. This implementation is closer
                to the standard &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;/code&gt;
                implementation and it's better maintained.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10262&quot;&gt;Trac
                      #10262 (&lt;em&gt;&amp;quot;AIX 6.1 bug with variable definition
                      hz&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10229&quot;&gt;Trac
                      #10229 (&lt;em&gt;&amp;quot;Compiling errors in interprocess\detail\os_file_functions.hpp&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10506&quot;&gt;Trac
                      #10506 (&lt;em&gt;&amp;quot;Infinite loop in create_or_open_file&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/11&quot;&gt;GitHub
                      Pull #11 (&lt;em&gt;&amp;quot;Compile fix for BOOST_USE_WINDOWS_H&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reorganized Doxygen marks to obtain a better header reference.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Experimental version of node checkers, contributed by Matei David.
                Many thanks!
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;a href=&quot;http://www.open-std.org/JTC1/sc22/WG21/docs/papers/2013/n3644.pdf&quot;&gt;N3644:
                Null Forward Iterators&lt;/a&gt; from C++14.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://github.com/boostorg/intrusive/pull/12&quot;&gt;GitHub
                      Pull #12: &lt;em&gt;Fix MSVC14 warning C4456: declaration of
                      'x_parent_right' hides previous local declaration&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10520&quot;&gt;Boost
                      Trac #10520: &lt;em&gt;Conversion warning in intrusive/detail/utilities.hpp&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10469&quot;&gt;Boost
                      Trac #10469: &lt;em&gt;Erasing from intrusive unordered_multiset
                      with optimize_multikey goes into an infinite loop&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iterator/&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Most components of the library were moved into the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterators&lt;/span&gt;&lt;/code&gt; namespace. For backward
                compatibility the components are also accessible in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;/code&gt; namespace.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Iterator operators are now conditionally defined based on the iterator
                category.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some of the internal components of the library were made public (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;minimum_category&lt;/span&gt;&lt;/code&gt;, for example).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some internal changes, library now consist of multiple headers instead
                of a single one &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10391&quot;&gt;#10391&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10173&quot;&gt;#10173&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Hyperexponential Distribution.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix some spurious overflows in the incomplete gamma functions (with
                thanks to Rocco Romeo).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bug in derivative of incomplete beta when a = b = 0.5 - this
                also effects several non-central distributions, see issue 10480.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some corner cases in function round.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Don't support 80-bit floats in cstdfloat.hpp if standard library
                support is broken.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;/code&gt; smart
          pointer. Thanks to Howard Hinnant for his excellent unique_ptr emulation
          code and testsuite.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_if_noexcept&lt;/span&gt;&lt;/code&gt;
          utility. Thanks to Antony Polukhin for the implementation.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Fixed bugs:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9785&quot;&gt;Trac #9785:
                &lt;em&gt;&amp;quot;Compiler warning with intel icc in boost/move/core.hpp&amp;quot;&lt;/em&gt;&lt;/a&gt;,
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10460&quot;&gt;Trac #10460:
                &lt;em&gt;&amp;quot;Compiler error due to looser throw specifier&amp;quot;&lt;/em&gt;&lt;/a&gt;,
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://github.com/boostorg/move/pull/3&quot;&gt;Git Pull #3:
                &lt;em&gt;&amp;quot;Don't delete copy constructor when rvalue references
                are disabled&amp;quot;&lt;/em&gt;&lt;/a&gt;,
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_array/&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a friend-declaration related warning for clang (thanks to Marcel
                Raad).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed rational to float conversions to exactly round to nearest.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added improved generic float to rational conversions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed rare bug in exponent function for cpp_bin_float.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed various minor documentation issues.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                When &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tuple&lt;/span&gt;&lt;/code&gt;s are available, these can
                be used for lookup operations in indices equipped with composite
                keys. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tuple&lt;/span&gt;&lt;/code&gt;s are also supported for backwards
                compatibility.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/preprocessor/&quot;&gt;Preprocessor&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added is_begin_parens and remove_parens.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added tuple functionality to parallel all array functionality.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed VC++ problems with empty tuple data.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated internal is_empty to use superior variadic version when variadic
                macros are supported.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated clang to have same variadic support as gcc.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated doc for new functionality.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Experimental Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6227&quot;&gt;#6227&lt;/a&gt;
                      Synchro: Use of variadic templates on Generic Locking Algorithms
                      on compilers providing them
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10298&quot;&gt;#10298&lt;/a&gt;
                      Synchro: Added queue views.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10300&quot;&gt;#10300&lt;/a&gt;
                      Async: Added generic_executor_ref.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10552&quot;&gt;#10552&lt;/a&gt;
                      Add make_valid_future
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6782&quot;&gt;#6782&lt;/a&gt;
                      call_once uses incorrect barrier intrinsic on Visual Studio
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6787&quot;&gt;#6787&lt;/a&gt;
                      boost::thread::sleep() hangs if system time is rolled back
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7665&quot;&gt;#7665&lt;/a&gt;
                      this_thread::sleep_for no longer uses steady_clock in thread
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9307&quot;&gt;#9307&lt;/a&gt;
                      future::fallback_to assert with ERRORRRRR boost: mutex lock
                      failed in pthread_mutex_lock: Invalid argument
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9308&quot;&gt;#9308&lt;/a&gt;
                      future::async fails with terminate called throwing an exception
                      when called with a lambda - clang-darwin-asan11
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9310&quot;&gt;#9310&lt;/a&gt;
                      test_4648_lib fails on clang-darwin-asan11
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9425&quot;&gt;#9425&lt;/a&gt;
                      Boost promise &amp;amp; future does not use supplied allocator
                      for value storage
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9558&quot;&gt;#9558&lt;/a&gt;
                      future continuations unit test hangs in get()/pthread_cond_wait()
                      on Mac 10.7/32-bit/x86/darwin-4.2.1
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9787&quot;&gt;#9787&lt;/a&gt;
                      [windows] Small duration value passed down to basic_timed_mutex::try_lock_until
                      and condition_variable::wait_until can cause infinite or near
                      infinite wait for win32
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9880&quot;&gt;#9880&lt;/a&gt;
                      [windows] boost::condition_variable.timed_wait() exception
                      if system time &amp;lt; 1970
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10159&quot;&gt;#10159&lt;/a&gt;
                      GCC 4.4 error sorry, unimplemented
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10196&quot;&gt;#10196&lt;/a&gt;
                      thread_specific_ptr does not support void*
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10296&quot;&gt;#10296&lt;/a&gt;
                      Boost.Thread 1.56 rc1 does not compile on Mingw
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10297&quot;&gt;#10297&lt;/a&gt;
                      Boost.Thread 1.56 rc1 hangs when built with clang on armhf
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10340&quot;&gt;#10340&lt;/a&gt;
                      No boost::promise&amp;lt;T&amp;gt;::set_value(const T&amp;amp;) overload
                      present in C++03 mode
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10425&quot;&gt;#10425&lt;/a&gt;
                      Missing documentation for when_all/when_any.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10426&quot;&gt;#10426&lt;/a&gt;
                      Take in account the deferred futures in when_all.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10427&quot;&gt;#10427&lt;/a&gt;
                      Take in account the deferred and ready futures in when_any.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10428&quot;&gt;#10428&lt;/a&gt;
                      Adapt to new unique_ptr interface in Boost.Move
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10465&quot;&gt;#10465&lt;/a&gt;
                      Missing implementation of when_all/when_any when the result
                      is a tuple.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10476&quot;&gt;#10476&lt;/a&gt;
                      classes using BOOST_THREAD_MOVABLE_ONLY&amp;lt;T&amp;gt; dont satisfy
                      is_copy_constructible&amp;lt;T&amp;gt;::value == false
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10478&quot;&gt;#10478&lt;/a&gt;
                      Data race in boost/thread/future.hpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10529&quot;&gt;#10529&lt;/a&gt;
                      The pthread/condition_variable_any constructor reports incorrect
                      error code for pthread_cond_init
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10563&quot;&gt;#10563&lt;/a&gt;
                      shared_future&amp;lt;R&amp;gt;::then should be const
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_index/&quot;&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HAS_PRAGMA_DETECT_MISMATCH&lt;/span&gt;&lt;/code&gt;
                is now used to detect ODR violations &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10404&quot;&gt;#10404&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Typos fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10294&quot;&gt;#10294&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_traits/&quot;&gt;TypeTraits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new traits is_copy_assignable and is_final.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/units/&quot;&gt;Units&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New unit system &amp;lt;boost/units/systems/information.hpp&amp;gt; units
                for: bit, byte, nat, hartley and shannon,
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add scale units for binary prefixes kibi, mebi, gibi, tebi, pebi,
                zebi and yobi IEC prefixes
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix output of NaN on msvc-14
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for C++11 numeric_limits::max_digits10 and ::lowest
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                warning fixes
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pointer&lt;/span&gt;&lt;/code&gt; typedef
                in iterators (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10672&quot;&gt;#10672&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix Coverity warning (&lt;a href=&quot;https://github.com/boostorg/unordered/pull/2&quot;&gt;GitHub
                #2&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;prior&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                functions taking distance arguments were reworked. The code now work
                correctly when the distance is unsigned or both arguments are integers.
                The new code relies on the availability of operators supported by
                the first argument to select the correct implementation.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/ublas/&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                added two new types: matrix_row and matrix_column facades . With
                them, it is possible to access to the matrices as an array of rows
                and an array of columns, respectively.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                added fixed_vector/fixed_matrix classes to represent small - fixed
                size containers. Requires c++11 because it is using std::array
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                fixed the long standing banded matrix bug (https://svn.boost.org/trac/boost/ticket/7549).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                the interface of matrices and vectors has been extended with cbegin,
                cend, crbegin and crend member functions, as defined in c++11.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                removed doxygen documentation to make the distribution lighter
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                removed warnings with MSVC for unused parameters
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                changed the uBlas development folder structure (will not affect users
                of the library)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                performed a very large overhaul with respect to warnings and errors
                on various compilers. Apart for some hard to resolve warnings and
                older compiler incompatibilities, compilations with uBlas will be
                much cleaner now.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_57_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2, 3.3, 3.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.4, 4.7.3, 4.8.1, 4.8.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.9.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7, 4.8.2, 4.8.3, 4.9.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 13.1, 14.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++11: 13.1, 14.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 6.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 6.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 6.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 4.9.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7. 4.5.4, 4.6.3, 4.7.2, 4.7.3, 4.8.0, 4.8.2,
                4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2, 3.3, 3.4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5.0, trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.6.4, 4.7.3, 4.8.1, 4.8.2, 5.0 &lt;em&gt;(experimental)&lt;/em&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7, 4.8.2, 4.8.3, 4.9.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.1, 13.0, 13.1, 14.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++11: 13.1, 14.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 6.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 6.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 6.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 4.9.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.3, 4.8.0, 4.8.2, 4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_57_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.56.0</title><link>http://www.boost.org/users/history/version_1_56_0.html</link><guid>http://www.boost.org/users/history/version_1_56_0.html</guid><pubDate>Thu, 7 Aug 2014 09:08:22 -0700</pubDate><description>



  &lt;div id=&quot;version_1_56_0.other_downloads&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Other Downloads&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;https://sourceforge.net/projects/boost/files/boost-binaries/1.56.0/&quot;&gt;Windows
          binaries&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_56_0.modularization&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Modularization&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost version control has migrated to a system using git submodules. This shouldn't
      make too much of a difference to users, although the directory structure is
      now a bit different.
    &lt;/p&gt;
    &lt;p&gt;
      Parts of some libraries have been moved into different modules, and several
      new modules have been extracted from existing code. All header paths should
      remain the same. The new modules are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/assert/&quot;&gt;Assert&lt;/a&gt;:&lt;/span&gt;
  Customizable assert macros.
          Maintained by Peter Dimov.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/core/&quot;&gt;Core&lt;/a&gt;:&lt;/span&gt;
  Core utilities used by other
          libraries, with minimal dependencies. Maintained by Peter Dimov, Glen Fernandes
          and Andrey Semashev.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical_Cast&lt;/a&gt;:&lt;/span&gt;
  General literal
          text conversions, such as an int represented a string, or vice-versa, from
          Kevlin Henney.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/throw_exception/&quot;&gt;Throw_Exception&lt;/a&gt;:&lt;/span&gt;
  A common
          infrastructure for throwing exceptions from Boost libraries, from Emil
          Dotchevski.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;Winapi:&lt;/span&gt;
  Windows API declarations without &amp;lt;windows.h&amp;gt;, for internal
          Boost use.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_56_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/align/&quot;&gt;Align&lt;/a&gt;:&lt;/span&gt;
  Memory alignment functions,
          allocators, and adaptors, from Glen Fernandes.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_index/&quot;&gt;Type_Index&lt;/a&gt;:&lt;/span&gt;
  Runtime/Compile
          time copyable type info, from Antony Polukhin.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_56_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Acumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New accumulators &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_variance&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_moment&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed rvalue references related issues (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9215&quot;&gt;#9215&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9462&quot;&gt;#9462&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Dropped support of antique compilers.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                to work correctly with new Boost.Coroutine interface (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9442&quot;&gt;#9442&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9928&quot;&gt;#9928&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured that incomplete &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; coroutines are correctly unwound
                when cleaned up by the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                destructor (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9731&quot;&gt;#9731&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed delegation of continuation hook for handlers produced by &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9741&quot;&gt;#9741&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the Windows I/O completion port backend to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ConnectEx&lt;/span&gt;&lt;/code&gt;, if available, for connection-oriented
                IP sockets.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                backend for non-Windows (and non-IOCP Windows) platforms to use a
                single condition variable per &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                instance. This addresses a potential race condition when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;run_one&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                is used from multiple threads.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Prevented integer overflow when computing timeouts based on some
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chrono&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chrono&lt;/span&gt;&lt;/code&gt;
                clocks (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9662&quot;&gt;#9662&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9778&quot;&gt;#9778&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Made further changes to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EV_CLEAR&lt;/span&gt;&lt;/code&gt;
                handling in the kqueue backend, to address other cases where the
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                system call may hang on Mac OS X.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed infinite recursion in implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_query_base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;~&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9548&quot;&gt;#9548&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Made the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;select&lt;/span&gt;&lt;/code&gt; reactor
                more efficient on Windows for large numbers of sockets (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9528&quot;&gt;#9528&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a Windows-specific type-aliasing issue reported by &lt;tt&gt;gcc&lt;/tt&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9550&quot;&gt;#9550&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Prevented execution of compile-time-only buffer test to avoid triggering
                an address sanitiser warning (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8295&quot;&gt;#8295&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disabled the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;GetQueuedCompletionStatus&lt;/span&gt;&lt;/code&gt;
                timeout workaround on recent versions of Windows.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for string-based scope IDs when using link-local multicast
                addresses.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed IPv6 multicast group join to use the address's scope ID as
                the interface, if an interface is not explicitly specified.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed multicast test failure on Mac OS X and the BSDs by using a
                link-local multicast address.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Worked around a &lt;tt&gt;gcc&lt;/tt&gt; problem to do with anonymous
                enums (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10042&quot;&gt;#10042&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reverted the Windows &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;
                backend change to ignore &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ERROR_MORE_DATA&lt;/span&gt;&lt;/code&gt;.
                Instead, the error will be propagated as with any other (i.e. in
                an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt; or
                thrown as a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;system_error&lt;/span&gt;&lt;/code&gt;),
                and the number of bytes transferred will be returned. For code that
                needs to handle partial messages, the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt;
                overload should be used (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10034&quot;&gt;#10034&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an off-by-one error in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;signal_set&lt;/span&gt;&lt;/code&gt;
                implementation's signal number check (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9324&quot;&gt;#9324&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use SSE2 intrinsics rather than inline assembly, to allow
                the Cray compiler to work.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Stopped using certain Winsock functions that are marked as deprecated
                in the latest Visual C++ and Windows SDK.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a workaround for building the unit tests with &lt;tt&gt;gcc&lt;/tt&gt;
                on AIX.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various minor documentation improvements (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8295&quot;&gt;#8295&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9605&quot;&gt;#9605&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9771&quot;&gt;#9771&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/assign/&quot;&gt;Assign&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Resolve some C++11 ambiguities (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3073&quot;&gt;#3073&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The library has been redesigned. Besides internal refactoring, various
                bugs were fixed, including incorrect values of feature test macros
                and integer overflow handling.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed values of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;memory_order&lt;/span&gt;&lt;/code&gt;
                enumeration. The concrete values are not part of the interface, but
                this change may potentially break ABI, if the enum is used in user's
                interfaces.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented support for 128-bit atomic operations on Windows x64
                with MSVC. The library assumes presence of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cmpxchg16b&lt;/span&gt;&lt;/code&gt;
                instruction in the target CPUs. Some early AMD CPUs don't support
                this instruction. To target those define the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ATOMIC_NO_CMPXCHG16B&lt;/span&gt;&lt;/code&gt;
                macro.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented experimental support for Windows ARM target with MSVC.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented experimental support for DEC Alpha target with GCC.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved support for ARMv6 and later with GCC. Implemented all atomic
                operations as assembler blocks instead of CAS-based loops. 64-bit
                operations are supported with ARMv7.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented optional support for the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ATOMIC_FLAG_INIT&lt;/span&gt;&lt;/code&gt;
                macro and static initialization of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;atomic_flag&lt;/span&gt;&lt;/code&gt;.
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8158&quot;&gt;#8158&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation for SPARCv9 target. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9446&quot;&gt;#9446&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation for PowerPC target. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9447&quot;&gt;#9447&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed several compatibility problems with Clang on x86 and x86-64.
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9610&quot;&gt;#9610&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9842&quot;&gt;#9842&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed specialized code for Windows on IA64 platform.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer/&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9970&quot;&gt;#9970&lt;/a&gt;,&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9334&quot;&gt;#9334&lt;/a&gt; Support for the C++11 allocator model.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Dropped support of antique compilers.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/concept_check/&quot;&gt;Concept Check&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fewer warnings (includes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5012&quot;&gt;#5012&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added DlMalloc-based Extended Allocators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved configurability of tree-based ordered associative containers.
                AVL, Scapegoat and Splay trees are now available to implement &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;set&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multiset&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;map&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multimap&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9338&quot;&gt;#9338:
                      &lt;em&gt;&amp;quot;VS2005 compiler errors in swap() definition
                      after including container/memory_util.hpp&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9637&quot;&gt;#9637:
                      &lt;em&gt;&amp;quot;Boost.Container vector::resize() performance
                      issue&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9648&quot;&gt;#9648:
                      &lt;em&gt;&amp;quot;string construction optimization - char_traits::copy
                      could be used ...&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9801&quot;&gt;#9801:
                      &lt;em&gt;&amp;quot;I can no longer create and iterator_range from
                      a stable_vector&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9915&quot;&gt;#9915:
                      &lt;em&gt;&amp;quot;Documentation issues regarding vector constructors
                      and resize methods - value/default initialization&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9916&quot;&gt;#9916:
                      &lt;em&gt;&amp;quot;Allocator propagation incorrect in the assignment
                      operator of most&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9931&quot;&gt;#9931:
                      &lt;em&gt;&amp;quot;flat_map::insert(ordered_unique_range_t...)
                      fails with move_iterators&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9955&quot;&gt;#9955:
                      &lt;em&gt;&amp;quot;Using memcpy with overlapped buffers in vector&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                fcontext_t is opaque pointer to context-data
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                changed signature of make_fcontext()
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8826&quot;&gt;#8826&lt;/a&gt; no executable stack
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9437&quot;&gt;#9437&lt;/a&gt; catch exceptions on iOS and Windows Phone 8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9445&quot;&gt;#9445&lt;/a&gt; support for x32 ABIs
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9522&quot;&gt;#9522&lt;/a&gt; support for powerpc_64le
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9743&quot;&gt;#9743&lt;/a&gt; bugfix for powerpc_64 le/be
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9774&quot;&gt;#9774&lt;/a&gt; bugfix for x86 on Mac OS X + clang
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                support of symmetric coroutines
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9355&quot;&gt;#9355&lt;/a&gt; fix race condition in protected_stack_allocator
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9551&quot;&gt;#9551&lt;/a&gt; list of supported architectures
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9734&quot;&gt;#9734&lt;/a&gt; wrong check of mmap() return value
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9735&quot;&gt;#9735&lt;/a&gt; no memset() for protected_stack_allocator
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9760&quot;&gt;#9760&lt;/a&gt; coroutine iterator need const operator==
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10070&quot;&gt;#10070&lt;/a&gt; mmap() return value
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10157&quot;&gt;#10157&lt;/a&gt; file descriptor not required in protected_stack_allocator
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/dynamic_bitset/&quot;&gt;Dynamic Bitset&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for C++11 move constructors
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Warning fixes on MSVC 2013
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for C++11 minimal allocators
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add noexcept specifications
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6918&quot;&gt;#6918&lt;/a&gt;
                Boost Chrono compilation failure on HP uX due to undefined pthread_getcpuclockid
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8006&quot;&gt;#8006&lt;/a&gt;
                Boost::Chrono Assertion at startup - steady_clock::now() - Windows
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9337&quot;&gt;#9337&lt;/a&gt;
                chrono::process_cpu_clock time points wrong by factor 1000 on Linux
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9342&quot;&gt;#9342&lt;/a&gt;
                Regression on process_cpu_clock::timepoint io on V2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9419&quot;&gt;#9419&lt;/a&gt;
                boost::chrono::floor()/round() and negative durations is wrong
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9698&quot;&gt;#9698&lt;/a&gt;
                boost::chrono::thread_clock not declared in OSX
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9720&quot;&gt;#9720&lt;/a&gt;
                boost::this_thread::sleep_for() sometimes returns immediately on
                win32
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9859&quot;&gt;#9859&lt;/a&gt;
                Remove references to gcc-mingw
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9918&quot;&gt;#9918&lt;/a&gt;
                chrono compilation error on Solaris, funciton timegm
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9811&quot;&gt;#9811&lt;/a&gt;
                boost/boost/chrono/duration.hpp:355:56: error: call to non-constexpr
                function 'static std::numeric_limits&amp;lt;float&amp;gt;::_Ty std::numeric_limits&amp;lt;float&amp;gt;::max()'
                /home/zosun/input_service/inputservices-core-service/other/boost/boost/chrono/duration.hpp:
                In static member function 'static constexpr double boost::chrono::detail::chrono_numeric_limits&amp;lt;double,
                true&amp;gt;::lowest()':
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10069&quot;&gt;#10069&lt;/a&gt;
                Overflow in chrono clocks on 32bit
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10151&quot;&gt;#10151&lt;/a&gt;
                timegm function not available on QNX
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/flyweight/index.html&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                In compilers with variadic template support, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flyweight&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; now provides a perfectly forwarding
                constructor to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;/code&gt;
                (previously an emulation was used).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;flyweight&lt;/span&gt;&lt;/code&gt; now replicates
                the initializer-list constructors and assignment operators of its
                underlying type.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed intermodule static initialization problem (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9553&quot;&gt;#9553&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fusion is enabled for use on GPU
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Additional functionality
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm buffer for inflating/deflating geometries (buffer
                      itself already existed but that was only to enlarge a box)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm remove_spikes, algorithm to remove spikes from
                      a ring, polygon or multi_polygon.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm point_on_surface, generating a point lying on
                      the surface (interior) of the polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm is_simple, returning true if a geometry is simple
                      according to the OGC standard
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm is_valid, returning true if a geometry is valid
                      according to the OGC standard
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm crosses for checking this spatial relation according
                      to the OGC standard
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The set operation algorithms (difference, intersection, sym_difference
                      and union_) now support as input pairs of pointlike or linear
                      geometries
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The distance and comparable_distance algorithms now support
                      all pairs of geometry combinations
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The spatial relations which didn't support it (covered_by,
                      touches, within, etc.) now support as input linear and/or areal
                      geometries
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The support for boost::variants as input geometries in various
                      algorithms
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The rtree support for indexing segments
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The rtree nearest() predicate support for arbitrary geometries
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Solved tickets
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8310&quot;&gt;8310&lt;/a&gt;
                      Wrong results with overlapping polygons (fixed using point_on_surface
                      for disjoint)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8375&quot;&gt;8375&lt;/a&gt;
                      sym_difference of non-closed polygons returns closed polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8376&quot;&gt;8376&lt;/a&gt;
                      difference of non-closed polygons returns closed polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9081&quot;&gt;9081&lt;/a&gt;
                      Booleans create self-intersecting polygons from non-self-intersecting
                      polygons
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9245&quot;&gt;9245&lt;/a&gt;
                      Check for process errors in make_qbk.py
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9563&quot;&gt;9563&lt;/a&gt;
                      (Sym)difference not successful, fixed by rescaling to robust
                      type
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9628&quot;&gt;9628&lt;/a&gt;
                      Wrong result of within() due to the winding strategy not working
                      correctly for nearly-horizontal segments
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9871&quot;&gt;9871&lt;/a&gt;
                      Remove spike in polygon with only a spike
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9947&quot;&gt;9947&lt;/a&gt;
                      Missing info about WKT in documentation
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9759&quot;&gt;9759&lt;/a&gt;
                      Invalid results of R-tree knn queries for non-cartesian coordinate
                      systems
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10019&quot;&gt;10019&lt;/a&gt;
                      Difference of Linestring and Box returns their intersection
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10077&quot;&gt;10077&lt;/a&gt;
                      Wrong types in concept checks in boost/geometry/arithmetic/arithmetic.hpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      intersects(polygon) could return a self-intersection-point
                      for its closing point, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      equals() could return invalid results for non-simple linear
                      geometries according to the OGC standard, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      touches() didn't work properly for CCW areal geomtries, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      rtree nearest queries returned wrong elements for non-cartesian
                      coordinate systems, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      rtree crashed in some cases when used with Interprocess allocator,
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed some Visual C++ 6 workarounds.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ongoing work on improving &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;hash_combine&lt;/span&gt;&lt;/code&gt;,
                this changes the previously documented algorithm for the function.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9221&quot;&gt;Trac
                      #9221 (&lt;em&gt;&amp;quot;message_queue deadlock on linux&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9226&quot;&gt;Trac
                      #9226 (&lt;em&gt;&amp;quot;On some computers, Common Appdata is
                      empty in registry, so boost interprocess cannot work&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9284&quot;&gt;Trac
                      #9284 (&lt;em&gt;&amp;quot;WaitForSingleObject(mutex) must handle
                      WAIT_ABANDONED&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9285&quot;&gt;Trac
                      #9285 (&lt;em&gt;&amp;quot;CreateMutex returns NULL if fails&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9288&quot;&gt;Trac
                      #9288 (&lt;em&gt;&amp;quot;timed_wait does not check if it has
                      expired&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9408&quot;&gt;Trac
                      #9408 (&lt;em&gt;&amp;quot;Android does not support XSI_SHARED_MEMORY_OBJECTS&amp;quot;&lt;/em&gt;&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9729&quot;&gt;Trac
                      #9729 (&lt;em&gt;&amp;quot;crash on managed_external_buffer object
                      construction&amp;quot;&lt;/em&gt;&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9767&quot;&gt;Trac
                      #9767 (&lt;em&gt;&amp;quot;bootstamp generation causes error in
                      case of corrupt Windows Event Log&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9835&quot;&gt;Trac
                      #9835 (&lt;em&gt;&amp;quot;Boost Interprocess fails to compile
                      with Android NDK GCC 4.8, -Werror=unused-variable&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9911&quot;&gt;Trac
                      #9911 (&lt;em&gt;&amp;quot;get_tmp_base_dir(...) failure&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9946&quot;&gt;Trac
                      #9946 (&lt;em&gt;&amp;quot;ret_ptr uninitialized in init_atomic_func,
                      fini_atomic_func&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10011&quot;&gt;Trac
                      #10011 (&lt;em&gt;&amp;quot;segment_manager::find( unique_instance_t*
                      ) fails to compile&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10021&quot;&gt;Trac
                      #10021 (&lt;em&gt;&amp;quot;Interprocess and BOOST_USE_WINDOWS_H&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/2&quot;&gt;GitHub
                      #2 (&lt;em&gt;&amp;quot;Provide support for the Cray C++ compiler.
                      The Cray compiler defines __GNUC__&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/3&quot;&gt;GitHub
                      #3 (&lt;em&gt;&amp;quot;Fix/mingw interprocess_exception throw
                      in file_wrapper::priv_open_or_create&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;ABI breaking&lt;/strong&gt;: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9221&quot;&gt;#9221&lt;/a&gt;
                showed that &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_MSG_QUEUE_CIRCULAR_INDEX&lt;/span&gt;&lt;/code&gt;
                option of message queue, was completely broken so an ABI break was
                necessary to have a working implementation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Simplified, refactored and unified (timed_)lock code based on try_lock().
                There were several bugs when handling timeout expirations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the implementation of condition variables' destructors to
                allow POSIX semantics (the condition variable can be destroyed after
                all waiting threads have been woken up)..
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_SHARED_DIR_PATH&lt;/span&gt;&lt;/code&gt;
                option to define the shared directory used to place shared memory
                objects when implemented as memory mapped files.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_USE_WINDOWS_H&lt;/span&gt;&lt;/code&gt;.
                When this macro is defined Interprocess does not declare used Windows
                API function and types, includes all needed windows SDK headers and
                uses types and functions declared by the Windows SDK.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get_size&lt;/span&gt;&lt;/code&gt; to
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows_shared_memory&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved Doxygen generated reference and updated and fixed forward-declaration
                header.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;ABI breaking&lt;/strong&gt;: Fixed ABI regression
                introduced in Boost 1.55 version, mainly noticeable on MSVC compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Source breaking&lt;/strong&gt;: Removed previously
                deprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xxx_dont_splay&lt;/span&gt;&lt;/code&gt;
                functions from splay containers, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splay_set_base_hook&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splay_set_member_hook&lt;/span&gt;&lt;/code&gt;from
                splay containers and &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;splay&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/code&gt; extra parameter in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splaytree_algorithms&lt;/span&gt;&lt;/code&gt; functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8468&quot;&gt;#8468:
                      Compile error on visual studio 2010/2012 using vector with
                      custom allocator and aligned types&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9332&quot;&gt;#9332:
                      &lt;em&gt;&amp;quot;has_member_function_callable_with.hpp compile
                      error on msvc-12.0&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9650&quot;&gt;#9650:
                      &lt;em&gt;&amp;quot;intrusive list with stateful value traits&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9746&quot;&gt;#9746:
                      Modern Sun CC compiler detects error in intrusive library header&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9940&quot;&gt;#9940:
                      bad bug in intrusive list with safe_link (or auto_unlink) hooks&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9948&quot;&gt;#9948:
                      remove use of const_cast in intrusive containers&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9949&quot;&gt;#9949:
                      clear header node hooks upon intrusive container destruction&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9961&quot;&gt;#9961:
                      tests for hooks not derived frorm generic_hook&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Optimized tree rebalancing code to avoid redundant assignments.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added 64 bit prime values for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;suggested_upper_bucket_count&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;suggested_lower_bucket_count&lt;/span&gt;&lt;/code&gt; in
                64 bit platforms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Deleted workarounds for old SUN_CC compilers, those are now unsupported
                as modern SunPro compilers are standard-corforming enough.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;try_lexical_convert&lt;/span&gt;&lt;/code&gt;
                function, that retuns &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/code&gt;
                in case of failed conversion and does not require output parameter
                to be Default Constructable (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6700&quot;&gt;#6700&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed conversion of string values with leading zeroes to &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9659&quot;&gt;#9659&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Code was changed to produce a smaller binaries and simplify compiler's
                work (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9046&quot;&gt;#9046&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Boost.LexicalCast library was separated from the Boost.Conversion
                library.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8991&quot;&gt;#8991&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/index.html&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                General changes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      For Windows targets, the library now compiles for Windows XP
                      by default.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added indexing operators with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_name&lt;/span&gt;&lt;/code&gt;
                      arguments to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;record&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;record_view&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added operators for non-const object output to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_formatting_ostream&lt;/span&gt;&lt;/code&gt;.
                      (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9389&quot;&gt;#9389&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for putting function names and source file names
                      of named scopes into the formatted strings. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9263&quot;&gt;#9263&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for incomplete and empty markers to the named
                      scope formatter. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9123&quot;&gt;#9123&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The default presentation for incomplete named scope lists has
                      changed: trailing scope delimiter is omitted.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a support header for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;regex&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      By default Boost.Log uses Boost.Regex internally as the regular
                      expressions backend. The backend can be changed by defining
                      configuration macros.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dump&lt;/span&gt;&lt;/code&gt;
                      manipulator output on AVX2-enabled CPUs (e.g. Intel Haswell).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed compilation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get_attribute&lt;/span&gt;&lt;/code&gt;
                      method of loggers.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed a possible race in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;locked_backend&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function implementation of
                      synchronous and asynchronous sink frontends.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed a possible infinite block of the logging threads in the
                      asynchronous sink enqueue methods when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;block_on_overflow&lt;/span&gt;&lt;/code&gt;
                      strategy was used.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href=&quot;http://www.boost.org/libs/log/doc/html/log/changelog.html&quot;&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change&lt;/strong&gt;: moved a number
                of non-core headers that are predominantly used for internal maintenance
                into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;include_private&lt;/span&gt;&lt;/code&gt;. The headers effected
                are &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;test_data&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;remez&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;. You can continue to use these
                headers by adding &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;include_private&lt;/span&gt;&lt;/code&gt;
                to your compiler's include path.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change&lt;/strong&gt;: A number of distributions
                and special functions were returning the maximum finite value rather
                than raising an overflow_error, this has now been fixed, which means
                these functions now behave as documented. However, since the default
                behavior on raising an overflow_error is to throw a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;overflow_error&lt;/span&gt;&lt;/code&gt; exception, applications
                which have come to reply rely on these functions not throwing may
                experience exceptions where they did not before. The special functions
                involved are gamma_p_inva, gamma_q_inva, ibeta_inva, ibetac_inva,
                ibeta_invb, ibetac_invb, gamma_p_inv, gamma_q_inv. The distributions
                involved are pareto_distrib, beta_distrib, geometric_distrib, negative_binomial_distrib,
                binomial_distrib, chi_squared_distrib, gamma_distrib, inverse_chi_squared_distrib,
                inverse_gamma_distrib. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10111&quot;&gt;#10111&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix round and trunc functions so they can be used with integer arguments,
                see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10066&quot;&gt;#10066&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix Halley iteration to handle zero derivative (with non-zero second
                derivative), see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10046&quot;&gt;#10046&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix Geometric distribution use of Policies, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9833&quot;&gt;#9833&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix corner cases in the negative binomial distribution, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9834&quot;&gt;#9834&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix compilation failures on Mac OS.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added bernoulli_numbers, changed arbitrary precision tgamma/lgamma
                to use Sterling's approximation (from Nikhar Agrawal).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added first derivatives of the Bessel functions: cyl_bessel_j_prime,
                cyl_neumann_prime, cyl_bessel_i_prime, cyl_bessel_k_prime, sph_bessel_prime
                and sph_neumann_prime (from Anton Bikineev).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed buggy Student's t example code, along with docs for testing
                sample means for equivalence.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;max_iter&lt;/span&gt;&lt;/code&gt;
                parameter in root finding code better, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9225&quot;&gt;#9225&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add option to explicitly enable/disable use of __float128 in constants
                code, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9240&quot;&gt;#9240&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cleaned up handling of negative values in Bessel I0 and I1 code (removed
                dead code), see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9512&quot;&gt;#9512&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed handling of very small values passed to tgamma and lgamma so
                they don't generate spurious overflows (thanks to Rocco Romeo).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9672&quot;&gt;#9672 PDF
                and CDF of a Laplace distribution throwing domain_error&lt;/a&gt; Random
                variate can now be infinite.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed several corner cases in rising_factorial, falling_factorial
                and tgamma_delta_ratio with thanks to Rocco Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed constant &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pow23_four_minus_pi&lt;/span&gt;
                &lt;/code&gt; whose value did not match the name (and was unused by Boost.Math),
                see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9712&quot;&gt;#9712&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;BOOST_MOVE_RET&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9482&quot;&gt;#9482:
                &lt;em&gt;&amp;quot;MSVC macros not undefined in boost/move/detail/config_end.hpp&amp;quot;&lt;/em&gt;&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9045&quot;&gt;#9045:
                &lt;em&gt;&amp;quot;Wrong macro name on docs&amp;quot;&lt;/em&gt;&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8420&quot;&gt;#8420:
                &lt;em&gt;&amp;quot;move's is_convertible does not compile with aligned
                data&amp;quot;&lt;/em&gt;&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/mpl/&quot;&gt;MPL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;for_each&lt;/span&gt;&lt;/code&gt; is enabled for use on
                GPU
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_array/index.html&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5664&quot;&gt;#5664&lt;/a&gt; operator() checks for Collection concept but requires RandomAccessCollection
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4874&quot;&gt;#4874&lt;/a&gt; compile errors using Visual C++ 2010 in debug mode
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3581&quot;&gt;#3581&lt;/a&gt; MultiArray storage order example incorrect for fortran_storage_ordering
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4032&quot;&gt;#4032&lt;/a&gt; Move MultiArray concepts out of detail namespace
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9212&quot;&gt;#9212&lt;/a&gt; Broken links to C++ standard papers
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8368&quot;&gt;#8368&lt;/a&gt; GCC -Wundef warning about BOOST_MULTI_ARRAY_NO_GENERATORS
                in multi_array
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
                member function of hashed indices used to have poor performance under
                low load conditions due to the requirement that an iterator to the
                next element must be returned (see ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4264&quot;&gt;#4264&lt;/a&gt;). In accordance
                with the resolution of &lt;a href=&quot;http://lwg.github.io/issues/lwg-closed.html#579&quot;&gt;LWG
                issue #579&lt;/a&gt;, this problem has been fixed while maintaining
                the interface of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;/code&gt;,
                at the expense of using one more word of memory per element. In fact,
                C++ complexity requirements on unordered associative containers have
                been improved for hashed indices so that
              &lt;/div&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    deletion of a given element is unconditionally constant-time,
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    worst-case performance is not &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; but &lt;code&gt;O(n&lt;sub&gt;dist&lt;/sub&gt;)&lt;/code&gt;, where &lt;code&gt;n&lt;sub&gt;dist&lt;/sub&gt;&lt;/code&gt; is the number of
                    non-equivalent elements in the index.
                  &lt;/div&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
              &lt;div&gt;
                Due to the fact that hashed indices rely on a new data structure,
                the internal representation of their iterators and local iterators
                have changed, which affects serialization: their corresponding serialization
                &lt;a href=&quot;http://www.boost.org/libs/serialization/doc/tutorial.html#versioning&quot;&gt;class
                version&lt;/a&gt; has been bumped from 0 to 1. Old archives involving
                hashed index (local) iterators can be loaded by Boost 1.56 version
                of Boost.MultiIndex, but not the other way around.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Hashed indices now provide &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;reserve&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Hashed indices can now be checked for equality and inequality following
                the (suitably adapted) C++ standard specification in &lt;strong&gt;[unord.req]&lt;/strong&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The public interface of Boost.MultiIndex provide &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                specifications where appropriate (for compliant compilers).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved performance of failed insertions into a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Much internal code aimed at supporting MSVC++ 7.0 and prior has been
                removed. Compilation times without this legacy code might be slightly
                faster.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a bug with insertion via iterators dereferencing to rvalues
                (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9665&quot;&gt;#9665&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Made Boost.MultiIndex compatible with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_BIND_NO_PLACEHOLDERS&lt;/span&gt;&lt;/code&gt;
                (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9798&quot;&gt;#9798&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Change floating point to rational conversions to be implicit, see
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10082&quot;&gt;10082&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix definition of checked_cpp_rational typedef.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bug in assignment from string in cpp_int, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9936&quot;&gt;9936&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new cpp_bin_float backend for binary floating point.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bug in assignment from string in cpp_int, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9936&quot;&gt;9936&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added MSVC-specific #include for compiler intrinsics, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9336&quot;&gt;9336&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed various typos in docs, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9432&quot;&gt;9432&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed gmp_rational to allow move-copy from an already copied-from
                object, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9497&quot;&gt;9497&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added list of values for numeric_limits.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/odeint/&quot;&gt;Odeint&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added algebra and operations dispatcher for automatic detection of
                appropriate algebras and operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for Eigen, Boost.Multiarray, Boost.Mpi, Boost.Compute,
                Blaze, and NT2.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed algebra interface to use algebra.norm_inf function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added iterators for iterating through the solution of the ODEs, hence
                an alternative to the integrate functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the Velocity-Verlet method.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minor bug fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/optional/&quot;&gt;Optional&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for rvalue references. Now &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; works with moveable but non-copyable
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;/code&gt;'s.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;/code&gt; (now
                uses move operations).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;. This is the last of the requests
                from &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1841&quot;&gt;#1841&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;/code&gt; is moveable,
                including conditional &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                specifications, which make it &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_if_noexcept&lt;/span&gt;&lt;/code&gt;-friendly.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Using explicit operator bool() on platforms that support it (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4227&quot;&gt;#4227&lt;/a&gt;)
                (breaking change).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Forward declaration of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;lt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;)&lt;/span&gt;&lt;/code&gt;
                to prevent inadvertent incorrect serialization of optional objects.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed depprecated function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; from examples (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9005&quot;&gt;#9005&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Equality comparison with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none&lt;/span&gt;&lt;/code&gt;
                does not require that &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;/code&gt;
                be EqualityComparable.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Optional rvalue references are explicitly disallowed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Binding temporaries to optional references is explicitly disallowed
                (breaking change).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                More ways to access the contained value, functions &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_or&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_or_eval&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated and reorganized documentation, added tutorial and quick guide
                sections.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/predef/&quot;&gt;Predef&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Addition of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PLAT_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt; platform definitions for MinGW and
                Windows platform variants.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Detection of ARM architecture for Windows compilers to target mobile
                devices of Windows 8.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved ARM detection for 64 bit ARM.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added detection of iOS as an operating system.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved detection of endianess on some platforms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Addition of exclusive plus emulated definitions for platform and
                compiler detection.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/preprocessor/&quot;&gt;Preprocessor&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                When using variadic macros tuple functionality was added to match
                all the array functionality.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/program_options/&quot;&gt;Program Options&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Columns in the &lt;code&gt;&lt;span class=&quot;special&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;help&lt;/span&gt;&lt;/code&gt;
                output are now aligned across all option groups (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6114&quot;&gt;#6114&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Option names with dashes are no longer truncated in error messages
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8009&quot;&gt;#8009&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change:&lt;/strong&gt; corrected behavior
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_regex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mark_count&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                to match existing documentation, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_regex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;subexpression&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; changed to match, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9227&quot;&gt;#9227&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8903&quot;&gt;#8903&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed documentation typos from &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9283&quot;&gt;#9283&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in collation code that failed if the locale generated collation
                strings with embedded nul's, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9451&quot;&gt;#9451&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apply patch for unusual thread usage (no statically initiallized
                mutexes), see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9461&quot;&gt;#9461&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added better checks for invalid UTF-8 sequences, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9473&quot;&gt;#9473&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/&quot;&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the overloads of &lt;a href=&quot;http://www.boost.org/libs/smart_ptr/make_shared_array.html&quot;&gt;make_shared&lt;/a&gt;
                and &lt;a href=&quot;http://www.boost.org/libs/smart_ptr/make_shared_array.html&quot;&gt;allocate_shared&lt;/a&gt;
                of array types (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;) to conform to the specification
                in C++ standard paper &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3939.html&quot;&gt;N3939&lt;/a&gt;
                and significantly reduced the spatial overhead of the internal bookkeeping
                structures.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the implementations of make_shared and allocate_shared for
                scalar types and array types, respectively, to resolve C++ standard
                library defect report &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2070&quot;&gt;#2070&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Experimental Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7446&quot;&gt;#7446&lt;/a&gt;
                      Async: Add when_any.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7447&quot;&gt;#7447&lt;/a&gt;
                      Async: Add when_all.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7448&quot;&gt;#7448&lt;/a&gt;
                      Async: Add async taking a scheduler parameter.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8274&quot;&gt;#8274&lt;/a&gt;
                      Synchro: Add concurrent queue
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8513&quot;&gt;#8513&lt;/a&gt;
                      Async: Add a basic thread_pool executor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8518&quot;&gt;#8518&lt;/a&gt;
                      Synchro: Add a latch class.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8516&quot;&gt;#8516&lt;/a&gt;
                      Async: Add future/shared_future::then taking a scheduler as
                      parameter.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9058&quot;&gt;#9058&lt;/a&gt;
                      with_lock_guard function
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9571&quot;&gt;#9571&lt;/a&gt;
                      Add a dynamic executor and an executor adaptor
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8070&quot;&gt;#8070&lt;/a&gt;
                      prefer GetTickCount64 over GetTickCount
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9333&quot;&gt;#9333&lt;/a&gt;
                      ex_scoped_thread compile fails on msvc-12.0
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9341&quot;&gt;#9341&lt;/a&gt;
                      compile error scoped_thread(move semantics) intel-linux-14.0.1
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9366&quot;&gt;#9366&lt;/a&gt;
                      async(Executor, ...) fails to compile with msvc-10,11,12
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9402&quot;&gt;#9402&lt;/a&gt;
                      test_excutor regression on msvc-10,11,12
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9404&quot;&gt;#9404&lt;/a&gt;
                      ex_make_future regression error
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9471&quot;&gt;#9471&lt;/a&gt;
                      Synchronization documentation nits
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9535&quot;&gt;#9535&lt;/a&gt;
                      Missing exception safety might result in crash
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9618&quot;&gt;#9618&lt;/a&gt;
                      try_join_for problem: program is not terminate.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9625&quot;&gt;#9625&lt;/a&gt;
                      Please rewrite boost::thread::~thread() reference section
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9632&quot;&gt;#9632&lt;/a&gt;
                      public method start_thread in boost::thread class
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9673&quot;&gt;#9673&lt;/a&gt;
                      thread compilation with MingW/gcc on Windows gives errors
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9708&quot;&gt;#9708&lt;/a&gt;
                      boost::condition_variable::timed_wait unexpectedly wakes up
                      while should wait infinite
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9711&quot;&gt;#9711&lt;/a&gt;
                      future continuation called twice
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9867&quot;&gt;#9867&lt;/a&gt;
                      Remove references to gcc-mingw
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10008&quot;&gt;#10008&lt;/a&gt;
                      Boost Synchronization documentation typos (futures)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10058&quot;&gt;#10058&lt;/a&gt;
                      Null pointer access in once
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10125&quot;&gt;#10125&lt;/a&gt;
                      call_once: compile errors in variadic version with rvalue reference
                      emulation
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10126&quot;&gt;#10126&lt;/a&gt;
                      call_once: deprecate (Function, once_flag&amp;amp;) overload
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10147&quot;&gt;#10147&lt;/a&gt;
                      pthread_delay_np() parameters different on AIX even with gcc
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10155&quot;&gt;#10155&lt;/a&gt;
                      thread::physical_concurrency() always returns 0 on PowerPC
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10184&quot;&gt;#10184&lt;/a&gt;
                      Future: multiply defined symbols
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/tr1/index.html&quot;&gt;TR1&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This library is now deprecated.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/tti/&quot;&gt;TTI&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9441&quot;&gt;#9441&lt;/a&gt;: Added better support for Sun Solaris Studio C++
                compiler.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9444&quot;&gt;#9444&lt;/a&gt;: Handle all situations where the enclosing class
                is not a class type.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minor documentation and warning fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9377&quot;&gt;#9377&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9719&quot;&gt;#9719&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Always use prime number of buckets for integers. Fixes performance
                regression when inserting consecutive integers (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9282&quot;&gt;#9282&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Only construct elements using allocators, as specified in C++11 standard.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some components were moved to the new Boost.Core library.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;/code&gt; is
                deprecated in favor of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_deleter&lt;/span&gt;&lt;/code&gt;
                from Boost.Core. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;/code&gt;
                is an alias for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_deleter&lt;/span&gt;&lt;/code&gt;,
                it will be removed in future releases.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;base_from_member&lt;/span&gt;&lt;/code&gt;
                utility now supports lvalue reference member types. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7577&quot;&gt;#7577&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/uuid/index.html&quot;&gt;UUID&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added basic support for C++11 features.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented SSE-optimized versions of some functions of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;uuid&lt;/span&gt;&lt;/code&gt;, including comparison operators
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;/code&gt;. The support
                for different versions of SSE is automatically detected at compile
                time for most compilers, but can also be explicitly enabled or disabled
                with &lt;a href=&quot;http://www.boost.org/libs/uuid/uuid.html#Configuration&quot;&gt;configuration
                macros&lt;/a&gt;. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8509&quot;&gt;#8509&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Silenced some compiler warnings. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8495&quot;&gt;#8495&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8697&quot;&gt;#8697&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change:&lt;/strong&gt; Variant now uses
                variadic templates if they are supported by compiler. This leads
                to smaller binaries and better compilation times but in some cases
                may break metaprogramming functions, especially if &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/BOOST_VARIANT_ENUM_PARAMS.html&quot;&gt;BOOST_VARIANT_ENUM_PARAMS&lt;/a&gt;
                and &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/BOOST_VARIANT_ENUM_SHIFTED_PARAMS.html&quot;&gt;BOOST_VARIANT_ENUM_SHIFTED_PARAMS&lt;/a&gt;
                are not used. Usage of variadic templates &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/BOOST_VARIANT_DO_NOT_USE_VARIADIC_TEMPLATES.html&quot;&gt;may
                be disabled&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/reference.html#header.boost.variant.polymorphic_get_hpp&quot;&gt;Added&lt;/a&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_get&lt;/span&gt;&lt;/code&gt; function
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9479&quot;&gt;#9479&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Move-only classes now can be returned by visitors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Optimized variant::swap() and fixed ambiguity in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_swap&lt;/span&gt;&lt;/code&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2839&quot;&gt;#2839&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added conditional noexcepts to move assignments, default and move
                constructors making &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;variant&lt;/span&gt;&lt;/code&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_if_noexcept&lt;/span&gt;&lt;/code&gt;-friendly
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7911&quot;&gt;#7911&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Exceptions are now visible across modules even with -fvisibility=hidden
                flags.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Dropped support of antique compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3020&quot;&gt;#3020&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_56_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4, 3.3, 3.2, 3.1, 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++98: 3.3.16
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11, libc++: 3.4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1y: 3.3.16
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.8.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++1y: 4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 13.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 5.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 5.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.9.0, 4.8.2, 4.7.3, 4.7.2, 4.6.3, 4.5.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 12.0, 11.0, 10.0, 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4, 3.3, 3.2, 3.1, 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++98: 3.3.16
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11, libc++: 3.4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1y: 3.3.16
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14, libc++: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.9.0, 4.8.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++1y: 4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 13.1, 13.0, 12.1, 11.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 5.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11:
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.9.0, 4.8.2, 4.7.2, 4.6.3, 4.5.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 12.0, 11.0, 10.0, 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC, ARM: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC, x86: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_56_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.55.0</title><link>http://www.boost.org/users/history/version_1_55_0.html</link><guid>http://www.boost.org/users/history/version_1_55_0.html</guid><pubDate>Mon, 11 Nov 2013 11:50:20 -0800</pubDate><description>



  &lt;div id=&quot;version_1_55_0.other_downloads&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Other Downloads&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;https://sourceforge.net/projects/boost/files/boost-binaries/1.55.0/&quot;&gt;Windows
          binaries&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;https://sourceforge.net/projects/boost/files/boost-docs/1.55.0/&quot;&gt;PDF
          documentation&lt;/a&gt; (only for BoostBook based documentation).
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.news&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;News&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Support was removed from &lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt; for some
      very old versions of compilers. The new minimum requirements are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Digitial Mars 8.41
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          GCC 3.3
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Intel 6.0
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Visual C++ 7.1
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      &lt;strong&gt;Note:&lt;/strong&gt; This is just the mininimum requirements
      for Config. Some Boost libraries may have higher mininimum requirements and
      not support all platforms or compilers.
    &lt;/p&gt;
    &lt;p&gt;
      Other compilers are currently unchanged, but we are considering removing support
      for some other old compilers. &lt;strong&gt;Candidates&lt;/strong&gt; for
      removal are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Metroworks C++ (i.e. codewarrior)
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          SunPro 5.7 and earlier
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Borland C++ Builder 2006 (5.82) and earlier
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      If you're using any of these, please let us know on the mailing lists. We will
      take into account any feedback received before making a decision.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.known_bugs&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Known Bugs with Visual Studio
    2013/Visual C++ 12&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Visual Studio 2013 was released quite late in the release process, so there
      exist several unresolved issues. These include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Serialization can't compile because of a missing include.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;has_member_function_callable_with&lt;/span&gt;&lt;/code&gt;
          from Boost.Container's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
          causes a compile error (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9332&quot;&gt;#9332&lt;/a&gt;).
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          In libraries such as Unordered and MultiIndex, calling overloaded functions
          with initializer lists can result in a compile error, with Visual C++ claiming
          that the overloads are ambiguous. This is a Visual C++ bug and it isn't
          clear if there's a good workaround. This won't affect code that doesn't
          use initializer lists, or uses an initializer list that doesn't require
          an implicit conversion (i.e. an initializer list of the container's exact
          value type).
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Thread: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ex_scoped_thread&lt;/span&gt;&lt;/code&gt;
          compile fails (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9333&quot;&gt;#9333&lt;/a&gt;).
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.patches&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Patches&lt;/span&gt;&lt;/h3&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_55_0/001-log_fix_dump_avx2.patch&quot;&gt;Log patch&lt;/a&gt;:
          fixes incorrect output of the &lt;a href=&quot;http://www.boost.org/doc/libs/1_55_0/libs/log/doc/html/log/detailed/utilities.html#log.detailed.utilities.manipulators.dump&quot;&gt;dump&lt;/a&gt;
          manipulator, when used on AVX2-enabled CPU (e.g. Intel Haswell).
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/predef/&quot;&gt;Predef&lt;/a&gt;:&lt;/span&gt; This library defines a
          set of compiler, architecture, operating system, library, and other version
          numbers from the information it can gather of C, C++, Objective C, and
          Objective C++ predefined macros or those defined in generally available
          headers, from Rene Rivera.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7915&quot;&gt;#7915&lt;/a&gt; Fix silly typos.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8850&quot;&gt;#8850&lt;/a&gt; Fix MSVC warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8262&quot;&gt;#8262&lt;/a&gt; Rename &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;average&lt;/span&gt;&lt;/code&gt;
                to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fdiv&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bad_any_cast&lt;/span&gt;&lt;/code&gt; exception is now visible
                across modules &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8751&quot;&gt;#8751&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                member function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NOEXCEPT&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issue with const rvalues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9215&quot;&gt;#9215&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented a limited port to Windows Runtime. This support requires
                that the language extensions be enabled. Due to the restricted facilities
                exposed by the Windows Runtime API, the port also comes with the
                following caveats:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The core facilities such as the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;/code&gt;, buffers,
                      composed operations, timers, etc., should all work as normal.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      For sockets, only client-side TCP is supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Explicit binding of a client-side TCP socket is not supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function is not supported
                      for sockets. Asynchronous operations may only be cancelled
                      by closing the socket.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Operations that use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
                      are not supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Only &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;no_delay&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;socket_base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;keep_alive&lt;/span&gt;&lt;/code&gt; options are supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Resolvers do not support service names, only numbers. I.e.
                      you must use &amp;quot;80&amp;quot; rather than &amp;quot;http&amp;quot;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Most resolver query flags have no effect.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a regression (introduced in Boost 1.54) where, on some platforms,
                errors from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_connect&lt;/span&gt;&lt;/code&gt;
                were not correctly propagated through to the completion handler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8795&quot;&gt;#8795&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a Windows-specific regression (introduced in Boost 1.54) that
                occurs when multiple threads are running an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;.
                When the bug occurs, the result of an asynchronous operation (error
                and bytes transferred) is incorrectly discarded and zero values used
                instead. For TCP sockets this results in spurious end-of-file notifications
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8933&quot;&gt;#8933&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a bug in handler tracking, where it was not correctly printing
                out some handler IDs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8808&quot;&gt;#8808&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed the comparison used to test for successful synchronous accept
                operations so that it works correctly with unsigned socket descriptors
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8752&quot;&gt;#8752&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured the signal number is correctly passed to the completion handler
                when starting an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_wait&lt;/span&gt;&lt;/code&gt;
                on a signal that is already raised (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8738&quot;&gt;#8738&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppressed a g++ 4.8+ warning about unused typedefs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8980&quot;&gt;#8980&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled the move optimisation for handlers that use the default invocation
                hook (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8624&quot;&gt;#8624&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clarified that programs must not issue overlapping &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_write_at&lt;/span&gt;&lt;/code&gt; operations (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8669&quot;&gt;#8669&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the Windows &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;
                backend to treat &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ERROR_MORE_DATA&lt;/span&gt;&lt;/code&gt;
                as a non-fatal error when returned by &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;GetOverlappedResult&lt;/span&gt;&lt;/code&gt;
                for a synchronous read (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8722&quot;&gt;#8722&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ language extensions use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;/code&gt;
                as a keyword. Added a workaround that renames the namespace to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_generic&lt;/span&gt;&lt;/code&gt; when those language
                extensions are in effect.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some asynchronous operations that missed out on getting &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_result&lt;/span&gt;&lt;/code&gt; support in Boost 1.54.
                In particular, the buffered stream templates have been updated so
                that they adhere to current handler patterns (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9000&quot;&gt;#9000&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9001&quot;&gt;#9001&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled move support for Microsoft Visual Studio 2012 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8959&quot;&gt;#8959&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;/code&gt;
                support for Microsoft Visual Studio 2012.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed a use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;min&lt;/span&gt;&lt;/code&gt;
                in the Windows IOCP backend to avoid a dependency on the &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; header (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8758&quot;&gt;#8758&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Eliminated some unnecessary handler copies.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed various minor and cosmetic issues in code and documentation
                (including &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8347&quot;&gt;#8347&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8950&quot;&gt;#8950&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8953&quot;&gt;#8953&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8965&quot;&gt;#8965&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8997&quot;&gt;#8997&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for 64-bit atomic operations on x86 target for GCC,
                MSVC and compatible compilers. The support is enabled when it is
                known at compile time that the target CPU supports required instructions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for 128-bit atomic operations on x86-64 target for
                GCC and compatible compilers. The support is enabled when it is known
                at compile time that the target CPU supports required instructions.
                The support can be tested for with the new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ATOMIC_INT128_LOCK_FREE&lt;/span&gt;&lt;/code&gt;
                macro.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a more efficient implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; based on GCC &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__atomic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;
                intrinsics available since GCC 4.7.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for more ARM v7 CPUs, improved detection of Thumb 2.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for x32 (i.e. 64-bit x86 with 32-bit pointers) target
                on GCC and compatible compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed dependency on Boost.Thread.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Internal lock pool now includes proper padding and alignment to avoid
                false sharing.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation with Intel compiler on Windows. Removed internal
                macro duplication when compiled on Windows.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some code refactoring to use C++11 features when available.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7868&quot;&gt;#7868&lt;/a&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;chrono_io&lt;/span&gt;&lt;/code&gt; parses
                      time incorrectly (1.53 and 1.52)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9028&quot;&gt;#9028&lt;/a&gt;
                      Typo in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stopwatches&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;formatters&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;base_formatter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9147&quot;&gt;#9147&lt;/a&gt;
                      uninitialized &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tm&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer/&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for rvalue references and rvalue references emulation
                using Boost.Move. Values are moved only if value type has noexcept
                move constructor and noexcept move assignment operator &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7888&quot;&gt;#7888&lt;/a&gt;.
                Now Circular Buffer is usable with move-only types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Much better documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5362&quot;&gt;#5362&lt;/a&gt;
                circular_buffer does not compile with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7025&quot;&gt;#7025&lt;/a&gt;
                circular buffer reports warning: &amp;quot; type qualifiers ignored on
                function return type&amp;quot; while compile.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7950&quot;&gt;#7950&lt;/a&gt;
                Eliminate W4-warnings under VS2005 - warning C4913: user defined
                binary operator ',' exists but no overload could convert all operands,
                default built-in binary operator ',' used.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change:&lt;/strong&gt; Removed support
                for some older compilers. The new minimum compiler versions are:
              &lt;/div&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Digitial Mars 8.41
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    GCC 3.3
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Intel 6.0
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Visual C++ 7.1
                  &lt;/div&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
              &lt;div&gt;
                Other compilers are unchanged.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;span class=&quot;link&quot;&gt;SCARY
                iterators&lt;/span&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8269&quot;&gt;#8269&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8473&quot;&gt;#8473&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8892&quot;&gt;#8892&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9009&quot;&gt;#9009&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9064&quot;&gt;#9064&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9092&quot;&gt;#9092&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9108&quot;&gt;#9108&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8650&quot;&gt;#8650&lt;/a&gt;
                SSE2 intrinsics
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New interface (unidirectional data transfer).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8782&quot;&gt;#8782&lt;/a&gt;
                no best alternative
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8801&quot;&gt;#8801&lt;/a&gt;
                auto-linking
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/filesystem/&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed Android compilation &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8706&quot;&gt;#8706&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8759&quot;&gt;#8759&lt;/a&gt; specialization of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;convert_impl&lt;/span&gt;&lt;/code&gt;
                for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;map_tag&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/index.html&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added centroid for segment type
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added intersects() and disjoints() for Segment-Box and Linestring-Box
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added rtree creation using packing algorithm
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added contains() and covers() spatial query predicates
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added iterative queries
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      In some cases .back() or .clear() was called, violating the
                      usage of Concepts. Fixed for the reported cases
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Solved tickets&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6958&quot;&gt;6958&lt;/a&gt;
                      Intersection generates self-intersection. Caused by spike,
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8364&quot;&gt;8364&lt;/a&gt;
                      Invalid input exception, caused by spikes in previous steps,
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8365&quot;&gt;8365&lt;/a&gt;
                      Invalid input exception, caused by spikes in previous steps,
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8969&quot;&gt;8969&lt;/a&gt;
                      boost::geometry::model::point single argument constructor should
                      be explicit
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8825&quot;&gt;8825&lt;/a&gt;
                      Patch adding member variable documentation to doxygen_xml2qbk
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8652&quot;&gt;8652&lt;/a&gt;
                      Intersection fails for triangle-triangle intersection. Caused
                      by spike, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9047&quot;&gt;9047&lt;/a&gt;
                      Boost files that include themselves (strategies/intersection.hpp),
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/code&gt; is no longer allowed
                as a bundled property type (for example, in the VertexProperties
                template parameters to graph types); it did not work reliably before,
                but a static assertion now forbids it entirely. Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;no_property&lt;/span&gt;&lt;/code&gt; instead.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;finish_edge&lt;/span&gt;&lt;/code&gt;
                visitor event point in depth-first search; the change should be backward-compatible
                with visitors that do not have that member function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disabled building of tests on Sun compiler.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multiple source vertices are supported in non-named-parameter versions
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;breadth_first_visit&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;breadth_first_search&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;,
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths_no_init&lt;/span&gt;&lt;/code&gt;.
                This feature is not yet documented; to use it, replace the single
                parameter for the source vertex in each of these functions by two
                input iterators of the same type containing the source vertices to
                use.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Hawick circuits algorithm; contributed by Louis Dionne.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added edge coloring algorithm; contributed by Maciej Piechotka.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added min-cost max-flow algorithm; contributed by Piotr Wygocki.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs and feature requests from Trac fixed: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5269&quot;&gt;#5269&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8317&quot;&gt;#8317&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8433&quot;&gt;#8433&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8791&quot;&gt;#8791&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8877&quot;&gt;#8877&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8986&quot;&gt;#8986&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9012&quot;&gt;#9012&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9080&quot;&gt;#9080&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Simplify a SFINAE check so that it will hopefully work on Sun 5.9
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8822&quot;&gt;#8822&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppress Visual C++ infinite loop warning (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8568&quot;&gt;#8568&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7156&quot;&gt;#7156&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7164&quot;&gt;#7164&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8277&quot;&gt;#8277&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8976&quot;&gt;#8976&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9065&quot;&gt;#9065&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9073&quot;&gt;#9073&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9008&quot;&gt;#9008&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Source breaking&lt;/strong&gt;: Deprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xxx_dont_splay&lt;/span&gt;&lt;/code&gt; functions from splay
                containers. Deprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splay_set_hook&lt;/span&gt;&lt;/code&gt;
                from splay containers, use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bs_set_hook&lt;/span&gt;&lt;/code&gt;
                instead. Both will be removed in Boost 1.56.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;ABI breaking&lt;/strong&gt;: Hash containers' end
                iterator was implemented pointing to one-past the end of the bucket
                array (see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8698&quot;&gt;#8698&lt;/a&gt;)
                causing severe bugs when values to be inserted where allocated next
                to the bucket array. End iterator implementation was changed to point
                to the beginning of the bucket array.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Big refactoring in order to reduce template and debug symbol bloat.
                Test object files have been slashed to half in MSVC compilers in
                Debug mode. Toolchains without Identical COMDAT Folding (ICF) should
                notice size improvements.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;span class=&quot;link&quot;&gt;SCARY iterators&lt;/span&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bad_alloc&lt;/span&gt;&lt;/code&gt; exceptions are now are
                not converted to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bad_lexical_cast&lt;/span&gt;&lt;/code&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8966&quot;&gt;#8966&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added static assert that checks for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;numeric_limits&lt;/span&gt;&lt;/code&gt;
                specializations if they are required for conversion. Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HAS_INT128&lt;/span&gt;&lt;/code&gt; for detecting
                128 bit integers support &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8790&quot;&gt;#8790&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation improved and more usage examples added.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                General changes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a new configuration macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_LOG_WITHOUT_DEFAULT_FACTORIES&lt;/span&gt;&lt;/code&gt;.
                      By defining this macro the user can disable compilation of
                      the default filter and formatter factories used by settings
                      parsers. This can substantially reduce binary sizes while still
                      retaining support for settings parsers.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Rewritten some of the parsers to reduce the compiled binary
                      size. The rewritten parsers are more robust in detecting ambiguous
                      and incorrect input.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The following headers are deprecated: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intrusive_ref_counter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;explicit_operator_bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;.
                      These headers will be removed in future releases. The contents
                      of these headers were moved to other libraries.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timer&lt;/span&gt;&lt;/code&gt;
                      attribute generating incorrect time readings on Windows on
                      heavy thread contention when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;QueryPerformanceCounter&lt;/span&gt;&lt;/code&gt;
                      API was used.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed a bug in the filter parser that prevented using parsed
                      filters with some attributes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed thread id formatting discrepancies between the default
                      sink and formatters.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Closed tickets: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8815&quot;&gt;#8815&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8819&quot;&gt;#8819&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8915&quot;&gt;#8915&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8917&quot;&gt;#8917&lt;/a&gt;,
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9139&quot;&gt;#9139&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9140&quot;&gt;#9140&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9153&quot;&gt;#9153&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9155&quot;&gt;#9155&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href=&quot;http://www.boost.org/libs/log/doc/html/log/changelog.html&quot;&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppress numerous warnings (mostly from GCC-4.8 and MSVC) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8384&quot;&gt;#8384&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8855&quot;&gt;#8855&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9107&quot;&gt;#9107&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9109&quot;&gt;#9109&lt;/a&gt;..
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed PGI compilation issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8333&quot;&gt;#8333&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed PGI constant value initialization issue that caused erf to
                generate incorrect results &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8621&quot;&gt;#8621&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Prevent macro expansion of some C99 macros that are also C++ functions
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8732&quot;&gt;#8732&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8733&quot;&gt;#8733&lt;/a&gt;..
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed Student's T distribution to behave correctly with huge degrees
                of freedom (larger than the largest representable integer) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8837&quot;&gt;#8837&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make some core functions usable with &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&lt;/code&gt; even when the platform
                has no standard library &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&lt;/code&gt; support &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8940&quot;&gt;#8940&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix error handling of distributions to catch invalid scale and location
                parameters when the random variable is infinite &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9042&quot;&gt;#9042&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9126&quot;&gt;#9126&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add workaround for broken &amp;lt;tuple&amp;gt; in Intel C++ 14 &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9087&quot;&gt;#9087&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve consistency of argument reduction in the elliptic integrals
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9104&quot;&gt;#9104&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bug in inverse incomplete beta that results in cancellation errors
                when the beta function is really an arcsine or Student's T distribution.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix issue in Bessel I and K function continued fractions that causes
                spurious over/underflow.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add improvement to non-central chi squared distribution quantile
                due to Thomas Luu.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7952&quot;&gt;#7952&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8764&quot;&gt;#8764&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8765&quot;&gt;#8765&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8842&quot;&gt;#8842&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8979&quot;&gt;#8979&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New feature: interrupt states now support a sequence of events to
                end the interruption.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed Trac &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8686&quot;&gt;#8686&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for Boost.Serialization.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppressed some GCC warnings. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8872&quot;&gt;8872&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in pow for large integer arguments. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8809&quot;&gt;8809&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in pow for calculation of 0[super N]. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8798&quot;&gt;8798&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in fixed precision cpp_int IO code that causes conversion
                to string to fail when the bit count is very small (less than CHAR_BIT).
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8745&quot;&gt;8745&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in cpp_int that causes left shift to fail when a fixed
                precision type would overflow. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8741&quot;&gt;8741&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some cosmetic warnings from cpp_int. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8748&quot;&gt;8748&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed calls to functions which are required to be macros in C99.
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8732&quot;&gt;8732&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug that causes construction from INT_MIN, LONG_MIN etc to
                fail in cpp_int. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8711&quot;&gt;8711&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Boost.MultiIndex has been brought to a higher level of compliance
                with C++11.
              &lt;/div&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;
                    is now efficiently movable.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Initializer lists supported.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Emplace functions provided.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Non-copyable elements (such as &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;) supported. This includes
                    insertion of a range [&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;first&lt;/span&gt;&lt;/code&gt;,&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;last&lt;/span&gt;&lt;/code&gt;) where the iterators point
                    to a type that is convertible to that of the element: no copy
                    construction happens in the process.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Random access indices provide &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shrink_to_fit&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
                  &lt;/div&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
              &lt;div&gt;
                Refer to the &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/compiler_specifics.html&quot;&gt;compiler
                specifics&lt;/a&gt; section for limitations on pre-C++11 compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The following classes are deprecated:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#member_offset&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;member_offset&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;const_mem_fun_explicit&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mem_fun_explicit&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_equal_to&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_equal_to&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_less&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_less&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_greater&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_greater&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_hash&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_hash&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/mpi/&quot;&gt;MPI&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced calls to deprecated MPI functions
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for multi-threaded initialization
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added in-place collectives
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/phoenix/&quot;&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9049&quot;&gt;#9049&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;phoenix&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt;
                constructor is constexpr.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated CGAL part of the Voronoi benchmark with patches from Sebastien
                Loriot. Updated documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added polygon decomposition capability to polygon_90_set_data container
                (patch from Intel). Updated documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs fixed from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8197&quot;&gt;#8197&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_map/index.html&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                dynamic_properties objects can now be built by non-destructively
                chaining &lt;code&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;pm&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; calls. Example:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;dynamic_properties&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;color&amp;quot;&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;color_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;pos&amp;quot;&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;position_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The use of raw pointers as property maps is deprecated; it often
                failed on Visual Studio in the past. This usage has been removed
                from all tests and examples in Boost.Graph. The replacement to use
                for vertex properties in graphs (the most common use for this feature)
                is:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;make_iterator_property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class=&quot;identifier&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;vertex_index&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;))&lt;/span&gt;
&lt;/pre&gt;
              &lt;div&gt;
                (Note: the lack of namespace qualification on get() in this code
                is necessary for generic code). Outside a graph context, the closest
                equivalent is:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;make_iterator_property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;typed_identity_property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;())&lt;/span&gt;
&lt;/pre&gt;
              &lt;div&gt;
                There are commented-out static assertions on lines 151 and 159 of
                &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; that can be un-commented to find
                deprecated uses of pointers in user code.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/rational&quot;&gt;Rational&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lowest&lt;/span&gt;&lt;/code&gt; and
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;max_digits10&lt;/span&gt;&lt;/code&gt;, members
                of std::numeric_limits added in C++11, to the unit-test code. Needed
                since Boost.Test refers to one of them when compiled in C++11 mode.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed initialization of some internal variables to something that
                cannot be a narrowing conversion, which fixes issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5855&quot;&gt;#5855&lt;/a&gt;. Needed
                since narrowing conversions are an error in C++11.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/index.html&quot;&gt;SmartPtr&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;smart_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intrusive_ref_counter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; header, extracted from Boost.Log.
                The header implements a mixin base class that adds support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;intrusive_ptr&lt;/span&gt;&lt;/code&gt; to user's classes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/Thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8519&quot;&gt;#8519&lt;/a&gt;
                      Synchro: Update class barrier with a completion function.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8515&quot;&gt;#8515&lt;/a&gt;
                      Async: Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;then&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8519&quot;&gt;#8519&lt;/a&gt;
                      Synchro: Update class barrier with a completion function
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8615&quot;&gt;#8615&lt;/a&gt;
                      Async: Replace make_future/make_shared_future by make_ready_future.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8627&quot;&gt;#8627&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;::unwrap and unwrapping constructor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8677&quot;&gt;#8677&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;::get_or.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8678&quot;&gt;#8678&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;::fallback_to.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8891&quot;&gt;#8891&lt;/a&gt;
                      upgrade_to_unique_lock: missing mutex() function.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8955&quot;&gt;#8955&lt;/a&gt;
                      Request for more efficient way to get exception_ptr from future.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7461&quot;&gt;#7461&lt;/a&gt;
                      detail::win32::ReleaseSemaphore may be called with count_to_release
                      equal to 0
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8070&quot;&gt;#8070&lt;/a&gt;
                      prefer GetTickCount64 over GetTickCount
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8768&quot;&gt;#8768&lt;/a&gt;
                      win32 condition_variable::wait_until infinite wait in rare
                      cases.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8817&quot;&gt;#8817&lt;/a&gt;
                      Boost Thread Windows CE _createthreadex handling breaks mingw
                      w64.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8943&quot;&gt;#8943&lt;/a&gt;
                      Failed to compile code using boost::call_once with Intel C++
                      Composer XE 2013 on Windows.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8931&quot;&gt;#8931&lt;/a&gt;
                      Typos in external_locking reference.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9029&quot;&gt;#9029&lt;/a&gt;
                      Misprint in documentation.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9037&quot;&gt;#9037&lt;/a&gt;
                      gcc -Wshadow gives warnings in condition_variable{,_fwd}.hpp.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9041&quot;&gt;#9041&lt;/a&gt;
                      Boost.Thread DSO's may need to link with Boost.Atomic.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9048&quot;&gt;#9048&lt;/a&gt;
                      boost::scoped_thread useless ctor with variadic template arguments.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9079&quot;&gt;#9079&lt;/a&gt;
                      Condition variable will wait forever for some timepoint values
                      (Win).
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/timer/&quot;&gt;Timer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation on Intel compiler &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8956&quot;&gt;#8956&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_traits/&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_copy_contructible&lt;/span&gt;&lt;/code&gt;
                trait &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8802&quot;&gt;#8802&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8851&quot;&gt;#8851&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8874&quot;&gt;#8874&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid exposing some detail functions via. ADL on the iterators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Work around variadic parameter bug in Visual Studio 2013. The compiler
                still has problems with initializer lists, but it might not be possible
                to work around those.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; can be set to use TR1
                protocol by default and fall back to &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;
                if the function object does not support it (like C++11 lambda functions,
                for example). Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_RESULT_OF_USE_TR1_WITH_DECLTYPE_FALLBACK&lt;/span&gt;&lt;/code&gt;
                configuration macro to enable this mode.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved support for C++11 in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;base_from_member&lt;/span&gt;&lt;/code&gt;
                class template. The class implements perfect forwarding for the constructor
                arguments, if the compiler supports rvalue references, variadic templates
                and function template default arguments.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;explicit_operator_bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                headers, which were extracted from Boost.Log. The headers implement
                utilities for defining explicit conversion operators to &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt; and a deleter function object
                that does nothing, respectively.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation of constructor and assignment operator with const
                rvalues input parameters &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8988&quot;&gt;#8988&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation of move assignment operator for situations when
                one of the variant template classes has nothrow copy constructor
                and throwing move constructor &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8772&quot;&gt;#8772&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix compilation on exception-disabled environments &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8717&quot;&gt;#8717&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix unreachable code warnings &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8665&quot;&gt;#8665&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed duplicate code &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7601&quot;&gt;#7601&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8843&quot;&gt;#8843&lt;/a&gt; throw instead of assert at incomplete charset
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8880&quot;&gt;#8880&lt;/a&gt; remove unused local typedef
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8882&quot;&gt;#8882&lt;/a&gt; use RAII instead of try/catch in sequence_stack.hpp
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8474&quot;&gt;#8474&lt;/a&gt; make xpressive play nice with clang's -Wimplicit-fallthrough
                diagnostic
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/tools/quickbook&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Quickbook 1.6 finalized, see the &lt;a href=&quot;http://www.boost.org/doc/html/quickbook/versions.html#language_versions.1_6&quot;&gt;Quickbook
                documentation for details&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.3, 3.2, 3.1, 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11, libc++: 3.4, 3.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8.1, 4.7.3, 4.6.3, 4.5.3, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.8.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.8.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 5.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 5.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 11.0, 10.0, 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 5.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 5.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.3, 3.2, 3.1, 3.0, trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11, libc++: 3.4, 3.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.9.0 (experimental), 4.8.1, 4.7.3, 4.6.4, 4.5.3, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.8.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.8.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 13.0.1, 12.1.6
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 11.0, 10.0, 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item>
  </channel>
</rss>
