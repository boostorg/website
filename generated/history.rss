<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:boostbook="urn:boost.org:boostbook">
  <channel>
    <generator>Boost Website Site Tools</generator>
    <title>Boost History</title>
    <link>http://www.boost.org/users/history/</link>
    <description></description>
    <language>en-us</language>
    <copyright>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)</copyright>
<item><title>Version 1.58.0</title><link>http://www.boost.org/users/history/version_1_58_0.html</link><guid>http://www.boost.org/users/history/version_1_58_0.html</guid><pubDate>Fri, 17 Apr 2015 08:53:58 +0100</pubDate><description>



  &lt;div id=&quot;version_1_58_0.known_issue&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Known Issue&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Boost.Python will fail to build if it is complied agains a version of python
          that is one of: 3.0.X, 3.1.X, 3.2.X, 3.3.X. Versions 2.X and 3.4+ are not
          affected. This is fixed in &lt;a href=&quot;https://github.com/boostorg/python/commit/3e405b6fd5db5615bbef241763de070118222ca7&quot;&gt;git&lt;/a&gt;.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Boost.Fusion has a regression with non-constexpr types. &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11211&quot;&gt;#11211&lt;/a&gt;
  This
          is fixed in some PRs: &lt;a href=&quot;https://github.com/boostorg/fusion/pull/70&quot;&gt;Github
          PR #70&lt;/a&gt;, &lt;a href=&quot;https://github.com/boostorg/fusion/pull/71&quot;&gt;Github
          PR #71&lt;/a&gt;, &lt;a href=&quot;https://github.com/boostorg/fusion/pull/72&quot;&gt;Github
          PR #72&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Patches:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_58_0/0001-Fix-exec_file-for-Python-3-3.4.patch&quot;&gt;0001-Fix-exec_file-for-Python-3-3.4.patch&lt;/a&gt;
          (for libs/python).
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_58_0/0002-Fix-a-regression-with-non-constexpr-types.patch&quot;&gt;0002-Fix-a-regression-with-non-constexpr-types.patch&lt;/a&gt;
          (for libs/fusion).
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_58_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/endian&quot;&gt;Endian&lt;/a&gt;:&lt;/span&gt;
  Types and conversion functions
          for correct byte ordering and more regardless of processor endianness.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/sort/&quot;&gt;Sort&lt;/a&gt;:&lt;/span&gt;
  Includes spreadsort, a general-case
          hybrid radix sort that is faster than O(n*log(n))
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_58_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured errors generated by Windows' &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ConnectEx&lt;/span&gt;&lt;/code&gt;
                function are mapped to their portable equivalents (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10744&quot;&gt;#10744&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DISABLE_CONNECTEX&lt;/span&gt;&lt;/code&gt;
                to allow use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ConnectEx&lt;/span&gt;&lt;/code&gt;
                to be explicitly disabled.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a race condition in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;object_handle&lt;/span&gt;&lt;/code&gt;
                when there are pending wait operations on destruction (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10624&quot;&gt;#10624&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed IPv6 address parsing on FreeBSD, where a trailing scope ID
                would cause conversion to fail with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EINVAL&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Worked around shared library visibility issues by ensuring Asio types
                use default visibility (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9465&quot;&gt;#9465&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11070&quot;&gt;#11070&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the SSL wrapper to call the password callback when loading
                an in-memory key (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10828&quot;&gt;#10828&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed false SSL error reports by ensuring that the SSL error queue
                is cleared prior to each operation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                bug that may result in spurious 'short read' errors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed a redundant null pointer check in the SSL engine (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10088&quot;&gt;#10088&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added options for disabling TLS v1.1 and v1.2 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10690&quot;&gt;#10690&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed use of deprecated OpenSSL function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ERR_remove_state&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed detection of various C++11 features with Clang (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8835&quot;&gt;#8835&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10884&quot;&gt;#10884&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed detection of C++11 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;/code&gt;
                with &lt;tt&gt;g++&lt;/tt&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10982&quot;&gt;#10982&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed multicast test to treat certain &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;join_group&lt;/span&gt;&lt;/code&gt;
                failures as non-fatal.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Decoupled Asio unit tests from Boost.Test (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11116&quot;&gt;#11116&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the tutorial to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;endl&lt;/span&gt;&lt;/code&gt;
                to ensure output is flushed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an unsigned integer overflow reported by Clang's integer sanitizer.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for move-only return types when using a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;yield_context&lt;/span&gt;&lt;/code&gt; object with asynchronous
                operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;yield_context&lt;/span&gt;&lt;/code&gt;
                to allow reentrant calls to the completion handler from an initiating
                function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated detection of Windows Runtime to work with latest Windows
                SDK.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Version&lt;/em&gt; 2.0.5
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10778&quot;&gt;#10778&lt;/a&gt;
                      VC14 CTP4 Atomic don't compile with boost::chrono durations
                      which are not TriviallyCopyable
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10840&quot;&gt;#10840&lt;/a&gt;
                      Missing std:: qualifier for puts call in test_7868.cpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10851&quot;&gt;#10851&lt;/a&gt;
                      Missing std:: qualifier for puts call in time_point_output.cpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10893&quot;&gt;#10893&lt;/a&gt;
                      Minor doc typo in Boost.Chrono
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10992&quot;&gt;#10992&lt;/a&gt;
                      Chrono IO state savers inconsistent with Boost.IO state savers
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10995&quot;&gt;#10995&lt;/a&gt;
                      duration_put::put_value truncates fractional part
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11006&quot;&gt;#11006&lt;/a&gt;
                      Impossible to instantiate time_fmt_io_saver due to several
                      errors.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11012&quot;&gt;#11012&lt;/a&gt;
                      chrono_io v2 fail to compile with boost::chrono::duration&amp;lt;
                      boost::rational&amp;lt;int&amp;gt; &amp;gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Experimental &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;small_vector&lt;/span&gt;&lt;/code&gt;
                container.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Massive dependency reorganization. Now &lt;em&gt;Boost.Container&lt;/em&gt;
                depends on very basic utilities like Boost.Core and &lt;em&gt;Boost.Intrusive&lt;/em&gt;.
                Preprocessed code size have decreased considerably and compilation
                times have improved.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;nth&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;index_of&lt;/span&gt;&lt;/code&gt; functions to containers
                with random-access iterators (except &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_string&lt;/span&gt;&lt;/code&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++17's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_traits&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Allocator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;is_always_equal&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated containers to implement new constructors as specified in
                &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2210&quot;&gt;2210.
                Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9931&quot;&gt;#9931:
                      &lt;em&gt;&amp;quot;flat_map::insert(ordered_unique_range_t...)
                      fails with move_iterators&amp;quot;&lt;/em&gt;&lt;/a&gt; (reopened).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11076&quot;&gt;#11076:
                      &lt;em&gt;&amp;quot;Unqualified calls to memmove/memcpy in container/detail/copy_move_algo.hpp&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10790&quot;&gt;Trac
                      #10790 (&lt;em&gt;long long errors from container&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10808&quot;&gt;Trac
                      #10808 (&lt;em&gt;compare equal operator of vector is broken&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Source Breaking&lt;/em&gt;: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_allocator_adaptor&lt;/span&gt;&lt;/code&gt;'s
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;propagate_on_container_copy_assignment&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;propagate_on_container_move_assignment&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;propagate_on_container_swap&lt;/span&gt;&lt;/code&gt;
                are no longer &lt;code&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;integral_constant&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; types. The dependency reorganization
                needed to break with those classes to avoid MPL dependencies, and
                interoperability with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;integral_constant&lt;/span&gt;&lt;/code&gt;
                was not guaranteed. Code assumming &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;true_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;false_type&lt;/span&gt;&lt;/code&gt;
                on this will not compile. As a workaround, use the guaranteed internal
                &lt;code&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value&lt;/span&gt;&lt;/code&gt;
                constant: &lt;code&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;integral_constant&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;scoped_allocator_adaptor&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Allocator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;propagate_on_container_move_assignment&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                support for ARM/iOS (32+64 bit)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                class execution_context (C++14)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/&quot;&gt;Conversion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_pointer_downcast&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_pointer_cast&lt;/span&gt;&lt;/code&gt;
                functions were added (thanks to Boris Rasin) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10780&quot;&gt;#10780&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                All the functions now throw exceptions using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documnetation update
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/date_time/&quot;&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Restored &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;to_time_t&lt;/span&gt;&lt;/code&gt;
                function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Renamed variable v_type to var_type so it longer conflicts with an
                AIX system variable.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documnetation fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/flyweight/&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added hash support both with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hash&lt;/span&gt;&lt;/code&gt;
                and &lt;a href=&quot;http://www.boost.org/doc/html/hash.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hash&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
                This can be optionally &lt;a href=&quot;http://www.boost.org/libs/flyweight/doc/reference/flyweight.html#disable_hash_support&quot;&gt;disabled&lt;/a&gt;
                to avoid clashes with legacy code where this support has already
                been defined by the user.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/function/&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for functions accepting C++11 rvalues and Boost.Move
                rvalues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10585&quot;&gt;#10585&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/factory/&quot;&gt;Functional/Factory&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minor breaking change: the default template parameter to indicate
                that it shouldn't use an allocator is now &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/code&gt;,
                instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none_t&lt;/span&gt;&lt;/code&gt;.
                For details, see the &lt;a href=&quot;http://www.boost.org/libs/functional/factory/doc/html/#boost_functional_factory.changes&quot;&gt;changelog&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Automatic hash creation function (&lt;a href=&quot;https://github.com/boostorg/fusion/pull/12&quot;&gt;Github
                PR #12&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New ADAPT_STRUCT, ADAPT_ADT, ADAPT_ASSOC_ that deduce the members
                types (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9516&quot;&gt;#9516&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add convert implementation for Boost.Tuple and std::tuple.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add mpl::clear implementation for Boost.Tuple and std::tuple.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Use boost::declval instead of std::declval, (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10190&quot;&gt;#10190&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;blank&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8622&quot;&gt;#8622&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add result_of::{copy,move} (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5886&quot;&gt;#5886&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better constexpr and noexcept support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved SFINAE Friendliness of many metafunctions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10676&quot;&gt;#10676&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10443&quot;&gt;#10443&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                result_of::size::value and result_of::size::type::value are the same
                type now (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7304&quot;&gt;#7304&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                result_of::at&amp;lt;Seq, N&amp;gt;::type is now defined when sizeof of sequence
                is less than N (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6507&quot;&gt;#6507&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7651&quot;&gt;#7651&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix missing includes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8457&quot;&gt;#8457&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Many documentation fixes &amp;amp; improvements (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6090&quot;&gt;#6090&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5324&quot;&gt;#5324&lt;/a&gt;,
                &lt;a href=&quot;https://github.com/boostorg/fusion/pull/33&quot;&gt;GitHub PR
                #33&lt;/a&gt;, &lt;a href=&quot;https://github.com/boostorg/fusion/pull/53&quot;&gt;GitHub
                PR #53&lt;/a&gt;, &lt;a href=&quot;https://github.com/boostorg/fusion/pull/56&quot;&gt;GitHub
                PR #56&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm num_segments, returning the number of segments
                      of a geometry
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New overload for is_valid algorithm, that takes a string reference
                      as a second argument and fills it with a message related to
                      the validity or invalidity of the geometry
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New overload for is_valid algorithm, that takes an enum reference
                      as a second argument and fills it with a value related to the
                      validity or invalidity of the geometry
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Disjoint and intersects support the following geometry combinations:
                      point/multipoint, multipoint/multipoint, multipoint/segment,
                      multipoint/box
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Improvements:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Buffer now supports flat-ends for linestrings with a bend close
                      to the start (such that buffered segment crosses flat-end).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Buffer performance is improved significantly
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Partition performance is improved significantly for polygons,
                      potentially enhancing all overlay operations
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Solved tickets:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8379&quot;&gt;#8379&lt;/a&gt;
                      Invalid comparison of the result of determinant
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10108&quot;&gt;#10108&lt;/a&gt;
                      Error in overlay operations in specific cases where geometries
                      touch at one point
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10201&quot;&gt;#10201&lt;/a&gt;
                      Suggestion to use different function to compare coordinates
                      [wontfix]
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10467&quot;&gt;#10467&lt;/a&gt;
                      Template parameter name coliding with B0 macro name defined
                      in termios.h
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10640&quot;&gt;#10640&lt;/a&gt;
                      Invalid result of buffer() for CCW Polygons.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10666&quot;&gt;#10666&lt;/a&gt;
                      MSVC compiler warning C4127: conditional expression is constant
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10747&quot;&gt;#10747&lt;/a&gt;
                      Error in rescaling causing errors in areal/areal set operations
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10770&quot;&gt;#10770&lt;/a&gt;
                      Buffer fails for large distances, or rough round joins, where
                      concavities where not intersected properly
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10658&quot;&gt;#10658&lt;/a&gt;
                      sym_difference yields bad result for int polygons
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10835&quot;&gt;#10835&lt;/a&gt;
                      Difference of multilinestring and polygon yields wrong result
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10861&quot;&gt;#10861&lt;/a&gt;
                      Rtree failing to compile for Value being a pair or a tuple
                      containing pointer to Geometry and the default equal_to&amp;lt;&amp;gt;
                      used
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10863&quot;&gt;#10863&lt;/a&gt;
                      Template parameter name coliding with B0 macro name defined
                      in termios.h (duplicate of 10467)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10887&quot;&gt;#10887&lt;/a&gt;
                      Invalid result of within() and relate() for Linear/MultiPolygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10890&quot;&gt;#10890&lt;/a&gt;
                      Invalid result of disjoint() for Point/Segment.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10904&quot;&gt;#10904&lt;/a&gt;
                      Invalid calculation of most significant Dimension of a segment
                      in relate_cartesian_segments strategy
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10912&quot;&gt;#10912&lt;/a&gt;
                      Invalid result of within() and relate() for Areal/Areal
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10951&quot;&gt;#10951&lt;/a&gt;
                      Tests failing on windows with intel compiler due to lack of
                      /bigobj flag.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10957&quot;&gt;#10957&lt;/a&gt;
                      Assertion failure and invalid results of various relational
                      operations.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10958&quot;&gt;#10958&lt;/a&gt;
                      Invalid results of disjoint() L/L and L/A.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10959&quot;&gt;#10959&lt;/a&gt;
                      Assertion failure in get_turns() used with no_rescale_policy.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10960&quot;&gt;#10960&lt;/a&gt;
                      Invalid result of get_turns() for L/A, missing turn.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10961&quot;&gt;#10961&lt;/a&gt;
                      Invalid result of get_turns() for L/A, invalid turn for a Linear
                      spike.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11112&quot;&gt;#11112&lt;/a&gt;
                      Compilation failure on Solaris due to a CS name clash (used
                      for a macro on this platform)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11121&quot;&gt;#11121&lt;/a&gt;
                      Invalid result of difference() for integral coordinates
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in multipoint/polygon multipoint/multipolygon distance
                      computation (wrong detection of points inside the areal geometry)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in flatten_iterator's assignment operator causing an access
                      violation
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in Cartesian segment-segment intersection strategy when
                      one segment degenerates to a point and is collinear to the
                      other non-degenerate segment
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in centroid(), non-deterministic result if calculated for
                      e.g. a Polygon with zero-area.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for joins with a limited number of points
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for round joins with limited number of points
                      around sharp corners
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for joins with large buffer distances
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for round ends with an odd number of points
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for flat ends with large buffer distances
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in buffers for interior rings with large negative buffer
                      distances
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in closing_iterator not working properly when the input
                      range is empty
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in is_simple, not handling properly closed simple linestrings
                      within multilinestrings
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in rtree constructors taking a pair of Iterators or a Range
                      (packing algorithm), the use of reference to destroyed temporary
                      when Iterator's reference is not true reference, e.g. for some
                      of the Range Adaptors. It also affects distance() and comparable_distance().
                      This bug may cause unexpected behavior of the rtree or distance()
                      algorithm, e.g. an assertion failure or a SEGFAULT.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in rtree count() member function, the use of reference
                      to destroyed temporary when object of type convertible but
                      not the same as value_type or indexable_type is passed. If
                      this happens, wrong result may be returned, in most cases 0.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bugs related to the handling of Ranges, preventing compilation
                      of Geometries using non-Container Ranges in some algorithms
                      (thanks to Samuel Debionne)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed strict aliasing violation (&lt;a href=&quot;https://github.com/boostorg/functional/pull/3&quot;&gt;GitHub
                #3&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced some compile-time dependencies. Updated to Boost.Container
                changes.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/13&quot;&gt;GitHub
                      Pull #13 (&lt;em&gt;&amp;quot;haiku: we don't have XSI shared memory,
                      so don't try to use it&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced compile-time dependencies, headers, and the use of Boost.Preprocessor,
                specially for hooks and iterators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6720&quot;&gt;Boost
                      Trac #6720: &lt;em&gt;intrusive::unordered_set::clear_and_dispose
                      does not compile on VC11 Beta when passed a stateless lambda&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10771&quot;&gt;Boost
                      Trac #10771: &lt;em&gt;remove_if is broken for slist&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10853&quot;&gt;Boost
                      Trac #10853: &lt;em&gt;problem with detection of const_cast_from&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10987&quot;&gt;Boost
                      Trac #10987: &lt;em&gt;bug in any_xxx_node_traits, returning
                      by reference&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Now std::stream is used for conversions to float numbers &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5660&quot;&gt;#5660&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6975&quot;&gt;#6975&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10639&quot;&gt;#10639&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed thread id formatting.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed process id formatting. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10926&quot;&gt;#10926&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed build failure on GNU Hurd.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed incorrect behavior of text file sink backend in case
                      if free space on the file system gets exhausted. The sink will
                      no longer create lots of empty files in attempt to recover.
                      (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11016&quot;&gt;#11016&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed incorrect behavior of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_set&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; in some cases. The inserted
                      elements could have made some previously inserted elements
                      not findable. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11106&quot;&gt;#11106&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed incorrect behavior of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_value_set&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; if a large number of attribute
                      values are inserted into the set. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11148&quot;&gt;#11148&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href=&quot;http://www.boost.org/libs/log/doc/html/log/changelog.html&quot;&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added two new special functions - trigamma and polygamma.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Large update to the Elliptic integral code to use Carlson's latest
                algorithms - these should be more stable, more accurate and slightly
                faster than before. Also added support for Carlson's RG integral.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added ellint_d, jacobi_zeta and heuman_lambda elliptic integrals.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed namespace scope constants so they are constexpr on conforming
                compilers, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10901&quot;&gt;#10901&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed various cases of spurious under/overflow in the incomplete
                beta and gamma functions, plus the elliptic integrals, with thanks
                to Rocco Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix 3-arg legendre_p and legendre_q functions to not call the policy
                based overload if the final argument is not actually a policy.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cleaned up some dead code in the incomplete beta function, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10985&quot;&gt;#10985&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed extreme-value pdf for large valued inputs, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10938&quot;&gt;#10938&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Switched documentation to use SVG rather than PNG graphs and equations
                - browsers seem to have finally caught up!
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_MOVE_BASE&lt;/span&gt;&lt;/code&gt;
                utility.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adl_move_swap&lt;/span&gt;&lt;/code&gt;
                utility.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced dependencies on other Boost libraries to make the library
                a bit more lightweight.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11044&quot;&gt;Trac
                      #11044: &lt;em&gt;&amp;quot;boost::rv inherits off union, when
                      such passed as template argument&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The efficiency of lookup operations has improved in situations where
                they involve the generation of temporary values of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;key_type&lt;/span&gt;&lt;/code&gt;. Consider for instance
                the following code:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;
  &lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;identifier&quot;&gt;indexed_by&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;
    &lt;span class=&quot;identifier&quot;&gt;ordered_unique&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;identity&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;multi_t&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;special&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;identifier&quot;&gt;multi_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;=...;&lt;/span&gt;
&lt;span class=&quot;identifier&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;boost&amp;quot;&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// passed a const char*, not a std::string    &lt;/span&gt;
&lt;/pre&gt;
              &lt;div&gt;
                In previous versions of the library, the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;find&lt;/span&gt;&lt;/code&gt;
                operation generates several temporary &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;/code&gt;s
                (one every time an internal comparison is made). In sufficiently
                advanced compilers, this is now avoided so that only one temporary
                is created.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;frexp&lt;/span&gt;&lt;/code&gt; to
                always be non-expression template generating, see: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10993&quot;&gt;10993&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved support of cpp_dec_float on Cygwin and other platforms with
                missing long double support, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10924&quot;&gt;10924&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved noexcept support and added some more tests, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10990&quot;&gt;10990&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various workarounds applied for Intel-15.0 and Solaris-12.4 compilers.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/optional/&quot;&gt;Optional&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved documentation; documented IO operations and header files.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none_t&lt;/span&gt;&lt;/code&gt; is no longer convertible
                      from literal 0. This avoids a bug where &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;rational&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;oi&lt;/span&gt;
                      &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;;&lt;/span&gt;&lt;/code&gt; would initialize an optional
                      object with no contained value.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a way to manually disable move semantics: just define
                      macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_OPTIONAL_CONFIG_NO_RVALUE_REFERENCES&lt;/span&gt;&lt;/code&gt;.
                      This can be used to work around &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10399&quot;&gt;#10399&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10825&quot;&gt;#10825&lt;/a&gt;
                      Improved the trick that prevents streaming out &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;/code&gt; without header
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional_io&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      by using safe-bool idiom.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11087&quot;&gt;#11087&lt;/a&gt;
                      It is no longer possible to assign &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;U&lt;/span&gt;&lt;/code&gt;
                      is not assignable or convertible to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10839&quot;&gt;#10839&lt;/a&gt;
                      Value accessors now work correctly on rvalues of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/phoenix/&quot;&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Version 3.2.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Phoenix now has a &lt;em&gt;lazy list&lt;/em&gt; implementation
                      as an optional extension.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Example:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      A new example &lt;em&gt;bind_goose&lt;/em&gt; shows the compatibility
                      between &lt;em&gt;boost bind&lt;/em&gt; and &lt;em&gt;boost
                      phoenix bind&lt;/em&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10927&quot;&gt;#10927&lt;/a&gt;
                      Missing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;/code&gt; qualifier for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fabs&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;phoenix&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stdlib&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cmath&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cpp&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11085&quot;&gt;#11085&lt;/a&gt;
                      Missing qualifier for pow call in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;phoenix&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function_tests&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cpp&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixes for a number of cases failing with &lt;em&gt;bind&lt;/em&gt;,
                      &lt;em&gt;lambda&lt;/em&gt; and &lt;em&gt;let&lt;/em&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/predef/&quot;&gt;Predef&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Version 1.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Visual Studio 2015 detection.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added detection of Haiku OS.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix Android endian detection.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;predef_check&lt;/span&gt;&lt;/code&gt;
                program and BBv2 integration for build configuration checks.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/random/&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added non_central_chi_squared_distribution.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Version&lt;/em&gt; 4.5.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Experimental Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9600&quot;&gt;#9600&lt;/a&gt;
                      Async: Add task_region
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10611&quot;&gt;#10611&lt;/a&gt;
                      Add emplace promise::set_value and emplace make_ready_future
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10826&quot;&gt;#10826&lt;/a&gt;
                      Add scheduled executor operations
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11048&quot;&gt;#11048&lt;/a&gt;
                      Add a serial_executor based on continuations
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6787&quot;&gt;#6787&lt;/a&gt;
                      boost::thread::sleep() hangs if system time is rolled back
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10734&quot;&gt;#10734&lt;/a&gt;
                      Submit method work differently on different executors, some
                      throw exception and some silently ignore error (thread_executor
                      and inline_executor)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10736&quot;&gt;#10736&lt;/a&gt;
                      Task exceptions silently ignored. I think std::terminate solution
                      from N3785 and std::thread is better choice and more consistent.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10737&quot;&gt;#10737&lt;/a&gt;
                      In serial_executor we have infinite wait if task throw exception.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10822&quot;&gt;#10822&lt;/a&gt;
                      Boost.Thread fails to compile on Android
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10824&quot;&gt;#10824&lt;/a&gt;
                      Boost.Thread 1.57 breaks Windows XP compatibility for SP2 and
                      below.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10963&quot;&gt;#10963&lt;/a&gt;
                      future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::then Has No Implementation
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10964&quot;&gt;#10964&lt;/a&gt;
                      future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::unwrap().then() Deadlocks
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10968&quot;&gt;#10968&lt;/a&gt;
                      The futures returned by async() and future::then() are not
                      blocking.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10971&quot;&gt;#10971&lt;/a&gt;
                      shared_future::get()/get_or() must be const
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10972&quot;&gt;#10972&lt;/a&gt;
                      shared_future::then() can be called multiple times.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10979&quot;&gt;#10979&lt;/a&gt;
                      Support T&amp;amp; type deduction when the make_ready_future parameter
                      is reference_wrapper&amp;lt;T&amp;gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10996&quot;&gt;#10996&lt;/a&gt;
                      Thread physical_concurrency() is failing on Windows
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11035&quot;&gt;#11035&lt;/a&gt;
                      BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE not defined for Android
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/11053&quot;&gt;#11053&lt;/a&gt;
                      The attached code results in a R6025 - pure virtual function
                      call in run_thread_exit_callbacks
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_erasure/&quot;&gt;TypeErasure&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation with MSVC 12.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_index/&quot;&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Link time assertions added on platforms that support it
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/units&quot;&gt;Units&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix for base units with arbitrary dimensions.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix move assignment with stateful, propagate_on_container_move_assign
                allocators (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10777&quot;&gt;#10777&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix potential overflow when calculating number of buckets to allocate
                (&lt;a href=&quot;https://github.com/boostorg/unordered/pull/4&quot;&gt;GitHub
                #4&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Other minor changes, see &lt;a href=&quot;http://www.boost.org/doc/html/unordered/changes.html&quot;&gt;changelog&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change:&lt;/strong&gt; Compile time checked
                getter is now used by default in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;VariantT&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_get&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;U&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;VariantT&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;. New getter asserts that type &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;U&lt;/span&gt;&lt;/code&gt; is one of the types that can
                be stored in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;VariantT&lt;/span&gt;&lt;/code&gt;.
                Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT&lt;/span&gt;&lt;/code&gt;
                to change default behavior. See &lt;a href=&quot;http://www.boost.org/doc/html/variant/reference.html#header.boost.variant.get_hpp&quot;&gt;get.hpp&lt;/a&gt;
                and &lt;a href=&quot;http://www.boost.org/doc/html/variant/reference.html#header.boost.variant.polymorphic_get_hpp&quot;&gt;polymorphic_get.hpp&lt;/a&gt;
                descriptions for more info &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/547&quot;&gt;#547&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing comparison operators to variant &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8620&quot;&gt;#8620&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10811&quot;&gt;#10811&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multiple documentations fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10273&quot;&gt;#10273&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10653&quot;&gt;#10653&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Variadic templats enabled on Clang &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10832&quot;&gt;#10832&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Autodetection of return types for visitors in C++14, which makes
                it possible to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;apply_visitor&lt;/span&gt;&lt;/code&gt;
                with generic lambdas &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10837&quot;&gt;#10837&lt;/a&gt;:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;apply_visitor&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;special&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;special&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;identifier&quot;&gt;variant_instance&lt;/span&gt;
&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved swap functions &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10882&quot;&gt;#10882&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Many improvements to variadic templates, even more methods support
                variadics.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multiple bugfixes and testing improvements including Coveralls integration
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_58_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5, 3.6
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.9.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.8.1, 4.8.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7, 4.8.4, 4.9.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.7, 4.5.4, 4.6.3, 4.7.3, 4.8.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2, 3.3, 3.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5, 3.6
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.6.4, 4.7.3, 4.8.1, 4.9.2, 5.0.0 (experimental)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7, 4.8.4, 4.9.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.7, 4.5.4, 4.6.4, 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Android
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4, 3.5
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8, 4.9
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_58_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.57.0</title><link>http://www.boost.org/users/history/version_1_57_0.html</link><guid>http://www.boost.org/users/history/version_1_57_0.html</guid><pubDate>Mon, 3 Nov 2014 15:55:36 -0600</pubDate><description>



  &lt;div id=&quot;version_1_57_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                RTTI is not required any more (&lt;a href=&quot;http://www.boost.org/libs/type_index&quot;&gt;TypeIndex&lt;/a&gt;
                library is used for RTTI emulation)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8958&quot;&gt;#8958&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed the &lt;tt&gt;kqueue&lt;/tt&gt; reactor so that it works on FreeBSD
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10606&quot;&gt;#10606&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an issue in the &lt;tt&gt;kqueue&lt;/tt&gt; reactor which resulted
                in spinning when using serial ports on Mac OS (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10496&quot;&gt;#10496&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;tt&gt;kqueue&lt;/tt&gt; reactor support for read-only file
                descriptors (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10367&quot;&gt;#10367&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a compile error when using the &lt;tt&gt;/dev/poll&lt;/tt&gt;
                reactor (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10350&quot;&gt;#10350&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10572&quot;&gt;#10572&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the Windows backend to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;WSASocketW&lt;/span&gt;&lt;/code&gt;,
                as &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;WSASocketA&lt;/span&gt;&lt;/code&gt; has
                been deprecated (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10534&quot;&gt;#10534&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some warnings reported by Visual C++ 2013 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10376&quot;&gt;#10376&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed integer type used in the WinRT version of the byte-order conversion
                functions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10539&quot;&gt;#10539&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed documentation to indicate that &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                are not made available when including the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                convenience header (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10567&quot;&gt;#10567&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Explicitly marked &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;/code&gt;
                as deprecated. Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;/code&gt;
                instead.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer/&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some warnings and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_if_noexcept&lt;/span&gt;&lt;/code&gt;
                from Boost.Move is used &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7888&quot;&gt;#7888&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HAS_PRAGMA_DETECT_MISMATCH&lt;/span&gt;&lt;/code&gt;
                macro was added
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;initializer_list&lt;/span&gt;&lt;/code&gt;.
                Contributed by Robert Matusewicz.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed double destruction bugs in vector and backward expansion capable
                allocators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10263&quot;&gt;Trac
                      #10263 (&lt;em&gt;&amp;quot;AIX 6.1 bug with sched_yield() function
                      out of scope&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://github.com/boostorg/container/pull/16&quot;&gt;GitHub
                      #16: &lt;em&gt;Fix iterators of incomplete type containers&lt;/em&gt;&lt;/a&gt;.
                      Thanks to Mikael Persson.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                optionally register stacks with valgrind
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10386&quot;&gt;#10386&lt;/a&gt; MSVC link error in asymmetric_coroutine.hpp: symbol already
                defined
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10536&quot;&gt;#10536&lt;/a&gt; call to 'begin(...pull_coroutine&amp;lt; R &amp;gt; &amp;amp; c)'
                is ambiguous
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/flyweight/&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added serialization support via &lt;a href=&quot;http://www.boost.org/libs/serialization/&quot;&gt;Boost
                Serialization&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;flyweight&lt;/span&gt;&lt;/code&gt; default
                constructor was made explicit in Boost 1.56, which introduces a regression
                in some initialization scenarios. The former non-explicit default
                constructor has been restored (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10439&quot;&gt;#10439&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Improvements&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The support of parameters convertible to value_type in rtree
                      insert(), remove() and count() functions
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Solved tickets&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8402&quot;&gt;8402&lt;/a&gt;
                      Implicit conversion warnings
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9354&quot;&gt;9354&lt;/a&gt;
                      Bug in winding strategy affecting within() and covered_by()
                      for non-cartesian coordinate systems
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10177&quot;&gt;10177&lt;/a&gt;
                      Missing include
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10345&quot;&gt;10345&lt;/a&gt;
                      Distance fails to compile for some coordinate types
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10398&quot;&gt;10398&lt;/a&gt;
                      Wrong neighbour check in buffer, calculating turns
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10421&quot;&gt;10421&lt;/a&gt;
                      Invalid Point-Box distance for spherical CS
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10615&quot;&gt;10615&lt;/a&gt;
                      Rtree constructor feature request
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10643&quot;&gt;10643&lt;/a&gt;
                      Invalid point_on_surface() result for big coordinates
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10668&quot;&gt;10668&lt;/a&gt;
                      Implicit conversion warnings (duplicated 8402)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Several fixes of bugs in algorithm buffer
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in point_on_surface() for CCW Polygons (extreme_points())
                      and numerical issue (thanks to Matt Amos)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bug in disjoint() for A/A fixed by replacement of point_on_surface()
                      with point_on_border() (thanks to Matt Amos)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The result of convex_hull(), duplicated Point in open output,
                      too small number of Points for 1- and 2-Point input
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Imprecision for big coordinates in centroid(), fixed by Points
                      translation (related with ticket 10643)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      for_each_segment() not taking into account the last segment
                      of open Geometry
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;/code&gt;,
                now forwards boost::interprocess::unique_ptr to the general purpose
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;movelib&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;/code&gt; class from &lt;strong&gt;Boost.Move&lt;/strong&gt;. This implementation is closer
                to the standard &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;/code&gt;
                implementation and it's better maintained.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10262&quot;&gt;Trac
                      #10262 (&lt;em&gt;&amp;quot;AIX 6.1 bug with variable definition
                      hz&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10229&quot;&gt;Trac
                      #10229 (&lt;em&gt;&amp;quot;Compiling errors in interprocess\detail\os_file_functions.hpp&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10506&quot;&gt;Trac
                      #10506 (&lt;em&gt;&amp;quot;Infinite loop in create_or_open_file&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/11&quot;&gt;GitHub
                      Pull #11 (&lt;em&gt;&amp;quot;Compile fix for BOOST_USE_WINDOWS_H&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reorganized Doxygen marks to obtain a better header reference.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Experimental version of node checkers, contributed by Matei David.
                Many thanks!
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;a href=&quot;http://www.open-std.org/JTC1/sc22/WG21/docs/papers/2013/n3644.pdf&quot;&gt;N3644:
                Null Forward Iterators&lt;/a&gt; from C++14.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://github.com/boostorg/intrusive/pull/12&quot;&gt;GitHub
                      Pull #12: &lt;em&gt;Fix MSVC14 warning C4456: declaration of
                      'x_parent_right' hides previous local declaration&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10520&quot;&gt;Boost
                      Trac #10520: &lt;em&gt;Conversion warning in intrusive/detail/utilities.hpp&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10469&quot;&gt;Boost
                      Trac #10469: &lt;em&gt;Erasing from intrusive unordered_multiset
                      with optimize_multikey goes into an infinite loop&lt;/em&gt;&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iterator/&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Most components of the library were moved into the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterators&lt;/span&gt;&lt;/code&gt; namespace. For backward
                compatibility the components are also accessible in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;/code&gt; namespace.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Iterator operators are now conditionally defined based on the iterator
                category.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some of the internal components of the library were made public (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;minimum_category&lt;/span&gt;&lt;/code&gt;, for example).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some internal changes, library now consist of multiple headers instead
                of a single one &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10391&quot;&gt;#10391&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10173&quot;&gt;#10173&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Hyperexponential Distribution.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix some spurious overflows in the incomplete gamma functions (with
                thanks to Rocco Romeo).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bug in derivative of incomplete beta when a = b = 0.5 - this
                also effects several non-central distributions, see issue 10480.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some corner cases in function round.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Don't support 80-bit floats in cstdfloat.hpp if standard library
                support is broken.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;/code&gt; smart
          pointer. Thanks to Howard Hinnant for his excellent unique_ptr emulation
          code and testsuite.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_if_noexcept&lt;/span&gt;&lt;/code&gt;
          utility. Thanks to Antony Polukhin for the implementation.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Fixed bugs:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9785&quot;&gt;Trac #9785:
                &lt;em&gt;&amp;quot;Compiler warning with intel icc in boost/move/core.hpp&amp;quot;&lt;/em&gt;&lt;/a&gt;,
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10460&quot;&gt;Trac #10460:
                &lt;em&gt;&amp;quot;Compiler error due to looser throw specifier&amp;quot;&lt;/em&gt;&lt;/a&gt;,
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://github.com/boostorg/move/pull/3&quot;&gt;Git Pull #3:
                &lt;em&gt;&amp;quot;Don't delete copy constructor when rvalue references
                are disabled&amp;quot;&lt;/em&gt;&lt;/a&gt;,
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_array/&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a friend-declaration related warning for clang (thanks to Marcel
                Raad).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed rational to float conversions to exactly round to nearest.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added improved generic float to rational conversions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed rare bug in exponent function for cpp_bin_float.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed various minor documentation issues.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                When &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tuple&lt;/span&gt;&lt;/code&gt;s are available, these can
                be used for lookup operations in indices equipped with composite
                keys. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tuple&lt;/span&gt;&lt;/code&gt;s are also supported for backwards
                compatibility.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/preprocessor/&quot;&gt;Preprocessor&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added is_begin_parens and remove_parens.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added tuple functionality to parallel all array functionality.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed VC++ problems with empty tuple data.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated internal is_empty to use superior variadic version when variadic
                macros are supported.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated clang to have same variadic support as gcc.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated doc for new functionality.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Experimental Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6227&quot;&gt;#6227&lt;/a&gt;
                      Synchro: Use of variadic templates on Generic Locking Algorithms
                      on compilers providing them
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10298&quot;&gt;#10298&lt;/a&gt;
                      Synchro: Added queue views.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10300&quot;&gt;#10300&lt;/a&gt;
                      Async: Added generic_executor_ref.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10552&quot;&gt;#10552&lt;/a&gt;
                      Add make_valid_future
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6782&quot;&gt;#6782&lt;/a&gt;
                      call_once uses incorrect barrier intrinsic on Visual Studio
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6787&quot;&gt;#6787&lt;/a&gt;
                      boost::thread::sleep() hangs if system time is rolled back
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7665&quot;&gt;#7665&lt;/a&gt;
                      this_thread::sleep_for no longer uses steady_clock in thread
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9307&quot;&gt;#9307&lt;/a&gt;
                      future::fallback_to assert with ERRORRRRR boost: mutex lock
                      failed in pthread_mutex_lock: Invalid argument
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9308&quot;&gt;#9308&lt;/a&gt;
                      future::async fails with terminate called throwing an exception
                      when called with a lambda - clang-darwin-asan11
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9310&quot;&gt;#9310&lt;/a&gt;
                      test_4648_lib fails on clang-darwin-asan11
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9425&quot;&gt;#9425&lt;/a&gt;
                      Boost promise &amp;amp; future does not use supplied allocator
                      for value storage
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9558&quot;&gt;#9558&lt;/a&gt;
                      future continuations unit test hangs in get()/pthread_cond_wait()
                      on Mac 10.7/32-bit/x86/darwin-4.2.1
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9787&quot;&gt;#9787&lt;/a&gt;
                      [windows] Small duration value passed down to basic_timed_mutex::try_lock_until
                      and condition_variable::wait_until can cause infinite or near
                      infinite wait for win32
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9880&quot;&gt;#9880&lt;/a&gt;
                      [windows] boost::condition_variable.timed_wait() exception
                      if system time &amp;lt; 1970
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10159&quot;&gt;#10159&lt;/a&gt;
                      GCC 4.4 error sorry, unimplemented
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10196&quot;&gt;#10196&lt;/a&gt;
                      thread_specific_ptr does not support void*
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10296&quot;&gt;#10296&lt;/a&gt;
                      Boost.Thread 1.56 rc1 does not compile on Mingw
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10297&quot;&gt;#10297&lt;/a&gt;
                      Boost.Thread 1.56 rc1 hangs when built with clang on armhf
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10340&quot;&gt;#10340&lt;/a&gt;
                      No boost::promise&amp;lt;T&amp;gt;::set_value(const T&amp;amp;) overload
                      present in C++03 mode
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10425&quot;&gt;#10425&lt;/a&gt;
                      Missing documentation for when_all/when_any.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10426&quot;&gt;#10426&lt;/a&gt;
                      Take in account the deferred futures in when_all.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10427&quot;&gt;#10427&lt;/a&gt;
                      Take in account the deferred and ready futures in when_any.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10428&quot;&gt;#10428&lt;/a&gt;
                      Adapt to new unique_ptr interface in Boost.Move
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10465&quot;&gt;#10465&lt;/a&gt;
                      Missing implementation of when_all/when_any when the result
                      is a tuple.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10476&quot;&gt;#10476&lt;/a&gt;
                      classes using BOOST_THREAD_MOVABLE_ONLY&amp;lt;T&amp;gt; dont satisfy
                      is_copy_constructible&amp;lt;T&amp;gt;::value == false
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10478&quot;&gt;#10478&lt;/a&gt;
                      Data race in boost/thread/future.hpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10529&quot;&gt;#10529&lt;/a&gt;
                      The pthread/condition_variable_any constructor reports incorrect
                      error code for pthread_cond_init
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10563&quot;&gt;#10563&lt;/a&gt;
                      shared_future&amp;lt;R&amp;gt;::then should be const
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_index/&quot;&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HAS_PRAGMA_DETECT_MISMATCH&lt;/span&gt;&lt;/code&gt;
                is now used to detect ODR violations &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10404&quot;&gt;#10404&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Typos fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10294&quot;&gt;#10294&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_traits/&quot;&gt;TypeTraits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new traits is_copy_assignable and is_final.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/units/&quot;&gt;Units&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New unit system &amp;lt;boost/units/systems/information.hpp&amp;gt; units
                for: bit, byte, nat, hartley and shannon,
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add scale units for binary prefixes kibi, mebi, gibi, tebi, pebi,
                zebi and yobi IEC prefixes
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix output of NaN on msvc-14
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for C++11 numeric_limits::max_digits10 and ::lowest
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                warning fixes
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pointer&lt;/span&gt;&lt;/code&gt; typedef
                in iterators (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10672&quot;&gt;#10672&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix Coverity warning (&lt;a href=&quot;https://github.com/boostorg/unordered/pull/2&quot;&gt;GitHub
                #2&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;prior&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                functions taking distance arguments were reworked. The code now work
                correctly when the distance is unsigned or both arguments are integers.
                The new code relies on the availability of operators supported by
                the first argument to select the correct implementation.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/ublas/&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                added two new types: matrix_row and matrix_column facades . With
                them, it is possible to access to the matrices as an array of rows
                and an array of columns, respectively.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                added fixed_vector/fixed_matrix classes to represent small - fixed
                size containers. Requires c++11 because it is using std::array
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                fixed the long standing banded matrix bug (https://svn.boost.org/trac/boost/ticket/7549).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                the interface of matrices and vectors has been extended with cbegin,
                cend, crbegin and crend member functions, as defined in c++11.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                removed doxygen documentation to make the distribution lighter
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                removed warnings with MSVC for unused parameters
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                changed the uBlas development folder structure (will not affect users
                of the library)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                performed a very large overhaul with respect to warnings and errors
                on various compilers. Apart for some hard to resolve warnings and
                older compiler incompatibilities, compilations with uBlas will be
                much cleaner now.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_57_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2, 3.3, 3.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.4, 4.7.3, 4.8.1, 4.8.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.9.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7, 4.8.2, 4.8.3, 4.9.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 13.1, 14.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++11: 13.1, 14.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 6.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 6.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 6.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 4.9.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7. 4.5.4, 4.6.3, 4.7.2, 4.7.3, 4.8.0, 4.8.2,
                4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2, 3.3, 3.4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5.0, trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.6.4, 4.7.3, 4.8.1, 4.8.2, 5.0 &lt;em&gt;(experimental)&lt;/em&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.4.7, 4.8.2, 4.8.3, 4.9.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 4.9.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.1, 13.0, 13.1, 14.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++11: 13.1, 14.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 6.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 6.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 6.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 4.9.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.3, 4.8.0, 4.8.2, 4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_57_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.56.0</title><link>http://www.boost.org/users/history/version_1_56_0.html</link><guid>http://www.boost.org/users/history/version_1_56_0.html</guid><pubDate>Thu, 7 Aug 2014 09:08:22 -0700</pubDate><description>



  &lt;div id=&quot;version_1_56_0.other_downloads&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Other Downloads&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;https://sourceforge.net/projects/boost/files/boost-binaries/1.56.0/&quot;&gt;Windows
          binaries&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_56_0.modularization&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Modularization&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost version control has migrated to a system using git submodules. This shouldn't
      make too much of a difference to users, although the directory structure is
      now a bit different.
    &lt;/p&gt;
    &lt;p&gt;
      Parts of some libraries have been moved into different modules, and several
      new modules have been extracted from existing code. All header paths should
      remain the same. The new modules are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/assert/&quot;&gt;Assert&lt;/a&gt;:&lt;/span&gt;
  Customizable assert macros.
          Maintained by Peter Dimov.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/core/&quot;&gt;Core&lt;/a&gt;:&lt;/span&gt;
  Core utilities used by other
          libraries, with minimal dependencies. Maintained by Peter Dimov, Glen Fernandes
          and Andrey Semashev.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical_Cast&lt;/a&gt;:&lt;/span&gt;
  General literal
          text conversions, such as an int represented a string, or vice-versa, from
          Kevlin Henney.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/throw_exception/&quot;&gt;Throw_Exception&lt;/a&gt;:&lt;/span&gt;
  A common
          infrastructure for throwing exceptions from Boost libraries, from Emil
          Dotchevski.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;Winapi:&lt;/span&gt;
  Windows API declarations without &amp;lt;windows.h&amp;gt;, for internal
          Boost use.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_56_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/align/&quot;&gt;Align&lt;/a&gt;:&lt;/span&gt;
  Memory alignment functions,
          allocators, and adaptors, from Glen Fernandes.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_index/&quot;&gt;Type_Index&lt;/a&gt;:&lt;/span&gt;
  Runtime/Compile
          time copyable type info, from Antony Polukhin.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_56_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Acumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New accumulators &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_variance&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_moment&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed rvalue references related issues (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9215&quot;&gt;#9215&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9462&quot;&gt;#9462&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Dropped support of antique compilers.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                to work correctly with new Boost.Coroutine interface (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9442&quot;&gt;#9442&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9928&quot;&gt;#9928&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured that incomplete &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; coroutines are correctly unwound
                when cleaned up by the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                destructor (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9731&quot;&gt;#9731&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed delegation of continuation hook for handlers produced by &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9741&quot;&gt;#9741&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the Windows I/O completion port backend to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ConnectEx&lt;/span&gt;&lt;/code&gt;, if available, for connection-oriented
                IP sockets.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                backend for non-Windows (and non-IOCP Windows) platforms to use a
                single condition variable per &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                instance. This addresses a potential race condition when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;run_one&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                is used from multiple threads.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Prevented integer overflow when computing timeouts based on some
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chrono&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chrono&lt;/span&gt;&lt;/code&gt;
                clocks (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9662&quot;&gt;#9662&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9778&quot;&gt;#9778&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Made further changes to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EV_CLEAR&lt;/span&gt;&lt;/code&gt;
                handling in the kqueue backend, to address other cases where the
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                system call may hang on Mac OS X.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed infinite recursion in implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_query_base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;~&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9548&quot;&gt;#9548&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Made the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;select&lt;/span&gt;&lt;/code&gt; reactor
                more efficient on Windows for large numbers of sockets (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9528&quot;&gt;#9528&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a Windows-specific type-aliasing issue reported by &lt;tt&gt;gcc&lt;/tt&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9550&quot;&gt;#9550&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Prevented execution of compile-time-only buffer test to avoid triggering
                an address sanitiser warning (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8295&quot;&gt;#8295&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disabled the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;GetQueuedCompletionStatus&lt;/span&gt;&lt;/code&gt;
                timeout workaround on recent versions of Windows.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for string-based scope IDs when using link-local multicast
                addresses.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed IPv6 multicast group join to use the address's scope ID as
                the interface, if an interface is not explicitly specified.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed multicast test failure on Mac OS X and the BSDs by using a
                link-local multicast address.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Worked around a &lt;tt&gt;gcc&lt;/tt&gt; problem to do with anonymous
                enums (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10042&quot;&gt;#10042&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reverted the Windows &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;
                backend change to ignore &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ERROR_MORE_DATA&lt;/span&gt;&lt;/code&gt;.
                Instead, the error will be propagated as with any other (i.e. in
                an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt; or
                thrown as a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;system_error&lt;/span&gt;&lt;/code&gt;),
                and the number of bytes transferred will be returned. For code that
                needs to handle partial messages, the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt;
                overload should be used (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10034&quot;&gt;#10034&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an off-by-one error in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;signal_set&lt;/span&gt;&lt;/code&gt;
                implementation's signal number check (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9324&quot;&gt;#9324&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use SSE2 intrinsics rather than inline assembly, to allow
                the Cray compiler to work.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Stopped using certain Winsock functions that are marked as deprecated
                in the latest Visual C++ and Windows SDK.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a workaround for building the unit tests with &lt;tt&gt;gcc&lt;/tt&gt;
                on AIX.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various minor documentation improvements (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8295&quot;&gt;#8295&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9605&quot;&gt;#9605&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9771&quot;&gt;#9771&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/assign/&quot;&gt;Assign&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Resolve some C++11 ambiguities (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3073&quot;&gt;#3073&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The library has been redesigned. Besides internal refactoring, various
                bugs were fixed, including incorrect values of feature test macros
                and integer overflow handling.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed values of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;memory_order&lt;/span&gt;&lt;/code&gt;
                enumeration. The concrete values are not part of the interface, but
                this change may potentially break ABI, if the enum is used in user's
                interfaces.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented support for 128-bit atomic operations on Windows x64
                with MSVC. The library assumes presence of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cmpxchg16b&lt;/span&gt;&lt;/code&gt;
                instruction in the target CPUs. Some early AMD CPUs don't support
                this instruction. To target those define the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ATOMIC_NO_CMPXCHG16B&lt;/span&gt;&lt;/code&gt;
                macro.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented experimental support for Windows ARM target with MSVC.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented experimental support for DEC Alpha target with GCC.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved support for ARMv6 and later with GCC. Implemented all atomic
                operations as assembler blocks instead of CAS-based loops. 64-bit
                operations are supported with ARMv7.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented optional support for the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ATOMIC_FLAG_INIT&lt;/span&gt;&lt;/code&gt;
                macro and static initialization of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;atomic_flag&lt;/span&gt;&lt;/code&gt;.
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8158&quot;&gt;#8158&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation for SPARCv9 target. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9446&quot;&gt;#9446&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation for PowerPC target. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9447&quot;&gt;#9447&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed several compatibility problems with Clang on x86 and x86-64.
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9610&quot;&gt;#9610&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9842&quot;&gt;#9842&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed specialized code for Windows on IA64 platform.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer/&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9970&quot;&gt;#9970&lt;/a&gt;,&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9334&quot;&gt;#9334&lt;/a&gt; Support for the C++11 allocator model.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Dropped support of antique compilers.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/concept_check/&quot;&gt;Concept Check&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fewer warnings (includes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5012&quot;&gt;#5012&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added DlMalloc-based Extended Allocators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved configurability of tree-based ordered associative containers.
                AVL, Scapegoat and Splay trees are now available to implement &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;set&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multiset&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;map&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multimap&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9338&quot;&gt;#9338:
                      &lt;em&gt;&amp;quot;VS2005 compiler errors in swap() definition
                      after including container/memory_util.hpp&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9637&quot;&gt;#9637:
                      &lt;em&gt;&amp;quot;Boost.Container vector::resize() performance
                      issue&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9648&quot;&gt;#9648:
                      &lt;em&gt;&amp;quot;string construction optimization - char_traits::copy
                      could be used ...&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9801&quot;&gt;#9801:
                      &lt;em&gt;&amp;quot;I can no longer create and iterator_range from
                      a stable_vector&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9915&quot;&gt;#9915:
                      &lt;em&gt;&amp;quot;Documentation issues regarding vector constructors
                      and resize methods - value/default initialization&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9916&quot;&gt;#9916:
                      &lt;em&gt;&amp;quot;Allocator propagation incorrect in the assignment
                      operator of most&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9931&quot;&gt;#9931:
                      &lt;em&gt;&amp;quot;flat_map::insert(ordered_unique_range_t...)
                      fails with move_iterators&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9955&quot;&gt;#9955:
                      &lt;em&gt;&amp;quot;Using memcpy with overlapped buffers in vector&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                fcontext_t is opaque pointer to context-data
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                changed signature of make_fcontext()
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8826&quot;&gt;#8826&lt;/a&gt; no executable stack
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9437&quot;&gt;#9437&lt;/a&gt; catch exceptions on iOS and Windows Phone 8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9445&quot;&gt;#9445&lt;/a&gt; support for x32 ABIs
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9522&quot;&gt;#9522&lt;/a&gt; support for powerpc_64le
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9743&quot;&gt;#9743&lt;/a&gt; bugfix for powerpc_64 le/be
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9774&quot;&gt;#9774&lt;/a&gt; bugfix for x86 on Mac OS X + clang
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                support of symmetric coroutines
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9355&quot;&gt;#9355&lt;/a&gt; fix race condition in protected_stack_allocator
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9551&quot;&gt;#9551&lt;/a&gt; list of supported architectures
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9734&quot;&gt;#9734&lt;/a&gt; wrong check of mmap() return value
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9735&quot;&gt;#9735&lt;/a&gt; no memset() for protected_stack_allocator
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9760&quot;&gt;#9760&lt;/a&gt; coroutine iterator need const operator==
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10070&quot;&gt;#10070&lt;/a&gt; mmap() return value
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10157&quot;&gt;#10157&lt;/a&gt; file descriptor not required in protected_stack_allocator
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/dynamic_bitset/&quot;&gt;Dynamic Bitset&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for C++11 move constructors
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Warning fixes on MSVC 2013
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for C++11 minimal allocators
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add noexcept specifications
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6918&quot;&gt;#6918&lt;/a&gt;
                Boost Chrono compilation failure on HP uX due to undefined pthread_getcpuclockid
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8006&quot;&gt;#8006&lt;/a&gt;
                Boost::Chrono Assertion at startup - steady_clock::now() - Windows
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9337&quot;&gt;#9337&lt;/a&gt;
                chrono::process_cpu_clock time points wrong by factor 1000 on Linux
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9342&quot;&gt;#9342&lt;/a&gt;
                Regression on process_cpu_clock::timepoint io on V2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9419&quot;&gt;#9419&lt;/a&gt;
                boost::chrono::floor()/round() and negative durations is wrong
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9698&quot;&gt;#9698&lt;/a&gt;
                boost::chrono::thread_clock not declared in OSX
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9720&quot;&gt;#9720&lt;/a&gt;
                boost::this_thread::sleep_for() sometimes returns immediately on
                win32
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9859&quot;&gt;#9859&lt;/a&gt;
                Remove references to gcc-mingw
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9918&quot;&gt;#9918&lt;/a&gt;
                chrono compilation error on Solaris, funciton timegm
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9811&quot;&gt;#9811&lt;/a&gt;
                boost/boost/chrono/duration.hpp:355:56: error: call to non-constexpr
                function 'static std::numeric_limits&amp;lt;float&amp;gt;::_Ty std::numeric_limits&amp;lt;float&amp;gt;::max()'
                /home/zosun/input_service/inputservices-core-service/other/boost/boost/chrono/duration.hpp:
                In static member function 'static constexpr double boost::chrono::detail::chrono_numeric_limits&amp;lt;double,
                true&amp;gt;::lowest()':
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10069&quot;&gt;#10069&lt;/a&gt;
                Overflow in chrono clocks on 32bit
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10151&quot;&gt;#10151&lt;/a&gt;
                timegm function not available on QNX
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/flyweight/index.html&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                In compilers with variadic template support, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flyweight&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; now provides a perfectly forwarding
                constructor to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;/code&gt;
                (previously an emulation was used).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;flyweight&lt;/span&gt;&lt;/code&gt; now replicates
                the initializer-list constructors and assignment operators of its
                underlying type.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed intermodule static initialization problem (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9553&quot;&gt;#9553&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fusion is enabled for use on GPU
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Additional functionality
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm buffer for inflating/deflating geometries (buffer
                      itself already existed but that was only to enlarge a box)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm remove_spikes, algorithm to remove spikes from
                      a ring, polygon or multi_polygon.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm point_on_surface, generating a point lying on
                      the surface (interior) of the polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm is_simple, returning true if a geometry is simple
                      according to the OGC standard
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm is_valid, returning true if a geometry is valid
                      according to the OGC standard
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New algorithm crosses for checking this spatial relation according
                      to the OGC standard
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The set operation algorithms (difference, intersection, sym_difference
                      and union_) now support as input pairs of pointlike or linear
                      geometries
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The distance and comparable_distance algorithms now support
                      all pairs of geometry combinations
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The spatial relations which didn't support it (covered_by,
                      touches, within, etc.) now support as input linear and/or areal
                      geometries
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The support for boost::variants as input geometries in various
                      algorithms
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The rtree support for indexing segments
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The rtree nearest() predicate support for arbitrary geometries
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Solved tickets
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8310&quot;&gt;8310&lt;/a&gt;
                      Wrong results with overlapping polygons (fixed using point_on_surface
                      for disjoint)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8375&quot;&gt;8375&lt;/a&gt;
                      sym_difference of non-closed polygons returns closed polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8376&quot;&gt;8376&lt;/a&gt;
                      difference of non-closed polygons returns closed polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9081&quot;&gt;9081&lt;/a&gt;
                      Booleans create self-intersecting polygons from non-self-intersecting
                      polygons
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9245&quot;&gt;9245&lt;/a&gt;
                      Check for process errors in make_qbk.py
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9563&quot;&gt;9563&lt;/a&gt;
                      (Sym)difference not successful, fixed by rescaling to robust
                      type
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9628&quot;&gt;9628&lt;/a&gt;
                      Wrong result of within() due to the winding strategy not working
                      correctly for nearly-horizontal segments
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9871&quot;&gt;9871&lt;/a&gt;
                      Remove spike in polygon with only a spike
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9947&quot;&gt;9947&lt;/a&gt;
                      Missing info about WKT in documentation
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9759&quot;&gt;9759&lt;/a&gt;
                      Invalid results of R-tree knn queries for non-cartesian coordinate
                      systems
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10019&quot;&gt;10019&lt;/a&gt;
                      Difference of Linestring and Box returns their intersection
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10077&quot;&gt;10077&lt;/a&gt;
                      Wrong types in concept checks in boost/geometry/arithmetic/arithmetic.hpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      intersects(polygon) could return a self-intersection-point
                      for its closing point, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      equals() could return invalid results for non-simple linear
                      geometries according to the OGC standard, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      touches() didn't work properly for CCW areal geomtries, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      rtree nearest queries returned wrong elements for non-cartesian
                      coordinate systems, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      rtree crashed in some cases when used with Interprocess allocator,
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed some Visual C++ 6 workarounds.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ongoing work on improving &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;hash_combine&lt;/span&gt;&lt;/code&gt;,
                this changes the previously documented algorithm for the function.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9221&quot;&gt;Trac
                      #9221 (&lt;em&gt;&amp;quot;message_queue deadlock on linux&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9226&quot;&gt;Trac
                      #9226 (&lt;em&gt;&amp;quot;On some computers, Common Appdata is
                      empty in registry, so boost interprocess cannot work&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9284&quot;&gt;Trac
                      #9284 (&lt;em&gt;&amp;quot;WaitForSingleObject(mutex) must handle
                      WAIT_ABANDONED&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9285&quot;&gt;Trac
                      #9285 (&lt;em&gt;&amp;quot;CreateMutex returns NULL if fails&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9288&quot;&gt;Trac
                      #9288 (&lt;em&gt;&amp;quot;timed_wait does not check if it has
                      expired&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9408&quot;&gt;Trac
                      #9408 (&lt;em&gt;&amp;quot;Android does not support XSI_SHARED_MEMORY_OBJECTS&amp;quot;&lt;/em&gt;&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9729&quot;&gt;Trac
                      #9729 (&lt;em&gt;&amp;quot;crash on managed_external_buffer object
                      construction&amp;quot;&lt;/em&gt;&lt;/a&gt;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9767&quot;&gt;Trac
                      #9767 (&lt;em&gt;&amp;quot;bootstamp generation causes error in
                      case of corrupt Windows Event Log&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9835&quot;&gt;Trac
                      #9835 (&lt;em&gt;&amp;quot;Boost Interprocess fails to compile
                      with Android NDK GCC 4.8, -Werror=unused-variable&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9911&quot;&gt;Trac
                      #9911 (&lt;em&gt;&amp;quot;get_tmp_base_dir(...) failure&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9946&quot;&gt;Trac
                      #9946 (&lt;em&gt;&amp;quot;ret_ptr uninitialized in init_atomic_func,
                      fini_atomic_func&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10011&quot;&gt;Trac
                      #10011 (&lt;em&gt;&amp;quot;segment_manager::find( unique_instance_t*
                      ) fails to compile&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10021&quot;&gt;Trac
                      #10021 (&lt;em&gt;&amp;quot;Interprocess and BOOST_USE_WINDOWS_H&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/2&quot;&gt;GitHub
                      #2 (&lt;em&gt;&amp;quot;Provide support for the Cray C++ compiler.
                      The Cray compiler defines __GNUC__&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/3&quot;&gt;GitHub
                      #3 (&lt;em&gt;&amp;quot;Fix/mingw interprocess_exception throw
                      in file_wrapper::priv_open_or_create&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;ABI breaking&lt;/strong&gt;: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9221&quot;&gt;#9221&lt;/a&gt;
                showed that &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_MSG_QUEUE_CIRCULAR_INDEX&lt;/span&gt;&lt;/code&gt;
                option of message queue, was completely broken so an ABI break was
                necessary to have a working implementation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Simplified, refactored and unified (timed_)lock code based on try_lock().
                There were several bugs when handling timeout expirations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the implementation of condition variables' destructors to
                allow POSIX semantics (the condition variable can be destroyed after
                all waiting threads have been woken up)..
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_SHARED_DIR_PATH&lt;/span&gt;&lt;/code&gt;
                option to define the shared directory used to place shared memory
                objects when implemented as memory mapped files.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_USE_WINDOWS_H&lt;/span&gt;&lt;/code&gt;.
                When this macro is defined Interprocess does not declare used Windows
                API function and types, includes all needed windows SDK headers and
                uses types and functions declared by the Windows SDK.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get_size&lt;/span&gt;&lt;/code&gt; to
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows_shared_memory&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved Doxygen generated reference and updated and fixed forward-declaration
                header.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;ABI breaking&lt;/strong&gt;: Fixed ABI regression
                introduced in Boost 1.55 version, mainly noticeable on MSVC compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Source breaking&lt;/strong&gt;: Removed previously
                deprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xxx_dont_splay&lt;/span&gt;&lt;/code&gt;
                functions from splay containers, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splay_set_base_hook&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splay_set_member_hook&lt;/span&gt;&lt;/code&gt;from
                splay containers and &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;splay&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/code&gt; extra parameter in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splaytree_algorithms&lt;/span&gt;&lt;/code&gt; functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8468&quot;&gt;#8468:
                      Compile error on visual studio 2010/2012 using vector with
                      custom allocator and aligned types&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9332&quot;&gt;#9332:
                      &lt;em&gt;&amp;quot;has_member_function_callable_with.hpp compile
                      error on msvc-12.0&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9650&quot;&gt;#9650:
                      &lt;em&gt;&amp;quot;intrusive list with stateful value traits&amp;quot;&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9746&quot;&gt;#9746:
                      Modern Sun CC compiler detects error in intrusive library header&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9940&quot;&gt;#9940:
                      bad bug in intrusive list with safe_link (or auto_unlink) hooks&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9948&quot;&gt;#9948:
                      remove use of const_cast in intrusive containers&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9949&quot;&gt;#9949:
                      clear header node hooks upon intrusive container destruction&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9961&quot;&gt;#9961:
                      tests for hooks not derived frorm generic_hook&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Optimized tree rebalancing code to avoid redundant assignments.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added 64 bit prime values for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;suggested_upper_bucket_count&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;suggested_lower_bucket_count&lt;/span&gt;&lt;/code&gt; in
                64 bit platforms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Deleted workarounds for old SUN_CC compilers, those are now unsupported
                as modern SunPro compilers are standard-corforming enough.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;try_lexical_convert&lt;/span&gt;&lt;/code&gt;
                function, that retuns &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/code&gt;
                in case of failed conversion and does not require output parameter
                to be Default Constructable (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6700&quot;&gt;#6700&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed conversion of string values with leading zeroes to &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9659&quot;&gt;#9659&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Code was changed to produce a smaller binaries and simplify compiler's
                work (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9046&quot;&gt;#9046&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Boost.LexicalCast library was separated from the Boost.Conversion
                library.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8991&quot;&gt;#8991&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/index.html&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                General changes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      For Windows targets, the library now compiles for Windows XP
                      by default.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added indexing operators with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_name&lt;/span&gt;&lt;/code&gt;
                      arguments to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;record&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;record_view&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added operators for non-const object output to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_formatting_ostream&lt;/span&gt;&lt;/code&gt;.
                      (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9389&quot;&gt;#9389&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for putting function names and source file names
                      of named scopes into the formatted strings. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9263&quot;&gt;#9263&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for incomplete and empty markers to the named
                      scope formatter. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9123&quot;&gt;#9123&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The default presentation for incomplete named scope lists has
                      changed: trailing scope delimiter is omitted.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a support header for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;regex&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      By default Boost.Log uses Boost.Regex internally as the regular
                      expressions backend. The backend can be changed by defining
                      configuration macros.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dump&lt;/span&gt;&lt;/code&gt;
                      manipulator output on AVX2-enabled CPUs (e.g. Intel Haswell).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed compilation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get_attribute&lt;/span&gt;&lt;/code&gt;
                      method of loggers.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed a possible race in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;locked_backend&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function implementation of
                      synchronous and asynchronous sink frontends.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed a possible infinite block of the logging threads in the
                      asynchronous sink enqueue methods when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;block_on_overflow&lt;/span&gt;&lt;/code&gt;
                      strategy was used.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href=&quot;http://www.boost.org/libs/log/doc/html/log/changelog.html&quot;&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change&lt;/strong&gt;: moved a number
                of non-core headers that are predominantly used for internal maintenance
                into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;include_private&lt;/span&gt;&lt;/code&gt;. The headers effected
                are &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;test_data&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;remez&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;. You can continue to use these
                headers by adding &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;include_private&lt;/span&gt;&lt;/code&gt;
                to your compiler's include path.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change&lt;/strong&gt;: A number of distributions
                and special functions were returning the maximum finite value rather
                than raising an overflow_error, this has now been fixed, which means
                these functions now behave as documented. However, since the default
                behavior on raising an overflow_error is to throw a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;overflow_error&lt;/span&gt;&lt;/code&gt; exception, applications
                which have come to reply rely on these functions not throwing may
                experience exceptions where they did not before. The special functions
                involved are gamma_p_inva, gamma_q_inva, ibeta_inva, ibetac_inva,
                ibeta_invb, ibetac_invb, gamma_p_inv, gamma_q_inv. The distributions
                involved are pareto_distrib, beta_distrib, geometric_distrib, negative_binomial_distrib,
                binomial_distrib, chi_squared_distrib, gamma_distrib, inverse_chi_squared_distrib,
                inverse_gamma_distrib. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10111&quot;&gt;#10111&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix round and trunc functions so they can be used with integer arguments,
                see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10066&quot;&gt;#10066&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix Halley iteration to handle zero derivative (with non-zero second
                derivative), see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10046&quot;&gt;#10046&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix Geometric distribution use of Policies, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9833&quot;&gt;#9833&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix corner cases in the negative binomial distribution, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9834&quot;&gt;#9834&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix compilation failures on Mac OS.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added bernoulli_numbers, changed arbitrary precision tgamma/lgamma
                to use Sterling's approximation (from Nikhar Agrawal).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added first derivatives of the Bessel functions: cyl_bessel_j_prime,
                cyl_neumann_prime, cyl_bessel_i_prime, cyl_bessel_k_prime, sph_bessel_prime
                and sph_neumann_prime (from Anton Bikineev).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed buggy Student's t example code, along with docs for testing
                sample means for equivalence.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;max_iter&lt;/span&gt;&lt;/code&gt;
                parameter in root finding code better, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9225&quot;&gt;#9225&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add option to explicitly enable/disable use of __float128 in constants
                code, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9240&quot;&gt;#9240&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cleaned up handling of negative values in Bessel I0 and I1 code (removed
                dead code), see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9512&quot;&gt;#9512&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed handling of very small values passed to tgamma and lgamma so
                they don't generate spurious overflows (thanks to Rocco Romeo).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9672&quot;&gt;#9672 PDF
                and CDF of a Laplace distribution throwing domain_error&lt;/a&gt; Random
                variate can now be infinite.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed several corner cases in rising_factorial, falling_factorial
                and tgamma_delta_ratio with thanks to Rocco Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed constant &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pow23_four_minus_pi&lt;/span&gt;
                &lt;/code&gt; whose value did not match the name (and was unused by Boost.Math),
                see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9712&quot;&gt;#9712&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;BOOST_MOVE_RET&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9482&quot;&gt;#9482:
                &lt;em&gt;&amp;quot;MSVC macros not undefined in boost/move/detail/config_end.hpp&amp;quot;&lt;/em&gt;&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9045&quot;&gt;#9045:
                &lt;em&gt;&amp;quot;Wrong macro name on docs&amp;quot;&lt;/em&gt;&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8420&quot;&gt;#8420:
                &lt;em&gt;&amp;quot;move's is_convertible does not compile with aligned
                data&amp;quot;&lt;/em&gt;&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/mpl/&quot;&gt;MPL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;for_each&lt;/span&gt;&lt;/code&gt; is enabled for use on
                GPU
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_array/index.html&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5664&quot;&gt;#5664&lt;/a&gt; operator() checks for Collection concept but requires RandomAccessCollection
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4874&quot;&gt;#4874&lt;/a&gt; compile errors using Visual C++ 2010 in debug mode
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3581&quot;&gt;#3581&lt;/a&gt; MultiArray storage order example incorrect for fortran_storage_ordering
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4032&quot;&gt;#4032&lt;/a&gt; Move MultiArray concepts out of detail namespace
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9212&quot;&gt;#9212&lt;/a&gt; Broken links to C++ standard papers
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8368&quot;&gt;#8368&lt;/a&gt; GCC -Wundef warning about BOOST_MULTI_ARRAY_NO_GENERATORS
                in multi_array
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
                member function of hashed indices used to have poor performance under
                low load conditions due to the requirement that an iterator to the
                next element must be returned (see ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4264&quot;&gt;#4264&lt;/a&gt;). In accordance
                with the resolution of &lt;a href=&quot;http://lwg.github.io/issues/lwg-closed.html#579&quot;&gt;LWG
                issue #579&lt;/a&gt;, this problem has been fixed while maintaining
                the interface of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;/code&gt;,
                at the expense of using one more word of memory per element. In fact,
                C++ complexity requirements on unordered associative containers have
                been improved for hashed indices so that
              &lt;/div&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    deletion of a given element is unconditionally constant-time,
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    worst-case performance is not &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; but &lt;code&gt;O(n&lt;sub&gt;dist&lt;/sub&gt;)&lt;/code&gt;, where &lt;code&gt;n&lt;sub&gt;dist&lt;/sub&gt;&lt;/code&gt; is the number of
                    non-equivalent elements in the index.
                  &lt;/div&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
              &lt;div&gt;
                Due to the fact that hashed indices rely on a new data structure,
                the internal representation of their iterators and local iterators
                have changed, which affects serialization: their corresponding serialization
                &lt;a href=&quot;http://www.boost.org/libs/serialization/doc/tutorial.html#versioning&quot;&gt;class
                version&lt;/a&gt; has been bumped from 0 to 1. Old archives involving
                hashed index (local) iterators can be loaded by Boost 1.56 version
                of Boost.MultiIndex, but not the other way around.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Hashed indices now provide &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;reserve&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Hashed indices can now be checked for equality and inequality following
                the (suitably adapted) C++ standard specification in &lt;strong&gt;[unord.req]&lt;/strong&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The public interface of Boost.MultiIndex provide &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                specifications where appropriate (for compliant compilers).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved performance of failed insertions into a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Much internal code aimed at supporting MSVC++ 7.0 and prior has been
                removed. Compilation times without this legacy code might be slightly
                faster.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a bug with insertion via iterators dereferencing to rvalues
                (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9665&quot;&gt;#9665&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Made Boost.MultiIndex compatible with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_BIND_NO_PLACEHOLDERS&lt;/span&gt;&lt;/code&gt;
                (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9798&quot;&gt;#9798&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Change floating point to rational conversions to be implicit, see
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10082&quot;&gt;10082&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix definition of checked_cpp_rational typedef.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bug in assignment from string in cpp_int, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9936&quot;&gt;9936&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new cpp_bin_float backend for binary floating point.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bug in assignment from string in cpp_int, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9936&quot;&gt;9936&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added MSVC-specific #include for compiler intrinsics, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9336&quot;&gt;9336&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed various typos in docs, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9432&quot;&gt;9432&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed gmp_rational to allow move-copy from an already copied-from
                object, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9497&quot;&gt;9497&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added list of values for numeric_limits.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/odeint/&quot;&gt;Odeint&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added algebra and operations dispatcher for automatic detection of
                appropriate algebras and operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for Eigen, Boost.Multiarray, Boost.Mpi, Boost.Compute,
                Blaze, and NT2.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed algebra interface to use algebra.norm_inf function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added iterators for iterating through the solution of the ODEs, hence
                an alternative to the integrate functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the Velocity-Verlet method.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minor bug fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/optional/&quot;&gt;Optional&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for rvalue references. Now &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; works with moveable but non-copyable
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;/code&gt;'s.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;/code&gt; (now
                uses move operations).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;. This is the last of the requests
                from &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1841&quot;&gt;#1841&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;/code&gt; is moveable,
                including conditional &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                specifications, which make it &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_if_noexcept&lt;/span&gt;&lt;/code&gt;-friendly.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Using explicit operator bool() on platforms that support it (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4227&quot;&gt;#4227&lt;/a&gt;)
                (breaking change).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Forward declaration of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;lt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;)&lt;/span&gt;&lt;/code&gt;
                to prevent inadvertent incorrect serialization of optional objects.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed depprecated function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; from examples (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9005&quot;&gt;#9005&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Equality comparison with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none&lt;/span&gt;&lt;/code&gt;
                does not require that &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;/code&gt;
                be EqualityComparable.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Optional rvalue references are explicitly disallowed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Binding temporaries to optional references is explicitly disallowed
                (breaking change).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                More ways to access the contained value, functions &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_or&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_or_eval&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated and reorganized documentation, added tutorial and quick guide
                sections.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/predef/&quot;&gt;Predef&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Addition of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PLAT_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt; platform definitions for MinGW and
                Windows platform variants.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Detection of ARM architecture for Windows compilers to target mobile
                devices of Windows 8.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved ARM detection for 64 bit ARM.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added detection of iOS as an operating system.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved detection of endianess on some platforms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Addition of exclusive plus emulated definitions for platform and
                compiler detection.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/preprocessor/&quot;&gt;Preprocessor&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                When using variadic macros tuple functionality was added to match
                all the array functionality.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/program_options/&quot;&gt;Program Options&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Columns in the &lt;code&gt;&lt;span class=&quot;special&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;help&lt;/span&gt;&lt;/code&gt;
                output are now aligned across all option groups (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6114&quot;&gt;#6114&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Option names with dashes are no longer truncated in error messages
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8009&quot;&gt;#8009&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change:&lt;/strong&gt; corrected behavior
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_regex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mark_count&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                to match existing documentation, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_regex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;subexpression&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; changed to match, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9227&quot;&gt;#9227&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8903&quot;&gt;#8903&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed documentation typos from &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9283&quot;&gt;#9283&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in collation code that failed if the locale generated collation
                strings with embedded nul's, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9451&quot;&gt;#9451&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apply patch for unusual thread usage (no statically initiallized
                mutexes), see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9461&quot;&gt;#9461&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added better checks for invalid UTF-8 sequences, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9473&quot;&gt;#9473&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/&quot;&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the overloads of &lt;a href=&quot;http://www.boost.org/libs/smart_ptr/make_shared_array.html&quot;&gt;make_shared&lt;/a&gt;
                and &lt;a href=&quot;http://www.boost.org/libs/smart_ptr/make_shared_array.html&quot;&gt;allocate_shared&lt;/a&gt;
                of array types (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;) to conform to the specification
                in C++ standard paper &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3939.html&quot;&gt;N3939&lt;/a&gt;
                and significantly reduced the spatial overhead of the internal bookkeeping
                structures.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the implementations of make_shared and allocate_shared for
                scalar types and array types, respectively, to resolve C++ standard
                library defect report &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2070&quot;&gt;#2070&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Experimental Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7446&quot;&gt;#7446&lt;/a&gt;
                      Async: Add when_any.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7447&quot;&gt;#7447&lt;/a&gt;
                      Async: Add when_all.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7448&quot;&gt;#7448&lt;/a&gt;
                      Async: Add async taking a scheduler parameter.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8274&quot;&gt;#8274&lt;/a&gt;
                      Synchro: Add concurrent queue
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8513&quot;&gt;#8513&lt;/a&gt;
                      Async: Add a basic thread_pool executor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8518&quot;&gt;#8518&lt;/a&gt;
                      Synchro: Add a latch class.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8516&quot;&gt;#8516&lt;/a&gt;
                      Async: Add future/shared_future::then taking a scheduler as
                      parameter.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9058&quot;&gt;#9058&lt;/a&gt;
                      with_lock_guard function
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9571&quot;&gt;#9571&lt;/a&gt;
                      Add a dynamic executor and an executor adaptor
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8070&quot;&gt;#8070&lt;/a&gt;
                      prefer GetTickCount64 over GetTickCount
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9333&quot;&gt;#9333&lt;/a&gt;
                      ex_scoped_thread compile fails on msvc-12.0
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9341&quot;&gt;#9341&lt;/a&gt;
                      compile error scoped_thread(move semantics) intel-linux-14.0.1
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9366&quot;&gt;#9366&lt;/a&gt;
                      async(Executor, ...) fails to compile with msvc-10,11,12
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9402&quot;&gt;#9402&lt;/a&gt;
                      test_excutor regression on msvc-10,11,12
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9404&quot;&gt;#9404&lt;/a&gt;
                      ex_make_future regression error
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9471&quot;&gt;#9471&lt;/a&gt;
                      Synchronization documentation nits
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9535&quot;&gt;#9535&lt;/a&gt;
                      Missing exception safety might result in crash
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9618&quot;&gt;#9618&lt;/a&gt;
                      try_join_for problem: program is not terminate.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9625&quot;&gt;#9625&lt;/a&gt;
                      Please rewrite boost::thread::~thread() reference section
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9632&quot;&gt;#9632&lt;/a&gt;
                      public method start_thread in boost::thread class
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9673&quot;&gt;#9673&lt;/a&gt;
                      thread compilation with MingW/gcc on Windows gives errors
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9708&quot;&gt;#9708&lt;/a&gt;
                      boost::condition_variable::timed_wait unexpectedly wakes up
                      while should wait infinite
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9711&quot;&gt;#9711&lt;/a&gt;
                      future continuation called twice
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9867&quot;&gt;#9867&lt;/a&gt;
                      Remove references to gcc-mingw
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10008&quot;&gt;#10008&lt;/a&gt;
                      Boost Synchronization documentation typos (futures)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10058&quot;&gt;#10058&lt;/a&gt;
                      Null pointer access in once
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10125&quot;&gt;#10125&lt;/a&gt;
                      call_once: compile errors in variadic version with rvalue reference
                      emulation
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10126&quot;&gt;#10126&lt;/a&gt;
                      call_once: deprecate (Function, once_flag&amp;amp;) overload
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10147&quot;&gt;#10147&lt;/a&gt;
                      pthread_delay_np() parameters different on AIX even with gcc
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10155&quot;&gt;#10155&lt;/a&gt;
                      thread::physical_concurrency() always returns 0 on PowerPC
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10184&quot;&gt;#10184&lt;/a&gt;
                      Future: multiply defined symbols
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/tr1/index.html&quot;&gt;TR1&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This library is now deprecated.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/tti/&quot;&gt;TTI&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9441&quot;&gt;#9441&lt;/a&gt;: Added better support for Sun Solaris Studio C++
                compiler.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9444&quot;&gt;#9444&lt;/a&gt;: Handle all situations where the enclosing class
                is not a class type.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minor documentation and warning fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9377&quot;&gt;#9377&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9719&quot;&gt;#9719&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Always use prime number of buckets for integers. Fixes performance
                regression when inserting consecutive integers (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9282&quot;&gt;#9282&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Only construct elements using allocators, as specified in C++11 standard.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some components were moved to the new Boost.Core library.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;/code&gt; is
                deprecated in favor of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_deleter&lt;/span&gt;&lt;/code&gt;
                from Boost.Core. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;/code&gt;
                is an alias for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_deleter&lt;/span&gt;&lt;/code&gt;,
                it will be removed in future releases.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;base_from_member&lt;/span&gt;&lt;/code&gt;
                utility now supports lvalue reference member types. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7577&quot;&gt;#7577&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/uuid/index.html&quot;&gt;UUID&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added basic support for C++11 features.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented SSE-optimized versions of some functions of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;uuid&lt;/span&gt;&lt;/code&gt;, including comparison operators
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;/code&gt;. The support
                for different versions of SSE is automatically detected at compile
                time for most compilers, but can also be explicitly enabled or disabled
                with &lt;a href=&quot;http://www.boost.org/libs/uuid/uuid.html#Configuration&quot;&gt;configuration
                macros&lt;/a&gt;. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8509&quot;&gt;#8509&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Silenced some compiler warnings. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8495&quot;&gt;#8495&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8697&quot;&gt;#8697&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change:&lt;/strong&gt; Variant now uses
                variadic templates if they are supported by compiler. This leads
                to smaller binaries and better compilation times but in some cases
                may break metaprogramming functions, especially if &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/BOOST_VARIANT_ENUM_PARAMS.html&quot;&gt;BOOST_VARIANT_ENUM_PARAMS&lt;/a&gt;
                and &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/BOOST_VARIANT_ENUM_SHIFTED_PARAMS.html&quot;&gt;BOOST_VARIANT_ENUM_SHIFTED_PARAMS&lt;/a&gt;
                are not used. Usage of variadic templates &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/BOOST_VARIANT_DO_NOT_USE_VARIADIC_TEMPLATES.html&quot;&gt;may
                be disabled&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/reference.html#header.boost.variant.polymorphic_get_hpp&quot;&gt;Added&lt;/a&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_get&lt;/span&gt;&lt;/code&gt; function
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9479&quot;&gt;#9479&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Move-only classes now can be returned by visitors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Optimized variant::swap() and fixed ambiguity in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_swap&lt;/span&gt;&lt;/code&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2839&quot;&gt;#2839&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added conditional noexcepts to move assignments, default and move
                constructors making &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;variant&lt;/span&gt;&lt;/code&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_if_noexcept&lt;/span&gt;&lt;/code&gt;-friendly
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7911&quot;&gt;#7911&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Exceptions are now visible across modules even with -fvisibility=hidden
                flags.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Dropped support of antique compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3020&quot;&gt;#3020&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_56_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4, 3.3, 3.2, 3.1, 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++98: 3.3.16
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11, libc++: 3.4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1y: 3.3.16
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.8.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++1y: 4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 13.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 5.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 5.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.9.0, 4.8.2, 4.7.3, 4.7.2, 4.6.3, 4.5.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 12.0, 11.0, 10.0, 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4, 3.3, 3.2, 3.1, 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++98: 3.3.16
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11, libc++: 3.4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1y: 3.3.16
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14, libc++: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.9.0, 4.8.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++1y: 4.9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 13.1, 13.0, 12.1, 11.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 5.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11:
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.9.0, 4.8.2, 4.7.2, 4.6.3, 4.5.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 12.0, 11.0, 10.0, 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC, ARM: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC, x86: 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_56_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.55.0</title><link>http://www.boost.org/users/history/version_1_55_0.html</link><guid>http://www.boost.org/users/history/version_1_55_0.html</guid><pubDate>Mon, 11 Nov 2013 11:50:20 -0800</pubDate><description>



  &lt;div id=&quot;version_1_55_0.other_downloads&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Other Downloads&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;https://sourceforge.net/projects/boost/files/boost-binaries/1.55.0/&quot;&gt;Windows
          binaries&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;https://sourceforge.net/projects/boost/files/boost-docs/1.55.0/&quot;&gt;PDF
          documentation&lt;/a&gt; (only for BoostBook based documentation).
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.news&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;News&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Support was removed from &lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt; for some
      very old versions of compilers. The new minimum requirements are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Digitial Mars 8.41
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          GCC 3.3
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Intel 6.0
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Visual C++ 7.1
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      &lt;strong&gt;Note:&lt;/strong&gt; This is just the mininimum requirements
      for Config. Some Boost libraries may have higher mininimum requirements and
      not support all platforms or compilers.
    &lt;/p&gt;
    &lt;p&gt;
      Other compilers are currently unchanged, but we are considering removing support
      for some other old compilers. &lt;strong&gt;Candidates&lt;/strong&gt; for
      removal are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Metroworks C++ (i.e. codewarrior)
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          SunPro 5.7 and earlier
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Borland C++ Builder 2006 (5.82) and earlier
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      If you're using any of these, please let us know on the mailing lists. We will
      take into account any feedback received before making a decision.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.known_bugs&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Known Bugs with Visual Studio
    2013/Visual C++ 12&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Visual Studio 2013 was released quite late in the release process, so there
      exist several unresolved issues. These include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Serialization can't compile because of a missing include.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;has_member_function_callable_with&lt;/span&gt;&lt;/code&gt;
          from Boost.Container's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
          causes a compile error (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9332&quot;&gt;#9332&lt;/a&gt;).
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          In libraries such as Unordered and MultiIndex, calling overloaded functions
          with initializer lists can result in a compile error, with Visual C++ claiming
          that the overloads are ambiguous. This is a Visual C++ bug and it isn't
          clear if there's a good workaround. This won't affect code that doesn't
          use initializer lists, or uses an initializer list that doesn't require
          an implicit conversion (i.e. an initializer list of the container's exact
          value type).
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Thread: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ex_scoped_thread&lt;/span&gt;&lt;/code&gt;
          compile fails (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9333&quot;&gt;#9333&lt;/a&gt;).
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.patches&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Patches&lt;/span&gt;&lt;/h3&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_55_0/001-log_fix_dump_avx2.patch&quot;&gt;Log patch&lt;/a&gt;:
          fixes incorrect output of the &lt;a href=&quot;http://www.boost.org/doc/libs/1_55_0/libs/log/doc/html/log/detailed/utilities.html#log.detailed.utilities.manipulators.dump&quot;&gt;dump&lt;/a&gt;
          manipulator, when used on AVX2-enabled CPU (e.g. Intel Haswell).
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/predef/&quot;&gt;Predef&lt;/a&gt;:&lt;/span&gt; This library defines a
          set of compiler, architecture, operating system, library, and other version
          numbers from the information it can gather of C, C++, Objective C, and
          Objective C++ predefined macros or those defined in generally available
          headers, from Rene Rivera.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7915&quot;&gt;#7915&lt;/a&gt; Fix silly typos.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8850&quot;&gt;#8850&lt;/a&gt; Fix MSVC warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8262&quot;&gt;#8262&lt;/a&gt; Rename &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;average&lt;/span&gt;&lt;/code&gt;
                to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fdiv&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bad_any_cast&lt;/span&gt;&lt;/code&gt; exception is now visible
                across modules &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8751&quot;&gt;#8751&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                member function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NOEXCEPT&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issue with const rvalues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9215&quot;&gt;#9215&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented a limited port to Windows Runtime. This support requires
                that the language extensions be enabled. Due to the restricted facilities
                exposed by the Windows Runtime API, the port also comes with the
                following caveats:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The core facilities such as the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;/code&gt;, buffers,
                      composed operations, timers, etc., should all work as normal.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      For sockets, only client-side TCP is supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Explicit binding of a client-side TCP socket is not supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cancel&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function is not supported
                      for sockets. Asynchronous operations may only be cancelled
                      by closing the socket.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Operations that use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
                      are not supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Only &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;no_delay&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;socket_base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;keep_alive&lt;/span&gt;&lt;/code&gt; options are supported.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Resolvers do not support service names, only numbers. I.e.
                      you must use &amp;quot;80&amp;quot; rather than &amp;quot;http&amp;quot;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Most resolver query flags have no effect.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a regression (introduced in Boost 1.54) where, on some platforms,
                errors from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_connect&lt;/span&gt;&lt;/code&gt;
                were not correctly propagated through to the completion handler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8795&quot;&gt;#8795&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a Windows-specific regression (introduced in Boost 1.54) that
                occurs when multiple threads are running an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;.
                When the bug occurs, the result of an asynchronous operation (error
                and bytes transferred) is incorrectly discarded and zero values used
                instead. For TCP sockets this results in spurious end-of-file notifications
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8933&quot;&gt;#8933&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a bug in handler tracking, where it was not correctly printing
                out some handler IDs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8808&quot;&gt;#8808&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed the comparison used to test for successful synchronous accept
                operations so that it works correctly with unsigned socket descriptors
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8752&quot;&gt;#8752&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured the signal number is correctly passed to the completion handler
                when starting an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_wait&lt;/span&gt;&lt;/code&gt;
                on a signal that is already raised (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8738&quot;&gt;#8738&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppressed a g++ 4.8+ warning about unused typedefs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8980&quot;&gt;#8980&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled the move optimisation for handlers that use the default invocation
                hook (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8624&quot;&gt;#8624&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clarified that programs must not issue overlapping &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_write_at&lt;/span&gt;&lt;/code&gt; operations (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8669&quot;&gt;#8669&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the Windows &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;
                backend to treat &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ERROR_MORE_DATA&lt;/span&gt;&lt;/code&gt;
                as a non-fatal error when returned by &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;GetOverlappedResult&lt;/span&gt;&lt;/code&gt;
                for a synchronous read (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8722&quot;&gt;#8722&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ language extensions use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;/code&gt;
                as a keyword. Added a workaround that renames the namespace to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_generic&lt;/span&gt;&lt;/code&gt; when those language
                extensions are in effect.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some asynchronous operations that missed out on getting &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_result&lt;/span&gt;&lt;/code&gt; support in Boost 1.54.
                In particular, the buffered stream templates have been updated so
                that they adhere to current handler patterns (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9000&quot;&gt;#9000&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9001&quot;&gt;#9001&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled move support for Microsoft Visual Studio 2012 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8959&quot;&gt;#8959&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;/code&gt;
                support for Microsoft Visual Studio 2012.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed a use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;min&lt;/span&gt;&lt;/code&gt;
                in the Windows IOCP backend to avoid a dependency on the &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; header (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8758&quot;&gt;#8758&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Eliminated some unnecessary handler copies.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed various minor and cosmetic issues in code and documentation
                (including &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8347&quot;&gt;#8347&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8950&quot;&gt;#8950&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8953&quot;&gt;#8953&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8965&quot;&gt;#8965&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8997&quot;&gt;#8997&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for 64-bit atomic operations on x86 target for GCC,
                MSVC and compatible compilers. The support is enabled when it is
                known at compile time that the target CPU supports required instructions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for 128-bit atomic operations on x86-64 target for
                GCC and compatible compilers. The support is enabled when it is known
                at compile time that the target CPU supports required instructions.
                The support can be tested for with the new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ATOMIC_INT128_LOCK_FREE&lt;/span&gt;&lt;/code&gt;
                macro.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a more efficient implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; based on GCC &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__atomic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;
                intrinsics available since GCC 4.7.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for more ARM v7 CPUs, improved detection of Thumb 2.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for x32 (i.e. 64-bit x86 with 32-bit pointers) target
                on GCC and compatible compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed dependency on Boost.Thread.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Internal lock pool now includes proper padding and alignment to avoid
                false sharing.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation with Intel compiler on Windows. Removed internal
                macro duplication when compiled on Windows.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some code refactoring to use C++11 features when available.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7868&quot;&gt;#7868&lt;/a&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;chrono_io&lt;/span&gt;&lt;/code&gt; parses
                      time incorrectly (1.53 and 1.52)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9028&quot;&gt;#9028&lt;/a&gt;
                      Typo in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stopwatches&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;formatters&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;base_formatter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9147&quot;&gt;#9147&lt;/a&gt;
                      uninitialized &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tm&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer/&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for rvalue references and rvalue references emulation
                using Boost.Move. Values are moved only if value type has noexcept
                move constructor and noexcept move assignment operator &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7888&quot;&gt;#7888&lt;/a&gt;.
                Now Circular Buffer is usable with move-only types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Much better documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5362&quot;&gt;#5362&lt;/a&gt;
                circular_buffer does not compile with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7025&quot;&gt;#7025&lt;/a&gt;
                circular buffer reports warning: &amp;quot; type qualifiers ignored on
                function return type&amp;quot; while compile.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7950&quot;&gt;#7950&lt;/a&gt;
                Eliminate W4-warnings under VS2005 - warning C4913: user defined
                binary operator ',' exists but no overload could convert all operands,
                default built-in binary operator ',' used.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change:&lt;/strong&gt; Removed support
                for some older compilers. The new minimum compiler versions are:
              &lt;/div&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Digitial Mars 8.41
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    GCC 3.3
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Intel 6.0
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Visual C++ 7.1
                  &lt;/div&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
              &lt;div&gt;
                Other compilers are unchanged.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;span class=&quot;link&quot;&gt;SCARY
                iterators&lt;/span&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8269&quot;&gt;#8269&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8473&quot;&gt;#8473&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8892&quot;&gt;#8892&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9009&quot;&gt;#9009&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9064&quot;&gt;#9064&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9092&quot;&gt;#9092&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9108&quot;&gt;#9108&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8650&quot;&gt;#8650&lt;/a&gt;
                SSE2 intrinsics
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New interface (unidirectional data transfer).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8782&quot;&gt;#8782&lt;/a&gt;
                no best alternative
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8801&quot;&gt;#8801&lt;/a&gt;
                auto-linking
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/filesystem/&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed Android compilation &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8706&quot;&gt;#8706&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8759&quot;&gt;#8759&lt;/a&gt; specialization of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;convert_impl&lt;/span&gt;&lt;/code&gt;
                for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;map_tag&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/index.html&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added centroid for segment type
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added intersects() and disjoints() for Segment-Box and Linestring-Box
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added rtree creation using packing algorithm
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added contains() and covers() spatial query predicates
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added iterative queries
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      In some cases .back() or .clear() was called, violating the
                      usage of Concepts. Fixed for the reported cases
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Solved tickets&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6958&quot;&gt;6958&lt;/a&gt;
                      Intersection generates self-intersection. Caused by spike,
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8364&quot;&gt;8364&lt;/a&gt;
                      Invalid input exception, caused by spikes in previous steps,
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8365&quot;&gt;8365&lt;/a&gt;
                      Invalid input exception, caused by spikes in previous steps,
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8969&quot;&gt;8969&lt;/a&gt;
                      boost::geometry::model::point single argument constructor should
                      be explicit
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8825&quot;&gt;8825&lt;/a&gt;
                      Patch adding member variable documentation to doxygen_xml2qbk
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8652&quot;&gt;8652&lt;/a&gt;
                      Intersection fails for triangle-triangle intersection. Caused
                      by spike, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9047&quot;&gt;9047&lt;/a&gt;
                      Boost files that include themselves (strategies/intersection.hpp),
                      fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/code&gt; is no longer allowed
                as a bundled property type (for example, in the VertexProperties
                template parameters to graph types); it did not work reliably before,
                but a static assertion now forbids it entirely. Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;no_property&lt;/span&gt;&lt;/code&gt; instead.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;finish_edge&lt;/span&gt;&lt;/code&gt;
                visitor event point in depth-first search; the change should be backward-compatible
                with visitors that do not have that member function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disabled building of tests on Sun compiler.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multiple source vertices are supported in non-named-parameter versions
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;breadth_first_visit&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;breadth_first_search&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;,
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths_no_init&lt;/span&gt;&lt;/code&gt;.
                This feature is not yet documented; to use it, replace the single
                parameter for the source vertex in each of these functions by two
                input iterators of the same type containing the source vertices to
                use.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Hawick circuits algorithm; contributed by Louis Dionne.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added edge coloring algorithm; contributed by Maciej Piechotka.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added min-cost max-flow algorithm; contributed by Piotr Wygocki.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs and feature requests from Trac fixed: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5269&quot;&gt;#5269&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8317&quot;&gt;#8317&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8433&quot;&gt;#8433&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8791&quot;&gt;#8791&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8877&quot;&gt;#8877&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8986&quot;&gt;#8986&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9012&quot;&gt;#9012&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9080&quot;&gt;#9080&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Simplify a SFINAE check so that it will hopefully work on Sun 5.9
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8822&quot;&gt;#8822&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppress Visual C++ infinite loop warning (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8568&quot;&gt;#8568&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7156&quot;&gt;#7156&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7164&quot;&gt;#7164&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8277&quot;&gt;#8277&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8976&quot;&gt;#8976&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9065&quot;&gt;#9065&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9073&quot;&gt;#9073&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9008&quot;&gt;#9008&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Source breaking&lt;/strong&gt;: Deprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xxx_dont_splay&lt;/span&gt;&lt;/code&gt; functions from splay
                containers. Deprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splay_set_hook&lt;/span&gt;&lt;/code&gt;
                from splay containers, use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bs_set_hook&lt;/span&gt;&lt;/code&gt;
                instead. Both will be removed in Boost 1.56.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;ABI breaking&lt;/strong&gt;: Hash containers' end
                iterator was implemented pointing to one-past the end of the bucket
                array (see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8698&quot;&gt;#8698&lt;/a&gt;)
                causing severe bugs when values to be inserted where allocated next
                to the bucket array. End iterator implementation was changed to point
                to the beginning of the bucket array.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Big refactoring in order to reduce template and debug symbol bloat.
                Test object files have been slashed to half in MSVC compilers in
                Debug mode. Toolchains without Identical COMDAT Folding (ICF) should
                notice size improvements.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;span class=&quot;link&quot;&gt;SCARY iterators&lt;/span&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bad_alloc&lt;/span&gt;&lt;/code&gt; exceptions are now are
                not converted to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bad_lexical_cast&lt;/span&gt;&lt;/code&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8966&quot;&gt;#8966&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added static assert that checks for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;numeric_limits&lt;/span&gt;&lt;/code&gt;
                specializations if they are required for conversion. Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HAS_INT128&lt;/span&gt;&lt;/code&gt; for detecting
                128 bit integers support &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8790&quot;&gt;#8790&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation improved and more usage examples added.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                General changes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a new configuration macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_LOG_WITHOUT_DEFAULT_FACTORIES&lt;/span&gt;&lt;/code&gt;.
                      By defining this macro the user can disable compilation of
                      the default filter and formatter factories used by settings
                      parsers. This can substantially reduce binary sizes while still
                      retaining support for settings parsers.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Rewritten some of the parsers to reduce the compiled binary
                      size. The rewritten parsers are more robust in detecting ambiguous
                      and incorrect input.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The following headers are deprecated: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intrusive_ref_counter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;explicit_operator_bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;.
                      These headers will be removed in future releases. The contents
                      of these headers were moved to other libraries.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timer&lt;/span&gt;&lt;/code&gt;
                      attribute generating incorrect time readings on Windows on
                      heavy thread contention when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;QueryPerformanceCounter&lt;/span&gt;&lt;/code&gt;
                      API was used.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed a bug in the filter parser that prevented using parsed
                      filters with some attributes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed thread id formatting discrepancies between the default
                      sink and formatters.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Closed tickets: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8815&quot;&gt;#8815&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8819&quot;&gt;#8819&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8915&quot;&gt;#8915&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8917&quot;&gt;#8917&lt;/a&gt;,
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9139&quot;&gt;#9139&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9140&quot;&gt;#9140&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9153&quot;&gt;#9153&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9155&quot;&gt;#9155&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href=&quot;http://www.boost.org/libs/log/doc/html/log/changelog.html&quot;&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppress numerous warnings (mostly from GCC-4.8 and MSVC) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8384&quot;&gt;#8384&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8855&quot;&gt;#8855&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9107&quot;&gt;#9107&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9109&quot;&gt;#9109&lt;/a&gt;..
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed PGI compilation issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8333&quot;&gt;#8333&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed PGI constant value initialization issue that caused erf to
                generate incorrect results &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8621&quot;&gt;#8621&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Prevent macro expansion of some C99 macros that are also C++ functions
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8732&quot;&gt;#8732&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8733&quot;&gt;#8733&lt;/a&gt;..
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed Student's T distribution to behave correctly with huge degrees
                of freedom (larger than the largest representable integer) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8837&quot;&gt;#8837&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make some core functions usable with &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&lt;/code&gt; even when the platform
                has no standard library &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;
                &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&lt;/code&gt; support &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8940&quot;&gt;#8940&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix error handling of distributions to catch invalid scale and location
                parameters when the random variable is infinite &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9042&quot;&gt;#9042&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9126&quot;&gt;#9126&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add workaround for broken &amp;lt;tuple&amp;gt; in Intel C++ 14 &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9087&quot;&gt;#9087&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve consistency of argument reduction in the elliptic integrals
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9104&quot;&gt;#9104&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bug in inverse incomplete beta that results in cancellation errors
                when the beta function is really an arcsine or Student's T distribution.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix issue in Bessel I and K function continued fractions that causes
                spurious over/underflow.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add improvement to non-central chi squared distribution quantile
                due to Thomas Luu.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7952&quot;&gt;#7952&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8764&quot;&gt;#8764&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8765&quot;&gt;#8765&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8842&quot;&gt;#8842&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8979&quot;&gt;#8979&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New feature: interrupt states now support a sequence of events to
                end the interruption.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed Trac &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8686&quot;&gt;#8686&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for Boost.Serialization.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppressed some GCC warnings. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8872&quot;&gt;8872&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in pow for large integer arguments. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8809&quot;&gt;8809&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in pow for calculation of 0[super N]. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8798&quot;&gt;8798&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in fixed precision cpp_int IO code that causes conversion
                to string to fail when the bit count is very small (less than CHAR_BIT).
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8745&quot;&gt;8745&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in cpp_int that causes left shift to fail when a fixed
                precision type would overflow. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8741&quot;&gt;8741&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some cosmetic warnings from cpp_int. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8748&quot;&gt;8748&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed calls to functions which are required to be macros in C99.
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8732&quot;&gt;8732&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug that causes construction from INT_MIN, LONG_MIN etc to
                fail in cpp_int. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8711&quot;&gt;8711&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Boost.MultiIndex has been brought to a higher level of compliance
                with C++11.
              &lt;/div&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;
                    is now efficiently movable.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Initializer lists supported.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Emplace functions provided.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Non-copyable elements (such as &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;) supported. This includes
                    insertion of a range [&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;first&lt;/span&gt;&lt;/code&gt;,&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;last&lt;/span&gt;&lt;/code&gt;) where the iterators point
                    to a type that is convertible to that of the element: no copy
                    construction happens in the process.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Random access indices provide &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shrink_to_fit&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
                  &lt;/div&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
              &lt;div&gt;
                Refer to the &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/compiler_specifics.html&quot;&gt;compiler
                specifics&lt;/a&gt; section for limitations on pre-C++11 compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The following classes are deprecated:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#member_offset&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;member_offset&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;const_mem_fun_explicit&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mem_fun_explicit&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_equal_to&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_equal_to&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_less&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_less&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_greater&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_greater&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_hash&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_result_hash&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/mpi/&quot;&gt;MPI&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced calls to deprecated MPI functions
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for multi-threaded initialization
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added in-place collectives
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/phoenix/&quot;&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9049&quot;&gt;#9049&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;phoenix&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt;
                constructor is constexpr.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated CGAL part of the Voronoi benchmark with patches from Sebastien
                Loriot. Updated documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added polygon decomposition capability to polygon_90_set_data container
                (patch from Intel). Updated documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs fixed from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8197&quot;&gt;#8197&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_map/index.html&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                dynamic_properties objects can now be built by non-destructively
                chaining &lt;code&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;pm&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; calls. Example:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;dynamic_properties&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;color&amp;quot;&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;color_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;pos&amp;quot;&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;position_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The use of raw pointers as property maps is deprecated; it often
                failed on Visual Studio in the past. This usage has been removed
                from all tests and examples in Boost.Graph. The replacement to use
                for vertex properties in graphs (the most common use for this feature)
                is:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;make_iterator_property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pointer&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class=&quot;identifier&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;vertex_index&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;graph&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;))&lt;/span&gt;
&lt;/pre&gt;
              &lt;div&gt;
                (Note: the lack of namespace qualification on get() in this code
                is necessary for generic code). Outside a graph context, the closest
                equivalent is:
              &lt;/div&gt;
&lt;pre&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;make_iterator_property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;,&lt;/span&gt;
  &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;typed_identity_property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;())&lt;/span&gt;
&lt;/pre&gt;
              &lt;div&gt;
                There are commented-out static assertions on lines 151 and 159 of
                &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; that can be un-commented to find
                deprecated uses of pointers in user code.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/rational&quot;&gt;Rational&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lowest&lt;/span&gt;&lt;/code&gt; and
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;max_digits10&lt;/span&gt;&lt;/code&gt;, members
                of std::numeric_limits added in C++11, to the unit-test code. Needed
                since Boost.Test refers to one of them when compiled in C++11 mode.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed initialization of some internal variables to something that
                cannot be a narrowing conversion, which fixes issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5855&quot;&gt;#5855&lt;/a&gt;. Needed
                since narrowing conversions are an error in C++11.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/index.html&quot;&gt;SmartPtr&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;smart_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intrusive_ref_counter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; header, extracted from Boost.Log.
                The header implements a mixin base class that adds support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;intrusive_ptr&lt;/span&gt;&lt;/code&gt; to user's classes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/Thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8519&quot;&gt;#8519&lt;/a&gt;
                      Synchro: Update class barrier with a completion function.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8515&quot;&gt;#8515&lt;/a&gt;
                      Async: Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;then&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8519&quot;&gt;#8519&lt;/a&gt;
                      Synchro: Update class barrier with a completion function
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8615&quot;&gt;#8615&lt;/a&gt;
                      Async: Replace make_future/make_shared_future by make_ready_future.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8627&quot;&gt;#8627&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;::unwrap and unwrapping constructor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8677&quot;&gt;#8677&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;::get_or.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8678&quot;&gt;#8678&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;::fallback_to.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8891&quot;&gt;#8891&lt;/a&gt;
                      upgrade_to_unique_lock: missing mutex() function.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8955&quot;&gt;#8955&lt;/a&gt;
                      Request for more efficient way to get exception_ptr from future.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7461&quot;&gt;#7461&lt;/a&gt;
                      detail::win32::ReleaseSemaphore may be called with count_to_release
                      equal to 0
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8070&quot;&gt;#8070&lt;/a&gt;
                      prefer GetTickCount64 over GetTickCount
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8768&quot;&gt;#8768&lt;/a&gt;
                      win32 condition_variable::wait_until infinite wait in rare
                      cases.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8817&quot;&gt;#8817&lt;/a&gt;
                      Boost Thread Windows CE _createthreadex handling breaks mingw
                      w64.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8943&quot;&gt;#8943&lt;/a&gt;
                      Failed to compile code using boost::call_once with Intel C++
                      Composer XE 2013 on Windows.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8931&quot;&gt;#8931&lt;/a&gt;
                      Typos in external_locking reference.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9029&quot;&gt;#9029&lt;/a&gt;
                      Misprint in documentation.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9037&quot;&gt;#9037&lt;/a&gt;
                      gcc -Wshadow gives warnings in condition_variable{,_fwd}.hpp.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9041&quot;&gt;#9041&lt;/a&gt;
                      Boost.Thread DSO's may need to link with Boost.Atomic.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9048&quot;&gt;#9048&lt;/a&gt;
                      boost::scoped_thread useless ctor with variadic template arguments.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9079&quot;&gt;#9079&lt;/a&gt;
                      Condition variable will wait forever for some timepoint values
                      (Win).
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/timer/&quot;&gt;Timer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation on Intel compiler &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8956&quot;&gt;#8956&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_traits/&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_copy_contructible&lt;/span&gt;&lt;/code&gt;
                trait &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8802&quot;&gt;#8802&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8851&quot;&gt;#8851&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8874&quot;&gt;#8874&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid exposing some detail functions via. ADL on the iterators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Work around variadic parameter bug in Visual Studio 2013. The compiler
                still has problems with initializer lists, but it might not be possible
                to work around those.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; can be set to use TR1
                protocol by default and fall back to &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;
                if the function object does not support it (like C++11 lambda functions,
                for example). Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_RESULT_OF_USE_TR1_WITH_DECLTYPE_FALLBACK&lt;/span&gt;&lt;/code&gt;
                configuration macro to enable this mode.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved support for C++11 in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;base_from_member&lt;/span&gt;&lt;/code&gt;
                class template. The class implements perfect forwarding for the constructor
                arguments, if the compiler supports rvalue references, variadic templates
                and function template default arguments.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;explicit_operator_bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                headers, which were extracted from Boost.Log. The headers implement
                utilities for defining explicit conversion operators to &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt; and a deleter function object
                that does nothing, respectively.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation of constructor and assignment operator with const
                rvalues input parameters &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8988&quot;&gt;#8988&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation of move assignment operator for situations when
                one of the variant template classes has nothrow copy constructor
                and throwing move constructor &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8772&quot;&gt;#8772&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix compilation on exception-disabled environments &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8717&quot;&gt;#8717&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix unreachable code warnings &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8665&quot;&gt;#8665&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed duplicate code &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7601&quot;&gt;#7601&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8843&quot;&gt;#8843&lt;/a&gt; throw instead of assert at incomplete charset
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8880&quot;&gt;#8880&lt;/a&gt; remove unused local typedef
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8882&quot;&gt;#8882&lt;/a&gt; use RAII instead of try/catch in sequence_stack.hpp
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8474&quot;&gt;#8474&lt;/a&gt; make xpressive play nice with clang's -Wimplicit-fallthrough
                diagnostic
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/tools/quickbook&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Quickbook 1.6 finalized, see the &lt;a href=&quot;http://www.boost.org/doc/html/quickbook/versions.html#language_versions.1_6&quot;&gt;Quickbook
                documentation for details&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.3, 3.2, 3.1, 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11, libc++: 3.4, 3.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.8.1, 4.7.3, 4.6.3, 4.5.3, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.8.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.8.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 5.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 5.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 11.0, 10.0, 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 5.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 5.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.3, 3.2, 3.1, 3.0, trunk
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11, libc++: 3.4, 3.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.9.0 (experimental), 4.8.1, 4.7.3, 4.6.4, 4.5.3, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.8.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98: 4.8.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 13.0.1, 12.1.6
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 11.0, 10.0, 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_55_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.54.0</title><link>http://www.boost.org/users/history/version_1_54_0.html</link><guid>http://www.boost.org/users/history/version_1_54_0.html</guid><pubDate>Mon, 1 Jul 2013 10:10:02 -0700</pubDate><description>



  &lt;div id=&quot;version_1_54_0.patches&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Patches&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      These are patches from library authors which were found too late to be fixed
      in the 1.54.0 release. Be careful as they have not been through the normal
      testing process.
    &lt;/p&gt;
    &lt;ol&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/001-coroutine.patch&quot;&gt;Coroutine patch&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/002-date-time.patch&quot;&gt;Date Time patch&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/003-log.patch&quot;&gt;Log patch&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/004-thread.patch&quot;&gt;Thread patch&lt;/a&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.news&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;News&lt;/span&gt;&lt;/h3&gt;
    &lt;div id=&quot;version_1_54_0.news.supported_cpus&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported CPUs&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        Boost no longer supports the 80386 target CPU, the minimum x86 32-bit target
        is i486. The 80386 target was not properly supported by &lt;a href=&quot;http://www.boost.org/libs/smart_ptr/&quot;&gt;Boost.SmartPtr&lt;/a&gt;
        and &lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Boost.Atomic&lt;/a&gt; (as well as the libraries
        that used them internally) even before this release. Some Boost libraries
        may have higher requirements on the minimum target CPU (like &lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Boost.Log&lt;/a&gt;
        for example), see the respective library documentation for details.
      &lt;/p&gt;
      &lt;p&gt;
        Also by default, when building Boost for x86 32-bit targets it will compile
        for i686 (Pentium Pro) and later CPUs. This can be changed by specifying
        the &lt;tt&gt;instruction-set&lt;/tt&gt; property in &lt;tt&gt;b2&lt;/tt&gt;
        or &lt;tt&gt;bjam&lt;/tt&gt; command line, for example:
      &lt;/p&gt;
&lt;pre&gt;b2 variant=release architecture=x86 instruction-set=i486 stage
&lt;/pre&gt;
      &lt;p&gt;
        Possible values for the &lt;tt&gt;instruction-set&lt;/tt&gt; are:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            Target for the host CPU: &lt;tt&gt;native&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Generic x86 CPUs: &lt;tt&gt;i486&lt;/tt&gt;, &lt;tt&gt;i586&lt;/tt&gt;,
            &lt;tt&gt;i686&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Intel CPUs: &lt;tt&gt;pentium&lt;/tt&gt;, &lt;tt&gt;pentium-mmx&lt;/tt&gt;,
            &lt;tt&gt;pentiumpro&lt;/tt&gt;, &lt;tt&gt;pentium2&lt;/tt&gt;, &lt;tt&gt;pentium3&lt;/tt&gt;,
            &lt;tt&gt;pentium3m&lt;/tt&gt;, &lt;tt&gt;pentium-m&lt;/tt&gt;, &lt;tt&gt;pentium4&lt;/tt&gt;,
            &lt;tt&gt;pentium4m&lt;/tt&gt;, &lt;tt&gt;prescott&lt;/tt&gt;, &lt;tt&gt;nocona&lt;/tt&gt;,
            &lt;tt&gt;core2&lt;/tt&gt;, &lt;tt&gt;corei7&lt;/tt&gt;, &lt;tt&gt;corei7-avx&lt;/tt&gt;,
            &lt;tt&gt;core-avx-i&lt;/tt&gt;, &lt;tt&gt;conroe&lt;/tt&gt;, &lt;tt&gt;conroe-xe&lt;/tt&gt;,
            &lt;tt&gt;conroe-l&lt;/tt&gt;, &lt;tt&gt;allendale&lt;/tt&gt;, &lt;tt&gt;merom&lt;/tt&gt;,
            &lt;tt&gt;merom-xe&lt;/tt&gt;, &lt;tt&gt;kentsfield&lt;/tt&gt;, &lt;tt&gt;kentsfield-xe&lt;/tt&gt;,
            &lt;tt&gt;penryn&lt;/tt&gt;, &lt;tt&gt;wolfdale&lt;/tt&gt;, &lt;tt&gt;yorksfield&lt;/tt&gt;,
            &lt;tt&gt;nehalem&lt;/tt&gt;, &lt;tt&gt;sandy-bridge&lt;/tt&gt;, &lt;tt&gt;ivy-bridge&lt;/tt&gt;,
            &lt;tt&gt;haswell&lt;/tt&gt;, &lt;tt&gt;atom&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            AMD CPUs: &lt;tt&gt;k6&lt;/tt&gt;, &lt;tt&gt;k6-2&lt;/tt&gt;, &lt;tt&gt;k6-3&lt;/tt&gt;,
            &lt;tt&gt;athlon&lt;/tt&gt;, &lt;tt&gt;athlon-tbird&lt;/tt&gt;, &lt;tt&gt;athlon-4&lt;/tt&gt;,
            &lt;tt&gt;athlon-xp&lt;/tt&gt;, &lt;tt&gt;athlon-mp&lt;/tt&gt;, &lt;tt&gt;k8&lt;/tt&gt;,
            &lt;tt&gt;opteron&lt;/tt&gt;, &lt;tt&gt;athlon64&lt;/tt&gt;, &lt;tt&gt;athlon-fx&lt;/tt&gt;,
            &lt;tt&gt;k8-sse3&lt;/tt&gt;, &lt;tt&gt;opteron-sse3&lt;/tt&gt;, &lt;tt&gt;athlon64-sse3&lt;/tt&gt;,
            &lt;tt&gt;amdfam10&lt;/tt&gt;, &lt;tt&gt;barcelona&lt;/tt&gt;, &lt;tt&gt;bdver1&lt;/tt&gt;,
            &lt;tt&gt;bdver2&lt;/tt&gt;, &lt;tt&gt;bdver3&lt;/tt&gt;, &lt;tt&gt;btver1&lt;/tt&gt;,
            &lt;tt&gt;btver2&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            VIA CPUs: &lt;tt&gt;c3&lt;/tt&gt;, &lt;tt&gt;c3-2&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            IDT CPUs: &lt;tt&gt;winchip-c6&lt;/tt&gt;, &lt;tt&gt;winchip2&lt;/tt&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
        Note that not all these values may be supported by a particular compiler.
      &lt;/p&gt;
    &lt;/div&gt;
    &lt;div id=&quot;version_1_54_0.news.signals_deprecated&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Signals deprecated&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        Boost.Signals is no longer being actively maintained, so it has been deprecated.
        Do not use Boost.Signals for new development (use &lt;a href=&quot;http://www.boost.org/libs/signals2/&quot;&gt;Boost.Signals2&lt;/a&gt;
        instead). If you have existing Boost.Signals-based code, it will continue
        to work, but consider moving to Boost.Signals2. There is &lt;a href=&quot;http://www.boost.org/doc/html/signals2/api_changes.html#signals2.porting&quot;&gt;a
        porting guide&lt;/a&gt; in the Signals2 documentation.
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
  Logging library, from Andrey
          Semashev.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/tti/&quot;&gt;TTI&lt;/a&gt;:&lt;/span&gt;
  Type Traits Introspection library,
          from Edward Diener.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_erasure/&quot;&gt;Type Erasure&lt;/a&gt;:&lt;/span&gt;
  Runtime polymorphism
          based on concepts.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes comment typos (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7917&quot;&gt;#7917&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Silence unused variable warnings (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6926&quot;&gt;#6926&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The return types for copy_while and copy_until have been changed.
                This is an interface change. If you were using the return values
                from these functions, then you will have to modify your code. Instead
                of just returning the modified &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;OutputIterator&lt;/span&gt;&lt;/code&gt;,
                these functions now return a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;InputIterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;OutputIterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;. If this change affects your
                code, the simplest change is to add a &lt;code&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;second&lt;/span&gt;&lt;/code&gt; to the end of the call,
                which will get you the same behavior that you had before.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++14 versions of 'is_permutation', 'equal' and 'mismatch'.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++11 features support &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6999&quot;&gt;#6999&lt;/a&gt;:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Move assignment and move constructors.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                      modifiers.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new traits classes, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;handler_type&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_result&lt;/span&gt;&lt;/code&gt;,
                that allow the customisation of the return type of an initiating
                function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                function, a high-level wrapper for running stackful coroutines, based
                on the Boost.Coroutine library. The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function enables programs to implement
                asynchronous logic in a synchronous manner. For example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;
                &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;my_socket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_some&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_buffer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;/code&gt; special value, which
                provides first-class support for returning a C++11 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;/code&gt; from an asynchronous operation's
                initiating function. For example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;
                &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;my_socket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_some&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_buffer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Promoted the stackless coroutine class and macros to be part of Asio's
                documented interface, rather than part of the HTTP server 4 example.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a new handler hook called &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio_handler_is_continuation&lt;/span&gt;&lt;/code&gt;.
                Asynchronous operations may represent a continuation of the asynchronous
                control flow associated with the current executing handler. The
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio_handler_is_continuation&lt;/span&gt;&lt;/code&gt;
                hook can be customised to return &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/code&gt;
                if this is the case, and Asio's implementation can use this knowledge
                to optimise scheduling of the new handler. To cover common cases,
                Asio customises the hook for strands, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and composed asynchronous operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added four new generic protocol classes, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;datagram_protocol&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;raw_protocol&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;seq_packet_protocol&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_protocol&lt;/span&gt;&lt;/code&gt;, which implement
                the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Protocol&lt;/span&gt;&lt;/code&gt; type
                requirements, but allow the user to specify the address family (e.g.
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;AF_INET&lt;/span&gt;&lt;/code&gt;) and protocol
                type (e.g. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;/code&gt;)
                at runtime.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++11 move constructors that allow the conversion of a socket
                (or acceptor) into a more generic type. For example, an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;socket&lt;/span&gt;&lt;/code&gt; can be converted into a
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_protocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;socket&lt;/span&gt;&lt;/code&gt; via move construction.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Extended the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_socket_acceptor&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; class's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_accept&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; functions to allow a new connection
                to be accepted directly into a socket of a more generic type. For
                example, an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;acceptor&lt;/span&gt;&lt;/code&gt; can be used to accept
                into a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_protocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;socket&lt;/span&gt;&lt;/code&gt; object.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Moved existing examples into a C++03-specific directory, and added
                a new directory for C++11-specific examples. A limited subset of
                the C++03 examples have been converted to their C++11 equivalents.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various SSL enhancements. Thanks go to Nick Jones, on whose work
                these changes are based.
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for SSL handshakes with re-use of data already
                      read from the wire. New overloads of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; class's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;handshake&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_handshake&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; functions have been added.
                      These accept a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ConstBufferSequence&lt;/span&gt;&lt;/code&gt;
                      to be used as initial input to the ssl engine for the handshake
                      procedure.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for creation of TLSv1.1 and TLSv1.2 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt; objects.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;set_verify_depth&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                      classes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added the ability to load SSL certificate and key data from
                      memory buffers. New functions, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;add_certificate_authority&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_certificate&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_certificate_chain&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_private_key&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_rsa_private_key&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_tmp_dh&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, have been added to the
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt; class.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt;
                      to automatically disable SSL compression by default. To enable,
                      use the new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;clear_options&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function, as in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;my_context&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;clear_options&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;no_compression&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a potential deadlock in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;signal_set&lt;/span&gt;&lt;/code&gt;
                implementation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an error in acceptor example in documentation &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8421&quot;&gt;#8421&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed copy-paste errors in waitable timer documentation &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8602&quot;&gt;#8602&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added assertions to satisfy some code analysis tools &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7739&quot;&gt;#7739&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a malformed &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#warning&lt;/span&gt;&lt;/code&gt;
                directive &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7939&quot;&gt;#7939&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a potential data race in the Linux &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll&lt;/span&gt;&lt;/code&gt;
                implementation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a Windows-specific bug, where certain operations might generate
                an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt; with
                an invalid (i.e. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;NULL&lt;/span&gt;&lt;/code&gt;)
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_category&lt;/span&gt;&lt;/code&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8613&quot;&gt;#8613&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_waitable_timer&lt;/span&gt;&lt;/code&gt;'s
                underlying implementation so that it can handle any &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;time_point&lt;/span&gt;&lt;/code&gt; value without overflowing
                the intermediate duration objects.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a problem with lost thread wakeups that can occur when making
                concurrent calls to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; on the same &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                object &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8354&quot;&gt;#8354&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed implementation of asynchronous connect operation so that it
                can cope with spurious readiness notifications from the reactor &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7961&quot;&gt;#7961&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8079&quot;&gt;#8079&lt;/a&gt;
                      Chrono memory leak
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8318&quot;&gt;#8318&lt;/a&gt;
                      BOOST_FORCEINLINE constructors of time_point and duration
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8367&quot;&gt;#8367&lt;/a&gt;
                      chrono does not compile with clang from XCode 4.5.2 with -std=c++11
                      -stdlib=libc++ and -arch armv7
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8370&quot;&gt;#8370&lt;/a&gt;
                      typo in chrono reference
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8435&quot;&gt;#8435&lt;/a&gt;
                      Can't compile Chrono on HP-UX due to no CLOCK_REALTIME macro.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8032&quot;&gt;#8032&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added experimental &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;static_vector&lt;/span&gt;&lt;/code&gt;
                class, based on Andrew Hundt's and Adam Wulkiewicz's high-performance
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;varray&lt;/span&gt;&lt;/code&gt; class.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Speed improvements in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;
                constructors/copy/move/swap, dispatching to memcpy when possible.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7227&quot;&gt;#7227&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7921&quot;&gt;#7921&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7969&quot;&gt;#7969&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8118&quot;&gt;#8118&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8294&quot;&gt;#8294&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8553&quot;&gt;#8553&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for SPARC architecture added.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for segmented stacks (stack grows on demand) added.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7805&quot;&gt;#7805&lt;/a&gt;
                Typo
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7972&quot;&gt;#7972&lt;/a&gt;
                GCC warnings
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7988&quot;&gt;#7988&lt;/a&gt;
                C++11 range-for
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8023&quot;&gt;#8023&lt;/a&gt;
                Using iterator traits
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8024&quot;&gt;#8024&lt;/a&gt;
                Create const_iterator
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8101&quot;&gt;#8101&lt;/a&gt;
                Postfix operator++ for iterator
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8526&quot;&gt;#8526&lt;/a&gt;
                memory leak
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8544&quot;&gt;#8544&lt;/a&gt;
                calling managed DLL
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      added Spatial Index, developed for Boost.Geometry by Adam Wulkiewicz.
                      The spatial index was originally started by Federico J. Fernandez
                      during the Google Summer of Code 2008 program, mentored by
                      Hartmut Kaiser.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      added SVG-output, this was already in extensions for several
                      years
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Documentation&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      small fixes of missing words
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      collinear opposite segments did sometimes (in circles) have
                      a robustness issue, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixed insertion of false intersection point (found by buffer)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      applied patch of Vladimir Petrovic for debugging traversals
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Solved tickets&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7462&quot;&gt;7462&lt;/a&gt;
                      degenerate union result for float, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7465&quot;&gt;7465&lt;/a&gt;
                      wrong construtors access type in scale_transformer class, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7802&quot;&gt;7802&lt;/a&gt;
                      cart_intersect.hpp unused parameter warnings, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8254&quot;&gt;8254&lt;/a&gt;
                      faulty intersection, fixed
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8393&quot;&gt;8393&lt;/a&gt;
                      polygon model doesn't adhere to stated Polygon concept rules,
                      doc updated.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8403&quot;&gt;8403&lt;/a&gt;
                      silenced compiler warning C4127: conditional expression is
                      constant
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8405&quot;&gt;8405&lt;/a&gt;
                      silenced compiler warning C4189: '...' : local variable is
                      initialized but not referenced
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Internal changes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Made several algorithms variant-aware (append, area, clear,
                      convert, equals, length, num_points)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs fixed from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6780&quot;&gt;#6780&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7016&quot;&gt;#7016&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7155&quot;&gt;#7155&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7845&quot;&gt;#7845&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7863&quot;&gt;#7863&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7877&quot;&gt;#7877&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8166&quot;&gt;#8166&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8192&quot;&gt;#8192&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8398&quot;&gt;#8398&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8411&quot;&gt;#8411&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8427&quot;&gt;#8427&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8428&quot;&gt;#8428&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8434&quot;&gt;#8434&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8490&quot;&gt;#8490&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8681&quot;&gt;#8681&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added updates to VF2 subgraph isomorphism from Jakob Lykke Andersen
                and Flavio De Lorenzi.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added maximum adjacency search from Fernando Vilas.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added timeout support from Brammert Ottens to resource-constrained
                shortest paths (r_c_shortest_paths) algorithm.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various fixes to documentation and examples and removal of outdated
                compiler workarounds.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for platform-specific flags to mapped_region (ticket
                #8030)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7484&quot;&gt;#7484&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7598&quot;&gt;#7598&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7682&quot;&gt;#7682&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7923&quot;&gt;#7923&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7924&quot;&gt;#7924&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7928&quot;&gt;#7928&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7936&quot;&gt;#7936&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8521&quot;&gt;#8521&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8595&quot;&gt;#8595&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;ABI breaking&lt;/strong&gt;: Changed bootstamp
                function in Windows to use EventLog service start time as system
                bootup time. Previously used &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;LastBootupTime&lt;/span&gt;&lt;/code&gt;
                from WMI was unstable with time synchronization and hibernation and
                unusable in practice. If you really need to obtain pre Boost 1.54
                behaviour define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_BOOTSTAMP_IS_LASTBOOTUPTIME&lt;/span&gt;&lt;/code&gt;
                from command line or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;workaround&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
                support (bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7849&quot;&gt;#7849&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iostreams/&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tee&lt;/span&gt;&lt;/code&gt; now works correctly
                for std::streams (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8315&quot;&gt;#8315&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8385&quot;&gt;#8385&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8460&quot;&gt;#8460&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid warning from Clang's &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wimplicit&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fallthrough&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8482&quot;&gt;#8482&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Converting to character pointer now triggers compile time assert
                instead of runtime &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8334&quot;&gt;#8334&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Lexical cast is now capable of converting &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;int128_type&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;uint128_type&lt;/span&gt;&lt;/code&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7909&quot;&gt;#7909&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed internal stream buffer handling, now works with libc++ &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8267&quot;&gt;#8267&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7704&quot;&gt;#7704&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Restored getting address of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;/code&gt;
                function that was broken in 1.53.0 &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7421&quot;&gt;#7421&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed warnings, internals and tests &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2558&quot;&gt;#2558&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7949&quot;&gt;#7949&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8162&quot;&gt;#8162&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8369&quot;&gt;#8369&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8547&quot;&gt;#8547&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Major reorganization to incorporate other Boost.Math like Integer
                Utilities (Greatest Common Divisor and Least Common Multiple), quaternions
                and octonions. Making new chapter headings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added many references to Boost.Multiprecision and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_dec_float_50&lt;/span&gt;&lt;/code&gt;
                as an example of a User-defined Type (UDT).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Clang to list of supported compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed constants to use a thread-safe cache of computed values when
                used at arbitrary precision.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added finding zeros of Bessel functions &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cyl_bessel_j_zero&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cyl_neumann_zero&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;airy_ai_zeros&lt;/span&gt;&lt;/code&gt; and
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;airy_bi_zeros&lt;/span&gt;&lt;/code&gt;(by
                Christopher Kormanyos).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                More accuracy improvements to the Bessel J and Y functions from Rocco
                Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed nasty cyclic dependency bug that caused some headers to not
                compile &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7999&quot;&gt;#7999&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in __tgamma that caused spurious overflow for arguments
                between 142.5 and 143.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in raise_rounding_error that caused it to return an incorrect
                result when throwing an exception is turned off &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7905&quot;&gt;#7905&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added minimal __float128 support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in edge-cases of poisson quantile &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8308&quot;&gt;#8308&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Adjusted heuristics used in Halley iteration to cope with inverting
                the incomplete beta in tricky regions where the derivative is flatlining.
                Example is computing the quantile of the Fisher F distribution for
                probabilities smaller than machine epsilon. See ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8314&quot;&gt;#8314&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: Exit points broken for the favor_compile_time policy.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: copy breaks exit points of subsubmachines.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8046&quot;&gt;#8046&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7969&quot;&gt;#7969&lt;/a&gt;),
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8231&quot;&gt;#8231&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking change&lt;/strong&gt; renamed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rational_adapter&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rational_adaptor&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for &lt;a href=&quot;http://perso.ens-lyon.fr/nathalie.revol/software.html&quot;&gt;MPFI&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add logged_adaptor.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for 128-bit floats via GCC's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__float128&lt;/span&gt;&lt;/code&gt;
                or Intel's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_Quad&lt;/span&gt;&lt;/code&gt;
                data types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for user-defined literals in cpp_int, improve &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;constexpr&lt;/span&gt;&lt;/code&gt; support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in integer division of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                that results in incorrect sign of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                when both arguments are small enough to fit in a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;double_limb_type&lt;/span&gt;&lt;/code&gt;.
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8126&quot;&gt;8126&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in subtraction of a single limb in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                that results in incorrect value when the result should have a 0 in
                the last limb: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8133&quot;&gt;8133&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
                where division of 0 by something doesn't get zero in the result:
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8160&quot;&gt;8160&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug in some transcendental functions that caused incorrect
                return values when variables are reused, for example with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8326&quot;&gt;8326&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updates and fixes to the Voronoi documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs fixed from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8026&quot;&gt;#8026&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8197&quot;&gt;#8197&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8257&quot;&gt;#8257&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_map/&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compose_property_map&lt;/span&gt;&lt;/code&gt;
                from Guillaume Pinot.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/range/&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bug fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6944&quot;&gt;#6944&lt;/a&gt; Some Range concepts use the incorrect Iterator concept
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7407&quot;&gt;#7407&lt;/a&gt; istream_range does not compile with wcin
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7408&quot;&gt;#7408&lt;/a&gt; istream_range should not pull istream
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7731&quot;&gt;#7731&lt;/a&gt; irange doesn't end iteration properly when step_size
                      is 3 or more
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7827&quot;&gt;#7827&lt;/a&gt; [range] cant compile r | indexed to range algorithm
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8338&quot;&gt;#8338&lt;/a&gt; Iterator range does not work with pointer to array
                      as iterator
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8453&quot;&gt;#8453&lt;/a&gt; Incorrect configuration macro BOOST_NO_PARTIAL_TEMPLATE_SPECIALIZATION
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/signals/&quot;&gt;Signals&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                No longer actively maintained, so it is deprecated. Use &lt;a href=&quot;http://www.boost.org/libs/signals2&quot;&gt;Signals2&lt;/a&gt;
                for new development.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7285&quot;&gt;#7285&lt;/a&gt;
                      C++11 compliance: Allow to pass movable arguments for call_once.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7445&quot;&gt;#7445&lt;/a&gt;
                      Async: Add future&amp;lt;&amp;gt;.then
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7449&quot;&gt;#7449&lt;/a&gt;
                      Synchro: Add a synchronized value class
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4878&quot;&gt;#4878&lt;/a&gt;
                      MinGW 4.5.0 undefined reference to bool interruptible_wait(detail::win32::handle
                      handle_to_wait_for,detail::t imeout target_time).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4882&quot;&gt;#4882&lt;/a&gt;
                      Win32 shared_mutex does not handle timeouts correctly.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5752&quot;&gt;#5752&lt;/a&gt;
                      boost::call_once() is unreliable on some platforms
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6652&quot;&gt;#6652&lt;/a&gt;
                      Boost.Thread shared_mutex.hpp:50:99: warning: dereferencing
                      type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6843&quot;&gt;#6843&lt;/a&gt;
                      [Intel C++] Compile Errors with '#include &amp;lt;atomic&amp;gt;'
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6966&quot;&gt;#6966&lt;/a&gt;
                      future boost::future_category inconsistent dll linkage
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7720&quot;&gt;#7720&lt;/a&gt;
                      exception lock_error while intensive locking/unlocking of mutex
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7755&quot;&gt;#7755&lt;/a&gt;
                      Thread: deadlock with shared_mutex on Windows
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7980&quot;&gt;#7980&lt;/a&gt;
                      Build error: msvc-11.0 and BOOST_THREAD_DONT_USE_DATETIME
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7982&quot;&gt;#7982&lt;/a&gt;
                      pthread_delay_np() parm compile error on AIX
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8027&quot;&gt;#8027&lt;/a&gt;
                      thread library fails to compile with Visual Studio 2003
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8070&quot;&gt;#8070&lt;/a&gt;
                      prefer GetTickCount64 over GetTickCount
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8136&quot;&gt;#8136&lt;/a&gt;
                      boost::this_thread::sleep_for() sleeps longer than it should
                      in Windows
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8212&quot;&gt;#8212&lt;/a&gt;
                      Boost thread compilation error on Solaris 10
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8237&quot;&gt;#8237&lt;/a&gt;
                      fix documentation for 'thread_group'
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8239&quot;&gt;#8239&lt;/a&gt;
                      barrier::wait() not marked as interruption_point
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8323&quot;&gt;#8323&lt;/a&gt;
                      boost::thread::try_join_for/try_join_until may block indefinitely
                      due to a combination of problems in Boost.Thread and Boost.Chrono
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8337&quot;&gt;#8337&lt;/a&gt;
                      The internal representation of &amp;quot;std::string(this-&amp;gt;code()-&amp;gt;message())&amp;quot;
                      escapes, but is destroyed when it exits scope.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8371&quot;&gt;#8371&lt;/a&gt;
                      C++11 once_flag enabled when constexpr is not available
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8443&quot;&gt;#8443&lt;/a&gt;
                      Header file inclusion order may cause crashes
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8451&quot;&gt;#8451&lt;/a&gt;
                      Missing documented function 'boost::scoped_thread::joinable'
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8530&quot;&gt;#8530&lt;/a&gt;
                      [Coverity] Unused variable thread_handle, uninitialized variable
                      cond_mutex in thread/pthread/thread_data.hpp
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8596&quot;&gt;#8596&lt;/a&gt;
                      With C++0x enabled, boost::packaged_task stores a reference
                      to function objects, instead of a copy.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_traits/&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New type traits implemented &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8189&quot;&gt;#8189&lt;/a&gt;:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      is_nothrow_move_constructible
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      is_nothrow_move_assignable
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      has_trivial_move_assign
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      has_trivial_move_constructor
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/ublas&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6511&quot;&gt;#6511&lt;/a&gt; Division by scalar should use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;enable_if&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7297&quot;&gt;#7297&lt;/a&gt; Make the free functions 'num_columns' and 'num_rows' support
                the uBLAS traits system and better work with expression types
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6010&quot;&gt;#6010&lt;/a&gt; fixed linkage problems in assignment.hpp
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                updated doc
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some very basic &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                support.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_string_ref&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;find&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8067&quot;&gt;#8067&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;string_ref&lt;/span&gt;&lt;/code&gt;'s
                logical operators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Update noncopyable for C++11 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6578&quot;&gt;#6578&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix noncopyable compiler warning when used in DLL interface (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6935&quot;&gt;#6935&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;/code&gt; with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt;
                on SolarisStudio compiler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7079&quot;&gt;#7079&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disable annoying MSVC warning about operator comma (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7663&quot;&gt;#7663&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Now uses new type traits from Boost.TypeTrait to detect &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt; constructors and assignment
                operators &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8296&quot;&gt;#8296&lt;/a&gt;. This shall increase performance of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;variant&lt;/span&gt;&lt;/code&gt; for many types in C++11.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multivisitation implemented &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8459&quot;&gt;#8459&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation updated to reflect C++11 features support.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove unused variables, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8039&quot;&gt;#8039&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Avoid name clash with macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;None&lt;/span&gt;&lt;/code&gt;
                in glx.h, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8204&quot;&gt;#8204&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Silence a gcc warning, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8138&quot;&gt;#8138&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98 mode: 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.7.2, 4.7.3, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11 mode: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.2, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.1, 3.2, from Subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, with libc++: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.2, 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++98 mode: 4.7.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.7.3, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11 mode: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from Subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from Subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.2, 4.8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 9.0, 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: 12.1.0.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_54_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.53.0</title><link>http://www.boost.org/users/history/version_1_53_0.html</link><guid>http://www.boost.org/users/history/version_1_53_0.html</guid><pubDate>Mon, 4 Feb 2013 10:29:19 -0800</pubDate><description>



  &lt;div id=&quot;version_1_53_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
  C++11-style &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;,
          from Helge Bahmann, maintained by Tim Blechmann.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
  Coroutine library,
          from Oliver Kowalke.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lockfree/&quot;&gt;Lockfree&lt;/a&gt;:&lt;/span&gt;
  Lockfree data structures,
          from Tim Blechmann.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
  Extended
          precision arithmetic types for floating point, integer and rational arithmetic
          from John Maddock and Christopher Kormanyos.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/odeint/&quot;&gt;Odeint&lt;/a&gt;:&lt;/span&gt;
  Solving ordinary
          differential equations, from Karsten Ahnert and Mario Mulansky.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.news&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;News&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      This release contains a fix for ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7743&quot;&gt;#7743&lt;/a&gt;, in Boost.Locale. For more
      details, see the &lt;a href=&quot;http://www.boost.org/users/news/boost_locale_security_notice.html&quot;&gt;security
      notice&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed non-ASCII char in comment (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7781&quot;&gt;#7781&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the Knuth-Morris-Pratt docs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7656&quot;&gt;#7656&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/array/&quot;&gt;Array&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for boost::get and std::get (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7652&quot;&gt;#7652&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some 64-to-32-bit conversion warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7459&quot;&gt;#7459&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some small errors in documentation and comments (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7761&quot;&gt;#7761&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an error in the example embedded in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_socket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_option&lt;/span&gt;&lt;/code&gt;'s
                documentation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7562&quot;&gt;#7562&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;&lt;/code&gt;
                rather than &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/code&gt; for
                SSL_CTX options, to match OpenSSL (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7209&quot;&gt;#7209&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_snwprintf&lt;/span&gt;&lt;/code&gt;
                to address a compile error due to the changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swprintf&lt;/span&gt;&lt;/code&gt;
                signature in recent versions of MinGW (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7373&quot;&gt;#7373&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a deadlock that can occur on Windows when shutting down a pool
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt; threads
                due to running out of work (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7552&quot;&gt;#7552&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                qualifier for error categories (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7797&quot;&gt;#7797&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed UNIX domain socket example to treat errors from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;accept&lt;/span&gt;&lt;/code&gt; as non-fatal (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7488&quot;&gt;#7488&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a small block recycling optimisation to improve default memory
                allocation behaviour.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/bimap/&quot;&gt;Bimap&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Refactor map_view_iterator to improve error messages.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed replace_(left/right/key/data) bug when using relations with
                info.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed vector_of and list_of views &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; bug.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed vector_of views &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; functions return value.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The chrono i/o version included in Boost.Chrono 1.2.x has been
                      completly refactored in version 2.0.0
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The manipulators __duration_short, __duration_long
                      are depreceated. You should use the parameterized form __duration_fmt
                      or the renamed manipulators __duration_symbol and __duration_prefix
                      instead.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The __duration_punct&amp;lt;&amp;gt; facet is depreceated.
                      You should use the __get_duration_style free function to get
                      the informations and use the __duration_units facet for localization
                      purposes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      When BOOST_CHRONO_VERSION==2 the preceding deprecated functions
                      are not available.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7546&quot;&gt;#7546&lt;/a&gt;
                      time_point&amp;lt;system_clock&amp;gt; output version 2 fails to compile
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7547&quot;&gt;#7547&lt;/a&gt;
                      time_point&amp;lt;system_clock&amp;gt; input version 2 fails to compile
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7868&quot;&gt;#7868&lt;/a&gt;
                      chrono_io parses time incorrectly (1.53 and 1.52)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7650&quot;&gt;#7650&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;'s
                insertion performance.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed again experimental multiallocation interface for better performance
                (still experimental).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added no exception support for those willing to disable exceptions
                in their compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed GCC -Wshadow warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for iOS on ARM and MacOS X on x86 (32bit) added.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for SEH Overwrite Protection on Win32.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bugfixes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      avoid generating output polygons with interior rings below
                      minimum size (e.g. one or two points)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;disjoint&lt;/span&gt;&lt;/code&gt; for degenerate segments
                      (patched by Karsten Ahnert)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      problem in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;difference&lt;/span&gt;&lt;/code&gt;
                      for missing handling tangency, reported by H2
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;for_each&lt;/span&gt;&lt;/code&gt;
                      for use with Lambda's
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;comparable_distance&lt;/span&gt;&lt;/code&gt;
                      point-linestring (and -range, -polygon)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Additional functionality&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      combinations for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;disjoint&lt;/span&gt;&lt;/code&gt;:
                      point/ring, point/polygon, point/multi_polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      combinations for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intersects&lt;/span&gt;&lt;/code&gt;:
                      point/ring, point/polygon, point/multi_polygon
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Internal changes&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      updates in specializations/not_implemented for various algorithms
                      (as in an earlier version, these changes are still going on;
                      they take care for simplified structs, better error reporting,
                      and automatized documentation)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      fixes in unit tests
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/gil/&quot;&gt;GIL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed self-assignment warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4919&quot;&gt;#4919&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed the following bugs from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3468&quot;&gt;#3468&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4386&quot;&gt;#4386&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5269&quot;&gt;#5269&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7428&quot;&gt;#7428&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7457&quot;&gt;#7457&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7467&quot;&gt;#7467&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7600&quot;&gt;#7600&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7648&quot;&gt;#7648&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7684&quot;&gt;#7684&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7728&quot;&gt;#7728&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7741&quot;&gt;#7741&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7766&quot;&gt;#7766&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7771&quot;&gt;#7771&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7773&quot;&gt;#7773&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7780&quot;&gt;#7780&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7787&quot;&gt;#7787&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7801&quot;&gt;#7801&lt;/a&gt;
    plus other bugs not in Trac.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for reading from GraphML files containing multiple
                graphs.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added versions of A* search specifically for trees, removing the
                need for a color map when it is acceptable to visit the same vertex
                multiple times.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added VF2 subgraph isomorphism algorithm (contributed by Flavio De
                Lorenzi).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;int128_type&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;uint128_type&lt;/span&gt;&lt;/code&gt; where available.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On platforms that are known to have standard floating point functions,
                don't use the automatic detection (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7221&quot;&gt;#7221&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7470&quot;&gt;#7470&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed GCC -Wshadow warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Experimental multiple allocation interface improved and changed again.
                Still unstable.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;ABI breaking&lt;/em&gt;: changed node pool
                allocators internals for improved efficiency.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7795&quot;&gt;#7795&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7174&quot;&gt;#7174&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7529&quot;&gt;#7529&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7815&quot;&gt;#7815&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed GCC -Wshadow warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt;&lt;/code&gt;
                keyword in several intrusive container constructors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Small documentation fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New character type detection algorithm for user defined types &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6786&quot;&gt;#6786&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation updates (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7582&quot;&gt;#7582&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7831&quot;&gt;#7831&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs with std::array &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7799&quot;&gt;#7799&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation with -ftrapv and numeric to numeric conversions
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7814&quot;&gt;#7814&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/locale/&quot;&gt;Locale&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Security related bug fix, some invalid UTF-8 sequences where accepted
                as valid &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7743&quot;&gt;#7743&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Invalid Windows codepage names used &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7386&quot;&gt;#7386&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed missing documentation, caused by a error in Doxygen formatting
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7734&quot;&gt;#7734&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed missing std:: in some places &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7701&quot;&gt;#7701&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Spelling, grammar, typos fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7368&quot;&gt;#7368&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7762&quot;&gt;#7762&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7325&quot;&gt;#7325&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7415&quot;&gt;#7415&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7416&quot;&gt;#7416&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7183&quot;&gt;#7183&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7649&quot;&gt;#7649&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7694&quot;&gt;#7694&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4445&quot;&gt;#4445&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7492&quot;&gt;#7492&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed mistake in calculating pooled standard deviation in two-sample
                students t example &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7402&quot;&gt;#7402&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve complex acos/asin/atan, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7290&quot;&gt;#7290&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7291&quot;&gt;#7291&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve accuracy in some corner cases of cyl_bessel_j and gamma_p/gamma_q
                thanks to suggestions from Rocco Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve accuracy in Bessel J and Y with integer orders thanks to
                suggestions from Rocco Romeo.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/minmax/&quot;&gt;MinMax&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a misuse of the comma operator (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7752&quot;&gt;#7752&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the docs to fix broken link (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7751&quot;&gt;#7751&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better header segregation (bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6524&quot;&gt;#6524&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Small documentation fixes
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7830&quot;&gt;#7830&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7832&quot;&gt;#7832&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6366&quot;&gt;#6366&lt;/a&gt; Bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;contains&lt;/span&gt;&lt;/code&gt;
                      for polygon_90 type.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7678&quot;&gt;#7678&lt;/a&gt; multiple definitions of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;
                      &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;belongs&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(...)&lt;/span&gt;&lt;/code&gt;
                      by multiple &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Internal changes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      refactored point/segment/interval data/concept/traits.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      added unit tests for point and interval data/concept/traits.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      simplified &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      to operate only in 2D.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      removed point_3d data/concept/traits.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/random/&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Now compiles with exceptions disabled (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5399&quot;&gt;#5399&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/range/&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Bug fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5603&quot;&gt;#5603&lt;/a&gt; the &amp;quot;range/any_range.hpp&amp;quot; header is not
                      self-sufficient
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6103&quot;&gt;#6103&lt;/a&gt; boost::range_detail vs. boost::range::range_detail
                      compiler error
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Documentation fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5160&quot;&gt;#5160&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5314&quot;&gt;#5314&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5440&quot;&gt;#5440&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5775&quot;&gt;#5775&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6212&quot;&gt;#6212&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7585&quot;&gt;#7585&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7843&quot;&gt;#7843&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7916&quot;&gt;#7916&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7926&quot;&gt;#7926&lt;/a&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7616&quot;&gt;#7616&lt;/a&gt;
                      br_mul::nan - warning C4293: '&amp;lt;&amp;lt;' : shift count negative
                      or too big, undefined behavior`.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
   Fixed Issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7744&quot;&gt;#7744&lt;/a&gt;,
          &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7644&quot;&gt;#7644&lt;/a&gt;.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/&quot;&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Glen Fernandes provided implementations of make_shared and
                      allocate_shared for arrays. They achieve a single allocation
                      for an array that can be initialized with constructor arguments
                      or initializer lists as well as overloads for default initialization
                      and no value initialization. See the '&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/make_shared_array.html&quot;&gt;make_shared
                      and allocate_shared for arrays&lt;/a&gt;' page for more information.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;
                      can now be used to hold a pointer to a dynamically allocated
                      array. This is accomplished by using an array type (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt;
                      or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;)
                      as the template parameter.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Smart pointers now use &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt;
                      &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt;
                      on C++11 compilers. This can break code that passes a smart
                      pointer to a function taking a &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt;,
                      or that returns a smart pointer from a function with a &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt; return type. Please use
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;!=&lt;/span&gt;
                      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span class=&quot;special&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;p&lt;/span&gt;&lt;/code&gt; in such cases.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/string&quot;&gt;StringAlgo&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a bug where it wouldn't find overlapping patterns (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7784&quot;&gt;#7784&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disambiguated some calls to insert (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7346&quot;&gt;#7346&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Deprecated features since boost 1.53 will be available only
                      until boost 1.58.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      C++11 compliance: packaged_task&amp;lt;R&amp;gt; is deprecated, use
                      instead packaged_task&amp;lt;R()&amp;gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7537&quot;&gt;#7537&lt;/a&gt;
                      deprecate Mutex::scoped_lock and scoped_try_lock and boost::condition
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6270&quot;&gt;#6270&lt;/a&gt;
                      C++11 compliance: Add thread constructor from movable callable
                      and movable arguments
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7279&quot;&gt;#7279&lt;/a&gt;
                      C++11 compliance: Add noexcept in system related functions
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7280&quot;&gt;#7280&lt;/a&gt;
                      C++11 compliance: Add promise::...at_thread_exit functions
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7281&quot;&gt;#7281&lt;/a&gt;
                      C++11 compliance: Add ArgTypes to packaged_task template.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7282&quot;&gt;#7282&lt;/a&gt;
                      C++11 compliance: Add packaged_task::make_ready_at_thread_exit
                      function
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7412&quot;&gt;#7412&lt;/a&gt;
                      C++11 compliance: Add async from movable callable and movable
                      arguments
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7413&quot;&gt;#7413&lt;/a&gt;
                      C++11 compliance: Add async when the launch policy is deferred.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7414&quot;&gt;#7414&lt;/a&gt;
                      C++11 compliance: future::get post-condition should be valid()==false.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7422&quot;&gt;#7422&lt;/a&gt;
                      Provide a condition variable with zero-overhead performance
                      penality.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7444&quot;&gt;#7444&lt;/a&gt;
                      Async: Add make_future/make_shared_future.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7540&quot;&gt;#7540&lt;/a&gt;
                      Threads: Add a helper class that join a thread on destruction.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7541&quot;&gt;#7541&lt;/a&gt;
                      Threads: Add a thread wrapper class that joins on destruction.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7575&quot;&gt;#7575&lt;/a&gt;
                      C++11 compliance: A future created by async should &amp;quot;join&amp;quot;
                      in the destructor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7587&quot;&gt;#7587&lt;/a&gt;
                      Synchro: Add strict_lock and nested_strict_lock.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7588&quot;&gt;#7588&lt;/a&gt;
                      Synchro: Split the locks.hpp in several files to limit dependencies.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7590&quot;&gt;#7590&lt;/a&gt;
                      Synchro: Add lockable concept checkers based on Boost.ConceptCheck.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7591&quot;&gt;#7591&lt;/a&gt;
                      Add lockable traits that can be used with enable_if.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7592&quot;&gt;#7592&lt;/a&gt;
                      Synchro: Add a null_mutex that is a no-op and that is a model
                      of UpgardeLockable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7593&quot;&gt;#7593&lt;/a&gt;
                      Synchro: Add a externally_locked class.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7590&quot;&gt;#7594&lt;/a&gt;
                      Threads: Allow to disable thread interruptions.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7464&quot;&gt;#7464&lt;/a&gt;
                      BOOST_TEST(n_alive == 1); fails due to race condition in a
                      regression test tool.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7657&quot;&gt;#7657&lt;/a&gt;
                      Serious performance and memory consumption hit if condition_variable
                      methods condition notify_one or notify_all is used repeatedly.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7665&quot;&gt;#7665&lt;/a&gt;
                      this_thread::sleep_for no longer uses steady_clock in thread.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7668&quot;&gt;#7668&lt;/a&gt;
                      thread_group::join_all() should check whether its threads are
                      joinable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7669&quot;&gt;#7669&lt;/a&gt;
                      thread_group::join_all() should catch resource_deadlock_would_occur.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7671&quot;&gt;#7671&lt;/a&gt;
                      Error including boost/thread.hpp header on iOS.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7672&quot;&gt;#7672&lt;/a&gt;
                      lockable_traits.hpp syntax error: &amp;quot;defined&amp;quot; token
                      misspelled.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7798&quot;&gt;#7798&lt;/a&gt;
                      boost::future set_wait_callback thread safety issues.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7808&quot;&gt;#7808&lt;/a&gt;
                      Incorrect description of effects for this_thread::sleep_for
                      and this_thread::sleep_until.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7812&quot;&gt;#7812&lt;/a&gt;
                      Returns: cv_status::no_timeout if the call is returning because
                      the time period specified by rel_time has elapsed, cv_status::timeout
                      otherwise.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7874&quot;&gt;#7874&lt;/a&gt;
                      compile warning: thread.hpp:342: warning: type attributes are
                      honored only at type definition.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7875&quot;&gt;#7875&lt;/a&gt;
                      BOOST_THREAD_THROW_IF_PRECONDITION_NOT_SATISFIED should not
                      be enabled by default.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7882&quot;&gt;#7882&lt;/a&gt;
                      wrong exception text from condition_variable::wait(unique_lock&amp;lt;mutex&amp;gt;&amp;amp;).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7890&quot;&gt;#7890&lt;/a&gt;
                      thread::do_try_join_until() is missing a return type.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove support for the old pre-standard variadic pair constructors,
                and equality implementation. Both have been deprecated since Boost
                1.48.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                More internal implementation changes, including a much simpler implementation
                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;/code&gt;, and removed
                more deprecated config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;a href=&quot;http://www.boost.org/libs/utility/doc/html/string_ref.html&quot;&gt;string_ref&lt;/a&gt;,
                a non-owning reference to a contiguous sequence of characters.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added rvalue constructors and rvalue assignment operators (for C++11
                compatible compilers only). Library now can be used with move-only
                types (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7620&quot;&gt;#7620&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7718&quot;&gt;#7718&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Accomodate recent smart pointer changes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7809&quot;&gt;#7809&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/tools/build/index.html&quot;&gt;Boost Build System&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Qt5 toolset
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                improved rcc support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7576&quot;&gt;#7576&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.1.2, 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang: 2.8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang, with libc++: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cray: 4.6.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang, with libc++: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.1, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.9
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++11 mode: 13.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age:
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: V12.1.0.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_53_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.52.0</title><link>http://www.boost.org/users/history/version_1_52_0.html</link><guid>http://www.boost.org/users/history/version_1_52_0.html</guid><pubDate>Mon, 5 Nov 2012 08:05:58 -0800</pubDate><description>



  &lt;div id=&quot;version_1_52_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix long-standing dependency tracking bug, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7409&quot;&gt;#7409&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_SFINAE_EXPR&lt;/span&gt;&lt;/code&gt;
                for gcc-4.4, since the support was found to be too buggy.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5980&quot;&gt;#5980&lt;/a&gt; Enhance chrono I/O with H. Hinnant proposal &lt;a href=&quot;http://home.roadrunner.com/~hinnant/bloomington/chrono_io.html&quot;&gt;proposal&lt;/a&gt;
                      which has the advantage to provide I/O for system clocks using
                      the Gregorian Calendar.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5981&quot;&gt;#5981&lt;/a&gt; Add i/o state savers for duration and time_point formatting
                      state.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7059&quot;&gt;#7059&lt;/a&gt; Add low level i/o facilities.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The chrono i/o version included in Boost.Chrono 1.2.x has been
                      completly refactored in version 2.0.0
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The manipulators &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_short&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_long&lt;/span&gt;&lt;/code&gt;
                      are depreceated. You should use the parameterized form &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_fmt&lt;/span&gt;&lt;/code&gt; or the renamed
                      manipulators &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_symbol&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_prefix&lt;/span&gt;&lt;/code&gt;
                      instead.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      chrono I/O: The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_punct&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; facet is deprecated.
                      You should use the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__get_duration_style&lt;/span&gt;&lt;/code&gt;
                      free function to get the informations and use the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_units&lt;/span&gt;&lt;/code&gt; facet for
                      localization purposes.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      When &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_CHRONO_VERSION&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;
                      the preceding deprecated functions are not available.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7381&quot;&gt;#7381&lt;/a&gt; C++11 compliance: unresolved symbol when assigning
                      a constexpr duration to a non-const local variable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7479&quot;&gt;#7479&lt;/a&gt;
                      Compile fails with compilers supporting constexpr fails if
                      the standard library doesn't provides the constexpr interface
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Would not fix:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6871&quot;&gt;#6871&lt;/a&gt; chrono_io.hpp: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;lt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;...)&lt;/span&gt;&lt;/code&gt;
                      modifies the state of os. The neww io interface provided in
                      version 2 solves this issue. You should move to the new version.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;stable_vector&lt;/span&gt;&lt;/code&gt;'s
                template code bloat and type safety.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed typedefs and reordered functions of sequence containers to
                improve doxygen documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6615&quot;&gt;#6615&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7139&quot;&gt;#7139&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7215&quot;&gt;#7215&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7232&quot;&gt;#7232&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7269&quot;&gt;#7269&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7439&quot;&gt;#7439&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented LWG Issue #149 (range insertion now returns an iterator)
                &amp;amp; cleaned up insertion code in most containers
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Corrected aliasing errors.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/date_time/&quot;&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Document &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_DATE_TIME_NO_LIB&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6077&quot;&gt;#6077&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;nth_as_str&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7022&quot;&gt;#7022&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7234&quot;&gt;#7234&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/foreach/&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix alignment warning on gcc.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/function/&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Move constructors and move assignment operators added (only for compilers
                with C++11 rvalue references support) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7330&quot;&gt;#7330&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6950&quot;&gt;#6950&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7226&quot;&gt;#7226&lt;/a&gt;,&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7308&quot;&gt;#7308&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7327&quot;&gt;#7327&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7338&quot;&gt;#7338&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7341&quot;&gt;#7341&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7378&quot;&gt;#7378&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7380&quot;&gt;#7380&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7398&quot;&gt;#7398&lt;/a&gt;, and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7428&quot;&gt;#7428&lt;/a&gt;, plus others
                not in Trac.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Restore &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt;&lt;/code&gt; support,
                which was accidentally removed in the last version (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7437&quot;&gt;#7437&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New floating point hasher - will hash the binary representation on
                more platforms, which should be faster.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shrink_by&lt;/span&gt;&lt;/code&gt; and
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;advise&lt;/span&gt;&lt;/code&gt; functions
                in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mapped_region&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;ABI breaking:&lt;/em&gt; Reimplemented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;message_queue&lt;/span&gt;&lt;/code&gt; with a circular buffer
                index (the old behavior used an ordered array, leading to excessive
                copies). This should greatly increase performance but breaks ABI.
                Old behaviour/ABI can be used undefining macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_MSG_QUEUE_CIRCULAR_INDEX&lt;/span&gt;&lt;/code&gt;
                in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;interprocess&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;workaround&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;message_queue&lt;/span&gt;&lt;/code&gt;
                insertion time avoiding priority search for common cases (both array
                and circular buffer configurations).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;interproces_sharable_mutex&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;interproces_condition_any&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;offset_ptr&lt;/span&gt;&lt;/code&gt;
                performance.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added integer overflow checks.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iterator/&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5825&quot;&gt;#5825&lt;/a&gt; constructing function_input_iterator without consuming
                      an item
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7194&quot;&gt;#7194&lt;/a&gt; Error in documentation of make_function_input_iterator
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Breaking changes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Due to the fix for &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5825&quot;&gt;#5825&lt;/a&gt;, a function_input_iterator will
                      no longer make unnecessary invokations to the wrapped nullary
                      function. For example, constructing an end iterator will now
                      not trigger an invokation; and dereferencing-and-incrementing
                      an iterator N times will trigger N invokations, not N+1 as
                      before. User code that relied on the old behavior will need
                      to be adjusted.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Restored compilation on MSVC-2003 (was broken in 1.51.0) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7255&quot;&gt;#7255&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;CharType&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; function overload. &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6663&quot;&gt;#6663&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7228&quot;&gt;#7228&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added Airy functions and Jacobi Elliptic functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                In several distributions (particulary the Students T) corrected moments
                for small degrees of freedom &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7177&quot;&gt;#7177&lt;/a&gt;
                (reported by Thomas Mang).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Corrected failure to detect bad parameters in many distributions
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6934&quot;&gt;#6934&lt;/a&gt;
                (reported by Florian Schoppmann) by adding a function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;check_out_of_range&lt;/span&gt;&lt;/code&gt; to test many
                possible bad parameters. This test revealed several distributions
                where the checks for bad parameters were ineffective, and these have
                been rectified.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issue in Hankel functions that causes incorrect values to be
                returned for &lt;em&gt;x &amp;lt; 0&lt;/em&gt; and &lt;em&gt;ν&lt;/em&gt;
                odd, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7135&quot;&gt;#7135&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                In non-central T permitted infinite degrees of freedom &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7259&quot;&gt;#7259&lt;/a&gt;
                implemented using the normal distribution (requested by Thomas Mang).
                Also much enhanced accuracy for large degrees of freedom and/or large
                non-centrality parameters by switching to use the Students t distribution
                (or Normal distribution for infinite degrees of freedom) centered
                at delta, when delta / (4 * v) &amp;lt; epsilon for the floating-point
                type in use. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7259&quot;&gt;#7259&lt;/a&gt;.
                It was also found that the incomplete beta was suffering from serious
                cancellation errors when degrees of freedom was very large. (That
                has now been fixed in our code, but any code based on Didonato and
                Morris's original papers (probably every implementation out there
                actually) will have the same issue).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed minor issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6517&quot;&gt;#6517&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6362&quot;&gt;#6362&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7053&quot;&gt;#7053&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2693&quot;&gt;#2693&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6937&quot;&gt;#6937&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7099&quot;&gt;#7099&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/phoenix/&quot;&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make Phoenix work with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;-based
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Included Voronoi diagram extensions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Introduced new Segment concept.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation issues.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto/&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The data parameter to primitive transforms can now optionally have
                slots indexed by key.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Primitive transforms can now operatate on temporary expressions that
                are non-const qualified.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add callable function object types for the free functions in &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and also for some Boost.Range
                functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Boost.MPL algorithms work on Proto expression nodes.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pass_through&lt;/span&gt;&lt;/code&gt; primitive transform
                now accepts an optional &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Domain&lt;/span&gt;&lt;/code&gt;
                template parameter for specifying the target domain of the resulting
                expression.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Replace the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;short_name&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;long_name&lt;/span&gt;&lt;/code&gt;
                      functions by symbol and prefix functions respectively.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;short_name&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;long_name&lt;/span&gt;&lt;/code&gt;
                      are deprecated. Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;symbol&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;prefix&lt;/span&gt;&lt;/code&gt;
                      respectively. These functions be removed in 1.55.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixes:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7478&quot;&gt;#7478&lt;/a&gt;
                      Compiles fails with compilers supporting char16_t and char32_t
                      fails if the library doesn't provides std::u16string and std::u32string.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/utility.htm#result_of&quot;&gt;Result_of&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Switch &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt; on compilers for which
                support is deemed &amp;quot;good enough&amp;quot;. That means if the compiler
                implements &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf&quot;&gt;n3276&lt;/a&gt;.
                (For now, that only includes very recent versions of clang.)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; is now &amp;quot;sfinae-friendly&amp;quot;
                when it uses &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;.
                See &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3436.html&quot;&gt;n3436&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Deprecated Features&lt;/em&gt;: Deprecated
                features since boost 1.50 available only until boost 1.55. These
                deprecated features will be provided by default up to boost 1.52.
                If you don't want to include the deprecated features you could define
                BOOST_THREAD_DONT_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0. Since
                1.53 these features will not be included any more by default. Since
                this version, if you want to include the deprecated features yet
                you could define BOOST_THREAD_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0.
                These deprecated features will be only available until boost 1.55,
                that is you have yet 1 year to move to the new features.
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Time related functions don't using the Boost.Chrono library,
                      use the chrono overloads instead.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Breaking changes when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THREAD_VERSION&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;
                (Default value since Boost 1.53): There are some new features which
                share the same interface but with different behavior. These breaking
                features are provided by default when BOOST_THREAD_VERSION is 3,
                but the user can however choose the version 2 behavior by defining
                the corresponding macro. As for the deprecated features, these broken
                features will be only available until boost 1.55.
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6229&quot;&gt;#6229&lt;/a&gt; C++11 compliance &amp;amp; Breaking change: Rename the
                      unique_future to future following the c++11.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6266&quot;&gt;#6266&lt;/a&gt; C++11 compliance &amp;amp; Breaking change: thread destructor
                      should call terminate if joinable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6269&quot;&gt;#6269&lt;/a&gt; C++11 compliance &amp;amp; Breaking change: thread move
                      assignment should call terminate if joinable.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;New Features:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4710&quot;&gt;#4710&lt;/a&gt; C++11 compliance: Missing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7283&quot;&gt;#7283&lt;/a&gt; C++11 compliance: Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;notify_all_at_thread_exit&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7345&quot;&gt;#7345&lt;/a&gt; C++11 compliance: Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
                      to recursive mutex &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;try_lock&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2361&quot;&gt;#2361&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread_specific_ptr&lt;/span&gt;&lt;/code&gt;:
                      document nature of the key, complexity and rationale.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2797&quot;&gt;#2797&lt;/a&gt; Two problems with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread_specific_ptr&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5274&quot;&gt;#5274&lt;/a&gt; failed to compile &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      with stlport 5.1.5 under msvc8.1, because of undefined class.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5431&quot;&gt;#5431&lt;/a&gt; compile error in Windows CE 6.0(interlocked).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5752&quot;&gt;#5752&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;call_once&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; is unreliable on some platforms.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7045&quot;&gt;#7045&lt;/a&gt; Thread library does not automatically compile date_time.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7173&quot;&gt;#7173&lt;/a&gt; wrong function name &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;interrupt_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7200&quot;&gt;#7200&lt;/a&gt; Unable to build boost.thread modularized.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7220&quot;&gt;#7220&lt;/a&gt; gcc 4.6.2 warns about inline+dllimport functions.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7238&quot;&gt;#7238&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;sleep_for&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; does not respond to interrupt().
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7245&quot;&gt;#7245&lt;/a&gt; Minor typos on documentation related to version 3.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7272&quot;&gt;#7272&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;win32&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread_primitives&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;:
                      (Unneccessary) Warning.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7284&quot;&gt;#7284&lt;/a&gt; Clarify that there is no access priority between lock
                      and shared_lock on shared mutex.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7329&quot;&gt;#7329&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                      does not compile on HPUX.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7336&quot;&gt;#7336&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THREAD_DONT_USE_SYSTEM&lt;/span&gt;&lt;/code&gt;
                      doesn't work.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7349&quot;&gt;#7349&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;packaged_task&lt;/span&gt;&lt;/code&gt;
                      holds reference to temporary.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7350&quot;&gt;#7350&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_destructor&lt;/span&gt;&lt;/code&gt;
                      does not destroy object
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/ublas/&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                improved performance of inplace_solve (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4024&quot;&gt;#4024&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                fixed coordinate_matrix for use with gcc 4.7 (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7363&quot;&gt;#7363&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                In assignment, reuse existing nodes where possible.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix bugs when erasing ranges (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7471&quot;&gt;#7471&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Some work on the implementation.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/uuid/&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6118&quot;&gt;#6118&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6788&quot;&gt;#6788&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7375&quot;&gt;#7375&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7128&quot;&gt;#7128&lt;/a&gt; - fixed bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                for messages longer than 536,870,912 bytes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sub_match&lt;/span&gt;&lt;/code&gt; work
                with Boost.Range. Fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7237&quot;&gt;#7237&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_52_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang: 2.8
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cray: 8.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang:
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.3, 4.6.2, 4.6.3, 4.7.0, 4.7.1, 4.7.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.4, 4.5.3, 4.6.3, 4.7.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.9
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age: 10.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0, 11.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: V12.1.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun: 5.10
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_52_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.51.0</title><link>http://www.boost.org/users/history/version_1_51_0.html</link><guid>http://www.boost.org/users/history/version_1_51_0.html</guid><pubDate>Mon, 20 Aug 2012 16:00:21 -0700</pubDate><description>



  &lt;div id=&quot;version_1_51_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
  Context switching library,
          from Oliver Kowalke.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_51_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_sorted_until&lt;/span&gt;&lt;/code&gt;
                ; now matches the c++11 standard behavior on ranges with duplicate
                values.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added range support for the rest of the search algorithms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unhex&lt;/span&gt;&lt;/code&gt; now uses Boost.Exception
                to signal bad input.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an incompatibility between &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iostream&lt;/span&gt;&lt;/code&gt;
                and C++11 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7162&quot;&gt;#7162&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Decorated GCC attribute names with underscores to prevent interaction
                with user-defined macros (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6415&quot;&gt;#6415&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;
                &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cctype&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, needed for some versions of
                MinGW.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use &lt;tt&gt;gcc&lt;/tt&gt;'s atomic builtins on ARM CPUs,
                when available (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7140&quot;&gt;#7140&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed strand destruction to be a no-op, to allow strand objects
                to be destroyed after their associated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                has been destroyed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for some newer versions of glibc which provide the
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_create1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                function but always fail with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ENOSYS&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7012&quot;&gt;#7012&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the SSL implementation to throw an exception if SSL engine
                initialisation fails (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6303&quot;&gt;#6303&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed another regression in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;buffered_write_stream&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6310&quot;&gt;#6310&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented various minor performance improvements, primarily targeted
                at Linux x86 and x86-64 platforms.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Deprecated a whole bunch of macros that were c++11 specific, but
                not named to show that they were c++11 specific. Made new macros
                with better names, and paired the old macros with the new ones. Updated
                the documentation to list the deprecated macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6918&quot;&gt;#6918&lt;/a&gt;
                Boost Chrono compilation failure on HP uX due to undefined pthread_getcpuclockid.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6241&quot;&gt;#6241&lt;/a&gt;
                boost::chrono compilation problems without std::wstring support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6987&quot;&gt;#6987&lt;/a&gt;
                Documentation &amp;amp; C++11.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7041&quot;&gt;#7041&lt;/a&gt;
                time_point.hpp depends on Boost.System.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7042&quot;&gt;#7042&lt;/a&gt;
                Avoiding time_point and duration dependency on time.h and CLOCK_REALTIME.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7058&quot;&gt;#7058&lt;/a&gt;
                Make it work when BOOST_NO_EXCEPTIONS is defined.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7069&quot;&gt;#7069&lt;/a&gt;
                Misspellings in clock_string&amp;lt;thread_clock&amp;gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7081&quot;&gt;#7081&lt;/a&gt;
                WinError.h capitalization in boost/detail/win/basic_types.hpp.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                points accessed through a pointer (e.g. in a linestring) should now
                be specialized without the pointer. In previous versions a type
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;/code&gt; used like
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;linestring&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt;
                had to be specalized like: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt;.
                Now the library itself removes the pointer before calling the traits
                class, so now it should be like: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                intersection was sometimes wrong for integer points, fixed
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                documentation, order of parameters in simplify was wrong, fixed
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7030&quot;&gt;7030&lt;/a&gt;
                spherical distance, fixed (by patch of Karsten Ahnert)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Refactored support for internal and bundled properties in Boost.Graph-provided
                graph types, and cleaned up named parameter functionality:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Enabled old-style (non-bundled) internal properties in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compressed_sparse_row_graph&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Bundled properties should work correctly for all graph types
                      and adaptors.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugs fixed:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6993&quot;&gt;#6993&lt;/a&gt;: Typo Bundled Properties document
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7002&quot;&gt;#7002&lt;/a&gt;: Problem with initialization of CSR bidirectional
                      graph
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7023&quot;&gt;#7023&lt;/a&gt;: Enclose internal type graphml_reader in anonymous
                      namespace
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Other bugs and warnings not in Trac
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support the standard smart pointers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;hash_value&lt;/span&gt;&lt;/code&gt; now implemented
                using SFINAE to avoid implicit casts to built in types when calling
                it.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better performance, less memory usage for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;character_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;character_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; conversions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug with volatile input parameter &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7157&quot;&gt;#7157&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;MSM&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for boost::any &lt;a href=&quot;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s03.html#any-event&quot;&gt;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s03.html#any-event&lt;/a&gt;
                or kleene &lt;a href=&quot;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s04.html#kleene-event&quot;&gt;http://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s04.html#kleene-event&lt;/a&gt;
                as acceptable events
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: compiler error with fsm internal table and none (compound)
                event.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfix: euml::defer_ leading to stack overflow.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto/&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Proto transforms get pseudo-parameter pack expansion support for
                unpacking expressions. See the &lt;a href=&quot;http://www.boost.org/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_51&quot;&gt;Release
                Notes&lt;/a&gt; for more information.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7075&quot;&gt;#7075&lt;/a&gt;
                Workaround for error: the type of partial specialization template
                parameter constant &amp;quot;n1&amp;quot; depends on another template parameter.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4258&quot;&gt;#4258&lt;/a&gt;
                Linking with boost thread does not work on mingw/gcc 4.5.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4885&quot;&gt;#4885&lt;/a&gt;
                Access violation in set_tss_data at process exit due to invalid assumption
                about TlsAlloc.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6931&quot;&gt;#6931&lt;/a&gt;
                mutex waits forwever with Intel Compiler and /debug:parallel
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7044&quot;&gt;#7044&lt;/a&gt;
                boost 1.50.0 header missing.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7052&quot;&gt;#7052&lt;/a&gt;
                Thread: BOOST_THREAD_PROVIDES_DEPRECATED_FEATURES_SINCE_V3_0_0 only
                masks thread::operator==, thread::operator!= forward declarations,
                not definitions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7066&quot;&gt;#7066&lt;/a&gt;
                An attempt to fix current_thread_tls_key static initialization order.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7074&quot;&gt;#7074&lt;/a&gt;
                Multiply defined symbol boost::allocator_arg.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7078&quot;&gt;#7078&lt;/a&gt;
                Trivial 64-bit warning fix on Windows for thread attribute stack
                size
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7089&quot;&gt;#7089&lt;/a&gt;
                BOOST_THREAD_WAIT_BUG limits functionality without solving anything
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix construction/destruction issue when using a C++11 compiler with
                a C++03 allocator (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7100&quot;&gt;#7100&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove a &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;&lt;/code&gt; to support compiling without
                exceptions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Adjust SFINAE use to try to supprt g++ 3.4 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7175&quot;&gt;#7175&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated to use the new config macros.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Work around buggy wide ctype facet on cygwin and mingw.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Work around absence of __isctype on some glibc implementations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;as&lt;/span&gt;&lt;/code&gt; shouldn't assume &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;/code&gt; != &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix assertion in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_regex_traits&lt;/span&gt;&lt;/code&gt;
                on libc++, thanks to John Fletcher.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_51_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2, 4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang 2.8
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang: 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.4, 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.0, 4.7.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.3.4, 4.4.4, 4.5.3, 4.6.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.9
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.0, 12.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age: 10.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11 mode: from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11 mode: 4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.6.3, 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition: V12.1.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun: 5.10
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_51_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
      Vladimir Prus and Marshall Clow managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.50.0</title><link>http://www.boost.org/users/history/version_1_50_0.html</link><guid>http://www.boost.org/users/history/version_1_50_0.html</guid><pubDate>Thu, 28 Jun 2012 08:48:57 -0400</pubDate><description>



  &lt;div id=&quot;version_1_50_0.patches&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Patches&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;a href=&quot;http://www.boost.org/patches/1_50_0/001-unordered.patch&quot;&gt;Boost.Unordered patch&lt;/a&gt;
          - Fixes a bug when compiled using a C++11 compiler, but with a C++03 allocator.
          When inserting elements, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
          detects that the node can be constructed using an accidental implicit conversion
          which causes several problems.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;div id=&quot;version_1_50_0.patches.new_libraries&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
  A collection of
            useful generic algorithms, from Marshall Clow. This includes several
            different searching algorithms, as well as most of the new algorithms
            from the C++11 standard library
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/overloaded_function/&quot;&gt;Functional/OverloadedFunction&lt;/a&gt;:&lt;/span&gt;
  Overload
            different functions into a single function object, from Lorenzo Caminiti.
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/local_function/&quot;&gt;LocalFunction&lt;/a&gt;:&lt;/span&gt;
  Program
            functions locally, within other functions, directly within the scope
            where they are needed, from Lorenzo Caminiti.
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/identity_type/&quot;&gt;Utility/IdentityType&lt;/a&gt;:&lt;/span&gt;
  Wrap
            types within round parenthesis so they can always be passed as macro
            parameters, from Lorenzo Caminiti.
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div id=&quot;version_1_50_0.patches.updated_libraries&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  add missing &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;
                  &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6702&quot;&gt;#6702&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  work around for msvc which allows ctor templates to be copy ctors,
                  fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6535&quot;&gt;#6535&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  shorten filenames to meet boost guidelines, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6196&quot;&gt;#6196&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/array/&quot;&gt;Array&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  add support for Boost.Hash &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6791&quot;&gt;#6791&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;
                  backend to do lazy registration for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EPOLLOUT&lt;/span&gt;&lt;/code&gt;
                  events.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;
                  handling of out-of-band data, which was broken by an incomplete
                  fix in the last release.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed Asio's SSL wrapper to respect OpenSSL's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;OPENSSL_NO_ENGINE&lt;/span&gt;&lt;/code&gt;
                  feature test &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#define&lt;/span&gt;&lt;/code&gt;
                  (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6432&quot;&gt;#6432&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;object_handle&lt;/span&gt;&lt;/code&gt; so that it works
                  with Windows compilers that support C++11 move semantics (such
                  as &lt;tt&gt;g++&lt;/tt&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Improved the performance of strand rescheduling.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added support for &lt;tt&gt;g++&lt;/tt&gt; 4.7 when compiling in
                  C++11 mode (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6620&quot;&gt;#6620&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed a problem where &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;signal_set&lt;/span&gt;&lt;/code&gt;
                  handlers were not being delivered when the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
                  was constructed with a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;concurrency_hint&lt;/span&gt;&lt;/code&gt;
                  of 1 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6657&quot;&gt;#6657&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/bimap/&quot;&gt;Bimap&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Remove spurious dependency on Boost.Serialization, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3868&quot;&gt;#3868&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Solve unused constructor parameter warning, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5749&quot;&gt;#5749&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Add key_type and mapped_type (leaving data_type for backward compatibility)
                  typedefs to map views, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6031&quot;&gt;#6031&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6361&quot;&gt;#6361&lt;/a&gt;
                        integer overflow in boost::chrono::process_real_cpu_clock::now()
                        under Windows 32bits.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6628&quot;&gt;#6628&lt;/a&gt;
                        compiler warning in process_cpu_clocks.hpp.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6666&quot;&gt;#6666&lt;/a&gt;
                        thread_clock.hpp needs pthread.h.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/concept_check/&quot;&gt;Concept Check&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6738&quot;&gt;#6738&lt;/a&gt;
                        Shadowed variable warning.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/filesystem/&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Remove Filesystem Version 2 from the distribution. Version 3 is
                  now the only distributed version. Those still using V2 are urged
                  to migrate to V3 as soon as possible.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Add constexpr value_type preferred_separator to class path.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5118&quot;&gt;#5118&lt;/a&gt;,
                  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;replace_extension&lt;/span&gt;&lt;/code&gt;
                  doesn't work as specified in documentation. The documentation,
                  implementation, and test cases have all had fixes applied. The
                  documentation had failed to mention that any existing extension
                  is removed. The behavior for simple cases has been reverted to
                  the Version 2 behavior, but with corrections so that complex replacements
                  now work. Two test cases from &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5118&quot;&gt;#5118&lt;/a&gt;
                  have been added.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3737&quot;&gt;#3737&lt;/a&gt;,
                  Boost.Filesystem does not compile on Windows Mobile. On Windows,
                  &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stat&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; is no longer included.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4065&quot;&gt;#4065&lt;/a&gt;,
                  Boost Filesystem lexicographic path comparison inconsistent. This
                  required multiple source code bug fixes and code cleanup, correcting
                  problems not related to lexicographical issues.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Add class path member function compare for consistency with std::string.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Tighten &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FILESYSTEM_DYN_LINK&lt;/span&gt;&lt;/code&gt;
                  and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FILESYSTEM_STATIC_LINK&lt;/span&gt;&lt;/code&gt;
                  logic in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;filesystem&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
                  so that one or the other is always defined, and both being defined
                  is a &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#error&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6690&quot;&gt;#6690&lt;/a&gt;
                  and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6737&quot;&gt;#6737&lt;/a&gt;,
                  resolving static linking related problems with VC++ 8 through 11.
                  Note that this fix may reintroduce codecvt thread safety problems
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4889&quot;&gt;#4889&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6320&quot;&gt;#6320&lt;/a&gt;,
                  for these compilers if static linking is used.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;+=&lt;/span&gt;&lt;/code&gt;
                  and concat functions to tack on things like suffixes or numbers.
                  Suggested by Ed Smith-Rowland and others.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6809&quot;&gt;#6809&lt;/a&gt;,
                  Implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;filesystem&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;rename&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; method for MS Windows is wrong,
                  by adding &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;MOVEFILE_COPY_ALLOWED&lt;/span&gt;&lt;/code&gt;
                  to deal with renames across drives, volumes, file systems. Fix
                  has no effect on non-Windows systems.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6819&quot;&gt;#6819&lt;/a&gt;,
                  A path operand with a source that was a one character array was
                  treated as empty, even if it wasn't empty. Such arrays can occur
                  in unions or in code using C variable length array idioms.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6932&quot;&gt;#6932&lt;/a&gt;,
                  create_directories throws exception even if &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt;
                  is specified.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/foreach/&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Revert fix for &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6131&quot;&gt;#6131&lt;/a&gt;
                  which caused more harm than good.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        the return type of comparable projected point strategy for
                        integer points was wrong (integer), fixed
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        several robustness issues in intersection of segments and
                        polygons, fixed
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        invalid intersection output is filtered out
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        disjoint for multi_polygon's might incorrectly return true,
                        fixed
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Solved tickets
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6585&quot;&gt;6585&lt;/a&gt;
                        patch for alternative syntax multipoint, applied
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6584&quot;&gt;6584&lt;/a&gt;
                        patch for bug in distance, applied
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5730&quot;&gt;5730&lt;/a&gt;
                        same issue as 6584, fixed
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6166&quot;&gt;6166&lt;/a&gt;
                        patch for missing transformation, applied
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6696&quot;&gt;6696&lt;/a&gt;
                        invalid intersection output, was (by chance) already fixed
                        in Trunk before reported
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Additional functionality
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        added algorithm &amp;quot;touches&amp;quot; (OGC SF compliant) for
                        *polygon/*polygon
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4622&quot;&gt;#4622&lt;/a&gt;
                        clear_vertex on a vertex with a self-loop can cause a segmentation
                        fault.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6033&quot;&gt;#6033&lt;/a&gt;
                        Lowpoint map calculated by biconnected_components(...) is
                        sometimes wrong.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6242&quot;&gt;#6242&lt;/a&gt;
                        isomorphism doesn't reset mapping.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6435&quot;&gt;#6435&lt;/a&gt;
                        cube_topology documentation should say 3D, not 2D.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6520&quot;&gt;#6520&lt;/a&gt;
                        small_world_1_70_6_0p02.png is broken in documentation of
                        graph_parallel.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6564&quot;&gt;#6564&lt;/a&gt;
                        BGL copy constructor for subgraph does not track local vertices/edges.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6573&quot;&gt;#6573&lt;/a&gt;
                        BGL: boost::isomorphism routine fails with large graphs.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6583&quot;&gt;#6583&lt;/a&gt;
                        Dijkstra Visitor Concept docs probably show wrong type for
                        variable.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6647&quot;&gt;#6647&lt;/a&gt;
                        BGL strong_components do not compile on MSVC 8.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6656&quot;&gt;#6656&lt;/a&gt;
                        Dependent type in subgraph used without typename.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6707&quot;&gt;#6707&lt;/a&gt;
                        is_straight_line_drawing.hpp missing #include &amp;lt;map&amp;gt;.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6708&quot;&gt;#6708&lt;/a&gt;
                        Make bool boost::intersects() in is_straight_line_drawing.hpp
                        inline?
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6739&quot;&gt;#6739&lt;/a&gt;
                        Cannot use write_graphviz_dp with a constified subgraph.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6858&quot;&gt;#6858&lt;/a&gt;
                        boost::get() calls wrongly resolved by g++.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6892&quot;&gt;#6892&lt;/a&gt;
                        VertexIndexGraph concept not required for bron_kerbosch_all_cliques().
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Other bugs and warnings not in Trac.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Support &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tuple&lt;/span&gt;&lt;/code&gt;
                  when available (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6806&quot;&gt;#6806&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Avoid gcc's &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wfloat&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;equal&lt;/span&gt;&lt;/code&gt;
                  warning (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6771&quot;&gt;#6771&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Add deprecation warning to the long deprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;container_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iostreams/&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Improved gzip support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5908&quot;&gt;#5908&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Update tests for latest Boost.Filesystem and Boost.Test.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix some documentation errors (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6530&quot;&gt;#6530&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6650&quot;&gt;#6650&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iterator/&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5127&quot;&gt;#5127&lt;/a&gt;
                        Incorrect result_of usage in transform_iterator
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5697&quot;&gt;#5697&lt;/a&gt;
                        iterator_facade::operator-&amp;gt; is broken for proxy references
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_array/&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Concepts bug fix and Workaround for Visual Studio 2010 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4874&quot;&gt;#4874&lt;/a&gt;)
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix to assert.cpp test case (&lt;a href=&quot;https://svn.boost.org/trac/boost/changeset/78498&quot;&gt;Patch&lt;/a&gt;)
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bad_lexical_cast&lt;/span&gt;&lt;/code&gt; exception is
                  now globaly visible and can be catched even if code is compiled
                  with -fvisibility=hidden
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Now it is possible to compile and use library with disabled exceptions
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5800&quot;&gt;#5800&lt;/a&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Better performance, less memory usage and bugfixes for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator_range&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;character_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt;
                  conversions
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed bugs and warnings: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6645&quot;&gt;#6645&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6562&quot;&gt;#6562&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6812&quot;&gt;#6812&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6852&quot;&gt;#6852&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6717&quot;&gt;#6717&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6670&quot;&gt;#6770&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6504&quot;&gt;#6504&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/locale/&quot;&gt;Locale&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed build issues with STLPort library
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Boost.System is now required depenency
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6635&quot;&gt;#6635&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6833&quot;&gt;#6833&lt;/a&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Promoted math constants to be 1st class citizens, including convenient
                  access to the most widely used built-in float, double, long double
                  via three namespaces.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added the Owen's T function and Skew Normal distribution written
                  by Benjamin Sobotta.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Added Hankel functions.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Corrected issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6627&quot;&gt;#6627
                  nonfinite_num_put formatting of 0.0 is incorrect&lt;/a&gt; based
                  on a patch submitted by K R Walker.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Changed constant initialization mechanism so that it is thread
                  safe even for user-defined types, also so that user defined types
                  get the full precision of the constant, even when &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&lt;/code&gt;
                  does not. So for example 128-bit rational approximations will work
                  with UDT's and do the right thing, even though &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;
                  &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;&lt;/code&gt; may be only 64 or
                  80 bits.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed issue in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bessel_jy&lt;/span&gt;&lt;/code&gt;
                  which causes Y[sub 8.5](4[pi]) to yield a NaN.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;MSM&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  eUML : better syntax for front-ends defined with eUML as transition
                  table only. Caution: Breaking Change!&lt;a href=&quot;http://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table&quot;&gt;http://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table&lt;/a&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfix: graph building was only working if initial_state defined
                  as a sequence.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfix: flags defined for a Terminate or Interrupt state do not
                  break the blocking function of these states any more.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfix: multiple deferred events from several regions were not
                  working in every case.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfix: visitor was passed by value to submachines.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Bugfix: no_transition was not called for submachines who send an
                  event to themselves.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed warnings with gcc.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/program_options/&quot;&gt;Program Options&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Improved error reporting (&lt;a href=&quot;https://svn.boost.org/trac/boost/changeset/77827&quot;&gt;Patch
                  from Leo Goodstadt&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Support for customizing name of option's value in help messages
                  (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4781&quot;&gt;#4781&lt;/a&gt;)
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed compilation with gcc 4.7 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6790&quot;&gt;#6790&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_map/&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6539&quot;&gt;#6539&lt;/a&gt;
                        the return type of get() is not documented correctly.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6721&quot;&gt;#6721&lt;/a&gt;
                        property_map_traits documentation does not mention reference.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto/&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;-based
                  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; if and
                  only if the compiler implements N3276.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  For C++11, force parameter to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;eval_if_c&lt;/span&gt;&lt;/code&gt;
                  and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;if_c&lt;/span&gt;&lt;/code&gt; to be &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Disable &lt;tt&gt;'__forceinline not inlined'&lt;/tt&gt; warning
                  on msvc.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6498&quot;&gt;#6498&lt;/a&gt;
                        boost::ratio won't compile with default settings.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/scope_exit/&quot;&gt;ScopeExit&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  New Features:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Use variadic macros to specify captures as commas-separated
                        lists (but kept preprocessor sequence syntax for backward
                        compatibility).
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Capture the object in scope using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;this_&lt;/span&gt;&lt;/code&gt;.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Support empty captures using &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/code&gt;.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Implicit lambda-like captures using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_SCOPE_EXIT_ALL&lt;/span&gt;&lt;/code&gt;
                        on compilers that support C++11 lambda functions.
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  New Features:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1850&quot;&gt;#1850&lt;/a&gt;
                        Request for unlock_guard to compliment lock_guard.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2637&quot;&gt;#2637&lt;/a&gt;
                        Request for shared_mutex duration timed_lock and timed_lock_shared.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2741&quot;&gt;#2741&lt;/a&gt;
                        Proposal to manage portable and non portable thread attributes.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3567&quot;&gt;#3567&lt;/a&gt;
                        Request for shared_lock_guard.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6194&quot;&gt;#6194&lt;/a&gt;
                        Adapt to Boost.Move.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6195&quot;&gt;#6195&lt;/a&gt;
                        c++11 compliance: Provide the standard time related interface
                        using Boost.Chrono.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6217&quot;&gt;#6217&lt;/a&gt;
                        Enhance Boost.Thread shared mutex interface following Howard
                        Hinnant proposal.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6224&quot;&gt;#6224&lt;/a&gt;
                        c++11 compliance: Add the use of standard noexcept on compilers
                        supporting them.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6226&quot;&gt;#6226&lt;/a&gt;
                        c++11 compliance: Add explicit bool conversion from locks.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6228&quot;&gt;#6228&lt;/a&gt;
                        Add promise constructor with allocator following the standard
                        c++11.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6230&quot;&gt;#6230&lt;/a&gt;
                        c++11 compliance: Follows the exception reporting mechanism
                        as defined in the c++11.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6266&quot;&gt;#6266&lt;/a&gt;
                        Breaking change: thread destructor should call terminate
                        if joinable.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6269&quot;&gt;#6269&lt;/a&gt;
                        Breaking change: thread move assignment should call terminate
                        if joinable.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6272&quot;&gt;#6272&lt;/a&gt;
                        c++11 compliance: Add thread::id hash specialization.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6273&quot;&gt;#6273&lt;/a&gt;
                        c++11 compliance: Add cv_status enum class and use it on
                        the conditions wait functions.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6231&quot;&gt;#6231&lt;/a&gt;
                        Add BasicLockable requirements in the documentation to follow
                        c++11.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6342&quot;&gt;#6342&lt;/a&gt;
                        c++11 compliance: Adapt the one_flag to the c++11 interface.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6671&quot;&gt;#6671&lt;/a&gt;
                        upgrade_lock: missing mutex and release functions.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6672&quot;&gt;#6672&lt;/a&gt;
                        upgrade_lock:: missing constructors from time related types.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6675&quot;&gt;#6675&lt;/a&gt;
                        upgrade_lock:: missing non-member swap.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Added missing packaged_task::result_type and packaged_task::
                        constructor with allocator.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Added packaged_task::reset()
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fixed Bugs:
                  &lt;ul&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2575&quot;&gt;#2575&lt;/a&gt;
                        Bug- Boost 1.36.0 on Itanium platform.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4345&quot;&gt;#4345&lt;/a&gt;
                        thread::id and joining problem with cascade of threads.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4921&quot;&gt;#4921&lt;/a&gt;
                        BOOST_THREAD_USE_DLL and BOOST_THREAD_USE_LIB are crucial
                        and need to be documented.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5013&quot;&gt;#5013&lt;/a&gt;
                        documentation: boost::thread: pthreas_exit causes terminate().
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5173&quot;&gt;#5173&lt;/a&gt;
                        boost::this_thread::get_id is very slow.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5351&quot;&gt;#5351&lt;/a&gt;
                        interrupt a future get boost::unknown_exception.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5516&quot;&gt;#5516&lt;/a&gt;
                        Upgrade lock is not acquired when previous upgrade lock releases
                        if another read lock is present.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5990&quot;&gt;#5990&lt;/a&gt;
                        shared_future&amp;lt;T&amp;gt;::get() has wrong return type.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6174&quot;&gt;#6174&lt;/a&gt;
                        packaged_task doesn't correctly handle moving results.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6222&quot;&gt;#6222&lt;/a&gt;
                        Compile error with SunStudio: unique_future move.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6673&quot;&gt;#6673&lt;/a&gt;
                        shared_lock: move assign doesn't works with c++11.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6674&quot;&gt;#6674&lt;/a&gt;
                        shared_mutex: try_lock_upgrade_until doesn't works.
                      &lt;/div&gt;
                    &lt;/li&gt;
                    &lt;li&gt;
                      &lt;div&gt;
                        Fix issue signaled on the ML with task_object(task_object
                        const&amp;amp;) in presence of task_object(task_object&amp;amp;&amp;amp;)
                      &lt;/div&gt;
                    &lt;/li&gt;
                  &lt;/ul&gt;
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix equality for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_multiset&lt;/span&gt;&lt;/code&gt;
                  and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_multimap&lt;/span&gt;&lt;/code&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Implement &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;reserve&lt;/span&gt;&lt;/code&gt;
                  (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6857&quot;&gt;#6857&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Avoid gcc's &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wfloat&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;equal&lt;/span&gt;&lt;/code&gt;
                  and &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wshadow&lt;/span&gt;&lt;/code&gt;
                  warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6190&quot;&gt;#6190&lt;/a&gt;,
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6771&quot;&gt;#6771&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix namespace issue with bcp (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6905&quot;&gt;#6905&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Fix Sun workarounds (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6784&quot;&gt;#6784&lt;/a&gt;).
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Some internal changes to bucket allocation.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  See the &lt;a href=&quot;http://www.boost.org/doc/html/unordered/changes.html#unordered.changes.boost_1_50_0&quot;&gt;change
                  log&lt;/a&gt; for full details.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Wave V2.3.2, see the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;
                  for details.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Remove very ugly &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;/code&gt;
                  hack with a slightly less ugly one.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Replace MPL assert with static assert since it's problematic in
                  C++11, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6846&quot;&gt;#6846&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div id=&quot;version_1_50_0.patches.compilers_tested&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        Boost's primary test compilers are:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            Linux:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Intel: 11.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  LLVM Clang 2.8
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            OS X:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Intel: 11.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 4.4.4
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x mode: 4.4.4
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Windows:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual C++ 8.0, 9.0, 10.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1, 4.7.0
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            FreeBSD:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC 4.2.1, 32 and 64 bit
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            QNX:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  QCC, C++0x mode: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
      &lt;p&gt;
        Boost's additional test compilers include:
      &lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;div&gt;
            Linux:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang from subversion
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.3, 4.6.2
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x mode: 4.3.4, 4.4.4, 4.5.3, 4.6.2
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  pgCC: 11.9
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Intel: 10.1, 11.1, 12.0, 12.1
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual Age 10.1
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            OS X:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Clang from subversion
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Intel 11.1, 12.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC: 4.4.4
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x mode: 4.4.4
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Windows:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual C++ 8.0, 10.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual C++ with STLport: 9.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Visual C++, Windows Mobile 5, with STLport: 9.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, mingw: 4.4.0, 4.4.7, 4.5.2, 4.5.4, 4.6.4, 4.7.0
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC, C++0x mode, mingw: 4.5.2
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            AIX:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  IBM XL C/C++ Enterprise Edition, V12.1.0.0
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            FreeBSD:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  GCC 4.2.1, 32 and 64 bit
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div&gt;
            Solaris:
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  Sun 5.10
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/div&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
    &lt;div id=&quot;version_1_50_0.patches.acknowledgements&quot;&gt;
      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
      &lt;p&gt;
        &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
        &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
        Vladimir Prus and Marshall Clow managed this release.
      &lt;/p&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.49.0</title><link>http://www.boost.org/users/history/version_1_49_0.html</link><guid>http://www.boost.org/users/history/version_1_49_0.html</guid><pubDate>Fri, 24 Feb 2012 16:20:32 -0500</pubDate><description>



  &lt;div id=&quot;version_1_49_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/heap/index.html&quot;&gt;Heap&lt;/a&gt;:&lt;/span&gt;
  Priority queue data
          structures, from Tim Blechmann.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_49_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a new class template &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_waitable_timer&lt;/span&gt;&lt;/code&gt;
                based around the C++11 clock type requirements. It may be used with
                the clocks from the C++11 &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                library facility or, if those are not available, Boost.Chrono. The
                typedefs &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;high_resolution_timer&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;steady_timer&lt;/span&gt;&lt;/code&gt; and
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;system_timer&lt;/span&gt;&lt;/code&gt; may
                be used to create timer objects for the standard clock types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;object_handle&lt;/span&gt;&lt;/code&gt;
                class for performing waits on Windows kernel objects. Thanks go to
                Boris Schaeling for contributing substantially to the development
                of this feature.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Linux, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; can return EAGAIN in certain circumstances.
                Remapped this to another error so that it doesn't look like a non-blocking
                operation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6048&quot;&gt;#6048&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a compile error on NetBSD (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6098&quot;&gt;#6098&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed deadlock on Mac OS X (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6275&quot;&gt;#6275&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a regression in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;buffered_write_stream&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6310&quot;&gt;#6310&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a non-paged pool &amp;quot;leak&amp;quot; on Windows when an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt; is repeatedly run without
                anything to do (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6321&quot;&gt;#6321&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reverted earlier change to allow some speculative operations to be
                performed without holding the lock, as it introduced a race condition
                in some multithreaded scenarios.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a bug where the second buffer in an array of two buffers may
                be ignored if the first buffer is empty.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug Fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6092&quot;&gt;#6092&lt;/a&gt;
                      Input from non integral durations makes the compiler fail.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6093&quot;&gt;#6093&lt;/a&gt;
                      [1/3]second fails as valid duration input.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6113&quot;&gt;#6113&lt;/a&gt;
                      duplicate symbol when BOOST_CHRONO_HEADER_ONLY is defined.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6243&quot;&gt;#6243&lt;/a&gt;
                      Sandia-pgi-11.9: more than one instance of overloaded function
                      &amp;quot;min&amp;quot; matches.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6257&quot;&gt;#6257&lt;/a&gt;
                      process_cpu_clock::now() on linux gives time_points 1/1000
                      times.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6499&quot;&gt;#6499&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6336&quot;&gt;#6336&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6335&quot;&gt;#6335&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6287&quot;&gt;#6287&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6205&quot;&gt;#6205&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4383&quot;&gt;#4383&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
                support for both C++11 and C++03 compilers through an internal &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_traits&lt;/span&gt;&lt;/code&gt; clone.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/filesystem/&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3714&quot;&gt;#3714&lt;/a&gt;,
                Added test cases and fixes for class path errors when assignment
                or append used self or portion of self as source.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4889&quot;&gt;#4889&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6320&quot;&gt;#6320&lt;/a&gt;,
                Locale codecvt_facet not thread safe on Windows. Move Windows, Mac
                OS X, locale and codecvt facet back to namespace scope. POSIX except
                OS X uses local static initialization (IE lazy) to ensure exceptions
                are catchable if environmental variables are misconfigured and to
                avoid use of locale(&amp;quot;&amp;quot;) if not actually used.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5652&quot;&gt;#5652&lt;/a&gt;,
                recursive_directory_iterator fails on cyclic symbolic links. Thanks
                to Daniel Aarno for the patch.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5653&quot;&gt;#5653&lt;/a&gt;,
                recursive_directory_iterator(error_code) can still throw filesystem_error.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5900&quot;&gt;#5900&lt;/a&gt;,
                directory_iterator access violation on Windows if error is thrown.
                Thanks to Andreas Eckleder for the patch.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5900&quot;&gt;#5900&lt;/a&gt;
                comment 2, a bug in director_iterator construction with error_code
                argument that caused increment to be called without the ec argument
                being passed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5989&quot;&gt;#5989&lt;/a&gt;
                by cleaning up test suite path_test.cpp code even though the ticket
                itself was not a defect, and clarifying docs; iteration over a path
                yields generic format.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5592&quot;&gt;#5592&lt;/a&gt;,
                Change Windows codecvt processing from CP_THREAD_ACP to CP_ACP.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Operations function fixes for PGI compiler, thanks to Noel Belcourt.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Relax permissions test to reflect reality, particularly on the Sandia
                test platforms.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/foreach/&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix for &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6131&quot;&gt;#6131&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Distance for multi-geometries ignored specified distance strategy.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      In difference for polygon/multi_polygon (reported 2011/10/24
                      on GGL-list).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Raise exception for calculation of distances of multi-geometrie(s)
                      where one of them is empty
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Multi DSV did not correctly use settings.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Self-intersections could sometimes be missed (introduced in
                      1.48).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Convex hull crashed on empty range (e.g. empty multi point).
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Solved tickets
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6028&quot;&gt;#6028&lt;/a&gt;
                      Documentation: closure.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6178&quot;&gt;#6178&lt;/a&gt;
                      Missing headerfile.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6021&quot;&gt;#6021&lt;/a&gt;
                      convex hull of multipoint.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Additional functionality
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Support for line/polygon intersections and differences
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Support for convert of segment/box of different point types
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Support for append for multi point
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Scalar functions (distance, area, length, perimeter) now throw
                      an empty_input_exception on empty input
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Updated support status
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Internal changes
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Updates in specializations/not_implemented for distance/convert/assign/area
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Move of wkt/dsv to io folder, making domains redundant
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Strategy concepts assigned to zero to avoid clang warnings
                      (patched by Vishnu)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5881&quot;&gt;#5881&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6033&quot;&gt;#6033&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6061&quot;&gt;#6061&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6137&quot;&gt;#6137&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6246&quot;&gt;#6246&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6239&quot;&gt;#6239&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6293&quot;&gt;#6293&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6306&quot;&gt;#6306&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6313&quot;&gt;#6313&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6371&quot;&gt;#6371&lt;/a&gt;,
                plus others not in Trac.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Re-enabled LEDA graph support (thanks to Jens Muller for the patch).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added documentation for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;edge_predecessor_recorder&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/icl/&quot;&gt;Icl&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed tickets &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6095&quot;&gt;#6095&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6210&quot;&gt;#6210&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added move semantics for constructors, assignment operators and binary
                operators.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6531&quot;&gt;#6531&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6412&quot;&gt;#6412&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6398&quot;&gt;#6398&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6340&quot;&gt;#6340&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6319&quot;&gt;#6319&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6287&quot;&gt;#6287&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6265&quot;&gt;#6265&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6233&quot;&gt;#6233&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6147&quot;&gt;#6147&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6134&quot;&gt;#6134&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6058&quot;&gt;#6058&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6054&quot;&gt;#6054&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5772&quot;&gt;#5772&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5738&quot;&gt;#5738&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5622&quot;&gt;#5622&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5552&quot;&gt;#5552&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5518&quot;&gt;#5518&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4655&quot;&gt;#4655&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4452&quot;&gt;#4452&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4383&quot;&gt;#4383&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4297&quot;&gt;#4297&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed timed functions in mutex implementations to fulfill POSIX requirements:
                &lt;em&gt;Under no circumstance shall the function fail with a timeout
                if the mutex can be locked immediately. The validity of the abs_timeout
                parameter need not be checked if the mutex can be locked immediately.&lt;/em&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6347&quot;&gt;#6347&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6223&quot;&gt;#6223&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6153&quot;&gt;#6153&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs and warnings: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6127&quot;&gt;#6127&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6132&quot;&gt;#6132&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6159&quot;&gt;#6159&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6182&quot;&gt;#6182&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6186&quot;&gt;#6186&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6193&quot;&gt;#6193&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6264&quot;&gt;#6264&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6290&quot;&gt;#6290&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6298&quot;&gt;#6298&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6400&quot;&gt;#6400&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better performance and less memory usage for boost::container::basic_string
                conversions.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/locale/&quot;&gt;Locale&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed incorrect use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;MultiByteToWideChar&lt;/span&gt;&lt;/code&gt;
                in detection of invalid input sequences.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6417&quot;&gt;#6417&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6183&quot;&gt;#6183&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6185&quot;&gt;#6185&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6395&quot;&gt;#6395&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6396&quot;&gt;#6396&lt;/a&gt;,
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_tree&quot;&gt;PropertyTree&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes for bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4840&quot;&gt;#4840&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5259&quot;&gt;#5259&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5281&quot;&gt;#5281&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5944&quot;&gt;#5944&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5757&quot;&gt;#5757&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5710&quot;&gt;#5710&lt;/a&gt;,
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5307&quot;&gt;#5307&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Force some functions to be inline, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5735&quot;&gt;#5735&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add user documentation for per-domain &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;as_expr&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;as_child&lt;/span&gt;&lt;/code&gt;; other
                doc tweaks.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix some buggy and over-complicated example programs.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add some missing copyright notices.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Spirit V2.5.2, see the '&lt;a href=&quot;http://www.boost.org/doc/libs/1_49_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_5_2.html&quot;&gt;What's
                New&lt;/a&gt;' section for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed Bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/2309&quot;&gt;#2309&lt;/a&gt;
                      Lack of g++ symbol visibility support in Boost.Thread.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/2639&quot;&gt;#2639&lt;/a&gt;
                      documentation should be extended(defer_lock, try_to_lock, ...).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3639&quot;&gt;#3639&lt;/a&gt;
                      Boost.Thread doesn't build with Sun-5.9 on Linux.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3762&quot;&gt;#3762&lt;/a&gt;
                      Thread can't be compiled with winscw (Codewarrior by Nokia).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3885&quot;&gt;#3885&lt;/a&gt;
                      document about mix usage of boost.thread and native thread
                      api.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3975&quot;&gt;#3975&lt;/a&gt;
                      Incorrect precondition for promise::set_wait_callback().
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4048&quot;&gt;#4048&lt;/a&gt;
                      thread::id formatting involves locale
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4315&quot;&gt;#4315&lt;/a&gt;
                      gcc 4.4 Warning: inline ... declared as dllimport: attribute
                      ignored.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4480&quot;&gt;#4480&lt;/a&gt;
                      OpenVMS patches for compiler issues workarounds.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4819&quot;&gt;#4819&lt;/a&gt;
                      boost.thread's documentation misprints.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5040&quot;&gt;#5040&lt;/a&gt;
                      future.hpp in boost::thread does not compile with /clr.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5423&quot;&gt;#5423&lt;/a&gt;
                      thread issues with C++0x.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5502&quot;&gt;#5502&lt;/a&gt;
                      race condition between shared_mutex timed_lock and lock_shared.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5594&quot;&gt;#5594&lt;/a&gt;
                      boost::shared_mutex not fully compatible with Windows CE.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5617&quot;&gt;#5617&lt;/a&gt;
                      boost::thread::id copy ctor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5739&quot;&gt;#5739&lt;/a&gt;
                      set-but-not-used warnings with gcc-4.6.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5826&quot;&gt;#5826&lt;/a&gt;
                      threads.cpp: resource leak on threads creation failure.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5839&quot;&gt;#5839&lt;/a&gt;
                      thread.cpp: ThreadProxy leaks on exceptions.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5859&quot;&gt;#5859&lt;/a&gt;
                      win32 shared_mutex constructor leaks on exceptions.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6100&quot;&gt;#6100&lt;/a&gt;
                      Compute hardware_concurrency() using get_nprocs() on GLIBC
                      systems.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6141&quot;&gt;#6141&lt;/a&gt;
                      Compilation error when boost.thread and boost.move are used
                      together.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6168&quot;&gt;#6168&lt;/a&gt;
                      recursive_mutex is using wrong config symbol (possible typo).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6175&quot;&gt;#6175&lt;/a&gt;
                      Compile error with SunStudio.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6200&quot;&gt;#6200&lt;/a&gt;
                      patch to have condition_variable and mutex error better handle
                      EINTR.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6207&quot;&gt;#6207&lt;/a&gt;
                      shared_lock swap compiler error on clang 3.0 c++11.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6208&quot;&gt;#6208&lt;/a&gt;
                      try_lock_wrapper swap compiler error on clang 3.0 c++11.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                On compilers without rvalue references, the containers are no longer
                movable by default, as move emulation was causing some odd quirks
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6167&quot;&gt;#6167&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6311&quot;&gt;#6311&lt;/a&gt;).
                Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_UNORDERED_USE_MOVE&lt;/span&gt;&lt;/code&gt;
                to make them movable - Boost.Move is still used for elements regardless.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix sequence point warning (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6370&quot;&gt;#6370&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better support for C++11 compilers using older standard libraries.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/uuid/&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6258&quot;&gt;#6258&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5325&quot;&gt;#5325&lt;/a&gt;
                (sha1 implementation handles messages as long as the specification)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                progress on &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6118&quot;&gt;#6118&lt;/a&gt;
                (there are fewer warnings)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Eliminate some unused variable warnings on gcc.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_49_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang 2.8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.5.2, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 11.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1, 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.2.1, 32 and 64 bit.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC, C++0x mode: 4.4.2, 4.6.1, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.2, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.3.4, 4.4.4, 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.9
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                PathScale: 4.0.8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age 10.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang from subversion
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode, mingw: 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw 64-bit: 4.4.7, 4.5.4, 4.6.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition, V11.1.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.2.1, 32 and 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun 5.10
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_49_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.48.0</title><link>http://www.boost.org/users/history/version_1_48_0.html</link><guid>http://www.boost.org/users/history/version_1_48_0.html</guid><pubDate>Tue, 15 Nov 2011 10:47:30 -0500</pubDate><description>&lt;x&gt;
  
  
  
  &lt;div id=&quot;version_1_48_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/index.html&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
  Standard
          library containers and extensions, from Ion Gaztañaga.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/locale/index.html&quot;&gt;Locale&lt;/a&gt;:&lt;/span&gt;
  Provide localization
          and Unicode handling tools for C++, from Artyom Beilis.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/html/move.html&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
  Portable move semantics
          for C++03 and C++11 compilers, from Ion Gaztañaga.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_48_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented various performance improvements, including:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Using thread-local operation queues in single-threaded use
                      cases (i.e. when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;concurrency_hint&lt;/span&gt;&lt;/code&gt;
                      is 1) to eliminate a lock/unlock pair.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Allowing some &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;
                      speculative operations to be performed without holding the
                      lock.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Improving locality of reference by performing an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;'s I/O operation
                      immediately before the corresponding handler is called. Also
                      improves scalability across CPUs.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Specialising asynchronous read and write operations for buffer
                      sequences that are arrays (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;/code&gt;
                      or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;/code&gt;) of exactly two buffers.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compile error in regex overload of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_until&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5688&quot;&gt;#5688&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed Windows-specific compile error by explicitly specifying the
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                function from the global namespace (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5722&quot;&gt;#5722&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;deadline_timer&lt;/span&gt;&lt;/code&gt;
                implementation to not read clock unless the timer heap is non-empty.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed SSL buffer sizes to be large enough to hold a complete TLS
                record (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5854&quot;&gt;#5854&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed synchronous &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
                operations so that they obey the user's non-blocking setting (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5756&quot;&gt;#5756&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to set &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fd_set&lt;/span&gt;&lt;/code&gt;
                size at runtime when using Windows.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disabled MSVC warning due to const qualifier being applied to function
                type.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed crash that occurs when using Intel C++ compiler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5763&quot;&gt;#5763&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed OpenSSL initialisation to support all available algorithms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed SSL error mapping when session is gracefully shut down.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added some latency test programs.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clarified that a read operation ends when the buffer is full (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5999&quot;&gt;#5999&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed exception safety issue in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;
                initialisation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6006&quot;&gt;#6006&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Made number of strand implementations configurable via &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_STRAND_IMPLEMENTATIONS&lt;/span&gt;&lt;/code&gt;
                macro.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_ENABLE_SEQUENTIAL_STRAND_ALLOCATION&lt;/span&gt;&lt;/code&gt;
                flag which switches strand allocation to use a round-robin approach
                rather than hashing.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed potential strand starvation issue that can occur when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                is used.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/index.html&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5979&quot;&gt;#5979&lt;/a&gt;
                Added chrono rounding utilities as defined by Howard Hinnant &lt;a href=&quot;http://home.roadrunner.com/~hinnant/duration_io/chrono_util.html&quot;&gt;here&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5978&quot;&gt;#5978&lt;/a&gt;
                Add BOOST_CHRONO_HAS_PROCESS_CLOCKS to know if process clocks are
                available.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5998&quot;&gt;#5998&lt;/a&gt;
                Make possible to disable hybrid error handling.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5906&quot;&gt;#5906&lt;/a&gt;
                Take in account the constexpr as defined in the standard.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5907&quot;&gt;#5907&lt;/a&gt;
                Take in account noexcept for compilers supporting it.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some bugs.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/doc/html/chrono/appendices.html#chrono.appendices.history&quot;&gt;History&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/index.html&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_DECLTYPE_N3276&lt;/span&gt;&lt;/code&gt;
                config macro. (See &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf&quot;&gt;N3276&lt;/a&gt;.)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;single_view&lt;/span&gt;&lt;/code&gt;
                a random access fusion sequence.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove bogus compile-time asserts from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;distance&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Cleaner implementation of segmented Fusion.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Robustness issue, in some circumstances the union failed to
                      output. Fixed.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Robustness issue, in some circumstances the calculated intersection
                      point was outside the segment. Fixed.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Concept issue, cartesian intersect didn't understand segments
                      other than the provided one. Fixed.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Sometimes self-intersections in linestrings were missed. Fixed.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The fusion coordinate system was not registered correctly.
                      Fixed.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Solved tickets:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5726&quot;&gt;#5726&lt;/a&gt;
                      (Segment intersection algorithm still assumes 'first', 'second'
                      members)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5744&quot;&gt;#5744&lt;/a&gt;
                      (mistake fusion adapt example)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5748&quot;&gt;#5748&lt;/a&gt;
                      (need include &amp;lt;boost/foreach.hpp&amp;gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5954&quot;&gt;#5954&lt;/a&gt;
                      (distance_pythagoras skips sqrt() step)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improvements on algorithms:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Checking self-intersections is now not done automatically,
                      this can blast performance.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Besides that, checking self-intersections is made faster.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Intersections now avoid outputting duplicate points. So they
                      output the minimal set.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Additional algorithms:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      covered_by: within is defined as &amp;quot;within, not on boundary&amp;quot;.
                      covered_by is &amp;quot;within or on boundary&amp;quot;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Additional functionality:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      within: strategies can now be specified for within&amp;lt;point,
                      box&amp;gt; and within&amp;lt;box, box&amp;gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      convert: a much broader range of conversions is supported
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      assign: idem, (currently partly) synonym for convert (but reversed
                      arguments)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Additional coordinate types:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Basic support for Boost.Rational
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5185&quot;&gt;#5185&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5506&quot;&gt;#5506&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5813&quot;&gt;#5813&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5919&quot;&gt;#5919&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various other bug fixes not in Trac.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed edge_descriptor type for reverse_graph to a new data type
                to avoid ambiguities with the edge_descriptor of the underlying graph.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2796&quot;&gt;#2796&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4031&quot;&gt;#4031&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4251&quot;&gt;#4251&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4452&quot;&gt;#4452&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4895&quot;&gt;#4895&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5077&quot;&gt;#5077&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5120&quot;&gt;#5120&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5123&quot;&gt;#5123&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5230&quot;&gt;#5230&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5197&quot;&gt;#5197&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5287&quot;&gt;#5287&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5294&quot;&gt;#5294&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5306&quot;&gt;#5306&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5308&quot;&gt;#5308&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5392&quot;&gt;#5392&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5409&quot;&gt;#5409&lt;/a&gt;,
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support to customize offset_ptr and allow creating custom managed
                segments that might be shared between 32 and 64 bit processes.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Shared memory in windows has again filesystem lifetime: kernel bootstamp
                and WMI use to get a reliable timestamp was causing a lot of trouble.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4797&quot;&gt;#4797&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5165&quot;&gt;#5165&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5183&quot;&gt;#5183&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5191&quot;&gt;#5191&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added code to work with Inf and NaN values on any platform (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5689&quot;&gt;#5689&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New Quickbook documentation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5723&quot;&gt;#5723&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better performance and less memory usage for many combinations of
                Source and Target types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better performance for C locale.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new series evaluation methods to the cyclic Bessel I, J, K
                and Y functions. Also taken great care to avoid spurious over and
                underflow of these functions. Fixes issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5560&quot;&gt;#5560&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added an example of using Inverse Chi-Squared distribution for Bayesian
                statistics, provided by Thomas Mang.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added tests to use improved version of lexical_cast which handles
                C99 nonfinites without using global facets.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Corrected wrong out-of-bound uniform distribution CDF complement
                values &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5733&quot;&gt;#5733&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled long double support on OpenBSD (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6014&quot;&gt;#6014&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed nextafter and related functions to behave in the same way
                as other implementations - so that nextafter(+INF, 0) is a finite
                value (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5832&quot;&gt;#5832&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed tuple include configuration to fix issue when using in conjunction
                with Boost.Tr1 (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5934&quot;&gt;#5934&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed class eps_tolerance to behave correctly when both ends of
                the range are zero (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6001&quot;&gt;#6001&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed missing include guards on prime.hpp (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5927&quot;&gt;#5927&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed unused/undocumented constants from constants.hpp (issue
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5982&quot;&gt;#5982&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed missing std:: prefix in nonfinite_num_facets.hpp (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5914&quot;&gt;#5914&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minor patches for Cray compiler compatibility.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;MSM&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                eUML: added easier event reprocessing: process(event_) and reprocess()
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Rewrite of internal transition tables. There were a few bugs (failing
                recursivity in internal transition tables of sub-sub machines) and
                a missing feature (unused internal transition table of the main state
                machine).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfixes
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Reverted favor_compile_time policy to Boost 1.46 state
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      none event now is convertible from any other event
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      eUML and pseudo exit states
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed not working Flag_AND
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed rare bugs causing multiple processing of the same event
                      in a submachine whose transition table contains this event
                      and a base event of it.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      gcc warnings about unused variables
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Breaking change: the new internal transition table feature causes
                a minor breaking change. In a submachine, the &amp;quot;Fsm&amp;quot; template
                parameter for guards / actions of an internal table declared using
                internal_transition_table now is the submachine, not the higher-level
                state machine. Internal transitions declared using internal rows
                in the higher-level state machine keep their behavior (the &amp;quot;Fsm&amp;quot;
                parameter is the higher-level state machine). To sum up, the internal
                transition &amp;quot;Fsm&amp;quot; parameter is the closest state machine
                containing this transition.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/conversion/index.html&quot;&gt;Numeric.Conversion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added numeric_cast_traits; see '&lt;a href=&quot;http://www.boost.org/doc/libs/1_48_0/libs/numeric/conversion/doc/html/boost_numericconversion/type_requirements_and_user_defined_types_support.html#boost_numericconversion.type_requirements_and_user_defined_types_support.udts_with_numeric_cast&quot;&gt;numeric_cast_traits&lt;/a&gt;'
                for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Breaking Change:&lt;/em&gt; Reduce numbers
                of operator overloads by using rvalue references on compilers that
                support them. Any user code that defines additional operator overloads
                on Proto expressions could potentially be rendered ambiguous by this
                change. The solution is to use a grammar to disable Proto's operators
                that are made ambiguous by any user-defined operators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Move definitions of Proto tag types into an ADL-blocking namespace.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add second template parameter to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;siwtch_&lt;/span&gt;&lt;/code&gt;
                to control dispatching to cases.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Allow dependent domains to be specified with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_EXTENDS&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_BASIC_EXTENDS&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/698&quot;&gt;#698&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5835&quot;&gt;#5835&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5958&quot;&gt;#5958&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5736&quot;&gt;#5736&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Spirit V2.5.1, see the '&lt;a href=&quot;http://www.boost.org/doc/libs/1_48_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_5_1.html&quot;&gt;What's
                New&lt;/a&gt;' section for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_traits/&quot;&gt;TypeTraits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Extension to support &lt;a href=&quot;http://www.boost.org/libs/type_traits/doc/html/boost_typetraits/category/value_traits/operators.html&quot;&gt;operator
                detection&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved support for the C++11 standard - breaking change to equality
                and emplace.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Use Boost.Move to implement move semantics.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/doc/html/unordered/changes.html#unordered.changes.boost_1_48_0___major_update&quot;&gt;change
                log&lt;/a&gt; for full details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_48_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang 2.8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.5.1, 4.5.2, 4.6
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel 11.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel 11.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.2.1, 32 and 64 bit.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC 4.4.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC, C++0x mode: 4.4.2, 4.6.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang from subversion, with libc++ and GNU libstdc++
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang 2.8 x
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.4, 4.5.2, 4.5.4, 4.6.1, 4.6.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.3.4, 4.4.3, 4.4.4, 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.2 x
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                PathScale: 4.0.8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Age 10.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang from subversion, with libc++ and GNU libstdc++.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel 11.1.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 4.4.4.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.4.4.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 8.0, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0, 4.4.7, 4.5.2, 4.5.4, 4.6.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode, mingw: 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw 64-bit: 4.7.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition, V11.1.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.2.1, 32 and 64 bit.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun 5.10
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_48_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/x&gt;</description></item><item><title>Version 1.47.0</title><link>http://www.boost.org/users/history/version_1_47_0.html</link><pubDate>Mon, 11 Jul 2011 18:19:33 -0400</pubDate><boostbook:purpose>
      New Libraries: Chrono, Geometry, Phoenix and Ratio. Updated Libraries: Accumulators,
      Asio, Config, DateTime, Dynamic Bitset, Foreach, Function, Function Types,
      Graph, Iostreams, Iterator, Lexical Cast, Logic, Math, Meta State Machine,
      MultiIndex, Proto, Random, Range, Spirit, Tokenizer, Utility, Uuid, Wave
    </boostbook:purpose><boostbook:downlaod>http://sourceforge.net/projects/boost/files/boost/1.47.0/</boostbook:downlaod><description>
  
  
  
  &lt;div id=&quot;version_1_47_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/chrono/index.html&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
  Useful time
          utilities, from Vicente J. Botet Escribá.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/geometry/index.html&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
  Geometry
          Library, from Barend Gehrels, Bruno Lalande and Mateusz Loskot.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/phoenix/index.html&quot;&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
  Define small
          unnamed function objects at the actual call site, and more, from Joel de
          Guzman, Dan Marsden and Thomas Heller.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/ratio/index.html&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
  Compile time rational
          arithmetic, from Vicente J. Botet Escribá.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_47_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New statistical accumulators: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sum_kahan&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sum_of_weights_kahan&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sum_of_variates_kahan&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Many new features and improvements:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Signal handling.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      A debugging aid for asynchronous programs.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Timeouts on socket iostreams.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Composed connect operations.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Rewritten SSL implementation.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      C++0x move support.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Compatibility with POSIX &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      ... and much more. See the &lt;a href=&quot;/doc/libs/1_47_0/doc/html/boost_asio/history.html&quot;&gt;Revision
                      History&lt;/a&gt; in the Boost.Asio documentation for more details.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Tickets addressed: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2879&quot;&gt;#2879&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3238&quot;&gt;#3238&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3297&quot;&gt;#3297&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3307&quot;&gt;#3307&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3702&quot;&gt;#3702&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3741&quot;&gt;#3741&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3900&quot;&gt;#3900&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3905&quot;&gt;#3905&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3939&quot;&gt;#3939&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3958&quot;&gt;#3958&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4162&quot;&gt;#4162&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4971&quot;&gt;#4971&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5124&quot;&gt;#5124&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5128&quot;&gt;#5128&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5418&quot;&gt;#5418&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5453&quot;&gt;#5453&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1988&quot;&gt;#1988&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/index.html&quot;&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4920&quot;&gt;#4920&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3651&quot;&gt;#3651&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4845&quot;&gt;#4845&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4475&quot;&gt;#4475&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4952&quot;&gt;#4952&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5345&quot;&gt;#5345&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5250&quot;&gt;#5250&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4798&quot;&gt;#4798&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4754&quot;&gt;#4754&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4411&quot;&gt;#4411&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5126&quot;&gt;#5126&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4780&quot;&gt;#4780&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2475&quot;&gt;#2475&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1674&quot;&gt;#1674&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/dynamic_bitset/index.html&quot;&gt;Dynamic Bitset&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5439&quot;&gt;#5439&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Use rvalue refs on supporting compilers for const rvalue detection.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3410&quot;&gt;#3410&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3618&quot;&gt;#3618&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3912&quot;&gt;#3912&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4073&quot;&gt;#4073&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4325&quot;&gt;#4325&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4717&quot;&gt;#4717&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4765&quot;&gt;#4765&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function_types/index.html&quot;&gt;Function Types&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1653&quot;&gt;#1653&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3162&quot;&gt;#3162&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove deprecated function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;kolmogorov_max_flow&lt;/span&gt;&lt;/code&gt;,
                use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boykov_kolmogorov_max_flow&lt;/span&gt;&lt;/code&gt;
                instead.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;is_same&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; header since its functionality
                is in Boost.Type_Traits.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support filesystem v3 paths (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4485&quot;&gt;#4485&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix a memory leak in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;chain&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4922&quot;&gt;#4922&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iterator/index.html&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;function_input_iterator&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2893&quot;&gt;#2893&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1427&quot;&gt;#1427&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1517&quot;&gt;#1517&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3434&quot;&gt;#3434&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better performance and less memory usage for many combinations of
                Source and Target types (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5564&quot;&gt;#5564&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5417&quot;&gt;#5417&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4397&quot;&gt;#4397&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5350&quot;&gt;#5350&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5576&quot;&gt;#5576&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Documentation updated (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5576&quot;&gt;#5576&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5494&quot;&gt;#5494&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/logic/index.html&quot;&gt;Logic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3093&quot;&gt;#3093&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3600&quot;&gt;#3600&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added changesign function to sign.hpp to facilitate addition of nonfinite
                facets.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Addition of nonfinite facets from Johan Rade, with tests, examples
                of use for C99 format infinity and NaN, and documentation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added tests and documentation of changesign from Johan Rade.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/msm/index.html&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a &lt;a href=&quot;/doc/libs/1_47_0/libs/msm/doc/HTML/ch03s05.html#backend-start&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
                method in the back-end.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added partial support for &lt;a href=&quot;/doc/libs/1_47_0/libs/msm/doc/HTML/ch03s04.html#eUML-phoenix&quot;&gt;Boost.Phoenix
                functors in eUML&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the possibility to &lt;a href=&quot;/doc/libs/1_47_0/libs/msm/doc/HTML/ch03s05.html#backend-state-switch&quot;&gt;choose
                when state switching occurs&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5117&quot;&gt;#5117&lt;/a&gt;,
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5253&quot;&gt;#5253&lt;/a&gt;,
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5533&quot;&gt;#5533&lt;/a&gt;,
                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5573&quot;&gt;#5573&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      gcc warnings about unused variables.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      better implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;favor_compile_time&lt;/span&gt;&lt;/code&gt;
                      back-end policy.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      bug with eUML and state construction.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      incorrect eUML event and state macros.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      incorrect event type passed to a direct entry state's on_entry
                      action.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      more examples.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/index.html&quot;&gt;MultiIndex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an ADL problem in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_compare&lt;/span&gt;&lt;/code&gt;
                related with Boost.Ref.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance fixes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Pre-preprocessed for better compile times.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Default preprocessor limits raised:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Max expression arity (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_MAX_ARITY&lt;/span&gt;&lt;/code&gt;)
                      bumped from 5 to 10.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Max function call arity (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_MAX_FUNCTION_CALL_ARITY&lt;/span&gt;&lt;/code&gt;)
                      bumped from 5 to 10.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Max logical operator arity (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_MAX_LOGICAL_ARITY&lt;/span&gt;&lt;/code&gt;)
                      bumped from 8 to 10.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better integration of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;basic_expr&lt;/span&gt;&lt;/code&gt;
                to avoid accidental needless instantiations of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;expr&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Synchronized with the new standard.
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Many new distributions added: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;chi_squared_distribution&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;negative_binomial_distribution&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fisher_f_distribution&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;student_t_distribution&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;weibull_distribution&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;extreme_value_distribution&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;discrete_distribution&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;piecewise_constant_distribution&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;piecewise_liear_distribution&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Renamed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;uniform_int&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;uniform_real&lt;/span&gt;&lt;/code&gt;
                      to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;uniform_int_distribution&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;uniform_real_distribution&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added members to all distributions: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;param_type&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;param&lt;/span&gt;&lt;/code&gt;, stream
                      operators, comparison operators, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;min&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;max&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Allow distributions to be used directly with generators without
                      use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;variate_generator&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Changed the meaning of the parameters of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometric_distribution&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lognormal_distribution&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a second parameter to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;gamma_distribution&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;seed_seq&lt;/span&gt;&lt;/code&gt;
                      and added the corresponding constructors and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;seed&lt;/span&gt;&lt;/code&gt; overloads the generators.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generate_canonical&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Renamed the engine tempates. e.g. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mersenne_twister&lt;/span&gt;&lt;/code&gt;
                      becomes &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mersenne_twister_engine&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      New engine adapter &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;independent_bits_engine&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added new predefined engine typedefs: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mt19937_64&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ranlux&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;knuth_b&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Updated seeding algorithms.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;discard&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Use unsigned types instead of signed types in all the predefined
                      engines.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;linear_congruential_engine&lt;/span&gt;&lt;/code&gt;
                      could assert because the modular arithmetic was not implemented
                      in all cases. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shuffle_output&lt;/span&gt;&lt;/code&gt;,
                      now called &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shuffle_order_engine&lt;/span&gt;&lt;/code&gt;,
                      could cause integer overflow. These cases were not triggered
                      by any predefined engines.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;uniform_small_int&lt;/span&gt;&lt;/code&gt;
                      now actually behaves as documented.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New efficient algorithms for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;binomial_distribution&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;poisson_distribution&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Moved all features into &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt;
                &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;random&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Backwards compatibility issues:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      The seeding algorithms have changed. This was unavoidable for
                      compatibility with the standard. Not to mention that some of
                      the existing algorithms were weird and inconsistent.
                      &lt;ul&gt;
                        &lt;li&gt;
                          &lt;div&gt;
                            Seeding with an integer: The behaviour should be unchanged
                            for most generators except &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lagged_fibonacci&lt;/span&gt;&lt;/code&gt;
                            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;subtract_with_carry&lt;/span&gt;&lt;/code&gt;
                            (and thus &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ranlux&lt;/span&gt;&lt;/code&gt;).
                          &lt;/div&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                          &lt;div&gt;
                            Seeding a generator with another generator: This has
                            been enabled by making all all generators models of
                            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SeedSeq&lt;/span&gt;&lt;/code&gt;.
                            Therefore, if you seed a Boost.Random generator with
                            a non Boost.Random generator, your code will no longer
                            compile. The algorithm has changed, so code using this
                            seeding method will yield different values.
                          &lt;/div&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                          &lt;div&gt;
                            Seeding a generator from a pair of iterators: This implicitly
                            assumed that the elements were 32-bit integers in some
                            places, but not everywhere. I've added this requirement
                            everywhere and updated the algorithms accordingly. The
                            behaviour of generators with a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_type&lt;/span&gt;&lt;/code&gt;
                            no more than 32 bits should be unchanged.
                          &lt;/div&gt;
                        &lt;/li&gt;
                      &lt;/ul&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Renaming:
                      &lt;ul&gt;
                        &lt;li&gt;
                          &lt;div&gt;
                            Whenever a class was renamed, there is a wrapper with
                            the old name. There are also using declarations in namespace
                            boost for everything that was moved.
                          &lt;/div&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                          &lt;div&gt;
                            The names of a few accessors in the distributions changed.
                            Both the old and the new names are allowed.
                          &lt;/div&gt;
                        &lt;/li&gt;
                      &lt;/ul&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometric_distribution&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lognormal_distribution&lt;/span&gt;&lt;/code&gt;:
                      The behaviour is different at runtime. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;geometric_distribution&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lognormal_distribution&lt;/span&gt;&lt;/code&gt; provide
                      the old behaviour, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;geometric_distribution&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lognormal_distribution&lt;/span&gt;&lt;/code&gt; provide
                      the new behaviour.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Streaming: gamma_distribution has a new parameter, thus text
                      saved with the old version will not readable by the new version.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;variate_generator&lt;/span&gt;&lt;/code&gt;
                      is now a simple pass through wrapper. Code that assumes that
                      it will adjust the generator's result type to match the distribution
                      will no longer work. This is not an issue with any of the distributions
                      provided by Boost.Random.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Return types: The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;result_types&lt;/span&gt;&lt;/code&gt;
                      of some generators have changed slightly. Some signed types
                      have changed to unsigned to match the standard.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;has_fixed_range&lt;/span&gt;&lt;/code&gt;:
                      This is now always false, as it doesn't appear to be very useful
                      and is excessively cumbersome. Anything that was accessing
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;const_min&lt;/span&gt;&lt;/code&gt; and
                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;const_max&lt;/span&gt;&lt;/code&gt; without
                      first checking &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;has_fixed_range&lt;/span&gt;&lt;/code&gt;
                      was incorrect to begin with.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/range/index.html&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed the end position &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;irange&lt;/span&gt;&lt;/code&gt;
                when step size is greater than 1 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5544&quot;&gt;#5544&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Spirit V2.5, see the '&lt;a href=&quot;/doc/libs/1_47_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_5.html&quot;&gt;What's
                New&lt;/a&gt;' section for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tokenizer/index.html&quot;&gt;Tokenizer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4649&quot;&gt;#4649&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4432&quot;&gt;#4432&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/index.html&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed tickets: (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5570&quot;&gt;#5570&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4601&quot;&gt;#4601&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4991&quot;&gt;#4991&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5145&quot;&gt;#5145&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5235&quot;&gt;#5235&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Wave V2.3.0, see the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;
                for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_47_0.build_system&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build System&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          The official name of Boost.Build executable was changed to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;b2&lt;/span&gt;&lt;/code&gt;. The bootstrap scripts create a copy
          with the old name &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bjam&lt;/span&gt;&lt;/code&gt;
          to prevent third-party build scripts from failing.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_47_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;BoostBook&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Handle doxygen tags: &lt;code&gt;&lt;span class=&quot;special&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;see&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tparam&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ref&lt;/span&gt;&lt;/code&gt; (for classes
                only).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support note for classes as well as functions.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Generate consistent ids for headings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved unicode support for windows.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Warn about windows paths, as they aren't portable.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reverse deprecation of &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support date ranges and comma seperated clauses in copyright attributes.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved delimeter checking for simple markup (e.g. &lt;code&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Pass-thru comments in code snippets.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;__FILENAME__&lt;/code&gt; macro now generates relative paths.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Allow quickbook escapes inside comments in syntax highlighted code.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_47_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang 2.8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.6, 4.2.4, 4.3.4, 4.3.5, 4.4.1, 4.4.3, 4.4.5, 4.5.1, 4.5.2,
                4.6.0, 4.6.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel 12.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang 2.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel 11.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.2.1, 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 7.1, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.4.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.2.1, 64 bit
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          QNX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                QCC
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang from subversion, with GNU libstdc++.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                LLVM Clang 2.8
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.6, 4.2.4, 4.3.4, 4.3.5, 4.4.3, 4.4.5, 4.5.1, 4.5.2, 4.6.0,
                4.6.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                pgCC: 11.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel: 10.1, 11.0, 11.1, 12.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                PathScale: 3.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang from subversion, with GNU libstdc++.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel 11.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode: 4.4.4
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 7.1, 9.0, 10.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++, Windows Mobile 5, with STLport: 9.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, mingw: 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x mode, mingw: 4.5.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition, V11.1.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_47_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.46.1</title><pubDate>Sat, 12 Mar 2011 10:45:53 -0500</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Bug fixes: Asio, Fusion, Graph, Icl, Math, Polygon, Proto, Property Tree, Signals2,
      TR1, Unordered.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.46.1/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_46_1.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EV_ONESHOT&lt;/span&gt;&lt;/code&gt; seems to
              cause problems on some versions of Mac OS X, with the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt; destructor getting stuck
              inside the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
              system call. Changed the kqueue backend to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EV_CLEAR&lt;/span&gt;&lt;/code&gt;
              instead (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5021&quot;&gt;#5021&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed compile failures with some versions of &lt;tt&gt;g++&lt;/tt&gt;
              due to the use of anonymous enums (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4883&quot;&gt;#4883&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a bug on kqueue-based platforms, where some system calls that
              repeatedly fail with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EWOULDBLOCK&lt;/span&gt;&lt;/code&gt;
              are not correctly re-registered with kqueue.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;streambuf&lt;/span&gt;&lt;/code&gt; to ensure that its internal
              pointers are updated correctly after the data has been modified using
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;streambuf&lt;/span&gt;&lt;/code&gt; member functions.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a bug that prevented the linger socket option from working on
              platforms other than Windows.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;disable_if&lt;/span&gt;&lt;/code&gt; for
              Visual C++ 7.1/8.0
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix for STLPort (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5217&quot;&gt;#5217&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              PGI large file support
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Bug fixes, including fixes for: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5181&quot;&gt;#5181&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5180&quot;&gt;#5180&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5199&quot;&gt;#5199&lt;/a&gt;
              and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5175&quot;&gt;#5175&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/icl/&quot;&gt;Icl&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intersects for interval_maps and segment_type/element_type (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5207&quot;&gt;#5207&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed some ambiguous calls to functions in boost and std namespaces.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Other bug fixes, and documentation fixes.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Several minor bug fixes.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Disabled 45-degree booleans optimization.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;display_expr&lt;/span&gt;&lt;/code&gt; copyable
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5096&quot;&gt;#5096&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix const correctness problem in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pass_through&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_tree/&quot;&gt;Property Tree&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix compile error in JSON parser.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/signals2/&quot;&gt;Signals2&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix unused parameter warning.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tr1/&quot;&gt;TR1&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Allow specialization of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tr1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hash&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Improved support for Pathscale and Sun compilers.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Add missing copy constructors and assignment operators when using rvalue
              references (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5119&quot;&gt;#5119&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_46_1.other_changes&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Other changes&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Update getting started guide to reflect changes to boost build.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          In quickbook, workaround optimization bug in g++ 4.4.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_46_1.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.1, 4.4.3, 4.4.5, 4.5.2
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel: 10.1, 11.0, 11.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Clang: 2.8
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Pathscale: 3.2
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.0.1, 4.2.1, 4.4
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.4.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel: 11.1
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++: 7.1, 8.0, 9.0 and 10.0.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, mingw: 4.4.0.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.2.1, 64 bit.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.4, 4.4.5, 4.5.2
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              pgCC: 11.2
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel: 10.1, 11.0, 11.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              PathScale: 3.2, 4.0.8
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual Age C++: 10.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Clang from subversion
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel C++ Compiler: 10.1, 11.0, 11.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.0.1, 4.2.1, 4.4.4
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.4.4
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Clang from subversion, with GNU libstdc++, libc++ and libc++ in C++0x
              mode.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++: 7.1, 9.0, 10.0
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++ with STLport: 9.0
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++, Windows Mobile 5, with STLport: 9.0
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, mingw: 4.5.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, mingw, C++0x mode: 4.5.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Borland: 6.1.3 (2009), 6.2.1 (2010)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              IBM XL C/C++ Enterprise Edition, V11.1.0.0
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Sun C++: 5.10
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_46_1.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.46.0</title><pubDate>Mon, 21 Feb 2011 15:36:13 -0500</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Icl. Updated Libraries: Array, Asio, Bind, Concept Check, Filesystem,
      Fusion, Hash, Iostreams, Iterator, Math, Meta State Machine, Optional, Pool,
      Program Options, Proto, Signals, Spirit, Tokenizer, Unordered, Wave. Updated
      Tools: Boostbook, Inspect, Quickbook.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.46.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_46_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/icl/index.html&quot;&gt;Icl&lt;/a&gt;:&lt;/span&gt;
  Interval Container
          Library, interval sets and maps and aggregation of associated values, from
          Joachim Faulhaber.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_46_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added support for cbegin/cend (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4761&quot;&gt;#4761&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a problem with the Sun compiler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4757&quot;&gt;#4757&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed an integer overflow problem that occurs when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;address_v4&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;broadcast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; is used on 64-bit platforms.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a problem on older Linux kernels (where epoll is used without
              timerfd support) that prevents timely delivery of deadline_timer handlers,
              after the program has been running for some time (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5045&quot;&gt;#5045&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/bind/index.html&quot;&gt;Bind&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;make_adaptable&lt;/span&gt;&lt;/code&gt; now
              documented (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4532&quot;&gt;#4532&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/concept_check/index.html&quot;&gt;Concept Check&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              fixed warnings with self-assignment (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4918&quot;&gt;#4918&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/index.html&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Version 3 of the library is now the default.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              IBM vacpp: Workaround for compiler bug affecting &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;iterator_facade&lt;/span&gt;&lt;/code&gt;.
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4912&quot;&gt;#4912&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Verify, clarify, document that &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
              can be used to specify &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FILESYSTEM_VERSION&lt;/span&gt;&lt;/code&gt;.
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4891&quot;&gt;#4891&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Replaced C-style &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;assert&lt;/span&gt;&lt;/code&gt;
              with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASSERT&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Undeprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unique_path&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;. Instead, add a note mentioning the
              workaround for lack of thread safety and possible change to cwd. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unique_path&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
              is just too convenient to deprecate!
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Cleared several GCC warnings.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Changed V2 code to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THROW_EXCEPTION&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Windows: Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; to report non-symlink reparse point
              correctly.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;symlink_option&lt;/span&gt;&lt;/code&gt;
              to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;,
              allowing control over recursion into directory symlinks. Note that
              the default is changed to not recurse into directory symlinks.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Reference documentation cleanup, including fixing missing and broken
              links, and adding missing functions.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Miscellaneous implementation code cleanup.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              vector copy constructor now copies sequence members in the same order
              on different platforms (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2823&quot;&gt;#2823&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed Graphviz output to work on Visual C++ 7.1.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Replaced assert with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASSERT&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Changed to Boost.Filesystem v3.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed the following bugs from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1021&quot;&gt;#1021&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4556&quot;&gt;#4556&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4631&quot;&gt;#4631&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4642&quot;&gt;#4642&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4715&quot;&gt;#4715&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4731&quot;&gt;#4731&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4737&quot;&gt;#4737&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4753&quot;&gt;#4753&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4758&quot;&gt;#4758&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4793&quot;&gt;#4793&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4843&quot;&gt;#4843&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4851&quot;&gt;#4851&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4852&quot;&gt;#4852&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4887&quot;&gt;#4887&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4914&quot;&gt;#4914&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4966&quot;&gt;#4966&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed various bugs not in Trac.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;type_index&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4756&quot;&gt;#4756&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Avoid &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wconversion&lt;/span&gt;&lt;/code&gt;
              warnings.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASSERT&lt;/span&gt;&lt;/code&gt; instead
              of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;assert&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed flush regression (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4590&quot;&gt;#4590&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iterator/index.html&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              fixed problem with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;implicit_cast&lt;/span&gt;&lt;/code&gt;
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3645&quot;&gt;#3645&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added Wald, Inverse Gaussian and geometric distributions.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added information about configuration macros.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added support for mpreal as a real-numered type.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/msm/index.html&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;a href=&quot;/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-compile-time-analysis&quot;&gt;Compile-time
              state machine analysis&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;a href=&quot;/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-boost-parameter&quot;&gt;Boost.Parameter
              interface definition for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;msm&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;state_machine&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; template arguments&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;a href=&quot;/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-queues&quot;&gt;Possibility
              to provide a container for the event and deferred event queues&lt;/a&gt;.
              A policy implementation based on a more efficient Boost.CircularBuffer
              is provided.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;msm&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;state_machine&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;is_flag_active&lt;/span&gt;&lt;/code&gt; method made const.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;a href=&quot;/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-enqueueing&quot;&gt;Added
              possibility to enqueue events for delayed processing&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Bugfixes
            &lt;/div&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4926&quot;&gt;#4926&lt;/a&gt;.
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  stack overflow using the Defer functor
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  anonymous transition of a submachine not called for the initial
                  state
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/optional/index.html&quot;&gt;Optional&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Updated test results with information about expected failures (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2294&quot;&gt;#2294&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/pool/index.html&quot;&gt;Pool&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Now can set a max_size for pool (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2696&quot;&gt;#2696&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; uses &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;/code&gt;
              instead of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&lt;/code&gt;
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2941&quot;&gt;#2941&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pool_allocator&lt;/span&gt;&lt;/code&gt; now works with vector
              of vectors (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/386&quot;&gt;#386&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Boost pool is now compatible with Microsoft memory leak detection (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4346&quot;&gt;#4346&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/program_options/index.html&quot;&gt;Program Options&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed errors in examples in docs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3992&quot;&gt;#3992&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4858&quot;&gt;#4858&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Now takes &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;argv&lt;/span&gt;&lt;/code&gt; as const
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3909&quot;&gt;#3909&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
              no longer defines &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pop_front&lt;/span&gt;&lt;/code&gt;
              and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;reverse&lt;/span&gt;&lt;/code&gt;, which have moved to their
              own headers under &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;/code&gt;
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Add callable wrappers for more Fusion algorithms (including &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;at&lt;/span&gt;&lt;/code&gt;); and callable wrappers for some
              std utilities like &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;make_pair&lt;/span&gt;&lt;/code&gt;,
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;first&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;second&lt;/span&gt;&lt;/code&gt;, all under the new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;/code&gt; directory
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Allow transforms to be specified separately from a grammar
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;matches&lt;/span&gt;&lt;/code&gt; preserves domain-specific
              expression wrappers
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix ADL issue with &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;and_&lt;/span&gt;&lt;/code&gt;
              transform
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix handling of grammar checking in expressions involving multiple
              domains (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4675&quot;&gt;#4675&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix ambiguous &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;display_expr&lt;/span&gt;&lt;/code&gt;
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4910&quot;&gt;#4910&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;is_sequence&lt;/span&gt;&lt;/code&gt; answers true for Proto
              expressions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5006&quot;&gt;#5006&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Eliminate &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wundef&lt;/span&gt;&lt;/code&gt;
              GCC warning in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5075&quot;&gt;#5075&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/signals/index.html&quot;&gt;Signals&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              gcc warning cleanup (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4365&quot;&gt;#4365&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Spirit V2.4.2, see the '&lt;a href=&quot;/doc/libs/1_46_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_4_2.html&quot;&gt;What's
              New&lt;/a&gt;' section for details.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tokenizer/index.html&quot;&gt;Tokenizer&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;isspace&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ispunct&lt;/span&gt;&lt;/code&gt; was called with wrong character
              type (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4791&quot;&gt;#4791&lt;/a&gt;)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Avoid using &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;
              with the value type.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Avoid &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wconversion&lt;/span&gt;&lt;/code&gt;
              warnings.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_46_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Better support for attributes on root elements - including &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lang&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/inspect/index.html&quot;&gt;Inspect&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Check that Boost headers do not use C's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;assert&lt;/span&gt;&lt;/code&gt;
              macro.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Add support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lang&lt;/span&gt;&lt;/code&gt;
              attribute in documentation info.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Improved anchors.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Support &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;import&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;include&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xinclude&lt;/span&gt;&lt;/code&gt;
              in conditional phrases.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Uses Filesystem 3.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_46_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.5, 4.5.2,
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0, 4.5.2
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel: 10.1, 11.0, 11.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Clang: 2.8
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Pathscale: 3.2.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.0.1, 4.2.1, 4.4
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.4.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel: 11.1
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++: 7.1, 8.0, 9.0 and 10.0.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, mingw: 4.4.0.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.2.1, 64 bit.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 3.4.6, 4.2.4, 4.3.4, 4.3.5, 4.4.3, 4.4.5, 4.5.0, 4.5.2
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0, 4.5.2
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              pgCC 11.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel: 10.1, 11.0, 11.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              PathScale: 3.2, 4.0
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual Age C++ 10.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Clang from subversion
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel C++ Compiler: 10.1, 11.0, 11.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.0.1, 4.2.1, 4.4.4
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.4.4
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Clang from subversion
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++: 7.1, 8.0, 9.0, 10.0
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++ with STLport: 9.0
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++, Windows Mobile 5, with STLport: 9.0
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, mingw: 4.4.0, 4.5.1, 4.6.0
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, mingw, C++0x mode: 4.5.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Borland: 6.1.3 (2009), 6.2.1 (2010)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              IBM XL C/C++ Enterprise Edition, V11.1.0.0
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC 4.2.1, 64 bit
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Sun C++: 5.10
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_46_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.45.0</title><pubDate>Fri, 19 Nov 2010 11:00:00 EST</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Asio, Config, Flyweight, Foreach, Fusion, Graph, Interprocess,
      Math, Meta State Machine, MultiArray, Proto, Spirit, TypeTraits, uBLAS, Unordered,
      Wave, Xpressive. Updated tools: Boostbook, Quickbook
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.45.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_45_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a problem on kqueue-based platforms where a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;deadline_timer&lt;/span&gt;&lt;/code&gt;
              may never fire if the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
              is running in a background thread (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4568&quot;&gt;#4568&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a const-correctness issue that prevented valid uses of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;has_service&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
              from compiling (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4638&quot;&gt;#4638&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed MinGW cross-compilation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4491&quot;&gt;#4491&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Removed dependency on deprecated Boost.System functions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4672&quot;&gt;#4672&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Ensured &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;closesocket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
              failures are correctly propagated (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4573&quot;&gt;#4573&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added a check for errors returned by &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;InitializeCriticalSectionAndSpinCount&lt;/span&gt;&lt;/code&gt;
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4574&quot;&gt;#4574&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added support for hardware flow control on QNX (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4625&quot;&gt;#4625&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Always use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pselect&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; on HP-UX, if it is available (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4578&quot;&gt;#4578&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Ensured handler arguments are passed as lvalues (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4744&quot;&gt;#4744&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed Windows build when thread support is disabled (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4680&quot;&gt;#4680&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a Windows-specific problem where &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;deadline_timer&lt;/span&gt;&lt;/code&gt;
              objects with expiry times set more than 5 minutes in the future may
              never expire (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4745&quot;&gt;#4745&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;resolver&lt;/span&gt;&lt;/code&gt;
              backend on BSD platforms so that an empty service name resolves to
              port number &lt;code&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;, as per the
              documentation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4690&quot;&gt;#4690&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed read operations so that they do not accept buffer sequences of
              type &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;const_buffers_1&lt;/span&gt;&lt;/code&gt;
              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4746&quot;&gt;#4746&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Redefined &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Protocol&lt;/span&gt;&lt;/code&gt;
              and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;id&lt;/span&gt;&lt;/code&gt; to avoid clashing
              with Objective-C++ keywords (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4191&quot;&gt;#4191&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt; reallocation
              performance issue that can occur when there are many active &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;deadline_timer&lt;/span&gt;&lt;/code&gt; objects (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4780&quot;&gt;#4780&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed the kqueue backend so that it compiles on NetBSD (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4662&quot;&gt;#4662&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed the socket &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_control&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; implementation on 64-bit Mac OS X
              and BSD platforms (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4782&quot;&gt;#4782&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a Windows-specific problem where failures from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
              are incorrectly treated as successes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4859&quot;&gt;#4859&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Deprecated the separate compilation header &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
              in favour of &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4560&quot;&gt;#4560&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added new defect macros, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_VARIADIC_MACROS&lt;/span&gt;&lt;/code&gt;
              and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_NUMERIC_LIMITS_LOWEST&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Minor fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4670&quot;&gt;#4670&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4563&quot;&gt;#4563&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4474&quot;&gt;#4474&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4508&quot;&gt;#4508&lt;/a&gt;).
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/flyweight/index.html&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed a hanging problem with &lt;a href=&quot;/libs/flyweight/doc/tutorial/configuration.html#intermodule_holder&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;intermodule_holder&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; in Win32
              platforms related to a Boost.Interprocess issue described at ticket
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4606&quot;&gt;#4606&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Removed an internal assertion incompatible with program termination
              via &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;exit&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix ambiguitiy by making &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;auto_any&lt;/span&gt;&lt;/code&gt;
              constructor explicit.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FUSION_ADAPT_ADT&lt;/span&gt;&lt;/code&gt;,
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FUSION_ADAPT_TPL_ADT&lt;/span&gt;&lt;/code&gt;,
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FUSION_ADAPT_ASSOC_ADT&lt;/span&gt;&lt;/code&gt;
              and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FUSION_ADAPT_ASSOC_TPL_ADT&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added Stoer-Wagner min-cut algorithm contributed by Daniel Trebbien.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added implicit graph (implicit_graph) and A* (astar_maze) examples
              contributed by W. P. McNeill.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added bundled property support for graph properties.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4556&quot;&gt;#4556&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4622&quot;&gt;#4622&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4631&quot;&gt;#4631&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4715&quot;&gt;#4715&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4753&quot;&gt;#4753&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4758&quot;&gt;#4758&lt;/a&gt;
              and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4793&quot;&gt;#4793&lt;/a&gt;
              plus others not in Trac.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed documentation bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4731&quot;&gt;#4731&lt;/a&gt;
              and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4737&quot;&gt;#4737&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1080&quot;&gt;#1080&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3284&quot;&gt;#3284&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3439&quot;&gt;#3439&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3448&quot;&gt;#3448&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3582&quot;&gt;#3582&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3682&quot;&gt;#3682&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3829&quot;&gt;#3829&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3846&quot;&gt;#3846&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3914&quot;&gt;#3914&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3947&quot;&gt;#3947&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3950&quot;&gt;#3950&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3951&quot;&gt;#3951&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3985&quot;&gt;#3985&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4010&quot;&gt;#4010&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4417&quot;&gt;#4417&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4019&quot;&gt;#4019&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4039&quot;&gt;#4039&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4218&quot;&gt;#4218&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4230&quot;&gt;#4230&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4250&quot;&gt;#4250&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4297&quot;&gt;#4297&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4350&quot;&gt;#4350&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4352&quot;&gt;#4352&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4426&quot;&gt;#4426&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4516&quot;&gt;#4516&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4524&quot;&gt;#4524&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4557&quot;&gt;#4557&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4606&quot;&gt;#4606&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4685&quot;&gt;#4685&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4694&quot;&gt;#4694&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added support for standard rvalue reference move semantics (tested
              on GCC 4.5 and VC10).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Permissions can be detailed for interprocess named resources.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mapped_region&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flush&lt;/span&gt;&lt;/code&gt; initiates disk flushing but
              does not guarantee it's completed when returns, since it is not portable.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              FreeBSD and MacOS now use posix semaphores to implement named semaphores
              and mutex.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added inverse gamma distribution and inverse chi_square and scaled
              inverse chi_square.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added warnings about potential ambiguity with std random library in
              distribution and function names.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Editorial revision of documentation, and added FAQ.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/msm/index.html&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;a href=&quot;/doc/libs/1_45_0/libs/msm/doc/HTML/ch08.html#d0e2995&quot;&gt;Support
              for serialization&lt;/a&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;a href=&quot;/doc/libs/1_45_0/libs/msm/doc/HTML/ch03s04.html#eUML-reuse-functor&quot;&gt;Possibility
              to use normal&lt;/a&gt; functors (from functor front-end) in eUML.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;a href=&quot;/doc/libs/1_45_0/libs/msm/doc/HTML/ch03s05.html#backend-fsm-constructor-args&quot;&gt;New
              constructors where substates / submachines can be taken as arguments&lt;/a&gt;.
              This allows passing arguments to the constructor of a submachine.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Bugfixes (anonymous transitions)
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_array/index.html&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fixes for bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3581&quot;&gt;#3581&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3820&quot;&gt;#3820&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3989&quot;&gt;#3989&lt;/a&gt;,
              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4032&quot;&gt;#4032&lt;/a&gt;,
              plus other bugs not in Trac.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added new examples and test cases.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Knock down value of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;/code&gt;,
              fixes bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4602&quot;&gt;#4602&lt;/a&gt;,
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Support non-rtti compilers
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix bug with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;matches&lt;/span&gt;&lt;/code&gt;,
              array types and the wildcard pattern.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Make Proto work on MSVC with the /clr option
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Add const-qualified overloads of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;eval&lt;/span&gt;&lt;/code&gt;
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
  Spirit V2.4.1,
          see the '&lt;a href=&quot;/doc/libs/1_45_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_4_1.html&quot;&gt;What's
          New&lt;/a&gt;' section for details.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;TypeTraits&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Added new traits add_rvalue_reference, add_lvalue_reference and common_type.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Minor fixes to is_signed, is_unsigned and is_virtual_base_of.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/numeric/ublas/index.html&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Tickets closed:
            &lt;/div&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4410&quot;&gt;#4410&lt;/a&gt;,
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3397&quot;&gt;#3397&lt;/a&gt;,
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/795&quot;&gt;#795&lt;/a&gt;,
                &lt;/div&gt;
              &lt;/li&gt;
              &lt;li&gt;
                &lt;div&gt;
                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3514&quot;&gt;#3514&lt;/a&gt;,
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Mixed types operation are possible and new tests added (like matrix&amp;lt;complex&amp;gt;+matrix&amp;lt;double&amp;gt;),
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              New features:
            &lt;/div&gt;
            &lt;ul&gt;
              &lt;li&gt;
                &lt;div&gt;
                  a new size&amp;lt;&amp;gt; operator is available. For example size&amp;lt;1&amp;gt;(A+B)
                  give the number of rows of the sum of matrices A and B,
                &lt;/div&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix inserting from iterators which return by copy from &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;
              in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_map&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_set&lt;/span&gt;&lt;/code&gt;.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xpressive&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;as&lt;/span&gt;&lt;/code&gt; handles wide-char &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sub_match&lt;/span&gt;&lt;/code&gt; objects, fixes bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4496&quot;&gt;#4496&lt;/a&gt;
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_45_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix syntax highlighter for comments at the end of code blocks.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;

        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Fix command line macros.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Nested code snippets.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Nested documentation info comments.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Revert xml escaping document info, it broke some documentation files
              (will now be in 1.6).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Some other small tweaks. See &lt;a href=&quot;/doc/html/quickbook/change_log.html#quickbook.change_log.releases.version_1_5_3___boost_1_45_0&quot;&gt;the
              change log&lt;/a&gt; for more info.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_45_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.5, 4.5.1.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel: 10.1, 11.0, 11.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Pathscale: 3.2.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.0.1, 4.2.1, 4.4
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.4.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel: 11.1
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++: 7.1, 8.0, 9.0 and 10.0.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, mingw: 4.3.3.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.2.1, 32 bit.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.2.1, 64 bit.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.5, 4.5.0, 4.6.0 (dev version).
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel: 10.1, 11.0, 11.1.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              pgCC 10.1.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              PathScale: 3.2.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Clang from subversion.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Intel C++ Compiler: 10.1, 11.0, 11.1.
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC: 4.0.1, 4.2.1, 4.4.4
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, C++0x mode: 4.4.4
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Clang from subversion.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Borland: 5.9.3, 6.1.3 (2009), 6.2.1 (2010), 6.3.0
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, mingw: 4.3.3, 4.4.5, 4.5.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC, mingw, C++0x mode: 4.5.1
            &lt;/div&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;div&gt;
              Visual C++: 7.1, 8.0, 9.0, 10.0
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              IBM XL C/C++ Enterprise Edition, V11.1.0.0.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              GCC 4.2.1, 64 bit.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
        &lt;/div&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;div&gt;
              Sun C++: 5.10.
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_45_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.44.0</title><pubDate>Fri, 13 Aug 2010 13:00:00 EDT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Meta State Machine, Polygon. Updated Libraries: Accumulators,
      Asio, Config, Filesystem, Foreach, Fusion, Hash, Iostreams, Math, MPL, Multi-index
      Containers, Proto, Regex, Spirit, Thread, TR1, Type Traits, uBLAS, Utility,
      Uuid, Wave, Xpressive. Updates for Quickbook and Boostbook.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.44.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_44_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/msm/index.html&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
  High-performance
          expressive UML2 finite state machines, from Christophe Henry
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/polygon/index.html&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
  Booleans/clipping,
          resizing/offsetting and more for planar polygons with integral coordinates,
          from Lucanus Simonson.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_44_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct miscellaneous documentation inaccuracies
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced compile times. (Note that some programs may need to add additional
                &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;&lt;/code&gt;s, e.g.
                if the program uses &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;/code&gt;
                but does not explicitly include &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced the size of generated code.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Refactored &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;deadline_timer&lt;/span&gt;&lt;/code&gt;
                implementation to improve performance.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved multiprocessor scalability on Windows by using a dedicated
                hidden thread to wait for timers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved performance of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;streambuf&lt;/span&gt;&lt;/code&gt;
                with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_read&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_until&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;. These read operations now use
                the existing capacity of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;streambuf&lt;/span&gt;&lt;/code&gt;
                when reading, rather than limiting the read to 512 bytes.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added optional separate compilation. To enable, add &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                to one source file in a program, then build the program with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_SEPARATE_COMPILATION&lt;/span&gt;&lt;/code&gt;
                defined in the project/compiler settings. Alternatively, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DYN_LINK&lt;/span&gt;&lt;/code&gt; may be defined
                to build a separately-compiled Asio as part of a shared library.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DISABLE_FENCED_BLOCK&lt;/span&gt;&lt;/code&gt;
                to permit the disabling of memory fences around completion handlers,
                even if thread support is enabled.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reworked timeout examples to better illustrate typical use cases.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured that handler arguments are passed as &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/code&gt;
                types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed incorrect parameter order in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
                variant of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_send_to&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4170&quot;&gt;#4170&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&lt;/code&gt;
                is used with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;isdigit&lt;/span&gt;&lt;/code&gt;
                in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;getaddrinfo&lt;/span&gt;&lt;/code&gt; emulation
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4201&quot;&gt;#4201&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed handling of very small but non-zero timeouts (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4205&quot;&gt;#4205&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed crash that occurred when an empty buffer sequence was passed
                to a composed read or write operation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;+&lt;/span&gt;&lt;/code&gt; overload in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;buffers_iterator&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4382&quot;&gt;#4382&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented cancellation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
                operations on Windows.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new defect macro, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_COMPLETE_VALUE_INITIALIZATION&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added new defect macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_0X_HDR_TYPEINDEX&lt;/span&gt;&lt;/code&gt;,
                fixes issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4274&quot;&gt;#4274&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for code visibility in GCC.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4385&quot;&gt;#4385&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4324&quot;&gt;#4324&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4221&quot;&gt;#4221&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4182&quot;&gt;#4182&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4178&quot;&gt;#4178&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4152&quot;&gt;#4152&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4182&quot;&gt;#4115&lt;/a&gt;.
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4112&quot;&gt;#4112&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4059&quot;&gt;#4059&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4041&quot;&gt;#4041&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4012&quot;&gt;#4012&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/index.html&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This release contains both version 2 and version 3 of the library.
                Version 3 is a major upgrade that will break some existing user code,
                so version 2 is the default. Users are encouraged to migrate to version
                3. See '&lt;a href=&quot;/libs/filesystem/v2/doc/index.htm&quot;&gt;Version 2&lt;/a&gt;'
                and '&lt;a href=&quot;/libs/filesystem/v3/doc/index.htm&quot;&gt;Version 3&lt;/a&gt;'
                for more information.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix problems with symbol visibility for shared libraries.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix various minor problems.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3863&quot;&gt;#3863&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4248&quot;&gt;#4248&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;foreach_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; for forward declarations of
                foreach's customization points, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3998&quot;&gt;#3998&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove out-of-date work-arounds for sun compilers, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4306&quot;&gt;#4306&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;reverse_fold&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iter_fold&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;reverse_iter_fold&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1623&quot;&gt;#1623&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Option to prevent implicit casts when calling the hash function by
                defining the macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HASH_NO_IMPLICIT_CASTS&lt;/span&gt;&lt;/code&gt;,
                which can avoid some subtle problems. This might be activated by
                default in a future version.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Several fixes for file descriptors class, including a breaking change
                to the constructors and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;open&lt;/span&gt;&lt;/code&gt;
                methods for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;file_descriptor&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;file_descriptor_source&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;file_descriptor_sink&lt;/span&gt;&lt;/code&gt;.
                See &lt;a href=&quot;/libs/iostreams/doc/classes/file_descriptor.html&quot;&gt;the
                documentation&lt;/a&gt; for details. The old methods are still available
                if you define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_IOSTREAMS_USE_DEPRECATED&lt;/span&gt;&lt;/code&gt;
                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3323&quot;&gt;#3323&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3517&quot;&gt;#3517&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4335&quot;&gt;#4335&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix several issues with compression and decompression (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2318&quot;&gt;#2318&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4091&quot;&gt;#4091&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3348&quot;&gt;#3348&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2783&quot;&gt;#2783&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1579&quot;&gt;#1579&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3853&quot;&gt;#3853&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                And a load more miscellaneous fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3851&quot;&gt;#3851&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3279&quot;&gt;#3279&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3689&quot;&gt;#3689&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2356&quot;&gt;#2356&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2996&quot;&gt;#2996&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4102&quot;&gt;#4102&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2998&quot;&gt;#2998&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1612&quot;&gt;#1612&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2325&quot;&gt;#2325&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Thanks to Steven Watanabe for almost all these fixes. For more detail
                see the &lt;a href=&quot;/libs/iostreams/doc/release_notes.html&quot;&gt;release
                notes&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed incorrect range and support for Rayleigh distribution.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/mpl/index.html&quot;&gt;MPL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;/code&gt; work with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;transform&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a bug preventing the use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;modify_key&lt;/span&gt;&lt;/code&gt;
                with rollback in &lt;a href=&quot;/libs/multi_index/doc/reference/ord_indices.html#modify_key&quot;&gt;ordered&lt;/a&gt;
                and &lt;a href=&quot;/libs/multi_index/doc/reference/hash_indices.html#modify_key&quot;&gt;hashed&lt;/a&gt;
                indices when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Modifier&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Rollback&lt;/span&gt;&lt;/code&gt; are
                different types (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4130&quot;&gt;#4130&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Minor change in behavior:&lt;/em&gt; when using
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;and_&lt;/span&gt;&lt;/code&gt; as a transform, apply &lt;em&gt;all&lt;/em&gt;
                transforms but only return the result of applying the last. See Proto's
                &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_44&quot;&gt;Release
                Notes&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Minor change in behavior:&lt;/em&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;as_expr&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;as_child&lt;/span&gt;&lt;/code&gt;
                no longer run objects that are already proto expressions through
                the expression domain's generator. See Proto's &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_44&quot;&gt;Release
                Notes&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;em&gt;Minor change in behavior:&lt;/em&gt; Proto
                uses &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;basic_expr&lt;/span&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;expr&lt;/span&gt;&lt;/code&gt; when possible for better compile
                times. See Proto's &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_44&quot;&gt;Release
                Notes&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for sub-domains.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Introduce per-domain &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;as_expr&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;as_child&lt;/span&gt;&lt;/code&gt; customization
                points to allow for domain-specific customization of variable capture
                behavior.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_default&lt;/span&gt;&lt;/code&gt; transform is also a grammar
                that matches the expressions the transform knows how to handle.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_void&lt;/span&gt;&lt;/code&gt;, a no-op primitive transform
                that does nothing and returns &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pass_through&lt;/span&gt;&lt;/code&gt; transform doesn't
                strip expression wrappers, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4175&quot;&gt;#4175&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Const-correctness fixes when invoking proto domains.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4309&quot;&gt;#4309&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4215&quot;&gt;#4215&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4212&quot;&gt;#4212&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4191&quot;&gt;#4191&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4132&quot;&gt;#4132&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4123&quot;&gt;#4123&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4114&quot;&gt;#4114&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4036&quot;&gt;#4036&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4020&quot;&gt;#4020&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3941&quot;&gt;#3941&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3902&quot;&gt;#3902&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3890&quot;&gt;#3890&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
  Spirit V2.4,
          see the '&lt;a href=&quot;/doc/libs/1_44_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_4.html&quot;&gt;What's
          New&lt;/a&gt;' section for details.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/system/index.html&quot;&gt;System&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Change system_category and generic_category to functions, to conform
                to the C++0x FCD. This change may cause compile errors some user
                code; the fix is add &amp;quot;()&amp;quot; to references to system_category
                and generic_category, so that they become function calls.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix problems with symbol visibility for shared libraries.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4254&quot;&gt;#4254&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3994&quot;&gt;#3994&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3474&quot;&gt;#3474&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes for miscellaneous trac issues (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2501&quot;&gt;#2501&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4341&quot;&gt;#4341&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4363&quot;&gt;#4363&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3760&quot;&gt;#3760&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3761&quot;&gt;#3761&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3611&quot;&gt;#3611&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2955&quot;&gt;#2955&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4071&quot;&gt;#4071&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3195&quot;&gt;#3195&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3097&quot;&gt;#3097&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2874&quot;&gt;#2874&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4316&quot;&gt;#4316&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4317&quot;&gt;#4317&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4322&quot;&gt;#4322&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3244&quot;&gt;#3244&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2747&quot;&gt;#2747&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4305&quot;&gt;#4305&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3195&quot;&gt;#3195&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2704&quot;&gt;#2704&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2293&quot;&gt;#2293&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/868&quot;&gt;#868&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2918&quot;&gt;#2918&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4238&quot;&gt;#4238&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3269&quot;&gt;#3269&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3178&quot;&gt;#3178&lt;/a&gt;,
                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3195&quot;&gt;#3195&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes for other miscellaneous issues (remove warnings, support newer
                compilers, etc.)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tr1/index.html&quot;&gt;TR1&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed VC10 support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tr1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; always uses the TR1 ResultOf
                protocol, even on compilers that support the C++0x &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;-based implementation.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for rvalue references throughout the library, plus
                two new traits classes is_rvalue_reference and is_lvalue_reference.
                Fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4407&quot;&gt;#4407&lt;/a&gt;
                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3804&quot;&gt;#3804&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3621&quot;&gt;#3621&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/numeric/ublas/index.html&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                New assignment operators to feed in vectors and matrices in many
                nice ways (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4034&quot;&gt;#4034&lt;/a&gt;).
                Thank you Nasos
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New doxygen-based &lt;a href=&quot;/libs/numeric/ublas/doc/html/index.html&quot;&gt;documentation&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enable arithmetic operators (+,-,*,/) to work between ublas containers
                of std::complex and integral types (&lt;a href=&quot;http://svn/boost/org/trac/boost/ticket/3649&quot;&gt;#3649&lt;/a&gt;).
                Thank you Neal
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed unused variables in functional.hpp (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4377&quot;&gt;#4377&lt;/a&gt;).
                Thank you Marco
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New matrix_indirect and vector_indirect views to access elements
                with a matrix or vector of indices
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a new template class, &lt;a href=&quot;/libs/utility/value_init.htm#initialized&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;initialized&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
                in order to fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3472&quot;&gt;#3472&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New version of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_initialized&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; no longer calls &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;memset&lt;/span&gt;&lt;/code&gt; when the compiler has implemented
                value-initialization completely (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3869&quot;&gt;#3869&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                New template &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tr1_result_of&lt;/span&gt;&lt;/code&gt;
                that implements the TR1 ResultOf protocol even if &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt;
                uses the C++0x &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;-based
                implementation.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/uuid/index.html&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_UUID_NO_TYPE_TRAITS&lt;/span&gt;&lt;/code&gt;
                to remove the dependency on Boost.TypeTraits.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Stream &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/code&gt;
                handles left, internal, and right manipulators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;to_string&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;to_wstring&lt;/span&gt;&lt;/code&gt; to convert
                a uuid to a string.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed minor bugs in documentation.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
  See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;
          for details.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replace non-portable &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt;&lt;/code&gt;
                declarations with &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt;&lt;/code&gt;s
                in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;nested_results&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support user-defined assertions with placeholders for non-local variables.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_44_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Significantly faster.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved syntax highlighter.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Use the cygwin 1.7 API for better path handling.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved boostbook generation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Tweak the grammar to clean up some edge cases.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                For more detail see the &lt;a href=&quot;/doc/libs/1_44_0/doc/html/quickbook/change_log.html#quickbook.change_log.version_1_5_2___boost_1_44_0&quot;&gt;change
                log&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_44_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.0.1 on Intel Leopard.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.4 on 64-bit Suse.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 7.1 SP1, 8.0 SP1, 9.0 SP1 and 10.0.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.3.3, using Mingw.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.2.1, 32 and 64 bit.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel 10.1 on 32 bit Red Hat Enterprise Linux.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel 10.1, 11.0, 11.1 on 64 bit Red Hat Enterprise Linux.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.5 on Red Hat Enterprise Linux.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, with C++0x extensions, 4.3.4, 4.4.3, 4.5 on Red Hat Enterprise
                Linux.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.4 on 64 bit Suse.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
                Linux.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang from subversion (will be released with LLVM 2.8).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel C++ Compiler 10.1, 11.0, 11.1 on Leopard.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.0.1, 4.2.1 (Apple build).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, with C++0x extensions, 4.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang from subversion (will be released with LLVM 2.8).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 7.1 SP, 8.0, 9.0 on 32-bit XP.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 10.0 on XP.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++ 10.0 on 64-bit Windows 7.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.1 (2010).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.3.3, 4.5 on Mingw.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, with C++0x extensions, 4.5 on Mingw.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          AIX:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                IBM XL C/C++ Enterprise Edition, V11.1.0.0, on AIX Version 5.3.0.40.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.2.1 on FreeBSD 7.2, 64 bit.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC 4.2.1 on FreeBSD 8.0, 32 bit.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Solaris:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Sun C++ 5.10 on Solaris 5.10.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_44_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
    &lt;p&gt;
      Thanks to Marshall Clow for organizing the bug sprint and to everyone who took
      part.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.43.0</title><pubDate>Thu 6 May 2010 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Functional/Factory, Functional/Forward. Major Update: Range.
      Updated Libraries: Accumulators, Array, Asio, Fusion, Iostreams, Multi-index
      Containers, Proto, Random, Spirit, Thread, Unordered, Uuid, Wave, Xpressive.
      Also, updates to the build system and quickbook.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.43.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_43_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/factory/index.html&quot;&gt;Functional/factory&lt;/a&gt;:&lt;/span&gt;
  Function
        objects for dynamic and by-value construction, from Tobias Schwinger.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/forward/index.html&quot;&gt;Functional/forward&lt;/a&gt;:&lt;/span&gt;
  Function
        object adapters to address the forwarding problem, from Tobias Schwinger.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.major_updates&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Major Updates&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/range/index.html&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
  Boost.Range has
        undergone extensive updates that it include all of the features from the
        recently reviewed Boost.RangeEx, from Neil Groves.
        &lt;ul&gt;
          &lt;li&gt;
            Range-based version of the full STL iterator based algorithms.
          &lt;/li&gt;
          &lt;li&gt;
            Range adaptors which can be combined with range-based algorithms for
            unprecedented expressiveness and efficiency.
          &lt;/li&gt;
          &lt;li&gt;
            New functions: irange, istream_range, join, combine.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Avoid premature template evaluation in operator overload return types.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for SunCC compiler.
          &lt;/li&gt;
          &lt;li&gt;
            Added 'fill' member function.
          &lt;/li&gt;
          &lt;li&gt;
            Changed exception code to use boost::throw_exception.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved performance.
          &lt;/li&gt;
          &lt;li&gt;
            Reduced compile times.
          &lt;/li&gt;
          &lt;li&gt;
            Reduced the size of generated code.
          &lt;/li&gt;
          &lt;li&gt;
            Extended the guarantee that background threads don't call user code to
            all asynchronous operations (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3923&quot;&gt;#3923&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Changed to use edge-triggered epoll on Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Changed to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timerfd&lt;/span&gt;&lt;/code&gt;
            for dispatching timers on Linux, when available.
          &lt;/li&gt;
          &lt;li&gt;
            Changed to use one-shot notifications with kqueue on Mac OS X and BSD
            platforms.
          &lt;/li&gt;
          &lt;li&gt;
            Added a bitmask type &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_query_base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flags&lt;/span&gt;&lt;/code&gt;
            as per the TR2 proposal. This type prevents implicit conversion from
            &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;flags&lt;/span&gt;&lt;/code&gt;,
            allowing the compiler to catch cases where users incorrectly pass a numeric
            port number as the service name.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;NOMINMAX&lt;/span&gt;&lt;/code&gt;
            for all Windows compilers. Users can define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_NO_NOMINMAX&lt;/span&gt;&lt;/code&gt;
            to suppress this definition (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3901&quot;&gt;#3901&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a bug where 0-byte asynchronous reads were incorrectly passing
            an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;eof&lt;/span&gt;&lt;/code&gt; result to the completion handler
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4023&quot;&gt;#4023&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Changed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_control&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; member functions to always call &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ioctl&lt;/span&gt;&lt;/code&gt; on the underlying descriptor
            when modifying blocking mode (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3307&quot;&gt;#3307&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Changed the resolver implementation to longer require the typedefs &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;InternetProtocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_query&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;InternetProtocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_iterator&lt;/span&gt;&lt;/code&gt;,
            as neither typedef is part of the documented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;InternetProtocol&lt;/span&gt;&lt;/code&gt;
            requirements. The corresponding typedefs in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;udp&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;icmp&lt;/span&gt;&lt;/code&gt;
            classes have been deprecated.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed out-of-band handling for reactors not based on &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DISABLE_THREADS&lt;/span&gt;&lt;/code&gt;
            macro that allows Asio's threading support to be independently disabled.
          &lt;/li&gt;
          &lt;li&gt;
            Minor documentation improvements.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added new macros for adapting or defining custom types. See the &lt;a href=&quot;/libs/fusion/doc/html/fusion/change_log.html&quot;&gt;Changelog&lt;/a&gt;
            for details.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Minor fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2505&quot;&gt;#2505&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3839&quot;&gt;#3839&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3953&quot;&gt;#3953&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3723&quot;&gt;#3723&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3969&quot;&gt;#3969&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4135&quot;&gt;#4135&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href=&quot;/libs/serialization/doc/serialization.html#constructors&quot;&gt;Serialization
            of non default constructible values&lt;/a&gt; is now properly supported
            through user-provided facilities &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;save_construct_data&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;load_construct_data&lt;/span&gt;&lt;/code&gt;.
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;
            serialization &lt;a href=&quot;/libs/serialization/doc/tutorial.html#versioning&quot;&gt;class
            version&lt;/a&gt; has been bumped from 1 to 2.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Minor change in behavior: non-const expression self-assignment creates
            an assign node. See Proto's &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_43&quot;&gt;Release
            Notes&lt;/a&gt; for details.
          &lt;/li&gt;
          &lt;li&gt;
            Minor change to recommended expression extension mechanism: use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_EXTENDS_USING_ASSIGN&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
            See Proto's &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_43&quot;&gt;Release
            Notes&lt;/a&gt; for details.
          &lt;/li&gt;
          &lt;li&gt;
            Fix error in invocation of callable monomorphic function objects in Proto
            transforms.
          &lt;/li&gt;
          &lt;li&gt;
            Fix misc const correctness issues, work around fusion bug.
          &lt;/li&gt;
          &lt;li&gt;
            Add non-const function call overloads to proto terminals.
          &lt;/li&gt;
          &lt;li&gt;
            Add a default constructor to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;literal&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Do not use deprecated config macros.
          &lt;/li&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;assert_matches&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            function and friends to &lt;tt&gt;&amp;lt;boost/proto/debug.hpp&amp;gt;&lt;/tt&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;make_expr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unpack_expr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            return const-qualified rvalues.
          &lt;/li&gt;
          &lt;li&gt;
            Add documentation for Expr and Domain concepts.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Put the implementation of random_device in a compiled lib, and added
            Windows support.
          &lt;/li&gt;
          &lt;li&gt;
            Rewrote the documentation using Quickbook/Doxygen/Boostbook and brought
            it up to date.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
  Spirit V2.3, see
        the '&lt;a href=&quot;/doc/libs/1_43_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_3.html&quot;&gt;What's
        New&lt;/a&gt;' section for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Uses &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;/code&gt; for all exceptions
            except &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread_interrupted&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Added fix for issue 2742
          &lt;/li&gt;
          &lt;li&gt;
            Optimizations to mutex locks and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;call_once&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase_return_void&lt;/span&gt;&lt;/code&gt; is
            now &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;quick_erase&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3966&quot;&gt;#3966&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/uuid/index.html&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Split generators into separate files.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed bug in basic_random_generator (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3971&quot;&gt;#3971&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Updated documentation.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
  See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;
        for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Add missing include to &lt;tt&gt;&amp;lt;boost/xpressive/regex_error.hpp&amp;gt;&lt;/tt&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.build_system&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build System&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        When cross-compiling to GNU targets, static libraries are properly created.
        Previously, using such libraries resulted in &lt;tt&gt;Archive has no index&lt;/tt&gt;
        error.
      &lt;/li&gt;
      &lt;li&gt;
        The naming of DLL and import libraries with gcc compiler on Windows, both
        mingw and cygwin, now matches default conventions of those environments.
        Previously, the naming scheme was the same as for other Windows compilers.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Unicode escape characters.
          &lt;/li&gt;
          &lt;li&gt;
            Support the UTF-8 byte order mark.
          &lt;/li&gt;
          &lt;li&gt;
            Disallow &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;/code&gt; in simple markup.
            Fixes some errors with mismatched punctuation.
          &lt;/li&gt;
          &lt;li&gt;
            Add a command line flag (&lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;D&lt;/span&gt;&lt;/code&gt;) to define macros at the command
            line.
          &lt;/li&gt;
          &lt;li&gt;
            Improved post-processor output.
          &lt;/li&gt;
          &lt;li&gt;
            Check that &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;endsect&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
            tags are balanced in templates.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Leopard.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.4.1 on Ubuntu Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4 on 64-bit Suse.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3, using Mingw
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1, 32 and 64 bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1, 11.1 on 32 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1, 11.0, 11.1 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6, 4.2.4, 4.3.4, 4.4.3 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.4, 4.4.3 with C++0x extensions on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel C++ Compiler 10.1, 11.0, 11.1 on Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            Clang from subversion.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 8,0, 9,0 on 32-bit XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 on 64-bit Windows 7.
          &lt;/li&gt;
          &lt;li&gt;
            Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.1 (2010).
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 on Mingw.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.3 on Mingw, with and without C++0x extensions.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.5 on Mingw.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition, V10.1.0.0, on AIX Version 5.3.0.40.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 7.2, 64 bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 8.0, 32 bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.10 on Solaris 5.10.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_43_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.42.0</title><pubDate>Tue 2 Feb 2010 14:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Uuid. Updated Libraries: Asio, Circular Buffer, Fusion, Graph,
      Integer, Iostreams, Program.Options, PropertyMap, Proto, Regex, Spirit, Unordered,
      Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.42.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_42_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/uuid/index.html&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
  A universally unique
        identifier, from Andy Tompkins.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_42_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added a new HTTP Server 4 example illustrating the use of stackless coroutines
            with Asio.
          &lt;/li&gt;
          &lt;li&gt;
            Changed handler allocation and invocation to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;/code&gt;
            to get the address of handler objects, rather than applying &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;
            directly (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2977&quot;&gt;#2977&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Restricted MSVC buffer debugging workaround to 2008, as it causes a crash
            with 2010 beta 2 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3796&quot;&gt;#3796&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3822&quot;&gt;#3822&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a problem with the lifetime of handler memory, where Windows needs
            the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;OVERLAPPED&lt;/span&gt;&lt;/code&gt; structure
            to be valid until both the initiating function call has returned and
            the completion packet has been delivered.
          &lt;/li&gt;
          &lt;li&gt;
            Don't block signals while performing system calls, but instead restart
            the calls if they are interrupted.
          &lt;/li&gt;
          &lt;li&gt;
            Documented the guarantee made by strand objects with respect to order
            of handler invocation.
          &lt;/li&gt;
          &lt;li&gt;
            Changed strands to use a pool of implementations, to make copying of
            strands cheaper.
          &lt;/li&gt;
          &lt;li&gt;
            Ensured that kqueue support is enabled for BSD platforms (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3626&quot;&gt;#3626&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Added a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost_&lt;/span&gt;&lt;/code&gt; prefix
            to the &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;/code&gt;
            thread entry point function (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3809&quot;&gt;#3809&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            In &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;getaddrinfo&lt;/span&gt;&lt;/code&gt; emulation,
            only check the socket type (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;/code&gt;
            or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SOCK_DGRAM&lt;/span&gt;&lt;/code&gt;) if a service
            name has been specified. This should allow the emulation to work with
            raw sockets.
          &lt;/li&gt;
          &lt;li&gt;
            Added a workaround for some broken Windows firewalls that make a socket
            appear bound to 0.0.0.0 when it is in fact bound to 127.0.0.1.
          &lt;/li&gt;
          &lt;li&gt;
            Applied a fix for reported excessive CPU usage under Solaris (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3670&quot;&gt;#3670&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Added some support for platforms that use older compilers such as g++
            2.95 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3743&quot;&gt;#3743&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added methods erase_begin(size_type) and erase_end(size_type) with constant
            complexity for such types of stored elements which do not need an explicit
            destruction e.g. int or double.
          &lt;/li&gt;
          &lt;li&gt;
            Similarly changed implementation of the clear() method and the destructor
            so their complexity is now constant for such types of stored elements
            which do not require an explicit destruction (the complexity for other
            types remains linear).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The accumulator is the first argument to the functor of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fold&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;accumulate&lt;/span&gt;&lt;/code&gt;
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2355&quot;&gt;#2355&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Added support for associative iterators and views (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3473&quot;&gt;#3473&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Removed old interface to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compressed_sparse_row_graph&lt;/span&gt;&lt;/code&gt;,
            making new interface the default.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Reverted Trunk to release branch state (i.e. a &amp;quot;known good state&amp;quot;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/653&quot;&gt;653&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3084&quot;&gt;3084&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3177&quot;&gt;3177&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3180&quot;&gt;3180&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3548&quot;&gt;3568&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3657&quot;&gt;3657&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2134&quot;&gt;2134&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added long long support to &lt;tt&gt;boost::static_log2&lt;/tt&gt;, &lt;tt&gt;boost::static_signed_min&lt;/tt&gt;,
            &lt;tt&gt;boost::static_signed_max&lt;/tt&gt;, &lt;tt&gt;boost::static_unsigned_min&lt;/tt&gt;&lt;tt&gt;boost::static_unsigned_max&lt;/tt&gt;,
            when available.
          &lt;/li&gt;
          &lt;li&gt;
            The argument type and the result type of &lt;tt&gt;boost::static_signed_min&lt;/tt&gt;
            etc are now typedef'd. Formerly, they were hardcoded as &lt;tt&gt;unsigned
            long&lt;/tt&gt; and &lt;tt&gt;int&lt;/tt&gt; respectively. Please, use the
            provided typedefs in new code (and update old code as soon as possible).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fixed many outstanding issues. Thanks to Richard Smith for his work on
            this. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3612&quot;&gt;#3612&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3311&quot;&gt;#3311&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2094&quot;&gt;#2094&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3010&quot;&gt;#3010&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2894&quot;&gt;#2894&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3011&quot;&gt;#3011&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3352&quot;&gt;#3352&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3505&quot;&gt;#3505&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            For more information see the &lt;a href=&quot;/libs/iostreams/doc/release_notes.html&quot;&gt;library
            release notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/program_options/index.html&quot;&gt;Program.Options&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Information about option name added to a few exception classes and various
            clean ups in exception classes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3423&quot;&gt;#3423&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Description wordwrapping in presense of default parameters fixed (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2613&quot;&gt;#2613&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Empty value in configuration file is now permitted (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1537&quot;&gt;#1537&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Quotes are no longer stripped from string values (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/850&quot;&gt;#850&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix endless loop in case of long default arguments (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/689&quot;&gt;#689&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix compile warning caused by usage of boost::any (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2562&quot;&gt;#2562&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix memory bug in example/response_file.cpp (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3525&quot;&gt;#3525&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Most compilation warnings were fixed (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3608&quot;&gt;#3608&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Make column width for description text configurable. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3703&quot;&gt;#3703&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Add general split function: split_unix() (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2561&quot;&gt;#2561&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Enable open config files from given file name (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3264&quot;&gt;#3264&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Additional flag for required options (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2982&quot;&gt;#2982&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Enable case insensitive style for command line (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3498&quot;&gt;#3498&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_map/index.html&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Removed old header files (directly in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt; directory); they were deprecated since
            1.40, replaced by headers in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fix const correctness issues with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flatten&lt;/span&gt;&lt;/code&gt;
            and friends (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3364&quot;&gt;#3364&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Accomodate recent change to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fold&lt;/span&gt;&lt;/code&gt;,
            remove old support for Doxygen and pre-1.35 Fusion (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3553&quot;&gt;#3553&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            In binary operations, when one operand has a user-specified domain and
            the other has the default domain, the user-specified domain trumps.
          &lt;/li&gt;
          &lt;li&gt;
            Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_EXTENDS&lt;/span&gt;&lt;/code&gt;
            to work with elaborated types.
          &lt;/li&gt;
          &lt;li&gt;
            Work around EDG compiler bug with function types and cv-qualification.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for Functors rather than strings as format expressions.
          &lt;/li&gt;
          &lt;li&gt;
            Improved error reporting when throwing exceptions to include better more
            relevant information.
          &lt;/li&gt;
          &lt;li&gt;
            Improved performance and reduced stack usage of recursive expressions.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed tickets &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2802&quot;&gt;#2802&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3425&quot;&gt;#3425&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3507&quot;&gt;#3507&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3546&quot;&gt;#3546&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3631&quot;&gt;#3631&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3632&quot;&gt;#3632&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3715&quot;&gt;#3715&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3718&quot;&gt;#3718&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3763&quot;&gt;#3763&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3764&quot;&gt;#3764&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
  Spirit V2.2, see
        the '&lt;a href=&quot;/doc/libs/1_42_0/libs/spirit/doc/html/spirit/what_s_new.html&quot;&gt;What's
        New&lt;/a&gt;' section for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support instantiating the containers with incomplete value types.
          &lt;/li&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase_return_void&lt;/span&gt;&lt;/code&gt;
            as a temporary workaround for the current &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;/code&gt;
            which can be inefficient because it has to find the next element to return
            an iterator (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3693&quot;&gt;#3693&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Add templated find overload for compatible keys.
          &lt;/li&gt;
          &lt;li&gt;
            Improved codegear compatibility.
          &lt;/li&gt;
          &lt;li&gt;
            Other minor changes, full details in &lt;a href=&quot;/doc/html/unordered/changes.html#unordered.changes.boost_1_42_0&quot;&gt;the
            changelog&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;match_results&lt;/span&gt;&lt;/code&gt; no longer
            relies on undefined behavior in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;list&lt;/span&gt;&lt;/code&gt;
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3278&quot;&gt;#3278&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Do NOT copy singular iterators (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3538&quot;&gt;#3538&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Eliminate gcc and darwin warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3734&quot;&gt;#3734&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_42_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.4.1 on Ubuntu Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4 on Debian.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on Windows 2008, 64 bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3, using Mingw
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1, 32 and 64 bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on 32 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on 64 bit Linux Redhat 5.1 Server.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on Suse Linux 64 bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6, GCC 4.2.4, GCC 4.3.4 and GCC 4.4.2 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.4 and GCC 4.4.2 with C++0x extensions on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.1 on 64 bit Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.3 on Debian unstable.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel C++ Compiler 10.1, 11.0, 11.1 on Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1, 8,0, 9,0 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 beta 2.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 on 32-bit Vista.
          &lt;/li&gt;
          &lt;li&gt;
            Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.1 (2010).
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.1 on Mingw, with and without C++0x extensions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 7.0, 32 bit and 64 bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.10 on Solaris 5.10.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_42_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
      and Vladimir Prus managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.41.0</title><pubDate>Tue, 17 Nov 2009 17:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Library: Property Tree. Updated libraries: DateTime, Filesystem, Iostreams,
      Math, Multi-index Containers, Proto, Python, Regex, Spirit, System, Thread,
      Unordered, Utility, Wave, Xpressive. Updates to boost build and quickbook.
      The CMake build system for Boost, still under development &lt;a href=&quot;http://sodium.resophonic.com/boost-cmake/current-docs/&quot;&gt;here&lt;/a&gt;,
      has been removed from the main release to avoid confusion.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.41.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_41_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_tree/index.html&quot;&gt;Property Tree&lt;/a&gt;:&lt;/span&gt; A
        tree data structure especially suited to storing configuration data, from
        Marcin Kalicinski and Sebastian Redl.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/index.html&quot;&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The default format for time durations is now &amp;quot;&lt;code&gt;&lt;span class=&quot;special&quot;&gt;%-%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;F&lt;/span&gt;&lt;/code&gt;&amp;quot; instead of &amp;quot;&lt;code&gt;&lt;span class=&quot;special&quot;&gt;%-%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;F&lt;/span&gt;&lt;/code&gt;&amp;quot;
            that was used previously. In order to retain the old behavior, the format
            string has to be specified explicitly during the time IO facet construction
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1861&quot;&gt;#1861&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Gregorian dates now use 32-bit integer type internally on 64-bit platforms
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3308&quot;&gt;#3308&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            See the &lt;a href=&quot;/doc/html/date_time/details.html#date_time.changes&quot;&gt;full
            changelog&lt;/a&gt; for more detail.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/index.html&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Bug fixes: (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3385&quot;&gt;#3385&lt;/a&gt;).
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3528&quot;&gt;#3528&lt;/a&gt;).
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3509&quot;&gt;#3509&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
  Some old
        unreleased developments. There are still several open issues that should
        be fixed in the next version.
        &lt;ul&gt;
          &lt;li&gt;
            Add a grep filter (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1627&quot;&gt;#1627&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Support archives with multiple members (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1896&quot;&gt;#1896&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tee&lt;/span&gt;&lt;/code&gt; work with input
            streams (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/791&quot;&gt;#791&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Improved filesystem interoperability.
          &lt;/li&gt;
          &lt;li&gt;
            Several warnings fixed or suppressed (including &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1618&quot;&gt;#1618&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1875&quot;&gt;#1875&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2779&quot;&gt;#2779&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Various other fixes (including &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1580&quot;&gt;#1580&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1671&quot;&gt;#1671&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
  Substantially improved
        the performance of the incomplete gamma function and it's inverse: this enhances
        the performance of the gamma, poisson, chi-squared and non-central chi-squared
        distributions.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
  Maintenance
        fixes. Consult the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_41&quot;&gt;release
        notes&lt;/a&gt; for further information.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Clean up some MSVC warnings and errors in /Za (disable Microsoft extensions)
            mode.
          &lt;/li&gt;
          &lt;li&gt;
            Fixes for c++0x mode on various compilers.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/index.html&quot;&gt;Python&lt;/a&gt;:&lt;/span&gt;
  Boost.Python now
        supports Python 3 (Haoyu Bai's Google Summer of Code project, mentored by
        Stefan Seefeld).
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
  Added support for
        many Perl 5.10 syntax elements including named sub-expressions, branch resets
        and recursive regular expressions.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt; This is the initial
        official release of the new Spirit V2.1, a completely new library for parsing,
        lexing, and output generation. Note: this release is not backwards compatible
        with earlier versions. Known issue: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;qi&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;find&lt;/span&gt;&lt;/code&gt;
        will match a symbol that starts with the string you're searching for. This
        will be fixed in the next version.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/system/index.html&quot;&gt;System&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Bug fix: (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3559&quot;&gt;#3559&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for futures, promises and packaged tasks added
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread_specific_ptr&lt;/span&gt;&lt;/code&gt; is now faster when
            there are lots of thread-specific objects
          &lt;/li&gt;
          &lt;li&gt;
            Some Boost.Thread facilities are now header-only
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
  Major update:
        &lt;ul&gt;
          &lt;li&gt;
            Replaced a lot of the macro based implementation with a cleaner template
            based implementation.
          &lt;/li&gt;
          &lt;li&gt;
            Reduced memory use.
          &lt;/li&gt;
          &lt;li&gt;
            Full details in &lt;a href=&quot;/doc/html/unordered/changes.html#unordered.changes.boost_1_41_1&quot;&gt;the
            changelog&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
  A &amp;quot;const&amp;quot;
        issue of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_initialized&lt;/span&gt;&lt;/code&gt;
        is fixed: Its &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
        member function and its conversion operator are replaced by overloads for
        const and non-const access (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2548&quot;&gt;#2548&lt;/a&gt;).
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
  See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;changelog&lt;/a&gt;
        for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fix infinite loop with some uses of &lt;tt&gt;\Q...\E&lt;/tt&gt; quotemeta
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3586&quot;&gt;#3586&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Eliminate unreachable code warnings on MSVC
          &lt;/li&gt;
          &lt;li&gt;
            Clean up some MSVC warnings and errors in /Za (&amp;quot;disable Microsoft
            extensions&amp;quot;) mode.
          &lt;/li&gt;
          &lt;li&gt;
            Fixes for c++0x mode on various compilers.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.build_system&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build System&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      A bug preventing &amp;quot;fat&amp;quot; 32-bit + 64-bit builds on OSX has been fixed.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.boost_cmake_moved&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Boost.CMake moved&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The cmake version of boost has moved; the Boost.CMmake release will be separate
      and will lag the main release slightly, but will also be capable of producing
      patch releases as necessary.
    &lt;/p&gt;
    &lt;p&gt;
      More information on the &lt;a href=&quot;https:://svn.boost.org/trac/boost/wiki/CMake&quot;&gt;Boost
      CMake wiki page&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook 1.5&lt;/a&gt;:&lt;/span&gt;
  These
        changes require your document to use the &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;quickbook&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt; tag:
        &lt;ul&gt;
          &lt;li&gt;
            More intuitive syntax and variable lookup for template calls (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1174&quot;&gt;#1174&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2034&quot;&gt;#2034&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2036&quot;&gt;#2036&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Image attributes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1157&quot;&gt;#1157&lt;/a&gt;)
          &lt;/li&gt;
          &lt;li&gt;
            Table Ids (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1194&quot;&gt;#1194&lt;/a&gt;)
          &lt;/li&gt;
          &lt;li&gt;
            Better handling of whitespace in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;section&lt;/span&gt;&lt;/code&gt;
            syntax. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2712&quot;&gt;#2712&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Tiger and Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.4.1 on Ubuntu Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4 on Debian
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on 64-bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on Suse Linux on 64 bit Itanium.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on 32 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on 64 bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on 64 bit Linux Redhat 5.1 Server.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.3, GCC 4.2.4, GCC 4.3.3 and GCC 4.4.1 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 and GCC 4.4.1 with C++0x extensions on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 on 64-bit Redhat Server 5.1.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 on 64 bit Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.4 on Debian unstable.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.2 on 64 bit Gentoo.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Sun 5.9 on Red Hat Enterprise Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel C++ Compiler 11.1 on Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ Compiler 10.1, 11.0.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Tiger.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1, 8,0, 9,0 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on 32-bit Vista.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on AMD 64-bit Vista.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 beta 1 with &lt;a href=&quot;http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=457199&quot;&gt;a
            patch for the program options lib&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.0 (2010).
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.4.1 on Mingw, with and without C++0x extensions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 7.0.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.10 on Solaris 5.10.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_41_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
      James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.40.0</title><pubDate>Thu, 27 Aug 2009 17:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Build System improvements. Updated Libraries: Accumulators, Asio, Circular
      Buffer, Foreach, Function, Fusion, Graph, Hash, Interprocess, Intrusive, MPL,
      Program.Options, Property Map, Proto, Random, Serialization, Unordered, Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.40.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_40_0.update&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Update&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Added missing notes for Graph and Property Map.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.boost_cmake&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Boost.CMake&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost.CMake is &lt;em&gt;now distributed separately&lt;/em&gt;.
      The cmake build for boost is &lt;em&gt;BROKEN&lt;/em&gt; in the
      tarballs above. See the &lt;a href=&quot;https://svn.boost.org/trac/boost/wiki/CMake&quot;&gt;Boost.CMake
      wiki page&lt;/a&gt; for pointers to working versions.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Works on GCC 4.4.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added a new ping example to illustrate the use of ICMP sockets.
          &lt;/li&gt;
          &lt;li&gt;
            Changed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;buffered&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; templates to treat 0-byte reads
            and writes as no-ops, to comply with the documented type requirements
            for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SyncReadStream&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;AsyncReadStream&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SyncWriteStream&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;AsyncWriteStream&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Changed some instances of the &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt;&lt;/code&gt;
            keyword to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            to allow Asio to be used when exception support is disabled. Note that
            the SSL wrappers still require exception support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2754&quot;&gt;#2754&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Made Asio compatible with the OpenSSL 1.0 beta (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3256&quot;&gt;#3256&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Eliminated a redundant system call in the Solaris &lt;tt&gt;/dev/poll&lt;/tt&gt;
            backend.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a bug in resizing of the bucket array in the internal hash maps
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3095&quot;&gt;#3095&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Ensured correct propagation of the error code when a synchronous accept
            fails (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3216&quot;&gt;#3216&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Ensured correct propagation of the error code when a synchronous read
            or write on a Windows HANDLE fails.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed failures reported when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_GLIBCXX_DEBUG&lt;/span&gt;&lt;/code&gt;
            is defined (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3098&quot;&gt;#3098&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed custom memory allocation support for timers (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3107&quot;&gt;#3107&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Tidied up various warnings reported by g++ (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1341&quot;&gt;#1341&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2618&quot;&gt;#2618&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Various documentation improvements, including more obvious hyperlinks
            to function overloads, header file information, examples for the handler
            type requirements, and adding enum values to the index (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3157&quot;&gt;#3157&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2620&quot;&gt;#2620&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2785&quot;&gt;#2785&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3285&quot;&gt;#3285&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Workaround for conflict with Python headers (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3000&quot;&gt;#3000&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Optimize the use of small target objects.
          &lt;/li&gt;
          &lt;li&gt;
            Make Boost.Function compile under BOOST_NO_EXCEPTIONS (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2499&quot;&gt;#2499&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2494&quot;&gt;#2494&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2469&quot;&gt;#2469&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2466&quot;&gt;#2466&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2900&quot;&gt;#2900&lt;/a&gt;)
          &lt;/li&gt;
          &lt;li&gt;
            Various minor fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2642&quot;&gt;#2642&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2847&quot;&gt;#2847&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2929&quot;&gt;#2929&lt;/a&gt;
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3012&quot;&gt;#3012&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved compile times for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Merged in the &lt;a href=&quot;/libs/graph_parallel/doc/html/index.html&quot;&gt;Parallel
            Boost Graph Library&lt;/a&gt;, giving a full suite of graph algorithms
            and data structures for distributed-memory computers (such as clusters).
          &lt;/li&gt;
          &lt;li&gt;
            Updates to the interface of the compressed sparse row graph, including
            constructors from unsorted edge lists.
          &lt;/li&gt;
          &lt;li&gt;
            An implicit grid graph, saving memory over using the former generator.
          &lt;/li&gt;
          &lt;li&gt;
            New algorithms: Dijkstra's single-source shortest path algorithm without
            a separate color map and an algorithm to find maximal common subgraphs
            between two graphs.
          &lt;/li&gt;
          &lt;li&gt;
            Assorted bug fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Automatically configure the float functions using template metaprogramming
            instead of trying to configure every possibility manually.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Windows shared memory is created in Shared Documents folder so that it
            can be shared between services and processes
          &lt;/li&gt;
          &lt;li&gt;
            Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2967&quot;&gt;#2967&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2973&quot;&gt;#2973&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2992&quot;&gt;#2992&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3138&quot;&gt;#3138&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3166&quot;&gt;#3166&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3205&quot;&gt;#3205&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Code cleanup in tree_algorithms.hpp and avl_tree_algorithms.hpp
          &lt;/li&gt;
          &lt;li&gt;
            Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3164&quot;&gt;#3164&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/mpl/index.html&quot;&gt;MPL&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;char_&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;/code&gt;
            for compile-time string manipulation, based on multichar literals (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2905&quot;&gt;#2905&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Updated &lt;a href=&quot;/libs/mpl/doc/refmanual.html&quot;&gt;MPL Reference Manual&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Bug fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/program_options/index.html&quot;&gt;Program.Options&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for building with disabled exceptions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2096&quot;&gt;#2096&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Unicode parser no longer drops original tokens (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2425&quot;&gt;#2425&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed crash on user-inserted items in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;variables_map&lt;/span&gt;&lt;/code&gt;
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2782&quot;&gt;#2782&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_map/index.html&quot;&gt;Property Map&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Moved property map code into a separate directory, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt;. The old files exist and forward to
            the new ones; the previous files directly in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt; will be removed in Boost 1.42.0.
          &lt;/li&gt;
          &lt;li&gt;
            Moved distributed property maps to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;parallel&lt;/span&gt;&lt;/code&gt;
            namespace.
          &lt;/li&gt;
          &lt;li&gt;
            Added a property map based on a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_array&lt;/span&gt;&lt;/code&gt;,
            providing a simpler interface.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            PrimitiveTransforms have stricter conformance to ResultOf protocol. (Warning:
            some invalid code may break.)
          &lt;/li&gt;
          &lt;li&gt;
            Add a sensible default for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_default&lt;/span&gt;&lt;/code&gt;'s
            template parameter.
          &lt;/li&gt;
          &lt;li&gt;
            Improved default evaluation strategy for pointers to members.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4 portability fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3021&quot;&gt;#3021&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Work around Visual C++'s non-std-compliant ciso646 macros.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Made the constructors of all the generators call the copy constructor
            when passed a non-const reference.
          &lt;/li&gt;
          &lt;li&gt;
            Changed seeding functions to accept any arithmetic type. As a side-effect,
            the exact signature of seed changed for some classes.
          &lt;/li&gt;
          &lt;li&gt;
            Major bug fixes in uniform_int.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/serialization/index.html&quot;&gt;Serialization&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Removed deprecated headers: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;static_warning&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;state_saver&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;smart_cast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pfto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;. Use the the equivalent headers
            in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;serialization&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt;
            directory instead (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3062&quot;&gt;#3062&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;archive_serializer_map&lt;/span&gt;&lt;/code&gt; should now be
            used instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;archive_pointer_iserializer&lt;/span&gt;&lt;/code&gt;.
            For more details see &lt;a href=&quot;/doc/libs/1_40_0/libs/serialization/doc/release.html&quot;&gt;the
            library release notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Implement &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;/code&gt; for
            all compilers, not just ones with rvalue references and variadic templates
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1978&quot;&gt;#1978&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Create less buckets by default.
          &lt;/li&gt;
          &lt;li&gt;
            Some minor tweaks for better compiler support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2908&quot;&gt;#2908&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3096&quot;&gt;#3096&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3082&quot;&gt;#3082&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Works on Visual C++ 10.0 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3124&quot;&gt;#3124&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.build_system&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build System&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The default naming of libraries in Unix-like environment now matches system
      conventions, and does not include various decorations. Naming of libraries
      on Cygwin was also fixed. Support for beta versions of Microsoft Visual Studio
      10 was added. With gcc, 64-bit compilation no longer requires that target architecture
      be specified.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Hide &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;INTERNAL&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;ONLY&lt;/span&gt;&lt;/code&gt;
            enums in doxygen documentation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3242&quot;&gt;#3242&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Tweaked appearance of member classes/structs/unions in a class synopsis.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support python code snippets (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3029&quot;&gt;#3029&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;teletype&lt;/span&gt;&lt;/code&gt; source mode
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1202&quot;&gt;#1202&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Tiger and Leopard
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.3.3 on Ubuntu Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 9.0 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.0 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on 64-bit Linux Redhat 5.1 Server.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on Suse Linux on 64 bit Itanium.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.1 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.3, GCC 4.0.1, GCC 4.2.4, GCC 4.3.3 and GCC 4.4.0 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 and GCC 4.4.0 with C++0x extensions on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.1, 4.2.1 on 64-bit Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.2 on Suse Linux on 64 bit Itanium.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.2 on 64-bit Redhat Server 5.1.
          &lt;/li&gt;
          &lt;li&gt;
            GCC Open64 4.2.2 on Red Hat Enterprise Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.4 on Debian unstable.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.1 on Red Hat Enterprise
            Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC version 4.2.0 (PathScale 3.2 driver) on 64-bit Red Hat Enterprise
            Linux.
          &lt;/li&gt;
          &lt;li&gt;
            Sun 5.9 on Red Hat Enterprise Linux.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1, 11.0 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1, 11.0 on Intel Tiger.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1, 4.2.1 on Intel Leopard.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Tiger.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on XP.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on Vista.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on Vista 64-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0, using STLport 5.2, on XP and Windows Mobile 5.0.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 10.0 beta.
          &lt;/li&gt;
          &lt;li&gt;
            Borland 5.9.3, 6.1.0, 6.1.3.
          &lt;/li&gt;
          &lt;li&gt;
            Borland C++ Builder 2007 and 2009.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 64-bit.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 and 4.4.0, on Mingw with C++0x features.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.7, 5.8, 5.9 on Solaris 5.10.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6 on Solaris 5.10.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_40_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
      James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.39.0</title><pubDate>Sat, 02 May 2009 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Signals2. Updated Libraries: Asio, Flyweight, Foreach, Hash,
      Interprocess, Intrusive, Program.Options, Proto, PtrContainer, Range, Unordered,
      Xpressive. Updated Tools: Boostbook, Quickbook.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.39.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_39_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/signals2/index.html&quot;&gt;Signals2&lt;/a&gt;:&lt;/span&gt; Managed signals
        &amp;amp; slots callback implementation (thread-safe version 2), from Frank Mori
        Hess.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_39_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Implement automatic resizing of the bucket array in the internal hash
            maps. This is to improve performance for very large numbers of asynchronous
            operations and also to reduce memory usage for very small numbers. A
            new macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_HASH_MAP_BUCKETS&lt;/span&gt;&lt;/code&gt;
            may be used to tweak the sizes used for the bucket arrays.
          &lt;/li&gt;
          &lt;li&gt;
            Add performance optimisation for the Windows IOCP backend for when no
            timers are used.
          &lt;/li&gt;
          &lt;li&gt;
            Prevent locale settings from affecting formatting of TCP and UDP endpoints
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2682&quot;&gt;#2682&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix a memory leak that occurred when an asynchronous SSL operation's
            completion handler threw an exception (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2910&quot;&gt;#2910&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix the implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_control&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; so that it adheres to the documented
            type requirements for IoControlCommand (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2820&quot;&gt;#2820&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix incompatibility between Asio and ncurses.h (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2156&quot;&gt;#2156&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            On Windows, specifically handle the case when an overlapped &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ReadFile&lt;/span&gt;&lt;/code&gt; call fails with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ERROR_MORE_DATA&lt;/span&gt;&lt;/code&gt;. This enables a hack
            where a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_handle&lt;/span&gt;&lt;/code&gt; can be used with a message-oriented
            named pipe (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2936&quot;&gt;#2936&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix system call wrappers to always clear the error on success, as POSIX
            allows successful system calls to modify errno (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2953&quot;&gt;#2953&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Don't include termios.h if &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DISABLE_SERIAL_PORT&lt;/span&gt;&lt;/code&gt;
            is defined (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2917&quot;&gt;#2917&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Cleaned up some more MSVC level 4 warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2828&quot;&gt;#2828&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Various documentation fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2871&quot;&gt;#2871&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/flyweight/index.html&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The &lt;a href=&quot;/libs/flyweight/doc/tutorial/configuration.html#refcounted&quot;&gt;refcounted&lt;/a&gt;
            component was not thread-safe due to an incorrect implementation and
            could deadlock under heavy usage conditions. This problem has been corrected.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Eliminate shadow warnings on gcc for nested &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;FOREACH&lt;/span&gt;&lt;/code&gt;
            loops
          &lt;/li&gt;
          &lt;li&gt;
            Portability fix for Intel-Win toolset
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Remove deprecated headers for hashing containers. Everything that was
            in them is included in &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2412&quot;&gt;#2412&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Other minor changes, full details in the library &lt;a href=&quot;/doc/html/hash/changes.html#hash.changes.boost_1_39_0&quot;&gt;change
            log&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Increased portability and bug fixes. Full details in the library &lt;a href=&quot;/doc/html/interprocess/acknowledgements_notes.html#interprocess.acknowledgements_notes.release_notes.release_notes_boost_1_39_00&quot;&gt;change
            log&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Optimizations and bug fixes. Full details in the library &lt;a href=&quot;/doc/html/intrusive/release_notes.html#intrusive.release_notes.release_notes_boost_1_39_00&quot;&gt;change
            log&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/program_options/index.html&quot;&gt;Program.Options&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Multitoken options fixed (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/469&quot;&gt;#469&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Work around incompatibility with standard Linux header.
          &lt;/li&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;noinvoke&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            to block metafunction invocation in object transforms.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/ptr_container/index.html&quot;&gt;PtrContainer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Bug fixes from Trac applied.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/range/index.html&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Bug fixes from Trac applied.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fixed regression in 1.38 that prevented unordered from using more than
            about 1.5 million buckets (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2975&quot;&gt;#2975&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Minor implementation changes, including &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2756&quot;&gt;#2756&lt;/a&gt;.
            Full details in the library &lt;a href=&quot;/doc/html/unordered/changes.html#unordered.changes.boost_1_39_0&quot;&gt;change
            log&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Work around for gcc optimization problem resulting in pure virtual function
            call runtime error (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2655&quot;&gt;#2655&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_39_0.updated_tools&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved PDF generation.
          &lt;/li&gt;
          &lt;li&gt;
            Preliminary HTMLHelp support.
          &lt;/li&gt;
          &lt;li&gt;
            Add default path for callout images.
          &lt;/li&gt;
          &lt;li&gt;
            Include data members' &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;purpose&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            in the class synopsis.
          &lt;/li&gt;
          &lt;li&gt;
            Fix bug where a function's &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;purpose&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            wasn't displayed if it was just plain text.
          &lt;/li&gt;
          &lt;li&gt;
            Support the alt tag in &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;headername&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;macroname&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;. Use this if the header or macro
            name is different to the contents of the tag (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1977&quot;&gt;#1977&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Support links relative to the boost root in &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ulink&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            tags, using a custom url, see the &lt;a href=&quot;/doc/html/boostbook/together.html#boostbook.linking&quot;&gt;linking
            documentation&lt;/a&gt; for details (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1166&quot;&gt;#1166&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Avoid generating filenames that only differ in case for function, method
            and macro documentation.
          &lt;/li&gt;
          &lt;li&gt;
            Run the docbook chunker quietly, unless boostbook.verbose is set. This
            parameter might be used in other places in future releases.
          &lt;/li&gt;
          &lt;li&gt;
            Make the 1.1 DTD available.
          &lt;/li&gt;
          &lt;li&gt;
            Fill in some missing reference documentation (partially fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2153&quot;&gt;#2153&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Changes to doxygen integration:
            &lt;ul&gt;
              &lt;li&gt;
                Support &lt;code&gt;&lt;span class=&quot;special&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt;&lt;/code&gt;.
              &lt;/li&gt;
              &lt;li&gt;
                Support global variables and enums.
              &lt;/li&gt;
              &lt;li&gt;
                Better support for documentation written in function and method bodies.
              &lt;/li&gt;
              &lt;li&gt;
                Workaround a problem with doxygen 1.5.8's xml output (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2937&quot;&gt;#2937&lt;/a&gt;).
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Return an error code and error count if there are any errors (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1399&quot;&gt;#1399&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Support both windows and cygwin paths at the compile line when compiled
            with cygwin.
          &lt;/li&gt;
          &lt;li&gt;
            Fix some issues with C++ and Python code:
            &lt;ul&gt;
              &lt;li&gt;
                Fail gracefully for a mismatched &lt;code&gt;&lt;span class=&quot;char&quot;&gt;''&lt;/span&gt;&lt;/code&gt;.
              &lt;/li&gt;
              &lt;li&gt;
                Warn if any unexpected character are encountered and write them out
                properly (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1170&quot;&gt;#1170&lt;/a&gt;).
              &lt;/li&gt;
              &lt;li&gt;
                Fix a bug for hex encoded characters in strings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2860&quot;&gt;#2860&lt;/a&gt;).
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Improved testing, including tests for expected failures.
          &lt;/li&gt;
          &lt;li&gt;
            Generate valid document info for document types other than &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;library&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2711&quot;&gt;#2711&lt;/a&gt;):
            &lt;ul&gt;
              &lt;li&gt;
                Remove library specific attributes.
              &lt;/li&gt;
              &lt;li&gt;
                Put title before info block.
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Fix a bug when calling templates.
          &lt;/li&gt;
          &lt;li&gt;
            Less warnings when built using gcc.
          &lt;/li&gt;
          &lt;li&gt;
            Small documentation improvements (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1213&quot;&gt;#1213&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2701&quot;&gt;#2701&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix a bug with xinclude pages when outdir is the current directory (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2921&quot;&gt;#2921&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_39_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel Tiger and Leopard
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC Tiger
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.3.2 on Ubuntu Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 on Debian &amp;quot;unstable&amp;quot;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 9.0 on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.0 on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on 64-bit Linux Redhat 5.1 Server.
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1 on Suse Linux on 64 bit Itanium
          &lt;/li&gt;
          &lt;li&gt;
            Intel 11.0 on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.1, 4.2.1 on 64-bit Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.2 on 64-bit Redhat Server 5.1
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.2 on Suse Linux on 64 bit Itanium
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.3, GCC 4.0.1, GCC 4.2.4 and GCC 4.3.2 on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.2 with C++0x extensions on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.2.1 on OpenSuSE Linux
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.1 on Red Hat Enterprise
            Linux
          &lt;/li&gt;
          &lt;li&gt;
            GNU gcc version 4.2.0 (PathScale 3.2 driver) on 64-bit Red Hat Enterprise
            Linux
          &lt;/li&gt;
          &lt;li&gt;
            Sun 5.9 on Red Hat Enterprise Linux
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 9.1, 10.1 on Tiger
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1, 11.0 on Leopard
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.2.1 on Leopard
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 9.0 on Vista.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0, using STLport 5.2, on XP and Windows Mobile 5.0.
          &lt;/li&gt;
          &lt;li&gt;
            Borland 5.9.3
          &lt;/li&gt;
          &lt;li&gt;
            Borland 6.1.0
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.0, with a Visual C++ 9.0 backend, on XP 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.0, with a Visual C++ 9.0 backend, on Vista 64-bit. (TODO:
            not recently)
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3, on Mingw
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        NetBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.1.2 on NetBSD 4.0/i386 and NetBSD 4.0/amd64.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.7, 5.8, 5.9 on Solaris 5.10
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6 on Solaris 5.10
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_39_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
      James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.38.0</title><pubDate>Sun, 08 Feb 2009 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Flyweight, ScopeExit, Swap. Updated Libraries: Accumulators,
      Any, Asio, Config, Date_Time, Exception, Filesystem, Graph, Hash, Interprocess,
      Intrusive, Lexical Cast, Math, Multi-index Containers, Proto, Regex, Thread,
      TR1, Type Traits, Unordered, Xpressive. Other Changes: Experimental CMake build
      system.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.38.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_38_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/flyweight/index.html&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Design pattern to manage large quantities of highly redundant objects,
            from Joaquín M López Muñoz.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/scope_exit/doc/html/index.html&quot;&gt;ScopeExit&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Execute arbitrary code at scope exit, from Alexander Nasonov.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/swap.html&quot;&gt;Swap&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Enhanced generic swap function, from Joseph Gauterin.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_38_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_sum&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_count&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_mean&lt;/span&gt;&lt;/code&gt;
            accumulators.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/any.html&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Use a by-value argument for &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;=&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2311&quot;&gt;#2311&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved compatibility with some Windows firewall software.
          &lt;/li&gt;
          &lt;li&gt;
            Ensured arguments to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;overlapped_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;complete&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; are correctly passed to the completion
            handler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2614&quot;&gt;#2614&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a link problem and multicast failure on QNX (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2504&quot;&gt;#2504&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2530&quot;&gt;#2530&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a compile error in SSL support on MinGW / g++ 3.4.5.
          &lt;/li&gt;
          &lt;li&gt;
            Drop back to using a pipe for notification if eventfd is not available
            at runtime on Linux (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2683&quot;&gt;#2683&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Various minor bug and documentation fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2534&quot;&gt;#2534&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2541&quot;&gt;#2541&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2607&quot;&gt;#2607&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2617&quot;&gt;#2617&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2619&quot;&gt;#2619&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Add new macros BOOST_NO_STD_UNORDERED and BOOST_NO_INITIALIZER_LISTS.
          &lt;/li&gt;
          &lt;li&gt;
            Added Codegear compiler support.
          &lt;/li&gt;
          &lt;li&gt;
            Added Dragonfly to the BSD family of configs.
          &lt;/li&gt;
          &lt;li&gt;
            Updated MSVC's binary ABI settings to match compiler default when doing
            64-bit builds.
          &lt;/li&gt;
          &lt;li&gt;
            Recognise latest compilers from MS and Intel.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/index.html&quot;&gt;Date_Time&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for formatting and reading time durations longer than 24
            hours with new formatter: &lt;code&gt;&lt;span class=&quot;special&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Removed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;testfrmwk&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
            file from the public include directory.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed several bugs and compile errors.
          &lt;/li&gt;
          &lt;li&gt;
            For full details see the &lt;a href=&quot;/doc/libs/1_38_0/doc/html/date_time/details.html#date_time.changes&quot;&gt;change
            history&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/exception/index.html&quot;&gt;Exception&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved and more customizable &lt;a href=&quot;/libs/exception/doc/diagnostic_information.html&quot;&gt;diagnostic_information&lt;/a&gt;
            output.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/index.html&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fix native(name) test failures on POSIX-like systems.
          &lt;/li&gt;
          &lt;li&gt;
            Several bugfixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2543&quot;&gt;#2543&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2224&quot;&gt;#2224&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2531&quot;&gt;#2531&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1840&quot;&gt;#1840&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2542&quot;&gt;#2542&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added a new algorithms for Travelling Salesman Problem approximation
            (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;metric_tsp_approx&lt;/span&gt;&lt;/code&gt;) and
            resource-constrained Shortest Paths (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;r_c_shortest_paths&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Support for named vertices in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_list&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            A number of bugfixes ( &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/416&quot;&gt;#416&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1622&quot;&gt;#1622&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1700&quot;&gt;#1700&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2209&quot;&gt;#2209&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2392&quot;&gt;#2392&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2460&quot;&gt;#2460&lt;/a&gt;,
            and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2550&quot;&gt;#2550&lt;/a&gt;)
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;container_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; has been moved to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;container_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;. The current location is deprecated.
          &lt;/li&gt;
          &lt;li&gt;
            For more detail, see the &lt;a href=&quot;/doc/html/hash/changes.html#hash.changes.boost_1_38_0&quot;&gt;library
            changelog&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Updated documentation to show rvalue-references functions instead of
            emulation functions.
          &lt;/li&gt;
          &lt;li&gt;
            More non-copyable classes are now movable.
          &lt;/li&gt;
          &lt;li&gt;
            Move-constructor and assignments now leave moved object in default-constructed
            state instead of just swapping contents.
          &lt;/li&gt;
          &lt;li&gt;
            Several bugfixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2391&quot;&gt;#2391&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2431&quot;&gt;#2431&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1390&quot;&gt;#1390&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2570&quot;&gt;#2570&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2528&quot;&gt;#2528&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New treap-based containers: treap, treap_set, treap_multiset.
          &lt;/li&gt;
          &lt;li&gt;
            Corrected compilation bug for Windows-based 64 bit compilers.
          &lt;/li&gt;
          &lt;li&gt;
            Corrected exception-safety bugs in container constructors.
          &lt;/li&gt;
          &lt;li&gt;
            Updated documentation to show rvalue-references functions instead of
            emulation functions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/conversion/lexical_cast.htm&quot;&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Changed to work without RTTI when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_TYPEID&lt;/span&gt;&lt;/code&gt;
            is defined (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1220&quot;&gt;#1220&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added Johan Råde's optimised floating point classification routines.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed code so that it compiles in GCC's -pedantic mode (bug report &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1451&quot;&gt;#1451&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
  Some
        redundant type definitions have been deprecated. Consult the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_38&quot;&gt;release notes&lt;/a&gt;
        for further information.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fix problem with SFINAE of binary operators (Bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2407&quot;&gt;2407&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;call&lt;/span&gt;&lt;/code&gt; transform for callable transforms
            with &amp;gt;3 arguments.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value&lt;/span&gt;&lt;/code&gt; changed behavior for array-by-value
            terminals.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unpack_expr&lt;/span&gt;&lt;/code&gt; requires
            only Forward Sequences rather than Random Access Sequences.
          &lt;/li&gt;
          &lt;li&gt;
            Deprecate legacy undocumented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_DEFINE_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;VARARG_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;FUNCTION_TEMPLATE&lt;/span&gt;&lt;/code&gt;
            macros.
          &lt;/li&gt;
          &lt;li&gt;
            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_REPEAT&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_LOCAL_ITERATE&lt;/span&gt;&lt;/code&gt;
            macros to help with repetitive code generation
          &lt;/li&gt;
          &lt;li&gt;
            Support for nullary expressions with tag types other than &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tag&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;terminal&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Allow 0- and 1-argument variants of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;or_&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;and_&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;em&gt;Breaking change&lt;/em&gt;: empty expressions,
            and empty alternatives are now allowed when using the Perl regular expression
            syntax. This change has been added for Perl compatibility, when the new
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;syntax_option_type&lt;/span&gt;&lt;/code&gt; &lt;em&gt;no_empty_expressions&lt;/em&gt;
            is set then the old behaviour is preserved and empty expressions are
            prohibited. This is issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1081&quot;&gt;#1081&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for Perl style ${n} expressions in format strings (issue
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2556&quot;&gt;#2556&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Added support for accessing the location of sub-expressions within the
            regular expression string (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2269&quot;&gt;#2269&lt;/a&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed compiler compatibility issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2244&quot;&gt;#2244&lt;/a&gt;,
            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2514&quot;&gt;#2514&lt;/a&gt;,
            and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2244&quot;&gt;#2458&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/thread.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            No longer catches unhandled exceptions in threads as this debuggers couldn't
            identify the cause of unhandled exceptions in threads. An unhandled exception
            will still cause the application to terminate.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tr1/index.html&quot;&gt;TR1&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for the TR1 math functions and the unordered containers.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for Codegear intrinsics.
          &lt;/li&gt;
          &lt;li&gt;
            Minor tweaks to warning suppression and alignment_of code.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Use &lt;a href=&quot;/libs/utility/swap.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Use a larger prime number list for selecting the number of buckets.
          &lt;/li&gt;
          &lt;li&gt;
            Use &lt;a href=&quot;/libs/type_traits/doc/html/boost_typetraits/category/alignment.html&quot;&gt;aligned
            storage&lt;/a&gt; to store the types.
          &lt;/li&gt;
          &lt;li&gt;
            Add support for C++0x initializer lists where they're available.
          &lt;/li&gt;
          &lt;li&gt;
            For more detail, see the &lt;a href=&quot;/doc/html/unordered/changes.html#unordered.changes.boost_1_38_0&quot;&gt;library
            changelog&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_regex&lt;/span&gt;&lt;/code&gt; gets nested
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;syntax_option_flags&lt;/span&gt;&lt;/code&gt; and
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_type&lt;/span&gt;&lt;/code&gt; typedef, for
            compatibility with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;basic_regex&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Ported to Proto v4; Proto v2 at &lt;tt&gt;boost/xpressive/proto&lt;/tt&gt;
            has been removed.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;regex_error&lt;/span&gt;&lt;/code&gt; inherits
            from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;exception&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_38_0.other_changes&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Other Changes&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Experimental support for building Boost with &lt;a href=&quot;http://www.cmake.org/&quot;&gt;CMake&lt;/a&gt;
        has been introduced in this version. For more details see the &lt;a href=&quot;https://svn.boost.org/trac/boost/wiki/CMake&quot;&gt;wiki&lt;/a&gt;,
        Discussion is taking place on the &lt;a href=&quot;http://lists.boost.org/mailman/listinfo.cgi/boost-cmake&quot;&gt;Boost-cmake
        mailing list&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        Fixed subversion properties for several files. Most notably, unix shell scripts
        should always have unix line endings, even in the windows packages.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_38_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.0.1 on Intel OS X 10.4.10, 10.5.2
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.0.1 on PowerPC OS X 10.4.9
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.3.2 on Ubuntu Linux.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.3 on Debian &amp;quot;unstable&amp;quot;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        HP-UX:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on HP-UX 64-bit.
          &lt;/li&gt;
          &lt;li&gt;
            HP C/aC++ B3910B A.06.17 on HP-UX 64-bit.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.1.1, 4.2.1 on 64-bit Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.2 on 64-bit Redhat Server 5.1
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.3, GCC 4.0.1, GCC 4.2.4 and GCC 4.3.2 on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.2 with C++0x extensions
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.2.1 on OpenSuSE Linux
          &lt;/li&gt;
          &lt;li&gt;
            pgCC 8.0-0a 64-bit target on Red Hat Enterprise Linux
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.1 on Red Hat Enterprise
            Linux
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        OS X:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 9.1, 10.0 on OS X 10.4.10
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1, 11.0 on OS X 10.5.2
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Visual C++ 9.0 on Vista EE 64-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 express on Vista 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 9.0 on XP 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 8.0, using STLport, on XP and Windows Mobile 5.0
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 7.1, using STLport, on XP
          &lt;/li&gt;
          &lt;li&gt;
            Borland 5.9.3
          &lt;/li&gt;
          &lt;li&gt;
            Borland 6.1.0
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.0, with a Visual C++ 9.0 backend, on XP 32-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 11.0, with a Visual C++ 9.0 backend, on Vista 64-bit.
          &lt;/li&gt;
          &lt;li&gt;
            Comeau 4.3.10.1 beta 2, with a Visual C++ 9.0 backend.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.4, on Cygwin
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        AIX:
        &lt;ul&gt;
          &lt;li&gt;
            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        FreeBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.2.1 on FreeBSD 7.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        NetBSD:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 4.1.2 on NetBSD 4.0/i386 and NetBSD 4.0/amd64.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        QNX:
        &lt;ul&gt;
          &lt;li&gt;
            QNX Software Development Platform 6.4.0 x86
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        Solaris:
        &lt;ul&gt;
          &lt;li&gt;
            Sun C++ 5.7, 5.8, 5.9 on Solaris 5.10
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6 on Solaris 5.10
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_38_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
      James managed this release. Thanks to Vicente Botet for helping compile these
      release notes.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.37.0</title><pubDate>Mon, 03 Nov 2008 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Library: Proto. Updated Libraries: Asio, Circular Buffer, Dynamic Bitset,
      Exception, Hash, Interprocess, Intrusive, Math, Type Traits, Unordered
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.37.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_37_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Expression template library and compiler construction toolkit for domain-specific
            embedded languages, from Eric Niebler.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_37_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Enhanced CompletionCondition concept with the signature &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;CompletionCondition&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;, where the return value indicates the
            maximum number of bytes to be transferred on the next read or write operation.
            (The old CompletionCondition signature is still supported for backwards
            compatibility).
          &lt;/li&gt;
          &lt;li&gt;
            New windows::overlapped_ptr class to allow arbitrary overlapped I/O functions
            (such as TransmitFile) to be used with Asio.
          &lt;/li&gt;
          &lt;li&gt;
            On recent versions of Linux, an eventfd descriptor is now used (rather
            than a pipe) to interrupt a blocked select/epoll reactor.
          &lt;/li&gt;
          &lt;li&gt;
            Added const overloads of lowest_layer().
          &lt;/li&gt;
          &lt;li&gt;
            Synchronous read, write, accept and connect operations are now thread
            safe (meaning that it is now permitted to perform concurrent synchronous
            operations on an individual socket, if supported by the OS).
          &lt;/li&gt;
          &lt;li&gt;
            Reactor-based io_service implementations now use lazy initialisation
            to reduce the memory usage of an io_service object used only as a message
            queue.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added new methods &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_linearized&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;const_iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Minor bug fixes and documentation updates.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/dynamic_bitset/&quot;&gt;Dynamic Bitset&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Constructor &amp;quot;do the right thing&amp;quot; dispatch, a la standard sequence
            containers (follows the proposed resolution of &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#438&quot;&gt;library
            issue 438&lt;/a&gt;, currently in the &lt;tt&gt;C++0x&lt;/tt&gt; working
            paper).
          &lt;/li&gt;
          &lt;li&gt;
            Improvements to documentation, code examples and implementation.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/exception/index.html&quot;&gt;Exception&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for non-RTTI builds.
          &lt;/li&gt;
          &lt;li&gt;
            Optimizations.
          &lt;/li&gt;
          &lt;li&gt;
            A new macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THROW_EXCEPTION&lt;/span&gt;&lt;/code&gt;
            which can be used instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;/code&gt;
            when throwing, to automatically record information about the location
            of the throw in the exception object.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Minor bug fix (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/2264&quot;&gt;ticket
            2264&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added placement insertion (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;...) methods to containers.
          &lt;/li&gt;
          &lt;li&gt;
            Containers can be used now in recursive types.
          &lt;/li&gt;
          &lt;li&gt;
            Minor bug fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Intrusive now takes advantage of compilers with variadic templates.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;clone_from&lt;/span&gt;&lt;/code&gt; functions
            now copy predicates and hash functions of associative containers.
          &lt;/li&gt;
          &lt;li&gt;
            Added incremental hashing to unordered containers via &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;incremental&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; option.
          &lt;/li&gt;
          &lt;li&gt;
            Minor bug fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math.Special
        Functions&lt;/a&gt;:&lt;/span&gt;
   Improved accuracy and testing of the inverse hypergeometric
        functions.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
   Added
        better support for the Codegear compiler.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Rename overload of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;/code&gt;
            with hint, to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace_hint&lt;/span&gt;&lt;/code&gt;
            as specified in &lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2008/n2691.pdf&quot;&gt;n2691&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Provide forwarding headers at &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_map_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_set_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Move all of the implementation inside the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered&lt;/span&gt;&lt;/code&gt;
            directory.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_37_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        GCC 4.01 on Mac OS X 10.4.10 with both Intel and Power PC
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.2.4 on Ubuntu Linux 8.10
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.3.2 on Debian Sid
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.2.1 on HP-UX Integrity
      &lt;/li&gt;
      &lt;li&gt;
        HP C/aC++ B3910B A.06.17 on HP-UX 64-bit
      &lt;/li&gt;
      &lt;li&gt;
        Visual C++ 9.0 SP1, 8.0, and 7.1 SP1, all on Windows XP
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        GCC 4.1.2 on NetBSD
      &lt;/li&gt;
      &lt;li&gt;
        HP aCC on OS: HP-UX B.11.31 U ia64 and HP-UX B.11.31 9000/800 RISC
      &lt;/li&gt;
      &lt;li&gt;
        IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40
      &lt;/li&gt;
      &lt;li&gt;
        Intel 9.1, 10.0, and 10.1, on Mac OS X 10.4.10
      &lt;/li&gt;
      &lt;li&gt;
        Compaq C++ V7.1-006 for Compaq Tru64 Unix on an OSF1 V5.1 platform.
      &lt;/li&gt;
      &lt;li&gt;
        Sun C++ 5.7, 5.8, 5.9 and GCC 3.4.6 on Sun Solaris 5.10.
      &lt;/li&gt;
      &lt;li&gt;
        On Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 3.4.3, 4.0.1, 4.2.1, 4.2.4, 4.3.2.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.2 with C++0x extensions.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.1.1, 4.2.1 on 64 bit linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 8.1, 9.0, 9.1 and 10.0
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.1
          &lt;/li&gt;
          &lt;li&gt;
            Sun Compiler 5.9, 5.10 with stdcxx
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        On Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Several testers using Visual C++ 7.1, 8.0, 9.0 and 10.0
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 7.1 with Apache C++ Standard Library 4.2.x branch.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 8.0 with STLport 5.1
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 8.0 with STLport 5.1 cross-compiling for Windows Mobile 5.0
            Pocket PC SDK (ARMV4I).
          &lt;/li&gt;
          &lt;li&gt;
            Intel 10.1, with Visual C++ 9 backend.
          &lt;/li&gt;
          &lt;li&gt;
            Borland 5.9.3 and 6.10.0
          &lt;/li&gt;
          &lt;li&gt;
            64 bit Intel 10.1, with Visual C++ 9 backend.
          &lt;/li&gt;
          &lt;li&gt;
            64 bit Visual C++ 9.0.
          &lt;/li&gt;
          &lt;li&gt;
            64-bit Visual C++ 9.0 with Apache C++ Standard Library 4.2.x branch.
          &lt;/li&gt;
          &lt;li&gt;
            Comeau C++ 4.3.10.1 beta 2, with Visual C++ 9 backend.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_37_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
      James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.36.0</title><pubDate>Thu, 14 Aug 2008 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Accumulators, Exception, Units, Unordered. Updated Libraries:
      Asio, Assign, Circular Buffer, Foreach, Function, Hash, Interprocess, Intrusive,
      Math, Multi-index Containers, MPI, PtrContainer, Spirit, Thread, Wave, Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.36.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_36_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt; Framework
        for incremental calculation, and collection of statistical accumulators,
        from Eric Niebler.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/exception/doc/boost-exception.html&quot;&gt;Exception&lt;/a&gt;:&lt;/span&gt; 
  A
        library for transporting of arbitrary data in exception objects, and transporting
        of exceptions between threads, from Emil Dotchevski.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/units/index.html&quot;&gt;Units&lt;/a&gt;:&lt;/span&gt;
  Zero-overhead dimensional
        analysis and unit/quantity manipulation and conversion, from Matthias Schabel
        and Steven Watanabe
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt; 
  Unordered
        associative containers, from Daniel James.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_36_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for serial ports.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for UNIX domain sockets.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for raw sockets and ICMP.
          &lt;/li&gt;
          &lt;li&gt;
            Added wrappers for POSIX stream-oriented file descriptors (excluding
            regular files).
          &lt;/li&gt;
          &lt;li&gt;
            Added wrappers for Windows stream-oriented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            such as named pipes (requires &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            that work with I/O completion ports).
          &lt;/li&gt;
          &lt;li&gt;
            Added wrappers for Windows random-access &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            such as files (requires &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
            that work with I/O completion ports).
          &lt;/li&gt;
          &lt;li&gt;
            Added support for reactor-style operations (i.e. they report readiness
            but perform no I/O) using a new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
            type.
          &lt;/li&gt;
          &lt;li&gt;
            Added an iterator type for bytewise traversal of buffer sequences.
          &lt;/li&gt;
          &lt;li&gt;
            Added new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_until&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_until&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; overloads that take a user-defined
            function object for locating message boundaries.
          &lt;/li&gt;
          &lt;li&gt;
            Added an experimental two-lock queue (enabled by defining &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_ENABLE_TWO_LOCK_QUEUE&lt;/span&gt;&lt;/code&gt;) that
            may provide better &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
            scalability across many processors.
          &lt;/li&gt;
          &lt;li&gt;
            Various fixes, performance improvements, and more complete coverage of
            the custom memory allocation support.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/assign/index.html&quot;&gt;Assign&lt;/a&gt;:&lt;/span&gt;
  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
        (and its variants) now has overloaded comparison operators. This allows you
        to write test code such as &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_CHECK_EQUAL&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;my_container&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Default constructor now doesn't allocate memory, and sets the capacity
            of the buffer to 0
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FOREACH&lt;/span&gt;&lt;/code&gt; macro for easily iterating
        over the elements of a sequence, from Eric Niebler.
        &lt;ul&gt;
          &lt;li&gt;
            New &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_REVERSE_FOREACH&lt;/span&gt;&lt;/code&gt;
            macro for iterating over a sequence in reverse.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Improved allocator support, from Emil Dotchevski.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
  Minor updates
        and fixes, for more info see the &lt;a href=&quot;/doc/html/hash/changes.html#hash.changes.boost_1_36_0&quot;&gt;change
        log&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added anonymous shared memory for UNIX systems.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed missing move semantics on managed memory classes.
          &lt;/li&gt;
          &lt;li&gt;
            Added copy_on_write and open_read_only options for shared memory and
            mapped file managed classes.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;/code&gt; is movable
            and supports aliasing.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cache_last&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            options to singly linked lists.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optimize_multikey&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; option to unordered container
            hooks.
          &lt;/li&gt;
          &lt;li&gt;
            Optimized unordered containers when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;store_hash&lt;/span&gt;&lt;/code&gt;
            option is used in the hook.
          &lt;/li&gt;
          &lt;li&gt;
            Implementation changed to avoid explicit use of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;/code&gt;-&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;&lt;/code&gt; blocks and be compilable with exceptions
            disabled.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added new non-central Chi-Square, Beta, F and T distributions.
          &lt;/li&gt;
          &lt;li&gt;
            Added Exponential Integral and Zeta special functions.
          &lt;/li&gt;
          &lt;li&gt;
            Added Rounding, Truncation, and Unit-in-the-last-place functions.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for compile time powers of a runtime base.
          &lt;/li&gt;
          &lt;li&gt;
            Added a few SSE2 based optimisations for the Lanczos approximations.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/mpi.html&quot;&gt;MPI&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for non-blocking operations in Python, from Andreas Klöckner.
          &lt;/li&gt;
          &lt;li&gt;
            Added support for graph topologies.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
  Minor
        additions and maintenance fixes. Consult the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_36&quot;&gt;release
        notes&lt;/a&gt; for further information.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/ptr_container/index.html&quot;&gt;PtrContainer&lt;/a&gt;:&lt;/span&gt;
  Support
        for a few more containers, and addition of insert iterators. For details
        see &lt;a href=&quot;/libs/ptr_container/doc/ptr_container.html#upgrading-from-boost-v-1-35&quot;&gt;upgrading
        details&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
  Integrated the
        &amp;quot;Classic&amp;quot; Spirit V1.8.x code base with Spirit V2, &amp;quot;The New
        Generation&amp;quot;. See &lt;a href=&quot;/libs/spirit/classic/change_log.html&quot;&gt;Change
        Log&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New generic &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;/code&gt; and
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;try_lock&lt;/span&gt;&lt;/code&gt; functions for
            locking multiple mutexes at once.
          &lt;/li&gt;
          &lt;li&gt;
            Rvalue reference support for move semantics where the compilers supports
            it.
          &lt;/li&gt;
          &lt;li&gt;
            A few bugs fixed and missing functions added (including the serious win32
            condition variable bug).
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_try_lock&lt;/span&gt;&lt;/code&gt; types
            are now backwards-compatible with Boost 1.34.0 and previous releases.
          &lt;/li&gt;
          &lt;li&gt;
            Support for passing function arguments to the thread function by supplying
            additional arguments to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;/code&gt;
            constructor.
          &lt;/li&gt;
          &lt;li&gt;
            Backwards-compatibility overloads added for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timed_lock&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timed_wait&lt;/span&gt;&lt;/code&gt; functions
            to allow use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xtime&lt;/span&gt;&lt;/code&gt;
            for timeouts.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Wave V2.0 is a new major release introducing some breaking API changes,
            preventing it to be used with Boost versions earlier than V1.36.0. Mainly,
            the API and hook interface have been streamlined for more consistency.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a couple of bugs, improved regression test system to include testing
            of the preporcessing hooks interface (for details see: &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt; 
  Regular
        expressions that can be written as strings or as expression templates, and
        that can refer to each other and themselves recursively with the power of
        context-free grammars, from Eric Niebler.
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            for specifying which parts of the input sequence to ignore when matching
            it against a regex.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;regex_replace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            accepts formatter objects and formatter expressions in addition to format
            strings.
          &lt;/li&gt;
          &lt;li&gt;
            Range-based &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;regex_replace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; algorithm.
          &lt;/li&gt;
          &lt;li&gt;
            Fix crash when semantic actions are placed in look-aheads, look-behinds
            or independent sub-expressions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_36_0.compilers_tested&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        GCC 4.01 on Mac OS X 10.4.10 with both Intel and Power PC
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.2.3 on Ubuntu Linux 8.04.1
      &lt;/li&gt;
      &lt;li&gt;
        HP C/aC++ B3910B A.06.17 on HP-UX 64-bit
      &lt;/li&gt;
      &lt;li&gt;
        Visual C++ 9.0 SP1 beta, 8.0 SP1, and 7.1, all on Windows XP SP-2
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        GCC 4.2.1 on FreeBSD-7
      &lt;/li&gt;
      &lt;li&gt;
        GCC 4.1.2 on NetBSD
      &lt;/li&gt;
      &lt;li&gt;
        HP aCC on OS: HP-UX B.11.31 U ia64 and HP-UX B.11.31 9000/800 RISC
      &lt;/li&gt;
      &lt;li&gt;
        IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40
      &lt;/li&gt;
      &lt;li&gt;
        Intel 9.1, 10.0, and 10.1, on Mac OS X 10.4.1
      &lt;/li&gt;
      &lt;li&gt;
        Compaq C++ V7.1-006 for Compaq Tru64 Unix on an OSF1 V5.1 platform.
      &lt;/li&gt;
      &lt;li&gt;
        Sun C++ 5.7, 5.8, 5.9 and GCC 3.4.6 on Sun Solaris 5.10.
      &lt;/li&gt;
      &lt;li&gt;
        On Linux:
        &lt;ul&gt;
          &lt;li&gt;
            GCC 3.4.3, 4.0.1, 4.2.1, 4.3.0.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 4.3.0 with C++0x extensions.
          &lt;/li&gt;
          &lt;li&gt;
            GCC 3.4.6, 4.1.1, 4.2.1 on 64 bit linux.
          &lt;/li&gt;
          &lt;li&gt;
            Intel C++ 8.1, 9.0 and 9.1.
          &lt;/li&gt;
          &lt;li&gt;
            QLogic PathScale(TM) Compiler Suite: Version 3.1
          &lt;/li&gt;
          &lt;li&gt;
            pgCC 7.2-3 64-bit target on x86-64 Linux
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        On Windows:
        &lt;ul&gt;
          &lt;li&gt;
            Intel 10.1, with Visual C++ 9 backend.
          &lt;/li&gt;
          &lt;li&gt;
            Lots of tests on Visual C++ 7.1, 8.0, 9.0
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 7.1 with Apache C++ Standard Library 4.2.x branch.
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 8.0 with STLport 5.1
          &lt;/li&gt;
          &lt;li&gt;
            Visual C++ 8.0 with STLport 5.1 cross-compiling for Windows Mobile 5.0
            Pocket PC SDK (ARMV4I).
          &lt;/li&gt;
          &lt;li&gt;
            Borland 5.6.4, 5.8.2, 5.9.3
          &lt;/li&gt;
          &lt;li&gt;
            64 bit Intel 10.1, with Visual C++ 9 backend.
          &lt;/li&gt;
          &lt;li&gt;
            64 bit Visual C++ 9.
          &lt;/li&gt;
          &lt;li&gt;
            Comeau C++ 4.3.10.1 beta 2, with Visual C++ 9 backend.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_36_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene
      Rivera&lt;/a&gt;, and Daniel James managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.35.0</title><pubDate>Sat, 29 Mar 2008 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Asio, Bimap, Circular Buffer, Function Types, Fusion, GIL, Interprocess,
      Intrusive, Math/Special Functions, Math/Statistical Distributions, MPI, System.
      Updated Libraries: Graph, Hash, Iostreams, Multi Array, Multi-index Containers,
      Serialization, Thread, Wave, Xpressive.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.35.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_35_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt; Portable networking,
        including sockets, timers, hostname resolution and socket iostreams, from
        Chris Kohlhoff.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/bimap/index.html&quot;&gt;Bimap&lt;/a&gt;:&lt;/span&gt; Boost.Bimap is a
        bidirectional maps library for C++. With Boost.Bimap you can create associative
        containers in which both types can be used as key, from Matias Capeletto.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt; STL
        compliant container also known as ring or cyclic buffer, from Jan Gaspar.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function_types/index.html&quot;&gt;Function Types&lt;/a&gt;:&lt;/span&gt; 
  Boost.FunctionTypes
        provides functionality to classify, decompose and synthesize function, function
        pointer, function reference and pointer to member types. From Tobias Schwinger.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt; 
  Library for working
        with tuples, including various containers, algorithms, etc. From Joel de
        Guzman, Dan Marsden and Tobias Schwinger.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/gil/doc/index.html&quot;&gt;GIL&lt;/a&gt;:&lt;/span&gt; 
  Generic Image Library,
        from Lubomir Bourdev and Hailin Jin.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt; 
  Shared
        memory, memory mapped files, process-shared mutexes, condition variables,
        containers and allocators, from Ion Gaztañaga.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt; 
  Intrusive
        containers and algorithms, from Ion Gaztañaga.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math/Special
        Functions&lt;/a&gt;:&lt;/span&gt; 
  A wide selection of mathematical special functions from
        John Maddock, Paul Bristow, Hubert Holin and Xiaogang Zhang.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math/Statistical
        Distributions&lt;/a&gt;:&lt;/span&gt; 
  A wide selection of univariate statistical distributions
        and functions that operate on them from John Maddock and Paul Bristow
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/mpi.html&quot;&gt;MPI&lt;/a&gt;:&lt;/span&gt; 
  Message Passing Interface
        library, for use in distributed-memory parallel application programming,
        from Douglas Gregor and Matthias Troyer.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/system/index.html&quot;&gt;System&lt;/a&gt;:&lt;/span&gt; 
  Operating system
        support, including the diagnostics support that will be part of the C++0x
        standard library, from Beman Dawes.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_35_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
  Generic graph
        components and algorithms. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;kolmogorov_max_flow&lt;/span&gt;&lt;/code&gt;,
            from Stephan Diederich as part of the 2006 Google Summer of Code.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_dimacs_max_flow&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;write_dimacs_max_flow&lt;/span&gt;&lt;/code&gt;
            for max-flow problems, from Stephan Diederich.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_graphml&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;write_graphml&lt;/span&gt;&lt;/code&gt; for GraphML input/output,
            from Tiago de Paula Peixoto.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;minimum_cycle_ratio&lt;/span&gt;&lt;/code&gt; and
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;maximum_cycle_ratio&lt;/span&gt;&lt;/code&gt;,
            from Dmitry Bufistov and Andrey Parfenov.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boyer_myrvold_planarity_test&lt;/span&gt;&lt;/code&gt;,
            along with a suite of algorithms for planar graphs, from Aaron Windsor.
          &lt;/li&gt;
          &lt;li&gt;
            LEDA Adaptor improvements, from Jens Müller.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
  A TR1 hash
        function object, from Daniel James. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Support for &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;complex&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Improved the algorithm for hashing floating point numbers.
          &lt;/li&gt;
          &lt;li&gt;
            A few bug and warning fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt; Framework
        for defining streams, stream buffers and i/o filters, from Jonathan Turkanis.
        Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Clarified the semantics of close(). This fixes several bugs but will
            break some existing code. See &lt;a href=&quot;/libs/iostreams/doc/index.html?path=12&quot;&gt;Release
            Notes&lt;/a&gt; for details.
          &lt;/li&gt;
          &lt;li&gt;
            Numerous other bug fixes and optimizations.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_array/index.html&quot;&gt;Multi Array&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &amp;quot;dimensionality&amp;quot; compile-time constante to the MultiArray
            concept.
          &lt;/li&gt;
          &lt;li&gt;
            For greater control over error situations, uses of C++ assert have been
            replaced with BOOST_ASSERT.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a bug with simultaneous resizing and reindexing.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New &lt;a href=&quot;/libs/multi_index/doc/tutorial/key_extraction.html#global_fun&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;global_fun&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; predefined key extractor.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/libs/multi_index/doc/tutorial/indices.html#iterator_to&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;iterator_to&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; facility.
          &lt;/li&gt;
          &lt;li&gt;
            Included &lt;a href=&quot;/libs/multi_index/doc/tutorial/creation.html#special_allocator&quot;&gt;support
            for non-standard allocators&lt;/a&gt; such as those of &lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Boost.Interprocess&lt;/a&gt;,
            which makes &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;s
            placeable in shared memory.
          &lt;/li&gt;
          &lt;li&gt;
            New versions of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;modify&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;modify_key&lt;/span&gt;&lt;/code&gt; with rollback,
            as described in the &lt;a href=&quot;/libs/multi_index/doc/tutorial/basics.html#ord_updating&quot;&gt;tutorial&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            A number of optimizations and minor improvements have also been included.
            For a complete list of changes, see the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_35&quot;&gt;release
            notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/serialization/index.html&quot;&gt;Serialization&lt;/a&gt;:&lt;/span&gt; 
   Boost.Serialization
        has been updated with optimizations for dense arrays.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The Thread library has been updated to be more in line with the C++0x
            working draft.
          &lt;/li&gt;
          &lt;li&gt;
            Instances of boost::thread and of the various lock types are now movable.
          &lt;/li&gt;
          &lt;li&gt;
            Threads can be interrupted at interruption points.
          &lt;/li&gt;
          &lt;li&gt;
            Condition variables can now be used with any type that implements the
            Lockable concept, through the use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable_any&lt;/span&gt;&lt;/code&gt;
            (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition&lt;/span&gt;&lt;/code&gt; is a typedef to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable_any&lt;/span&gt;&lt;/code&gt;, provided for
            backwards compatibility). &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable&lt;/span&gt;&lt;/code&gt;
            is provided as an optimization, and will only work with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Thread IDs are separated from boost::thread, so a thread can obtain it's
            own ID (using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_id&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;),
            and IDs can be used as keys in associative containers, as they have the
            full set of comparison operators.
          &lt;/li&gt;
          &lt;li&gt;
            Timeouts are now implemented using the Boost DateTime library, through
            a typedef &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;system_time&lt;/span&gt;&lt;/code&gt; for absolute timeouts,
            and with support for relative timeouts in many cases. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;xtime&lt;/span&gt;&lt;/code&gt;
            is supported for backwards compatibility only.
          &lt;/li&gt;
          &lt;li&gt;
            Locks are implemented as publicly accessible templates &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lock_guard&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_lock&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_lock&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;upgrade_lock&lt;/span&gt;&lt;/code&gt;,
            which are templated on the type of the mutex. The Lockable concept has
            been extended to include publicly available &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; member functions, which are used by
            the lock types.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;try_mutex&lt;/span&gt;&lt;/code&gt; has been removed, and the
            functionality subsumed into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;/code&gt;.
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;try_mutex&lt;/span&gt;&lt;/code&gt; is left as a typedef, but
            is no longer a separate class.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_try_mutex&lt;/span&gt;&lt;/code&gt; has been removed,
            and the functionality subsumed into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_mutex&lt;/span&gt;&lt;/code&gt;.
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_try_mutex&lt;/span&gt;&lt;/code&gt; is left as a typedef,
            but is no longer a separate class.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lock_ops&lt;/span&gt;&lt;/code&gt; has been removed. Code that
            relies on the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock_ops&lt;/span&gt;&lt;/code&gt;
            implementation detail will no longer work, as this has been removed,
            as it is no longer necessary now that mutex types now have public &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            member functions.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;&lt;/code&gt; constructors
            with a second parameter of type bool are no longer provided. With previous
            boost releases, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;some_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;some_mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
            could be used to create a lock object that was associated with a mutex,
            but did not lock it on construction. This facility has now been replaced
            with the constructor that takes a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;defer_lock_type&lt;/span&gt;&lt;/code&gt;
            as the second parameter: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;some_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;some_mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;defer_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            The broken &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;read_write_mutex&lt;/span&gt;&lt;/code&gt; has been replaced
            with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_mutex&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt; Standards conformant
        implementation of the mandated C99/C++ preprocessor functionality packed
        behind an easy to use iterator interface, from Hartmut Kaiser. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Added the possibility to continue the preprocessing after an error occured.
          &lt;/li&gt;
          &lt;li&gt;
            Added the macro introspection API to the wave::context object.
          &lt;/li&gt;
          &lt;li&gt;
            Added threading support to the library.
          &lt;/li&gt;
          &lt;li&gt;
            Improved the overall performance by upto 30%.
          &lt;/li&gt;
          &lt;li&gt;
            Changed and unified preprocessor hook interface (this is an interface
            breaking change!), added several new preprocessor hook functions.
          &lt;/li&gt;
          &lt;li&gt;
            Added serialization support.
          &lt;/li&gt;
          &lt;li&gt;
            Added new examples (for instance: Hannibal - a partial C++ parser, by
            Danny Havenith).
          &lt;/li&gt;
          &lt;li&gt;
            Added a new lexical analyzer based on Ben Hansons Lexertl library.
          &lt;/li&gt;
          &lt;li&gt;
            Fixed a large number of other bugs and problems.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt; Regular
        expressions that can be written as strings or as expression templates, and
        that can refer to each other and themselves recursively with the power of
        context-free grammars, from Eric Niebler. Highlights:
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;em&gt;semantic actions&lt;/em&gt; to static regexes. A semantic
            action is code that executes when part of a regular expression matches.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;em&gt;custom assertions&lt;/em&gt; to static regexes. A custom
            assertion is a Boolean predicate that can participate in the regex match.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;em&gt;named regexes&lt;/em&gt; for embedding a static or dynamic
            regex into a dynamic regex. This can be used to create dynamic regex
            grammars.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;em&gt;named captures&lt;/em&gt; to dynamic regexes, like Perl.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_35_0.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The following compilers are officially supported in this release:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        HP aC++ A.06.14 on HP-UX
      &lt;/li&gt;
      &lt;li&gt;
        Darwin GCC 4.01.
      &lt;/li&gt;
      &lt;li&gt;
        GNU GCC up to version 4.2.1, on Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        Intel C++ 9.1 on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        Intel C++ 10.1 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        Microsoft Visual C++ 7.1 and 8 on Windows (Visual Sudio .NET 2003 and 2005).
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      In addition the following compilers should be well supported, but weren't part
      of our release criteria for 1.35:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        IBM Visual Age 9.0 on AIX.
      &lt;/li&gt;
      &lt;li&gt;
        Intel C++ 10 and later on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        GNU GCC 4.3 and later on Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        Microsoft Visual C++ 9 (Visual Studio .NET 2008).
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_35_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt; managed this
      release.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.34.1</title><pubDate>Tue, 24 Jul 2007 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Bugfix Release.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.34.1/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;p&gt;
    This is a bug fix release addressing many problems with the 1.34.0 release. It
    is a recommended upgrade for all users of Boost 1.34.0. For a complete list of
    fixes see &lt;a href=&quot;http://svn.boost.org/trac/boost/query?status=closed&amp;amp;milestone=Boost+1.34.1&quot;&gt;Boost
    Trac&lt;/a&gt;.
  &lt;/p&gt;
  &lt;div id=&quot;version_1_34_1.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      New in this release is improved support for the IBM XL C/C++ compiler.
    &lt;/p&gt;
    &lt;p&gt;
      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
      rely on modern C++ features not available in all compilers, not all Boost libraries
      will work with every compiler. New in this release The following compilers
      and platforms have been extensively tested with Boost, although many other
      compilers and platforms will work as well. For more information, see the &lt;a href=&quot;http://www.boost.org/regression/release/user/&quot;&gt;regression test results&lt;/a&gt;.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developer.apple.com/&quot;&gt;Apple GCC&lt;/a&gt; 4.0.1 on Mac OS
        X.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.codegear.com/products/cppbuilder&quot;&gt;Borland C++&lt;/a&gt;
        5.8.2 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GNU C++&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;
            3.2.x., 3.3.x, 3.4.x, 4.0.x, 4.1.x on Linux
          &lt;/li&gt;
          &lt;li&gt;
            4.1.x on Solaris
          &lt;/li&gt;
          &lt;li&gt;
            3.4.x on Windows
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://h30097.www3.hp.com/cplus/&quot;&gt;HP C++ for Tru64 UNIX 7.1&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.hp.com/go/c++&quot;&gt;HP aC++ A.06.14&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm&quot;&gt;Intel
        C++&lt;/a&gt; 9.1 on Windows, 9.0 on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.metrowerks.com/&quot;&gt;Metrowerks CodeWarrior&lt;/a&gt; 9.4
        on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://msdn.microsoft.com/visualc/&quot;&gt;Microsoft Visual C++&lt;/a&gt;
        6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
        support the non-standard &amp;quot;Safe&amp;quot; C++ Library shipping with Visual
        C++ 8.0, which may result in many spurious warnings from Boost headers and
        other standards-conforming C++ code. To suppress these warnings, define the
        macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_SCL_SECURE_NO_DEPRECATE&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developers.sun.com/sunstudio/index.jsp&quot;&gt;Sun Studio 11&lt;/a&gt;
        on Solaris.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_34_1.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/thomas_witt.html&quot;&gt;Thomas Witt&lt;/a&gt; managed this
      release.
    &lt;/p&gt;
    &lt;p&gt;
      A great number of people contributed their time and expertise to make this
      release possible. Special thanks go to Kim Barrett consolidating Boost.Iostreams
      changes from various branches and Rene Rivera for general build and installation
      support.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.34.0</title><pubDate>Sat, 12 May 2007 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Foreach, Statechart, TR1, Typeof, Xpressive. Updated Libraries:
      Assign, Date_time, Filesystem, Function, Hash, Graph, MultiArray, Multi-Index,
      Optional, Parameter, Pointer Container, Python, Signals, Smart Pointer, String
      Algorithm, Wave
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.34.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_34_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/doc/html/foreach.html&quot;&gt;Foreach Library&lt;/a&gt;:&lt;/span&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FOREACH&lt;/span&gt;&lt;/code&gt; macro for easily iterating
        over the elements of a sequence, from Eric Niebler.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/statechart/doc/index.html&quot;&gt;Statechart
        Library&lt;/a&gt;:&lt;/span&gt;
  Arbitrarily complex finite state machines can be implemented
        in easily readable and maintainable C++ code, from Andreas Huber.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/tr1/index.html&quot;&gt;TR1 Library&lt;/a&gt;:&lt;/span&gt; An
        implementation of the C++ Technical Report on Standard Library Extensions,
        from John Maddock. This library does not itself implement the TR1 components,
        rather it's a thin wrapper that will include your standard library's TR1
        implementation (if it has one), otherwise it will include the Boost Library
        equivalents, and import them into namespace &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tr1&lt;/span&gt;&lt;/code&gt;.
        Highlights include: Reference Wrappers, Smart Pointers, result_of, Function
        Object Binders, Polymorphic function wrappers, Type Traits, Random Number
        Generators and Distributions, Tuples, Fixed Size Array, Hash Function Objects,
        Regular Expressions, and Complex Number Additional Algorithms.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/doc/html/typeof.html&quot;&gt;Typeof Library&lt;/a&gt;:&lt;/span&gt; Typeof
        operator emulation, from Arkadiy Vertleyb and Peder Holt.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/doc/html/xpressive.html&quot;&gt;Xpressive Library&lt;/a&gt;:&lt;/span&gt; Regular
        expressions that can be written as strings or as expression templates, and
        that can refer to each other and themselves recursively with the power of
        context-free grammars, from Eric Niebler.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_34_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/assign/index.html&quot;&gt;Assign Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ptr_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            via the new function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ptr_map_insert&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Support for initialization of &lt;a href=&quot;/doc/libs/1_34_0/libs/ptr_container/index.html&quot;&gt;Pointer
            Containers&lt;/a&gt; when the containers hold pointers to an abstract base
            class.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/doc/html/date_time.html&quot;&gt;Date_time library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for new US/Canada timezone rules and other bug fixes. See &lt;a href=&quot;/doc/libs/1_34_0/doc/html/date_time/details.html#changes&quot;&gt;Change
            History&lt;/a&gt; for details.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/index.htm&quot;&gt;Filesystem
        Library&lt;/a&gt;:&lt;/span&gt; Major upgrade in preparation for submission to the C++ Standards
        Committee for TR2. Changes include:
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Internationalization&quot;&gt;Internationalization&lt;/a&gt;,
            provided by class templates &lt;em&gt;basic_path&lt;/em&gt;, &lt;em&gt;basic_filesystem_error&lt;/em&gt;,
            &lt;em&gt;basic_directory_iterator&lt;/em&gt;, and &lt;em&gt;basic_directory_entry&lt;/em&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Simplification&quot;&gt;Simplification&lt;/a&gt;
            of the path interface by eliminating special constructors to identify
            native formats.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Rationalization&quot;&gt;Rationalization&lt;/a&gt;
            of predicate function design, including the addition of several new functions.
          &lt;/li&gt;
          &lt;li&gt;
            Clearer specification by reference to &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/design.htm#POSIX-01&quot;&gt;POSIX&lt;/a&gt;,
            the ISO/IEEE Single Unix Standard, with provisions for Windows and other
            operating systems.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Preservation&quot;&gt;Preservation&lt;/a&gt;
            of existing user code whenever possible.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#More_efficient&quot;&gt;More
            efficient&lt;/a&gt; directory iteration.
          &lt;/li&gt;
          &lt;li&gt;
            Addition of a &lt;a href=&quot;/doc/libs/1_34_0/libs/filesystem/doc/tr2_proposal.html#Class-template-basic_recursive_directory_iterator&quot;&gt;recursive
            directory iterator&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt;
  Boost.Function
        now implements a small buffer optimization, which can drastically improve
        the performance when copying or constructing Boost.Function objects storing
        small function objects. For instance, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;identifier&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
        requires no heap allocation when placed into a Boost.Function object.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/functional/hash/index.html&quot;&gt;Functional/Hash
        Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Use declarations for standard classes, so that the library doesn't need
            to include all of their headers
          &lt;/li&gt;
          &lt;li&gt;
            Deprecated the &lt;tt&gt;&amp;lt;boost/functional&lt;em&gt;hash&lt;/em&gt;*.hpp&amp;gt;&lt;/tt&gt;
            headers.
          &lt;/li&gt;
          &lt;li&gt;
            Add support for the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HASH_NO_EXTENSIONS&lt;/span&gt;&lt;/code&gt;
            macro, which disables the extensions to TR1
          &lt;/li&gt;
          &lt;li&gt;
            Minor improvements to the hash functions for floating point numbers.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/maximum_matching.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;edmonds_maximum_cardinality_matching&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Aaron Windsor.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/lengauer_tarjan_dominator.htm&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lengauer_tarjan_dominator_tree&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from JongSoo Park.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/compressed_sparse_row.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compressed_sparse_row_graph&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Jeremiah Willcock and Douglas Gregor of Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/sorted_erdos_renyi_gen.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sorted_erdos_renyi_iterator&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Jeremiah Willcock of Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/biconnected_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;biconnected_components&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; now
            supports a visitor and named parameters, from Janusz Piwowarski.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/adjacency_matrix.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; now models
            the &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/BidirectionalGraph.html&quot;&gt;Bidirectional
            Graph&lt;/a&gt; concept.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/dijkstra_shortest_paths.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; now
            calls &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vis&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;initialize_vertex&lt;/span&gt;&lt;/code&gt; for each vertex during
            initialization.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;em&gt;Note:&lt;/em&gt; the name of the compiled library
            for the &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/read_graphviz.html&quot;&gt;GraphViz
            reader&lt;/a&gt; has changed to &lt;tt&gt;boost_graph&lt;/tt&gt; (from &lt;tt&gt;bgl-viz&lt;/tt&gt;)
            to match Boost conventions.
          &lt;/li&gt;
          &lt;li&gt;
            See the &lt;a href=&quot;/doc/libs/1_34_0/libs/graph/doc/history.html#1.34.0&quot;&gt;complete
            revision history&lt;/a&gt; for more information.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/multi_array/index.html&quot;&gt;MultiArray
        Library&lt;/a&gt;:&lt;/span&gt;
  Boost.MultiArray now by default provides range-checking for
        &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt;.
        Range checking can be disabled by defining the macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_DISABLE_ASSERTS&lt;/span&gt;&lt;/code&gt;
        before including &lt;tt&gt;multi_array.hpp&lt;/tt&gt;. A bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
        related to storage orders was fixed.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/multi_index/doc/index.html&quot;&gt;Multi-index
        Containers Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New &lt;a href=&quot;/doc/libs/1_34_0/libs/multi_index/doc/tutorial/indices.html#rnd_indices&quot;&gt;random
            access indices&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Non key-based indices feature new &lt;a href=&quot;/doc/libs/1_34_0/libs/multi_index/doc/tutorial/indices.html#rearrange&quot;&gt;rearrange
            facilities&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            This version also includes a number of optimizations and usage improvements.
            For a complete list of changes, see the library &lt;a href=&quot;/doc/libs/1_34_0/libs/multi_index/doc/release_notes.html#boost_1_34&quot;&gt;release
            notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/optional/index.html&quot;&gt;Optional Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none_t&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none&lt;/span&gt;&lt;/code&gt; now added to Optional's documentation
          &lt;/li&gt;
          &lt;li&gt;
            Relational operators now directly support arguments of type &lt;code&gt;&lt;span class=&quot;char&quot;&gt;'T'&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;char&quot;&gt;'none_t'&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            operator-&amp;gt;() now also works with reference types.
          &lt;/li&gt;
          &lt;li&gt;
            Helper functions &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;make_optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;make_optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cond&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;get_optional_value_or&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;opt&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;alternative_value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
            added.
          &lt;/li&gt;
          &lt;li&gt;
            Constructor taking a boolean condition (as well as a value) added.
          &lt;/li&gt;
          &lt;li&gt;
            Member function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get_value_or&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;alternative_value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; added.
          &lt;/li&gt;
          &lt;li&gt;
            Incompatbility bug with mpl::apply&amp;lt;&amp;gt; fixed.
          &lt;/li&gt;
          &lt;li&gt;
            Converting assignment bug with uninitialized lvalues fixed.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/parameter/index.html&quot;&gt;Parameter
        Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Every ArgumentPack is now a valid &lt;a href=&quot;/doc/libs/1_34_0/libs/mpl/doc/refmanual/forward-sequence.html&quot;&gt;MPL
            Forward Sequence.&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Support for unnamed arguments (those whose keyword is deduced from their
            types) is added.
          &lt;/li&gt;
          &lt;li&gt;
            Support for named and unnamed template arguments is added.
          &lt;/li&gt;
          &lt;li&gt;
            New overload generation macros solve the &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1385.htm&quot;&gt;forwarding
            problem&lt;/a&gt; directly.
          &lt;/li&gt;
          &lt;li&gt;
            See also the Python library changes, below.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/ptr_container/index.html&quot;&gt;Pointer
        Container Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for serialization via &lt;a href=&quot;/doc/libs/1_34_0/libs/serialization/index.html&quot;&gt;Boost.Serialization.&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Exceptions can be disabled by defining the macro BOOST_PTR_CONTAINER_NO_EXCEPTIONS
            before including any header. This macro is defined by default if BOOST_NO_EXCEPTIONS
            is defined.
          &lt;/li&gt;
          &lt;li&gt;
            Additional &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;auto_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            overloads added s.t. one can also pass &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;auto_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; instead of only &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt; arguments to member functions.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;transfer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
            now has weaker requirements s.t. one can transfer objects from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ptr_container&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Derived&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ptr_container&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;,
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/python/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Boost.Python now automatically appends C++ signatures to docstrings.
            The new &lt;a href=&quot;/doc/libs/1_34_0/libs/python/doc/v2/docstring_options.html&quot;&gt;&lt;tt&gt;docstring_options.hpp&lt;/tt&gt;&lt;/a&gt;
            header is available to control the content of docstrings.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/python/doc/v2/stl_iterator.html#stl_input_iterator-spec&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;stl_input_iterator&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, for turning
            a Python iterable object into an STL input iterator, from Eric Niebler.
          &lt;/li&gt;
          &lt;li&gt;
            Support for &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;
            conversions is added.
          &lt;/li&gt;
          &lt;li&gt;
            Integrated support for wrapping C++ functions built with the parameter
            library; keyword names are automatically known to docsstrings.
          &lt;/li&gt;
          &lt;li&gt;
            Enhancements to the API for better embedding support (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;python&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;exec_file&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/doc/html/signals.html&quot;&gt;Signals Library&lt;/a&gt;:&lt;/span&gt; More
        improvements to signal invocation performance from Robert Zeh.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/smart_ptr/smart_ptr.htm&quot;&gt;Smart Pointers
        Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/smart_ptr/shared_ptr.htm#allocator_constructor&quot;&gt;Allocator
            support&lt;/a&gt; as proposed in &lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1851.pdf&quot;&gt;N1851&lt;/a&gt;
            (162 Kb PDF).
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_34_0/libs/smart_ptr/pointer_cast.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pointer_cast&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;/doc/libs/1_34_0/libs/smart_ptr/pointer_to_other.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pointer_to_other&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; utilities
            to allow pointer-independent code, from Ion Gaztanaga.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/algorithm/string/index.html&quot;&gt;String
        Algorithm Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexicographical_compare&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;join&lt;/span&gt;&lt;/code&gt;
          &lt;/li&gt;
          &lt;li&gt;
            New comparison predicates &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_less&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_not_greater&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Negative indexes support (like Perl) in various algorihtms (&lt;code&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_head&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tail&lt;/span&gt;&lt;/code&gt;,
            &lt;code&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_nth&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_34_0/libs/wave/index.html&quot;&gt;Wave Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Wave now correctly recognizes pp-number tokens as mandated by the C++
            Standard, which are converted to C++ tokens right before they are returned
            from the library.
          &lt;/li&gt;
          &lt;li&gt;
            Several new preprocessing hooks have been added. For a complete description
            please refer to the related documentation page: &lt;a href=&quot;/doc/libs/1_34_0/libs/wave/doc/class_reference_ctxpolicy.html&quot;&gt;The
            Context Policy&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Shared library (dll) support has been added for the generated Wave libraries.
          &lt;/li&gt;
          &lt;li&gt;
            The overall error handling has been improved. It is now possible to recover
            and continue after an error or a warning was issued.
          &lt;/li&gt;
          &lt;li&gt;
            Support for optional comment and/or full whitespace preservation in the
            generated output stream has been added.
          &lt;/li&gt;
          &lt;li&gt;
            The Wave library now performs automatic include guard detection to avoid
            accessing header files more than once, if appropriate.
          &lt;/li&gt;
          &lt;li&gt;
            Full interactive mode has been added to the Wave tool. Now the Wave tool
            can be used just like Python or Perl for instance to interactively try
            out your BOOST_PP macros. Additionally it is now possible to load and
            save the current state of an interactive session (macro tables et.al.).
          &lt;/li&gt;
          &lt;li&gt;
            The overall performance has been improved by upto 40-60%, depending on
            the concrete files to process.
          &lt;/li&gt;
          &lt;li&gt;
            Support for new pragmas has been added allowing to control certain library
            features from inside the preprocessed sources (partial output redirection,
            control of generated whitespace and #line directives).
          &lt;/li&gt;
          &lt;li&gt;
            Optional support for #pragma message &amp;quot;...&amp;quot; has been added.
          &lt;/li&gt;
          &lt;li&gt;
            This version also includes a number of bug fixes and usage improvements.
            For a complete list of changes, see the libraries &lt;a href=&quot;/doc/libs/1_34_0/libs/wave/ChangeLog&quot;&gt;change
            log&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_34_0.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
      rely on modern C++ features not available in all compilers, not all Boost libraries
      will work with every compiler. The following compilers and platforms have been
      extensively tested with Boost, although many other compilers and platforms
      will work as well. For more information, see the &lt;a href=&quot;http://www.boost.org/regression/release/user/&quot;&gt;regression
      test results&lt;/a&gt;.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developer.apple.com/&quot;&gt;Apple GCC&lt;/a&gt; 4.0.1 on Mac OS
        X.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.codegear.com/products/cppbuilder&quot;&gt;Borland C++&lt;/a&gt;
        5.8.2 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://gcc.gnu.org/&quot;&gt;GNU C++&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;
            3.2.x., 3.3.x, 3.4.x, 4.0.x, 4.1.x on Linux
          &lt;/li&gt;
          &lt;li&gt;
            4.1.x on Solaris
          &lt;/li&gt;
          &lt;li&gt;
            3.4.x on Windows
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://h30097.www3.hp.com/cplus/&quot;&gt;HP aC++ A.06.14&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm&quot;&gt;Intel
        C++&lt;/a&gt; 9.1 on Windows, 9.0 on Linux.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.metrowerks.com/&quot;&gt;Metrowerks CodeWarrior&lt;/a&gt; 9.4
        on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://msdn.microsoft.com/visualc/&quot;&gt;Microsoft Visual C++&lt;/a&gt;
        6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
        support the non-standard &amp;quot;Safe&amp;quot; C++ Library shipping with Visual
        C++ 8.0, which may result in many spurious warnings from Boost headers and
        other standards-conforming C++ code. To suppress these warnings, define the
        macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_SCL_SECURE_NO_DEPRECATE&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developers.sun.com/sunstudio/compilers_index.html&quot;&gt;Sun
        Studio 11&lt;/a&gt; on Solaris.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_34_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/users/people/thomas_witt.html&quot;&gt;Thomas Witt&lt;/a&gt; managed this
      release.
    &lt;/p&gt;
    &lt;p&gt;
      A great number of people contributed their time and expertise to make this
      release possible. Special thanks go to Vladimir Prus for making Boost.Build
      version 2 a reality, David Abrahams for authoring a new getting started guide
      and Greg D. for answering countless questions.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.33.1</title><pubDate>Tue,  5 Dec 2006 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Any, Config, Python, Smart Pointer, Regex, Iostreams, Functional/Hash,
      Multi-index Containers, Graph, Signals, Thread, and Wave.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.33.1/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_33_1.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/doc/html/any.html&quot;&gt;Any Library&lt;/a&gt;:&lt;/span&gt; Cast
        to reference types introduced in 1.33.0 is now documented on &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;any_cast&lt;/span&gt;&lt;/code&gt; documentation page.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/bind/bind.html&quot;&gt;Bind Library&lt;/a&gt;:&lt;/span&gt; Bind
        expressions now support &lt;a href=&quot;/doc/libs/1_33_1/libs/bind/bind.html#operators&quot;&gt;comparisons
        and negation&lt;/a&gt;. Example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/config/index.html&quot;&gt;Config Library&lt;/a&gt;:&lt;/span&gt; Don't
        undef &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_LIB_TOOLSET&lt;/span&gt;&lt;/code&gt; after
        use.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/python/doc/index.html&quot;&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            The build now assumes Python 2.4 by default, rather than 2.2
          &lt;/li&gt;
          &lt;li&gt;
            Support Python that's built without Unicode support
          &lt;/li&gt;
          &lt;li&gt;
            Support for wrapping classes with overloaded address-of (&lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;) operators
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/smart_ptr/index.html&quot;&gt;Smart Pointer
        Library&lt;/a&gt;:&lt;/span&gt; Fixed problems under Metrowerks CodeWarrior on PowerPC (Mac
        OS X) with inlining on, GNU GCC on PowerPC 64.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/regex/doc/index.html&quot;&gt;Regex Library&lt;/a&gt;:&lt;/span&gt; Fixed
        the supplied makefiles, and other small compiler specific changes. Refer
        to the &lt;a href=&quot;/doc/libs/1_33_1/libs/regex/doc/history.html&quot;&gt;regex history
        page&lt;/a&gt; for more information on these and other small changes.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/iostreams/doc/index.html&quot;&gt;Iostreams
        Library&lt;/a&gt;:&lt;/span&gt;
  Improved the interface for accessing a chain's components,
        added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_open&lt;/span&gt;&lt;/code&gt; members to
        the file and file descriptor devices, fixed memory-mapped files on Windows,
        and made minor changes to the documentation.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/python/doc/index.html&quot;&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for docstrings on nonstatic properties.
          &lt;/li&gt;
          &lt;li&gt;
            We now export the client-provided docstrings for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;em&gt;XXX&lt;/em&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_FUNCTION_OVERLOADS&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; for only the last overload.
          &lt;/li&gt;
          &lt;li&gt;
            Support for Embedded VC++ 4 and GCC-3.3 on MacOS added
          &lt;/li&gt;
          &lt;li&gt;
            Introduced better support for rvalue from-python conversions of shared_ptr.
          &lt;/li&gt;
          &lt;li&gt;
            Support for exposing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt; with the indexing suite.
          &lt;/li&gt;
          &lt;li&gt;
            updated visual studio project build file.
          &lt;/li&gt;
          &lt;li&gt;
            Added search feature to the index page.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/functional/hash/index.html&quot;&gt;Functional/Hash
        Library&lt;/a&gt;:&lt;/span&gt;
  Fixed the points example.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/index.html&quot;&gt;Multi-index
        Containers Library&lt;/a&gt;:&lt;/span&gt;
  Fixed a problem with multithreaded code, and other
        minor changes. Refer to the library &lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/release_notes.html#boost_1_33_1&quot;&gt;release
        notes&lt;/a&gt; for further details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/table_of_contents.html&quot;&gt;Graph
        Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Fixed a problem with the relaxed heap on x86 Linux (fixes bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;).
          &lt;/li&gt;
          &lt;li&gt;
            Fixed problems with &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/cuthill_mckee_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cuthill_mckee_ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/king_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;king_ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; producing no
            results.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;color_map&lt;/span&gt;&lt;/code&gt; parameter
            to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/signals/doc/index.html&quot;&gt;Signals
        Library&lt;/a&gt;:&lt;/span&gt; Fixed problems with the use of Signals across shared library
        boundaries.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/thread/doc/index.html&quot;&gt;Thread library&lt;/a&gt;:&lt;/span&gt;
  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_write_mutex&lt;/span&gt;&lt;/code&gt; has been removed due to
        problems with deadlocks.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/wave/index.html&quot;&gt;Wave library&lt;/a&gt;
        (V1.2.1):&lt;/span&gt; Fixed a couple of problems, refer to the &lt;a href=&quot;/doc/libs/1_33_1/libs/wave/ChangeLog&quot;&gt;change
        log&lt;/a&gt; for further details.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_33_1.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
      rely on modern C++ features not available in all compilers, not all Boost libraries
      will work with every compiler. The following compilers and platforms have been
      extensively tested with Boost, although many other compilers and platforms
      will work as well. For more information, see the &lt;a href=&quot;http://www.boost.org/regression/release/user/&quot;&gt;regression
      test results&lt;/a&gt;.
    &lt;/p&gt;
    &lt;p&gt;
      &lt;em&gt;New for this release&lt;/em&gt;: Support for building
      with the newest STLport-5.0 was added. The support includes building with MinGW
      Runtime 3.8 plus STLport-5.0 improved to support wide character operations.
      Apple GCC 4.0, HP Tru64 C++, and Microsoft Visual C++ 8.0 are supported platforms.
      We have added an experimental autoconf-like &lt;tt&gt;configure&lt;/tt&gt; script
      for Unix-like systems: run &lt;tt&gt;configure --help&lt;/tt&gt; for more information.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developer.apple.com/&quot;&gt;Apple GCC&lt;/a&gt; 3.3, 4.0 on Mac
        OS X.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.codegear.com/products/cppbuilder&quot;&gt;Borland C++&lt;/a&gt;
        5.6.4 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://gcc.gnu.org&quot;&gt;GNU C++&lt;/a&gt; 2.95.3 (with and without
        STLport), 3.2.x., 3.3.x, 3.4.x, 4.0.x on Windows, Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://h30097.www3.hp.com/cplus/&quot;&gt;HP C++ for Tru64 UNIX 7.1&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm&quot;&gt;Intel
        C++&lt;/a&gt; 8.1, 9.0 on Windows, Linux.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.metrowerks.com&quot;&gt;Metrowerks CodeWarrior&lt;/a&gt; 8.3,
        9.4, 9.5 on Mac OS X and Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://msdn.microsoft.com/visualc/&quot;&gt;Microsoft Visual C++&lt;/a&gt;
        6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
        support the non-standard &amp;quot;Safe&amp;quot; C++ Library shipping with Visual
        C++ 8.0, which may result in many spurious warnings from Boost headers and
        other standards-conforming C++ code. To suppress these warnings, define the
        macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_SCL_SECURE_NO_DEPRECATE&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_33_1.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;span class=&quot;inset-left&quot;&gt;&lt;img alt=&quot;Medieval Mr. Gregor&quot; src=&quot;/gfx/boost_1_33_0.jpg&quot;/&gt;&lt;/span&gt;
&lt;a href=&quot;/users/people/doug_gregor.html&quot;&gt;Douglas
      Gregor&lt;/a&gt; managed this release.
    &lt;/p&gt;
    &lt;p&gt;
      A great number of people contributed their time and expertise to make this
      release possible. Special thanks go to Aleksey Gurtovoy and Misha Bergal, who
      managed to keep the regression testing system working throughout the release
      process; David Abrahams, Beman Dawes, Aleksey Gurtovoy, Bronek Kozicki, Rene
      Rivera and Jonathan Turkanis for greatly improving the quality of this release;
      Rene Rivera for the new Boost web page design; and Zoltan &amp;quot;cad&amp;quot; Juhasz
      for the new Boost logo.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.33.0</title><pubDate>Thu, 11 Aug 2005 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Iostream, Hash, Parameter, Pointer Container, Wave. Updated
      Libraries: Any, Assignment, Bind, Date-Time, Graph, Multi-Index, Program Options,
      Property Map, Python, Random Number, Range, Regex, Serialization, Signals.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.33.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_33_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/iostreams/doc/index.html&quot;&gt;Iostreams
        Library&lt;/a&gt;:&lt;/span&gt;
  Framework for defining streams, stream buffers and i/o filters,
        from Jonathan Turkanis.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/functional/hash/index.html&quot;&gt;Functional/Hash
        Library&lt;/a&gt;:&lt;/span&gt; A TR1 hash function object that can be extended to hash user
        defined types, from Daniel James.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/parameter/doc/html/index.html&quot;&gt;Parameter
        Library&lt;/a&gt;:&lt;/span&gt;
  Write functions that accept arguments by name: especially
        useful when a function has more than one argument with a useful default value,
        since named arguments can be passed in any order.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/ptr_container/index.html&quot;&gt;Pointer
        Container Library&lt;/a&gt;:&lt;/span&gt;
  Containers for storing heap-allocated polymorphic
        objects to ease OO-programming, from Thorsten Ottosen.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt; Standards
        conformant implementation of the mandated C99/C++ preprocessor functionality
        packed behind an easy to use iterator interface, from Hartmut Kaiser.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_33_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/doc/html/any.html&quot;&gt;Any Library&lt;/a&gt;:&lt;/span&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;any_cast&lt;/span&gt;&lt;/code&gt; has been enhanced to allow direct
        access to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;any&lt;/span&gt;&lt;/code&gt;'s held value.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/assign/doc/index.html&quot;&gt;Assignment
        Library&lt;/a&gt;:&lt;/span&gt; Support for &lt;a href=&quot;/doc/libs/1_33_1/libs/ptr_container/index.html&quot;&gt;Pointer
        Container Library&lt;/a&gt; and new efficient functions &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ref_list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cref_list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; for generating anonymous ranges.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/bind/bind.html&quot;&gt;Bind Library&lt;/a&gt;:&lt;/span&gt; Bind
        expressions now support &lt;a href=&quot;/doc/libs/1_33_1/libs/bind/bind.html#operators&quot;&gt;comparisons
        and negation&lt;/a&gt;. Example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;_1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&amp;amp;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;_2&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/doc/html/date_time.html&quot;&gt;Date-Time Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/doc/libs/1_33_1/doc/html/date_time/local_time.html&quot;&gt;local
            time and time zone classes&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/doc/libs/1_33_1/doc/html/date_time/date_time_io.html&quot;&gt;format-based
            Input/Output facets&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            For a complete list of changes, see the library &lt;a href=&quot;/doc/libs/1_33_1/doc/html/date_time/details.html#date_time.changes&quot;&gt;change
            history&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Introduced
        several new algorithms and improved existing algorithms:
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/python.html&quot;&gt;Experimental
            Python bindings&lt;/a&gt;, from Doug Gregor and Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/floyd_warshall_shortest.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;floyd&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;warshall&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;all&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;pairs&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;shortest&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;paths&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Lauren Foutz and Scott Hill.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/astar_search.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;astar&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;search&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Kristopher Beevers and Jufeng Peng.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/fruchterman_reingold.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fruchterman&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;reingold&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;force&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;directed&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;layout&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, from Doug Gregor
            and Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/biconnected_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;biconnected&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;components&lt;/span&gt;&lt;/code&gt;
            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;articulation&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;points&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from Jeremy Siek, Janusz Piwowarski, and Doug Gregor.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/sequential_vertex_coloring.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sequential&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;vertex&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;coloring&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; has been updated,
            tested, and documented.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/gursoy_atun_layout.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;gursoy&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;atun&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;layout&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, from Jeremiah
            Willcock and Doug Gregor of Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/king_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;king&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
            from D. Kevin McGrath of Indiana University.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/cuthill_mckee_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cuthill&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;mckee&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; has been recast
            as an invocation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;breadth&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;search&lt;/span&gt;&lt;/code&gt;
            and now supports graphs with multiple components.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/dijkstra_shortest_paths.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dijkstra&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;shortest&lt;/span&gt;
            &lt;span class=&quot;identifier&quot;&gt;paths&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; now uses a relaxed
            heap [&lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/bibliography.html#driscoll88&quot;&gt;61&lt;/a&gt;]
            as its priority queue, improving its complexity to O(V log V) and improving
            real-world performance for larger graphs.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/read_graphviz.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;graphviz&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
            now has a new, Spirit-based parser that works for all graph types and
            supports arbitrary properties on the graph, from Ron Garcia. The old,
            Bison-based GraphViz reader has been deprecated and will be removed in
            a future Boost release. &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/write-graphviz.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;write&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;graphviz&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
            also supports dynamic properties.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/subgraph.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;subgraph&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get_property&lt;/span&gt;&lt;/code&gt;
            now refers to the subgraph property, not the root graph's property.
          &lt;/li&gt;
          &lt;li&gt;
            See the &lt;a href=&quot;/doc/libs/1_33_1/libs/graph/doc/history.html#by-version&quot;&gt;history&lt;/a&gt;
            for additional changes and bug fixes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/index.html&quot;&gt;Multi-index
        Containers Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            New &lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/tutorial/indices.html#hashed_indices&quot;&gt;hashed
            indices&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/tutorial/creation.html#serialization&quot;&gt;serialization
            support&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            For a complete list of changes, see the library &lt;a href=&quot;/doc/libs/1_33_1/libs/multi_index/doc/release_notes.html&quot;&gt;release
            notes&lt;/a&gt;.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/program_options/doc/index.html&quot;&gt;Program
        Options Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Option descriptions are now printed with word wrapping.
          &lt;/li&gt;
          &lt;li&gt;
            Command line parser can bypass unregistered options, instread of throwing.
          &lt;/li&gt;
          &lt;li&gt;
            Removed support for &amp;quot;implicit&amp;quot; (optional) values.
          &lt;/li&gt;
          &lt;li&gt;
            New customization method 'command_line_parser::extra_style_parser'. Unlike
            'additional_parser', allows the user to parse several tokens and return
            a vector of options, not just a single option.
          &lt;/li&gt;
          &lt;li&gt;
            Work with disabled exceptions.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/property_map/property_map.html&quot;&gt;Property
        Map Library&lt;/a&gt;:&lt;/span&gt; Introduced the &lt;a href=&quot;/doc/libs/1_33_1/libs/property_map/doc/dynamic_property_map.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;properties&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
        class, which provides dynamically-typed access to a set of property maps.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/python/doc/index.html&quot;&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added support for docstrings on nonstatic properties.
          &lt;/li&gt;
          &lt;li&gt;
            We now export the client-provided docstrings for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
            and &lt;em&gt;XXX&lt;/em&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_FUNCTION_OVERLOADS&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; for only the last overload.
          &lt;/li&gt;
          &lt;li&gt;
            Support for Embedded VC++ 4 and GCC-3.3 on MacOS added
          &lt;/li&gt;
          &lt;li&gt;
            Introduced better support for rvalue from-python conversions of shared_ptr.
          &lt;/li&gt;
          &lt;li&gt;
            Support for exposing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt; with the indexing suite.
          &lt;/li&gt;
          &lt;li&gt;
            updated visual studio project build file.
          &lt;/li&gt;
          &lt;li&gt;
            Added search feature to the index page.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/random/index.html&quot;&gt;Random Number
        Library&lt;/a&gt;:&lt;/span&gt;
  Improved initialization for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mersenne_twister&lt;/span&gt;&lt;/code&gt;,
        algorithm by Makoto Matsumoto and Takuji Nishimura, implemented for Boost
        by Jens Maurer.&lt;/p&gt;
  &lt;p&gt;Note: All test vectors for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mersenne_twister&lt;/span&gt;&lt;/code&gt;s
        constructed or seeded without parameters or with a single &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt;
        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/code&gt; parameter become invalid.&lt;/p&gt;

      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/range/index.html&quot;&gt;Range Library&lt;/a&gt;:&lt;/span&gt; Minor
        addition of convenience functions to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;
        &lt;span class=&quot;identifier&quot;&gt;range&lt;/span&gt;&lt;/code&gt; like &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;front&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]()&lt;/span&gt;&lt;/code&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/regex/index.html&quot;&gt;Regex Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Rewritten front end parser now supports (?imsx-imsx) constructs, plus
            lookbehind assertions and conditional expressions.
          &lt;/li&gt;
          &lt;li&gt;
            Thin wrapper classes improve integration with MFC/ATL code.
          &lt;/li&gt;
          &lt;li&gt;
            Full (optional) Unicode support via the ICU library. Refer to the &lt;a href=&quot;/doc/libs/1_33_1/libs/regex/doc/history.html&quot;&gt;regex history page&lt;/a&gt;
            for more information on these and other small changes.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/libs/serialization/doc/index.html&quot;&gt;Serialization
        Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            DLL version.
          &lt;/li&gt;
          &lt;li&gt;
            Auto-linking.
          &lt;/li&gt;
          &lt;li&gt;
            Serialization of variants.
          &lt;/li&gt;
          &lt;li&gt;
            Improved serialization of shared pointers.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_33_1/doc/html/signals.html&quot;&gt;Signals Library&lt;/a&gt;:&lt;/span&gt; added
        slot blocking/unblocking, from Frantz Maerten. Huge improvements to signal
        invocation performance from Robert Zeh.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_33_0.supported_compilers&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
      rely on modern C++ features not available in all compilers, not all Boost libraries
      will work with every compiler. The following compilers and platforms have been
      extensively tested with Boost, although many other compilers and platforms
      will work as well. For more information, see the &lt;a href=&quot;http://www.boost.org/regression/release/user/&quot;&gt;regression
      test results&lt;/a&gt;.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://developer.apple.com/&quot;&gt;Apple GCC&lt;/a&gt; 3.x on Mac OS
        X.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.codegear.com/products/cppbuilder&quot;&gt;Borland C++&lt;/a&gt;
        5.6.4 on Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://gcc.gnu.org&quot;&gt;GNU C++&lt;/a&gt; 2.95.3 (with and without
        STLport), 3.2.x., 3.3.x, 3.4.x, 4.0.x on Windows, Linux and Solaris.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm&quot;&gt;Intel
        C++&lt;/a&gt; 8.1, 9.0 on Windows, Linux.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://www.metrowerks.com&quot;&gt;Metrowerks CodeWarrior&lt;/a&gt; 8.3,
        9.4, 9.5 on Mac OS X and Windows.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;a href=&quot;http://msdn.microsoft.com/visualc/&quot;&gt;Microsoft Visual C++&lt;/a&gt;
        6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0 beta. Note: due to intermittent
        problems with Visual C++ 8.0 beta, and the presence of a variety of pre-release
        compiler builds, we are unable to guarantee compatibility until the final
        compiler is released.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_33_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;img alt=&quot;[]&quot; src=&quot;/gfx/boost_1_33_0.jpg&quot;/&gt;&lt;a href=&quot;/users/people/doug_gregor.html&quot;&gt;Douglas Gregor&lt;/a&gt;
      managed this release.
    &lt;/p&gt;
    &lt;p&gt;
      A great number of people contributed their time and expertise to make this
      release possible. Special thanks go to Aleksey Gurtovoy and Misha Bergal, who
      managed to keep the regression testing system working throughout the release
      process; David Abrahams, Beman Dawes, Aleksey Gurtovoy, Rene Rivera and Jonathan
      Turkanis for greatly improving the quality of this release; Rene Rivera for
      the new Boost web page design; and Zoltan &amp;quot;cad&amp;quot; Juhasz for the new
      Boost logo.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.32.0</title><pubDate>Fri, 19 Nov 2004 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Assignment, Minmax, Multi-Index, Numeric Conversion, Program
      Options, Range, Serialization, String, Tribool. Updated Libraries: Graph, MPL,
      Python, Signals, Utility, Test. Removed Libraries: Compose.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.32.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_32_0.important___new_toolset_names&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Important
    - New Toolset Names&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The names of some the Boost.Build &lt;a href=&quot;/doc/libs/1_32_0/more/getting_started.html#Tools&quot;&gt;toolsets&lt;/a&gt;
      have been changed to remove the &amp;quot;&lt;tt&gt;.&lt;/tt&gt;&amp;quot; (dot) character
      and to fix some other naming inconsistencies. For example, &lt;tt&gt;vc7.1&lt;/tt&gt;
      toolset was renamed to become &lt;tt&gt;vc-7_1&lt;/tt&gt;. Please refer to the
      &lt;a href=&quot;/doc/libs/1_32_0/more/getting_started.html#Tools&quot;&gt;Supported Toolsets&lt;/a&gt;
      section of the installation guide for the complete list of the current toolset
      names. This change was made as a part of the effort to make the Boost distribution
      compatible with ISO 9660 level 2 requirements.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_32_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/assign/index.html&quot;&gt;Assignment Library&lt;/a&gt;:&lt;/span&gt; Filling
        containers with constant or generated data has never been easier, from Thorsten
        Ottosen.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/algorithm/minmax/index.html&quot;&gt;Minmax
        Library&lt;/a&gt;:&lt;/span&gt; Standard library extensions for simultaneous min/max and
        min/max element computations, from Herve Bronnimann.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/multi_index/doc/index.html&quot;&gt;Multi-index
        Containers Library&lt;/a&gt;:&lt;/span&gt; Containers with multiple STL-compatible access
        interfaces, from Joaquin M Lopez Munoz.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/numeric/conversion/index.html&quot;&gt;Numeric
        Conversion Library&lt;/a&gt;:&lt;/span&gt; Optimized policy-based numeric conversions, from
        Fernando Cacciola.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/doc/html/program_options.html&quot;&gt;Program
        Options Library&lt;/a&gt;:&lt;/span&gt; Access to configuration data given on command line,
        in config files and other sources, from Vladimir Prus.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/range/index.html&quot;&gt;Range Library&lt;/a&gt;:&lt;/span&gt; a
        new infrastructure for generic algorithms that builds on top of the new iterator
        concepts, from Thorsten Ottosen.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/serialization/doc/index.html&quot;&gt;Serialization
        Library&lt;/a&gt;:&lt;/span&gt; Serialization/de-serialization of arbitrary C++ data structures
        to various formats including text, binary, and xml, from Robert Ramey.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/algorithm/string/index.html&quot;&gt;String
        Algorithms Library&lt;/a&gt;:&lt;/span&gt; Collection of string related algorithms for case
        conversion, trimming, find/replace operations and more, from Pavol Droba.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/doc/html/tribool.html&quot;&gt;Tribool&lt;/a&gt;:&lt;/span&gt; 3-state
        boolean type library, from Doug Gregor.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_32_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Compose: This deprecated library has been removed.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/bundles.html&quot;&gt;bundled
            properties&lt;/a&gt; to the &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/adjacency_list.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_list&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/adjacency_matrix.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; class templates,
            greatly simplifying the introduction of internal vertex and edge properties.
          &lt;/li&gt;
          &lt;li&gt;
            The &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/leda_conversion.html&quot;&gt;LEDA
            graph adaptors&lt;/a&gt; have been ported to LEDA 4.5.
          &lt;/li&gt;
          &lt;li&gt;
            Added algorithms for &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/betweenness_centrality.html&quot;&gt;betweenness
            centrality&lt;/a&gt; and &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/bc_clustering.html&quot;&gt;betweenness
            centrality clustering&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Added &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/circle_layout.html&quot;&gt;circle
            layout&lt;/a&gt; and &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/kamada_kawai_spring_layout.html&quot;&gt;undirected
            spring layout&lt;/a&gt; algorithms.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/index.html&quot;&gt;MPL Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Updated to use the Boost Software License.
          &lt;/li&gt;
          &lt;li&gt;
            New &lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/index.html&quot;&gt;documentation&lt;/a&gt;,
            including a complete &lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/refmanual.html&quot;&gt;reference
            manual.&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            Major interface changes and improvements, many of which are not backward
            compatible. Please refer to the &lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/tutorial/changes-in-boost-1-32-0.html&quot;&gt;1.32
            changelog&lt;/a&gt; for the detailed information about upgrading to the
            new version.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Updated to use the Boost Software License.
          &lt;/li&gt;
          &lt;li&gt;
            a new, &lt;a href=&quot;/doc/libs/1_32_0/libs/python/doc/tutorial/doc/html/python/exposing.html#python.class_virtual_functions&quot;&gt;better
            method of wrapping classes with virtual functions&lt;/a&gt; has been implemented.
          &lt;/li&gt;
          &lt;li&gt;
            Support for the new Python Bool type, thanks to Daniel Holth.
          &lt;/li&gt;
          &lt;li&gt;
            Support for upcoming GCC symbol export control features have been folded
            in, thanks to Niall Douglas.
          &lt;/li&gt;
          &lt;li&gt;
            Improved support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;auto_ptr&lt;/span&gt;&lt;/code&gt;-like
            types.
          &lt;/li&gt;
          &lt;li&gt;
            Components used by other libraries have been moved out of &lt;tt&gt;python/detail&lt;/tt&gt;
            and into &lt;tt&gt;boost/detail&lt;/tt&gt; to improve dependency relationships.
          &lt;/li&gt;
          &lt;li&gt;
            Miscellaneous bug fixes and compiler workarounds.
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/doc/html/signals.html&quot;&gt;Signals Library&lt;/a&gt;:&lt;/span&gt; Introduced
        deterministic slot ordering, permitting slots to be connected at the beginning
        or end of slot groups or the slot list itself. Combiners may safely have
        state and are accessible from the signal.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/utility/utility.htm&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt; class
        template &lt;a href=&quot;/doc/libs/1_32_0/libs/utility/utility.htm#result_of&quot;&gt;result_of&lt;/a&gt;
        added.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/test/index.html&quot;&gt;Test Library&lt;/a&gt;:&lt;/span&gt; 
  &lt;ul&gt;
    &lt;li&gt;namespace names gets shorten; old one still supported till next
      release&lt;/li&gt;
    &lt;li&gt;added proper encoding of XML PCDATA&lt;/li&gt;
    &lt;li&gt;support for wide string comparison implemented&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;
    For complete list of changes see Test Library
    &lt;a href=&quot;/doc/libs/1_32_0/libs/test/doc/release_notes.html#v1_32_0&quot;&gt;release notes&lt;/a&gt;.
  &lt;/p&gt;

      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_32_0.regression_tests&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Regression tests&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      This release has been extensively tested on a variety of different compilers
      and platforms. It is known to contain no regressions against the previous reference
      release on the compilers and configurations tested. Please refer to the corresponding
      &lt;a href=&quot;http://www.meta-comm.com/engineering/boost-regression/1_32_0/index.html&quot;&gt;regression
      reports&lt;/a&gt; to see how well your compiler performs on the new Boost codebase.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_32_0.acknowledgements&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;img alt=&quot;[]&quot; src=&quot;http://boost.sourceforge.net/photos/aleksey_gurtovoy2.jpg&quot;/&gt; &lt;a href=&quot;/users/people/aleksey_gurtovoy.html&quot;&gt;Aleksey
      Gurtovoy&lt;/a&gt; managed this release. &lt;a href=&quot;/doc/libs/1_32_0/more/release_procedures.htm&quot;&gt;Managing
      a release&lt;/a&gt; at all is an enormous job, and Aleksey always goes beyond
      merely meeting requirements by insisting on the highest possible quality. The
      Boost membership owes him a debt of gratitude.
    &lt;/p&gt;
    &lt;p&gt;
      This release wouldn't have been possible without the dedicated effort of many,
      many members of the Boost community who generously contributed their outstanding
      expertise, time and energy to making it happen. For patches, bug fixes, troubleshooting,
      expert advice, and prompt responses to the release manager's requests we thank:
    &lt;/p&gt;
    &lt;p&gt;
      David Abrahams, Misha Bergal, Jonathan Brandmeyer, Fernando Cacciola, Marshall
      Clow, Christopher Currie, Pavol Droba, Caleb Epstein, Eric Friedman, Jeff Garland,
      Michael Glassford, Doug Gregor, Joel de Guzman, Hubert Holin, Jaakko Jarvi,
      Hartmut Kaiser, Bronek Kozicki, Tarjei Knapstad, Toon Knapen, Aaron W. LaFramboise,
      Joaquin M Lopez Munoz, Christoph Ludwig, John Maddock, Paul Mensonides, Guillaume
      Melquiond, Thorsten Ottosen, Vladimir Prus, Robert Ramey, Rene Rivera, Gennadiy
      Rozental, Stefan Slapeta, Jonathan Turkanis, Pavel Vozenilek, Jonathan Wakely,
      Daryle Walker, Victor A. Wagner Jr. and Martin Wille.
    &lt;/p&gt;
    &lt;p&gt;
      Also, our special thanks go to: John Maddock for the managing the effort of
      converting the majority of the Boost libraries to the &lt;a href=&quot;/doc/libs/1_32_0/more/license_info.html&quot;&gt;Boost
      Software License&lt;/a&gt;, Eric Niebler and Joel de Guzman for taking on the
      important job of improving the Boost documentation's look and feel, and last,
      but not least, to our regression test runners, without whom we simply would
      never have released: Toon Knapen, Bronek Kozicki, Rene Rivera, Markus Schopflin,
      Stefan Slapeta, Victor A. Wagner Jr. and Martin Wille.
    &lt;/p&gt;
    &lt;p&gt;
      Thank you everybody!
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.31.0</title><pubDate>Mon, 26 Jan 2004 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: enable_if, Variant. Updated Libraries: Date Time, Filesystem,
      Iterator, MultiArray, Python, Random Number, Regex, Spirit, Test. Deprecated
      Libraries: Compose.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.31.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;div id=&quot;version_1_31_0.new_license&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New License&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      A unified &lt;a href=&quot;/doc/libs/1_31_0/more/license_info.html&quot;&gt;Boost Software
      License&lt;/a&gt; has been developed and will gradually replace the individual
      licenses for most Boost libraries. The new license offers better legal protection
      for both users and developers, and should speed user's legal reviews of Boost
      libraries. Dave Abrahams led the Boost effort to develop better licensing.
      The legal team was led by &lt;a href=&quot;http://cyber.law.harvard.edu/people/cabell/index.html&quot;&gt;Diane
      Cabell&lt;/a&gt;, Director, Clinical Programs, &lt;a href=&quot;http://cyber.law.harvard.edu&quot;&gt;Berkman
      Center for Internet &amp;amp; Society&lt;/a&gt;, Harvard Law School. &lt;a href=&quot;http://www.nixonpeabody.com/attorneys_detail1.asp?ID=121&quot;&gt;Devin
      Smith&lt;/a&gt;, attorney, &lt;a href=&quot;http://www.nixonpeabody.com/default.asp&quot;&gt;Nixon
      Peabody LLP&lt;/a&gt;, wrote the Boost License. Eva Chan, Harvard Law School,
      contributed analysis of issues and drafts of various legal documents.
    &lt;/p&gt;
    &lt;p&gt;
      Note: Many of the Boost libraries are still using earlier licenses, though
      all conform to the &lt;a href=&quot;/doc/libs/1_31_0/more/lib_guide.htm#license&quot;&gt;Boost
      License Requirements&lt;/a&gt;. After this release we will begin an effort to
      move toward uniform use of the new license.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_31_0.build_and_installation&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build and Installation&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        New &lt;a href=&quot;/doc/libs/1_31_0/more/getting_started.html&quot;&gt;Getting Started&lt;/a&gt;
        procedures ease download and installation, from Rene Rivera and others.
      &lt;/li&gt;
      &lt;li&gt;
        Improved support for libraries requiring &lt;a href=&quot;/doc/libs/1_31_0/more/separate_compilation.html&quot;&gt;separate
        compilation&lt;/a&gt;, from John Maddock and others.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_31_0.new_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/utility/enable_if.html&quot;&gt;enable_if&lt;/a&gt;:&lt;/span&gt; Selective
        inclusion of function template overloads, from Jaakko Jarvi, Jeremiah Willcock,
        and Andrew Lumsdaine. This is an important new technique which exploits the
        SFINAE (substitution-failure-is-not-an-error) principle.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/variant/index.html&quot;&gt;Variant Library&lt;/a&gt;:&lt;/span&gt; Safe,
        generic, stack-based discriminated union container, from Eric Friedman and
        Itay Maman.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_31_0.updated_libraries&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/compose/index.htm&quot;&gt;Compose&lt;/a&gt;:&lt;/span&gt; This
        library has been deprecated and will be removed in a future release. Use
        &lt;a href=&quot;/doc/libs/1_31_0/libs/bind/bind.html&quot;&gt;Bind&lt;/a&gt; or &lt;a href=&quot;/doc/libs/1_31_0/libs/lambda/doc/index.html&quot;&gt;Lambda&lt;/a&gt; instead.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/date_time/doc/index.html&quot;&gt;Date Time
        Library&lt;/a&gt;:&lt;/span&gt; A whole host of bug fixes, new features, and documentation
        improvements. See the Date Time Change History for details.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/filesystem/doc/index.htm&quot;&gt;Filesystem
        Library&lt;/a&gt;:&lt;/span&gt;
  Several added functions, including improved checking for
        directory and file name portability.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/iterator/doc/index.html&quot;&gt;Iterator
        Library&lt;/a&gt;:&lt;/span&gt; Major version upgrade, with interface as proposed for the
        C++ library TR, including an improved &lt;tt&gt;iterator_adaptor&lt;/tt&gt;
        design plus several new components, from David Abrahams, Jeremy Siek, and
        Thomas Witt.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/multi_array/index.html&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt; The
        &lt;tt&gt;multi_array&lt;/tt&gt; class template now provides an element-preserving
        resize operation as well as default construction (see the &lt;a href=&quot;/doc/libs/1_31_0/libs/multi_array/doc/reference.html&quot;&gt;reference
        manual&lt;/a&gt; for more information).
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/python/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt;
        &lt;ul&gt;
          &lt;li&gt;
            Support for Python 2.3 and Intel C++ on Linux
          &lt;/li&gt;
          &lt;li&gt;
            Container &lt;a href=&quot;/doc/libs/1_31_0/libs/python/doc/v2/indexing.html&quot;&gt;Indexing
            Suite&lt;/a&gt; added.
          &lt;/li&gt;
          &lt;li&gt;
            injected constructors and wrapped function objects.
          &lt;/li&gt;
          &lt;li&gt;
            wrapping static data members.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;wstring&lt;/span&gt;&lt;/code&gt; conversions.
          &lt;/li&gt;
          &lt;li&gt;
            Improved &lt;a href=&quot;/doc/libs/1_31_0/libs/python/doc/v2/args.html&quot;&gt;keyword
            arguments&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            Better error messages, including name demangling for GCC.
          &lt;/li&gt;
          &lt;li&gt;
            Simpler &lt;a href=&quot;/doc/libs/1_31_0/libs/python/doc/building.html&quot;&gt;build
            procedure&lt;/a&gt;.
          &lt;/li&gt;
          &lt;li&gt;
            &lt;em&gt;...and more....&lt;/em&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/random/index.html&quot;&gt;Random Number
        Library&lt;/a&gt;:&lt;/span&gt; Interface changed to match the C++ &lt;a href=&quot;/doc/libs/1_31_0/libs/random/wg21-proposal.html&quot;&gt;TR
        proposal&lt;/a&gt;, from Jens Maurer.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/regex/doc/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt; Completely
        new matching algorithm is now much faster than before, plus a selection of
        &lt;a href=&quot;/doc/libs/1_31_0/libs/regex/doc/history.html&quot;&gt;new features and
        enhancements&lt;/a&gt;.
      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/spirit/index.html&quot;&gt;Boost.Spirit
        1.8.0&lt;/a&gt;:&lt;/span&gt;
  &lt;ul&gt;
    &lt;li&gt;Multiple grammar start rules&lt;/li&gt;
    &lt;li&gt;Multiple Scanner rules (no more scanner business woes)&lt;/li&gt;
    &lt;li&gt;More dynamic parsers&lt;/li&gt;
    &lt;li&gt;Predefined actors&lt;/li&gt;
    &lt;li&gt;Numerous bug fixes and QOI stuff&lt;/li&gt;
    &lt;li&gt;&lt;em&gt;and more...&lt;/em&gt;&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;
    Starting from Spirit v1.8.0, ill conforming compilers will no longer be
    supported. If you are still using one of these older compilers, please use
    Spirit v1.6.x. See [@http://spirit.sf.net Spirit's Site] for more details.
  &lt;/p&gt;

      &lt;/li&gt;
      &lt;li&gt;
        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/test/index.html&quot;&gt;Test Library&lt;/a&gt;:&lt;/span&gt; 
  &lt;ul&gt;
    &lt;li&gt;Free function template based test case&lt;/li&gt;
    &lt;li&gt;Custom exception translators support in execution monitor and
    register_exception_translator added for unit test framework&lt;/li&gt;
    &lt;li&gt;Added support for multi-module unit tests in automatic
    registration facility&lt;/li&gt;
    &lt;li&gt;Floating point comparison algorithm reworked (Is not backward
    compatible!!!)&lt;/li&gt;
    &lt;li&gt;Added support for custom users predicate returning both boolean
    result code and possibly error message&lt;/li&gt;
    &lt;li&gt;Documentation structure rework and update&lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;
    For a complete list of changes see the Test Library
    &lt;a href=&quot;/doc/libs/1_31_0/libs/test/doc/release_notes.html#v1_31_0&quot;&gt;release notes&lt;/a&gt;.
  &lt;/p&gt;

      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id=&quot;version_1_31_0.miscellaneous&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Miscellaneous&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        Expanded testing and fixes for non-conforming compilers.
      &lt;/li&gt;
      &lt;li&gt;
        Web site hosting now provided by &lt;a href=&quot;http://www.sourceforge.net/&quot;&gt;SourceForge&lt;/a&gt;.
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Version 1.30.2</title><pubDate>Tue, 19 Aug 2003 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Bugfix release
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.30.2/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://www.boost-consulting.com&quot;&gt;Boost Consulting&lt;/a&gt; is now
      hosting Boost CVS mirrors - see our &lt;a href=&quot;/more/getting_started.html#CVS&quot;&gt;download
      page&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Backported changes to the &lt;a href=&quot;/libs/config/config.htm&quot;&gt;config system&lt;/a&gt;,
      to better handle new compiler releases.
    &lt;/li&gt;
    &lt;li&gt;
      Bugs in regression reporting in subproject tests were fixed.
    &lt;/li&gt;
    &lt;li&gt;
      Tests are now run in the context of the user's PATH environment settings
    &lt;/li&gt;
    &lt;li&gt;
      msvc-stlport and intel-win32-stlport toolsets now build static libraries with
      multithreading enabled, to be compatible with the STLPort builds.
    &lt;/li&gt;
    &lt;li&gt;
      intel-win32 toolset now handles &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt;&lt;/code&gt;
      correctly when intel is installed over msvc6.
    &lt;/li&gt;
    &lt;li&gt;
      Backported fixes from the main trunk which prevent errors building the &lt;a href=&quot;/libs/test/doc/index.html&quot;&gt;Boost.Test&lt;/a&gt; library in its default configuration.
    &lt;/li&gt;
    &lt;li&gt;
      Backported portability improvements for &lt;a href=&quot;/libs/utility/checked_delete.html&quot;&gt;checked_delete&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Locale support for metrowerks (requiring a statically-linked runtime) is more
      uniformly handled.
    &lt;/li&gt;
    &lt;li&gt;
      Backported &lt;a href=&quot;/libs/conversion/lexical_cast.htm&quot;&gt;conversion/lexical_cast&lt;/a&gt;'s
      &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt;&lt;/code&gt; fixes from the main trunk.
    &lt;/li&gt;
    &lt;li&gt;
      intel-linux-tools: added &lt;tt&gt;rt&lt;/tt&gt; to FINDLIBS in order to make
      the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;clock_gettime&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
      function available (backport of a patch in CVS HEAD).
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/tools/regression/index.htm&quot;&gt;regression/compiler_status.cpp&lt;/a&gt;:
      backported fixes in error log links generation.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.30.1</title><pubDate>Mon,  4 Aug 2003 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Withdrawn bug fix release, fixes for Lambda, Spirit, MPL, Function, Config,
      Format, Regex, Smart Pointers, Python
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    This release was withdrawn on the 12 Aug 2003.
  &lt;/p&gt;
  &lt;p&gt;
    Fixes were made to the following libraries: * The &lt;a href=&quot;/libs/lambda/doc/index.html&quot;&gt;Boost.Lambda&lt;/a&gt;
    ..library is now usable with gcc-2.95.2 * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Boost.Spirit&lt;/a&gt;:&lt;/span&gt; 
  *
    Fixed. Using MSVC++6 (SP5), calling the assign action with a string value on
    parsers using the file_iterator will not work. * Fixed: using assign semantic
    action in a grammar with a multi_pass iterator adaptor applied to an std::istream_iterator
    resulted in a failure to compile under msvc 7.0. * Fixed: There is a bug in the
    &lt;tt&gt;range_run&amp;lt;CharT&amp;gt;::set(range&amp;lt;CharT&amp;gt; const&amp;amp; r)&lt;/tt&gt;
    function in &amp;quot;../boost/spirit/utility/impl/chset/range_run.ipp&amp;quot;. * Fixed:
    handling of trailing whitespace bug (ast_parse/pt_parse related) * Fixed: comment_p
    and end of data bug * Fixed: Most trailing space bug * Fixed: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;chset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;~(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;
    bug, &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;amp;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;
    bug, &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;amp;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;chset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;
    bug * Fixed: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detach_clear&lt;/span&gt;&lt;/code&gt; bug * Fixed: mismatch closure
    return type bug * Fixed: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;access_node_d&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;access_match_d&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt; iterator bugs * Fixed a bug regarding thread
    safety of Phoenix/Spirit closures. * The Boost Template &lt;a href=&quot;/libs/mpl/doc/index.html&quot;&gt;Metaprogramming
    Library (MPL)&lt;/a&gt;'s ..typeof implementation is now compatible with Metrowerks
    CodeWarrior Pro8. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Boost.Function&lt;/a&gt;:&lt;/span&gt; workaround
    for the new Borland patch (version 0x564) and MSVC++ .NET 2003. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Boost.Config&lt;/a&gt;&lt;/span&gt;, &lt;a href=&quot;/libs/format/doc/format.html&quot;&gt;Boost.Format&lt;/a&gt;,
    and &lt;a href=&quot;/libs/regex/index.html&quot;&gt;Boost.Regex&lt;/a&gt; ..have been adjusted
    to avoid warnings with GCC-3.3, and Boost.Format also now works with string types
    other than &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;/code&gt;. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart
    Pointers&lt;/a&gt;:&lt;/span&gt; 
  * &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;checked_delete&lt;/span&gt;&lt;/code&gt;
    now works on more platforms * Compatibility with the SunPro compiler * Added
    missing &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;&lt;/code&gt;s. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/index.html&quot;&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt; 
  * warning suppression for
    finicky compilers * fixed a crashing bug in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;raw_function&lt;/span&gt;&lt;/code&gt;
    facility when no keyword arguments were passed. * Improved conversion of NULL
    &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;s to Python.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.30.0</title><pubDate>Wed, 19 Mar 2003 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Filesystem, Optional, Interval, MPL, Spirit Updated Libraries:
      Smart Pointers, Utility, Date-Time, Function, Operators, Test
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.30.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/doc/index.htm&quot;&gt;Filesystem Library&lt;/a&gt;&lt;/span&gt; added
      - Portable paths, iteration over directories, and other useful filesystem operations,
      from Beman Dawes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/optional/doc/optional.html&quot;&gt;Optional Library&lt;/a&gt;&lt;/span&gt; added
      - A discriminated-union wrapper for optional values, from Fernando Cacciola.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/numeric/interval/doc/interval.htm&quot;&gt;Interval Library&lt;/a&gt;&lt;/span&gt;
  added
      - Extends the usual arithmetic functions to mathematical intervals, from Guillaume
      Melquiond, Herve Bronnimann and Sylvain Pion.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/mpl/doc/index.html&quot;&gt;MPL&lt;/a&gt;&lt;/span&gt; added - Template metaprogramming
      framework of compile-time algorithms, sequences and metafunction classes, from
      Aleksey Gurtovoy.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit Library&lt;/a&gt;&lt;/span&gt; added - An
      LL (unlimited lookahead) parser framework that represents parsers directly
      as EBNF grammars in inlined C++ source code, complete with semantic actions,
      ASTs and much more, from Joel de Guzman and team.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointers Library&lt;/a&gt;&lt;/span&gt; -
      cast functions are now spelled &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#static_pointer_cast&quot;&gt;static_pointer_cast&lt;/a&gt;
      / &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#dynamic_pointer_cast&quot;&gt;dynamic_pointer_cast&lt;/a&gt;;
      &lt;a href=&quot;/libs/smart_ptr/enable_shared_from_this.html&quot;&gt;enable_shared_from_this&lt;/a&gt;
      added; shared_ptr::shared_ptr(), shared_ptr::reset(), weak_ptr::weak_ptr(),
      weak_ptr::reset() no longer throw; &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#get_deleter&quot;&gt;get_deleter&lt;/a&gt;
      added; weak_ptr::get() removed; make_shared is now spelled &lt;a href=&quot;/libs/smart_ptr/weak_ptr.htm#lock&quot;&gt;weak_ptr::lock()&lt;/a&gt;
      ; &lt;a href=&quot;/libs/smart_ptr/intrusive_ptr.html&quot;&gt;intrusive_ptr documentation&lt;/a&gt;
      added; some experimental undocumented shared_ptr features have been removed;
      a &lt;a href=&quot;/libs/smart_ptr/sp_techniques.html&quot;&gt;page describing some smart
      pointer programming techniques&lt;/a&gt; has been added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/libs/utility/assert.html&quot;&gt;boost/assert.hpp&lt;/a&gt;, &lt;a href=&quot;/libs/utility/current_function.html&quot;&gt;boost/current_function.hpp&lt;/a&gt;,
      &lt;a href=&quot;/libs/utility/throw_exception.html&quot;&gt;boost/throw_exception.hpp&lt;/a&gt;,
      &lt;a href=&quot;/libs/utility/checked_delete.html&quot;&gt;boost/checked_delete.hpp&lt;/a&gt;
      have been documented.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/doc/index.html&quot;&gt;Date-Time Library&lt;/a&gt;&lt;/span&gt; -
      several fixes and small additions including an interface change to partial_date.
      See the Date-Time Change History for more details.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;&lt;/span&gt; - added
      support for assignment to zero (to clear) and comparison against zero (to check
      if empty).
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/operators.htm#symmetry&quot;&gt;Operators Library&lt;/a&gt;&lt;/span&gt; -
      now takes advantage of named return value optimization (NRVO) when available,
      from Daniel Frey.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Regression Tests&lt;/a&gt; - Much expanded,
      plus a very nice &lt;a href=&quot;http://boost.sourceforge.net/regression-logs/&quot;&gt;summary
      page&lt;/a&gt; from Rene Rivera.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/test/index.html&quot;&gt;Test Library&lt;/a&gt;&lt;/span&gt; - introduced
      following new facilities: &lt;ul&gt;
  &lt;li&gt;
  Automatic registration of unit tests &lt;/li&gt;
  &lt;li&gt;
          XML log format
      &lt;/li&gt;
  &lt;li&gt;
          XML report format &lt;/li&gt;
  &lt;li&gt;
          BOOST_CHECK_NO_THROW test tool &lt;/li&gt;
  &lt;li&gt;
          BOOST_BITWISE_CHECK test tool
      &lt;/li&gt;
  &lt;/ul&gt;
  &lt;p&gt;
  For a complete list of changes see the Test Library &lt;a href=&quot;/libs/test/doc/release_notes.html#v1_30_0&quot;&gt;release
      notes&lt;/a&gt;. &lt;/p&gt;

    &lt;/li&gt;
    &lt;li&gt;
      Many fixes and enhancements to other libraries.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.29.0</title><pubDate>Thu, 10 Oct 2002 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Date-Time, Dynamic Bitset, Format. Updated Libraries: Function,
      Multi-Array, Preprocessor, Python, Signals, uBLASH.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.29.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/doc/index.html&quot;&gt;Date-Time Library&lt;/a&gt;&lt;/span&gt; added
      - Dates, times, leap seconds, infinity, and more, from Jeff Garland.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/dynamic_bitset/dynamic_bitset.html&quot;&gt;Dynamic Bitset&lt;/a&gt;&lt;/span&gt;
  added
      - A runtime sized version of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bitset&lt;/span&gt;&lt;/code&gt;
      class from Jeremy Siek and Chuck Allison.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/format/index.html&quot;&gt;Format Library&lt;/a&gt;&lt;/span&gt; added - Type-safe
      'printf-like' format operations, from Samuel Krempp.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; Major
      syntactic changes have been made. Some old syntax and little-used features
      have been deprecated (and will be removed shortly), and the syntax for the
      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt; class template has been greatly
      improved on conforming compilers. Please see the compatibility note for more
      information.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_array/doc/index.html&quot;&gt;Multi-array Library&lt;/a&gt;&lt;/span&gt;
  added
      - Multidimensional containers and adaptors for arrays of contiguous data, from
      Ron Garcia.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/preprocessor/index.html&quot;&gt;Preprocessor Library&lt;/a&gt;:&lt;/span&gt;
  Major
      upgrade, from Paul Mensonides.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;&lt;/span&gt; - Version
      2 is released, from Dave Abrahams and others. This is a major rewrite which
      works on many more compilers and platforms, with a completely new interface
      and lots of new features. Boost.Python v2 requires Python 2.2 or later.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/signals/doc/index.html&quot;&gt;Signals Library&lt;/a&gt;&lt;/span&gt; added
      - Managed signals &amp;amp; slots callback implementation, from Doug Gregor.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/test/doc/index.html&quot;&gt;Test Library&lt;/a&gt;:&lt;/span&gt; Major new
      version, including full unit test capabilities, from Gennadiy Rozental.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/numeric/ublas/doc/index.htm&quot;&gt;uBLAS Library&lt;/a&gt;&lt;/span&gt; added
      - Basic linear algebra for dense, packed and sparse matrices, from Joerg Walter
      and Mathias Koch.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.28.0</title><pubDate>Wed, 15 May 2002 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Lambda, I/O State Saver. Updated Libraries: Configuration, Random
      Number, Smart Pointers, Function Utility.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.28.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      The Boost mailing lists are now also accessible as &lt;a href=&quot;/more/mailing_lists.htm#newsgroup&quot;&gt;newsgroups&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      A powerful &lt;a href=&quot;http://aspn.activestate.com/ASPN/Mail/Archives/boost/&quot;&gt;mailing
      list archive&lt;/a&gt; has been contributed by the &lt;a href=&quot;http://aspn.activestate.com/ASPN&quot;&gt;ActiveState
      Programmer Network&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/lambda/doc/index.html&quot;&gt;Lambda Library&lt;/a&gt;&lt;/span&gt; added,
      from Jaakko Jarvi and Gary Powell. Define small unnamed function objects at
      the actual call site: for_each( a.begin(), a.end(), std::cout &amp;lt;&amp;lt; _1 &amp;lt;&amp;lt;
      ' ' );
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/io/doc/ios_state.html&quot;&gt;I/O State Saver Library added&lt;/a&gt;&lt;/span&gt; -
      Save I/O state to prevent jumbled data, from Daryle Walker.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/config.htm&quot;&gt;Configuration Library&lt;/a&gt;:&lt;/span&gt; User
      code should not use BOOST_NO_LIMITS.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Avoid
      compiler warnings.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointers Library&lt;/a&gt;:&lt;/span&gt; Added
      shared_polymorphic_cast and shared_polymorphic_downcast.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; Now
      supports function objects with the unary &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;
      operator overloaded.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;Utility Library&lt;/a&gt;:&lt;/span&gt; Added
      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
      function.
    &lt;/li&gt;
    &lt;li&gt;
      The usual small fixes and tweaks.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.27.0</title><pubDate>Tue,  5 Feb 2002 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Python, Integer, Function, Quaternions, Octonions, Smart
      Pointers, Preprocessor, Threads.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.27.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt; Scott
      Snyder contributed inplace operator support.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;:&lt;/span&gt; Daryle
      Walker contributed enhancements to the &lt;a href=&quot;/libs/integer/integer.htm&quot;&gt;type
      selection templates&lt;/a&gt;, and added new compile-time &lt;a href=&quot;/libs/integer/doc/integer_mask.html&quot;&gt;bit
      mask&lt;/a&gt;, &lt;a href=&quot;/libs/integer/doc/static_log2.html&quot;&gt;binary logarithm&lt;/a&gt;,
      and &lt;a href=&quot;/libs/integer/doc/static_min_max.html&quot;&gt;extrema&lt;/a&gt; templates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; user
      may request that &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt; objects store a reference to a function
      object target instead of a copy, using &lt;a href=&quot;/libs/bind/ref.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ref&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;. Stateless objects are optimized
      so that they require no dynamic storage.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/boost_math/quaternions.html&quot;&gt;Quaternions&lt;/a&gt;:&lt;/span&gt; added
      support for GCC 2.95.x.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/boost_math/octonions.html&quot;&gt;Octonions&lt;/a&gt;:&lt;/span&gt; added
      support for GCC 2.95.x.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointers Library&lt;/a&gt;:&lt;/span&gt; Peter
      Dimov contributed a new implementation that fixes some bugs and adds some features
      including &lt;a href=&quot;/libs/smart_ptr/compatibility.htm#threadsafe&quot;&gt;thread
      safety&lt;/a&gt; when manipulating the use count, &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#constructors&quot;&gt;custom
      delete functions&lt;/a&gt;, a new &lt;a href=&quot;/libs/smart_ptr/weak_ptr.htm&quot;&gt;weak_ptr&lt;/a&gt;,
      and shared_static_cast and shared_dynamic_cast.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/preprocessor/doc/index.html&quot;&gt;Preprocessor Library&lt;/a&gt;:&lt;/span&gt;
  changed
      macro prefix from BOOST_PREPROCESSOR to BOOST_PP, added support for list data
      structure manipulation, added examples, made library ANSI C friendly, added
      generalized &lt;a href=&quot;/libs/preprocessor/doc/ref/for.html&quot;&gt;repetition&lt;/a&gt;
      and &lt;a href=&quot;/libs/preprocessor/doc/ref/while.html&quot;&gt;iteration&lt;/a&gt; primitives,
      improved reference manual.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/doc/index.html&quot;&gt;Threads Library&lt;/a&gt;:&lt;/span&gt; Mac
      Carbon implementation contributed by Mac Murrett.
    &lt;/li&gt;
    &lt;li&gt;
      Minor fixes to many libraries.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.26.0</title><pubDate>Fri, 30 Nov 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Common Factor, Preprocessor. Updated Libraries: Iterator Adaptor,
      Random Number, Operators.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.26.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/common_factor.html&quot;&gt;Common Factor Library&lt;/a&gt;&lt;/span&gt;
  added.
      Greatest common divisor and least common multiple, from Daryle Walker.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/preprocessor/doc/index.html&quot;&gt;Preprocessor Library&lt;/a&gt;&lt;/span&gt;
  added.
      Preprocessor metaprogramming tools including repetition and recursion, from
      Vesa Karvonen.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/iterator_adaptors.htm&quot;&gt;Iterator Adaptor Library&lt;/a&gt;:&lt;/span&gt; Added
      &lt;a href=&quot;/libs/utility/generator_iterator.htm&quot;&gt;generator iterator&lt;/a&gt;
      adaptor, from Jens Maurer.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Removed
      iterator interface. Fixed overflows in uniform_int&amp;lt;&amp;gt;. Both changes cause
      random number sequences to differ compared to previous boost releases.
    &lt;/li&gt;
    &lt;li&gt;
      [phase library..&lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators.hpp&lt;/a&gt;:]
      Improvements from Daryle and Helmut Ziesel
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost.Build&lt;/a&gt;:&lt;/span&gt; Continuing
      improvements, including pre-built &lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost.Jam
      executables&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Minor fixes to a number of other libraries.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.25.1</title><pubDate>Mon,  5 Nov 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Graph, Thread, Function.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.25.1/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost Build System&lt;/a&gt;:&lt;/span&gt; Continued
      improvements.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/config.htm&quot;&gt;Config Library&lt;/a&gt;:&lt;/span&gt; Continued
      refinements.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Final
      cleanup for upcoming the Boost Graph Library book.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/doc/index.html&quot;&gt;Thread Library&lt;/a&gt;:&lt;/span&gt; Minor
      fixes - tests now pass on most Win32 and POSIX systems including Linux and
      Solaris. Semaphore removed as too error prone.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; direct
      support for member function pointers and documentation updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://groups.yahoo.com/group/Boost-Users&quot;&gt;Boost-Users&lt;/a&gt;
      mailing list has been created to address topics of interest to users of Boost
      libraries.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://www.crystalclearsoftware.com/cgi-bin/boost_wiki/wiki.pl&quot;&gt;Boost
      Wiki web&lt;/a&gt; added. Provides a place for Boost users to openly discuss
      and document the use of Boost libraries. It is not officially maintained by
      Boost developers.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.25.0</title><pubDate>Mon,  1 Oct 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Thread, Bind. Updated Libraries: Utility, Array, Config, Random
      Number, Math, Tokenizer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.25.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/doc/index.html&quot;&gt;Thread Library&lt;/a&gt;&lt;/span&gt; added.
      Portable C++ multi-programming at last, from William Kempf.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/libs/utility/base_from_member.html&quot;&gt;Base From Member&lt;/a&gt; added
      to &lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;Utility Library&lt;/a&gt;. Support
      for the base from member idiom, from Daryle Walker.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/libs/bind/bind.html&quot;&gt;Bind&lt;/a&gt; and &lt;a href=&quot;/libs/bind/mem_fn.html&quot;&gt;mem_fn&lt;/a&gt;
      added - Generalized binders for function/object/pointers and member functions,
      from Peter Dimov.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;:&lt;/span&gt; Minor updates,
      from Nico Josuttis.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/config.htm&quot;&gt;Config Library&lt;/a&gt;:&lt;/span&gt; major redesign
      with much improved and automated configuration of Boost libraries for specific
      compilers, from John Maddock.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Fixed
      bug when copying normal_distribution and improved the documentation, from Michael
      Stevens and Jens Maurer.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/doc/html/boost_math/math_special_functions.html&quot;&gt;Special functions&lt;/a&gt;,
      &lt;a href=&quot;/doc/html/boost_math/octonions.html&quot;&gt;octonions&lt;/a&gt;, &lt;a href=&quot;/doc/html/boost_math/quaternions.html&quot;&gt;quaternions&lt;/a&gt; updated, now
      useable with many more compilers, plus three new special functions, from Hubert
      Holin, Eric Ford, and others.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tokenizer/index.html&quot;&gt;Tokenizer Library&lt;/a&gt;:&lt;/span&gt;
  fixes/enhancements
      to escaped_list_separator based on empty fields and tokens comments from Johan
      Nillson and Jens Maurer.
    &lt;/li&gt;
    &lt;li&gt;
      Coming Soon - A mailing list for Boost users!
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.24.0</title><pubDate>Sun, 19 Aug 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Library: Tuple.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.24.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tuple/doc/tuple_users_guide.html&quot;&gt;Tuple Library&lt;/a&gt;&lt;/span&gt;
  added.
      Tuples ease definition of functions returning multiple values, and more, from
      Jaakko Jarvi.
    &lt;/li&gt;
    &lt;li&gt;
      Minor fixes to some other libraries.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost Build System&lt;/a&gt;&lt;/span&gt; added.
      Preliminary release of an innovative build system for Boost libraries, from
      Dave Abrahams and others.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/more/formal_review_schedule.html&quot;&gt;Formal Review Schedule&lt;/a&gt;
      added. Shows current, future, and recent past review dates.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.23.0</title><pubDate>Fri,  6 Jul 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Any, Function, Tokenizer, Special functions, Octonions, Quaternions.
      Updated Library: Smart Pointer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.23.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/any/index.html&quot;&gt;Any Library&lt;/a&gt;&lt;/span&gt; added. Safe, generic
      container for single values of different value types, from Kevlin Henney.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;&lt;/span&gt; added.
      Function object wrappers for deferred calls or callbacks, from Doug Gregor.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tokenizer/index.html&quot;&gt;Tokenizer Library&lt;/a&gt;&lt;/span&gt; added.
      Break a string into a series of tokens, from John Bandela.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/doc/html/boost_math/math_special_functions.html&quot;&gt;Special functions&lt;/a&gt;,
      &lt;a href=&quot;/doc/html/boost_math/octonions.html&quot;&gt;octonions&lt;/a&gt;, &lt;a href=&quot;/doc/html/boost_math/quaternions.html&quot;&gt;quaternions&lt;/a&gt; added, from
      Hubert Holin.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/smart_ptr.htm&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
  shared_ptr
      polymorphic pointers now work on more broken compilers.
    &lt;/li&gt;
    &lt;li&gt;
      IBM/Aix Compiler status table contributed by Toon Knapen.
    &lt;/li&gt;
    &lt;li&gt;
      Minor fixes to a number of other libraries.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.22.0</title><pubDate>Fri, 25 May 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libary: CRC. Updated Libraries: Graph, Integer, Regex, Smart Pointer, Utility.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.22.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/crc/index.html&quot;&gt;CRC Library&lt;/a&gt;&lt;/span&gt; added. Compute
      cyclic redundancy codes from Daryle Walker.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Minor
      fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/integer_traits.html&quot;&gt;Integer Traits&lt;/a&gt;:&lt;/span&gt; added
      wchar_t specialization, minor portability fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex Library&lt;/a&gt;:&lt;/span&gt; Minor portability
      fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/smart_ptr.htm&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
  fixed
      bugs, tightened requirements, added examples.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;Utility Library&lt;/a&gt;:&lt;/span&gt; added
      checked_delete() and checked_array_delete() functions.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.21.2</title><pubDate>Tue, 24 Apr 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Compatibility. Updated Libraries: Random Number, Integer, Graph.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.21.2/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/compatibility/index.html&quot;&gt;Compatibility Library&lt;/a&gt;&lt;/span&gt;
  added:
      Help for non-conforming standard libraries missing CXX headers from Ralf Grosse-Kunstleve,
      and help for missing standard library &amp;lt;limits&amp;gt; header from Jens Maurer.
      (These are unreviewed implementation libraries, treated as maintenance steps
      only.)
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Split
      into separate headers, updated documentation, added lagged_fibonacci generator.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;:&lt;/span&gt; Minor
      portability update.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt;
  Changed
      algorithm interfaces to use named parameters technique. Added graph isomorphism
      algorithm.
    &lt;/li&gt;
    &lt;li&gt;
      Download refinements - files now available from either FTP or web server.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;http://sourceforge.net/tracker/?group_id=7586&quot;&gt;Tracker&lt;/a&gt;
      Added: View and submit bug, support, and feature requests.
    &lt;/li&gt;
    &lt;li&gt;
      Minor portability fixes in several other libraries.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.21.1</title><pubDate>Wed, 14 Mar 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Graph, Python, Regex.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.21.1/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      New download page. The .zip and .tar.gz files now live on the SourceForge ftp
      site.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Minor
      docs fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt; Minor
      docs fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex Library&lt;/a&gt;:&lt;/span&gt; Minor portability
      fixes.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.21.0</title><pubDate>Fri,  9 Mar 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Iterator Adaptor, Pool, Test. Updated Libraries: Graph, Python,
      Regular Expression, Type Traits.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/iterator_adaptors.htm&quot;&gt;Iterator Adaptor Library&lt;/a&gt;&lt;/span&gt; added.
      Adapt a base type into a standard conforming iterator, and more, from Dave
      Abrahams, Jeremy Siek, and John Potter.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/pool/doc/index.html&quot;&gt;Pool Library&lt;/a&gt;&lt;/span&gt; added. Memory
      pool management from Steve Cleary.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/test/doc/index.html&quot;&gt;Test Library&lt;/a&gt;&lt;/span&gt; added. Support
      for program testing and execution from Beman Dawes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/more/generic_programming.html&quot;&gt;Generic Programming Techniques&lt;/a&gt;
      page added, contributed by Dave Abrahams.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt;
  Updated
      use of iterator adaptors. Changed &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;
      &lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;/code&gt; for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_list&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;edge_descriptor&lt;/span&gt;&lt;/code&gt;
      to improve semantics for multigraphs. Moved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_iterator_generator&lt;/span&gt;&lt;/code&gt;
      from namespace &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;/code&gt; and added &lt;a href=&quot;/libs/graph/doc/adjacency_iterator.html&quot;&gt;documentation&lt;/a&gt;.
      Renamed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dynamic_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; to &lt;a href=&quot;/libs/graph/doc/incremental_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;incremental_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
      better matching graph literature terminology. Cleaned up interface of &lt;a href=&quot;/libs/graph/doc/connected_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;connected_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and created separate &lt;a href=&quot;/libs/graph/doc/strong_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;strong_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      function using Tarjan's more efficient algorithm. Fixed documentation figures
      for &lt;a href=&quot;/libs/graph/doc/adjacency_list.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_list&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      and &lt;a href=&quot;/libs/graph/doc/adjacency_matrix.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
      Added docs for &lt;a href=&quot;/libs/graph/doc/cuthill_mckee_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cuthill_mckee_ordering&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      algorithm.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;&lt;/span&gt; upgraded.
      Better compatibility with Python 2.0, NULL pointers and smart-pointers get
      converted to/from python None, massive documentation review/revision.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;:&lt;/span&gt; Minor
      fixes for Unicode platforms.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;Type Traits Library&lt;/a&gt;&lt;/span&gt;
  upgraded:
      Major revision.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.20.2</title><pubDate>Sat, 10 Feb 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Array traits, Graph, Integer, Random Number, Rational Number,
      Regular Expression, Smart Pointer, Timer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=138112</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
  
  
  
  &lt;ul&gt;
    &lt;li&gt;
      Array traits: minor portability fix.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt; -
      Changes to &lt;a href=&quot;/libs/graph/doc/breadth_first_search.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;breadth_first_search&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      re: &lt;a href=&quot;/libs/graph/doc/BFSVisitor.html&quot;&gt;BFSVisitor&lt;/a&gt;, added
      max flow algorithms &lt;a href=&quot;/libs/graph/doc/edmunds_karp_max_flow.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;edmunds_karp_max_flow&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      and &lt;a href=&quot;/libs/graph/doc/push_relabel_max_flow.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;push_relabel_max_flow&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, added &lt;a href=&quot;/libs/graph/doc/adjacency_matrix.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; graph class, added
      &lt;a href=&quot;/libs/graph/doc/filtered_graph.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;filtered_graph&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
      adaptor
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;:&lt;/span&gt; minor
      fixes to integer.hpp and integer_test.cpp
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;microsoft_vcpp.html&quot;&gt;Portability Hints: Microsoft Visual C++&lt;/a&gt;
      added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Minor
      portability fixes
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/rational/index.html&quot;&gt;Rational Number Library&lt;/a&gt;:&lt;/span&gt;
  documentation
      updates, efficiency improvements, co-operates with user-defined types, regression
      tests
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;:&lt;/span&gt; minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
  shared_ptr
      example added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/timer/index.html&quot;&gt;Timer Library&lt;/a&gt;:&lt;/span&gt; changed to
      an all inline implementation.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.20.1</title><pubDate>Wed, 10 Jan 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Compressed Pair, Graph Library, Regular Expression.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;a href=&quot;/boost/compressed_pair.hpp&quot;&gt;compressed_pair.hpp&lt;/a&gt; minor update
      fixes test failures of other libraries under VC++.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
  minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      Minor website fixes including missing files in boost_all.zip.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.20.0</title><pubDate>Sat,  6 Jan 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Library: Conversion. Updated Libraries: Array, Graph, Regular Expression.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/conversion/index.html&quot;&gt;Conversion Library&lt;/a&gt;&lt;/span&gt; added
      - &lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;cast&lt;/a&gt; and &lt;a href=&quot;/libs/conversion/lexical_cast.htm&quot;&gt;lexical_cast&lt;/a&gt;
      headers from Dave Abrahams and Kevlin Henney.
    &lt;/li&gt;
    &lt;li&gt;
      Web site moved to a larger host after the old ISP collapsed unexpectedly.
    &lt;/li&gt;
    &lt;li&gt;
      Regression tests now include execution testing. See &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler
      Status&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/more/discussion_policy.htm&quot;&gt;Discussion Policy&lt;/a&gt; page added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;&lt;/span&gt; minor documentation
      improvements.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
  minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
      updates.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.19.0</title><pubDate>Sun, 10 Dec 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Concept Check, Python, Static Assert, Property Map Concepts.
      Updated Libraries: Graph, Regular Expression.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/concept_check/concept_check.htm&quot;&gt;Concept Check Library&lt;/a&gt;&lt;/span&gt; added
      - tools for generic programming from Jeremy Siek.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;&lt;/span&gt; added
      - reflects C++ classes and functions into Python, from Dave Abrahams.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/static_assert/static_assert.htm&quot;&gt;Static Assert Library&lt;/a&gt;&lt;/span&gt; added
      - compile time assertions from John Maddock
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_map/property_map.html&quot;&gt;Property Map Concepts&lt;/a&gt;&lt;/span&gt; added
      - interfaces which map key objects to value objects from Jeremy Siek.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
  minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
      updates.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/more/lib_guide.htm&quot;&gt;Library Requirements and Guidelines&lt;/a&gt;
      - directory name policy added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/more/faq.htm&quot;&gt;FAQ&lt;/a&gt; updated.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.18.3</title><pubDate>Sat, 18 Nov 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Graph, Regular Expression, Cast.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
  minor
      fixes and additions.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
      fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; Borland compiler fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;/boost/cstdint.hpp&quot;&gt;cstdint.hpp&lt;/a&gt; changed to no longer expose
      names to the global namespace.
    &lt;/li&gt;
    &lt;li&gt;
      BeOS5/Intel compiler status contributed by John Maddock.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt;&lt;/span&gt; added
      two additional test programs.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.18.2</title><pubDate>Fri,  3 Nov 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Case, Graph, Regular Expression, Configuration. Utility
      library split into separate libraries.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;Cast Library&lt;/a&gt;&lt;/span&gt; Fix numeric_cast&amp;lt;&amp;gt;
      bugs with floating types.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
  minor
      fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
      fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Configuration Header&lt;/a&gt;&lt;/span&gt; more
      fixes for broken compilers.
    &lt;/li&gt;
    &lt;li&gt;
      Boost Header Dependencies page added.
    &lt;/li&gt;
    &lt;li&gt;
      Terminology change: Several headers previously lumped together as a &amp;quot;utility&amp;quot;
      library are now considered separate libraries. For historical reasons, their
      non-header files still live in the &amp;quot;utility&amp;quot; sub-directory.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.18.1</title><pubDate>Sun, 15 Oct 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Graph, Random, Regular Expression, Configuration.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;,
      &lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;, and &lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;: Minor fixes.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Configuration Header&lt;/a&gt;&lt;/span&gt; additions
      for various compiler foibles.
    &lt;/li&gt;
    &lt;li&gt;
      Portability Hints: Borland C++ 5.5.1 from Jens Maurer added.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt;&lt;/span&gt; updated
      for latest versions of several compilers.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.18.0</title><pubDate>Thu, 28 Sep 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Graph, Regular Expression. Updated Libraries: Array, Functional,
      Utility, Integer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      Preliminary release of two important new libraries:
      &lt;ul&gt;
        &lt;li&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt; -
          Generic graph components and algorithms from Jeremy Siek and a University
          of Notre Dame team.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; -
          Text pattern matching in all its glory from John Maddock.
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;
      Other changes:
      &lt;ul&gt;
        &lt;li&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;&lt;/span&gt; improvements
          reflecting formal review comments.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href=&quot;/boost/functional.hpp&quot;&gt;functional.hpp&lt;/a&gt; compiler workarounds
          added.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;
          &lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&lt;/code&gt;
          added to utility.hpp for easier handling of std::pair&amp;lt;&amp;gt; return values.
        &lt;/li&gt;
        &lt;li&gt;
          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;&lt;/span&gt; improved
          handling of 64-bit integers.
        &lt;/li&gt;
        &lt;li&gt;
          Minor web site page updates.
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.17.0</title><pubDate>Thu,  3 Aug 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Added Library: Array. Updated Libraries: Array Traits, Random Number, Smart
      Pointer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;&lt;/span&gt; added - An
      STL compliant container wrapper for arrays of constant size from Nicolai Josuttis.
    &lt;/li&gt;
    &lt;li&gt;
      array traits header renamed array_traits.hpp (was array.hpp).
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; more
      minor changes to support more compilers.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
  performance
      reducing exception-specifications removed.
    &lt;/li&gt;
    &lt;li&gt;
      Compiler and test program fixes for call_traits, compressed_pair, and type_traits.
    &lt;/li&gt;
    &lt;li&gt;
      Updated &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; to clear compiler warning
      messages.
    &lt;/li&gt;
    &lt;li&gt;
      Linux &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt; added.
    &lt;/li&gt;
    &lt;li&gt;
      Boost source code now lives in a publicly accessible Concurrent Versions System
      (CVS) repository.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.16.1</title><pubDate>Wed,  5 Jul 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Integer, Random Number, Cast, Call Traits, Operators.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer&lt;/a&gt;&lt;/span&gt; library: fixed
      &lt;a href=&quot;/boost/cstdint.hpp&quot;&gt;cstdint.hpp&lt;/a&gt; bug, added &lt;a href=&quot;/libs/integer/cstdint_test.cpp&quot;&gt;cstdint_test.cpp&lt;/a&gt;,
      updated &lt;a href=&quot;/libs/integer/cstdint.htm&quot;&gt;docs&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; minor
      fixes to &lt;a href=&quot;/boost/random.hpp&quot;&gt;random.hpp&lt;/a&gt; and &lt;a href=&quot;/libs/random/random_test.cpp&quot;&gt;random_test.cpp&lt;/a&gt;
      to support more compilers.
    &lt;/li&gt;
    &lt;li&gt;
      Updated &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; with more Microsoft compiler
      workarounds.
    &lt;/li&gt;
    &lt;li&gt;
      Updated &lt;a href=&quot;/libs/utility/call_traits.htm&quot;&gt;call_traits docs&lt;/a&gt;,
      added &lt;a href=&quot;/libs/utility/call_traits_test.cpp&quot;&gt;call_traits_test.cpp&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      Cleanup and bug fixes for &lt;a href=&quot;/boost/operators.hpp&quot;&gt;operators.hpp&lt;/a&gt;
      and &lt;a href=&quot;/libs/utility/operators_test.cpp&quot;&gt;operators_test.cpp&lt;/a&gt;.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.16.0</title><pubDate>Wed, 28 Jun 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Libraries: Functional, iterator header, Updated Libraries: Random Number,
      Rational, Cast, Smart Pointer, Config.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;ul&gt;
    &lt;li&gt;
      Added &lt;a href=&quot;/libs/functional/index.html&quot;&gt;Functional Library&lt;/a&gt; -
      Enhanced function object adaptors from Mark Rodgers.
    &lt;/li&gt;
    &lt;li&gt;
      Added missing &lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;
      files.
    &lt;/li&gt;
    &lt;li&gt;
      Updated &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators docs&lt;/a&gt; and
      &lt;a href=&quot;/boost/operators.hpp&quot;&gt;operators.hpp&lt;/a&gt;.
    &lt;/li&gt;
    &lt;li&gt;
      New &lt;a href=&quot;/boost/iterator.hpp&quot;&gt;iterator.hpp&lt;/a&gt; header.
    &lt;/li&gt;
    &lt;li&gt;
      Minor &lt;a href=&quot;/boost/rational.hpp&quot;&gt;rational.hpp&lt;/a&gt;, &lt;a href=&quot;/libs/rational/rational_example.cpp&quot;&gt;rational_example.cpp&lt;/a&gt;,
      and &lt;a href=&quot;/libs/integer/integer_traits_test.cpp&quot;&gt;integer_traits_test.cpp&lt;/a&gt;
      changes to support more compilers.
    &lt;/li&gt;
    &lt;li&gt;
      Revised &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;: removed implicit_cast,
      plus fixes for broken compilers.
    &lt;/li&gt;
    &lt;li&gt;
      Minor &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt; workaround for
      some GCC builds.
    &lt;/li&gt;
    &lt;li&gt;
      Several &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; changes for Microsoft,
      Intel, and other compilers.
    &lt;/li&gt;
    &lt;li&gt;
      Added &lt;a href=&quot;/libs/config/index.html&quot;&gt;Configuration Header&lt;/a&gt; page
      and test program.
    &lt;/li&gt;
    &lt;li&gt;
      Added Experimental &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt;
      page showing what library works with which compilers.
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Version 1.15.1</title><pubDate>Wed, 21 Jun 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Cast, Operators, Config.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Fixes to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; and &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators&lt;/a&gt;
    fix. Minor additions to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; for
    Microsoft compilers. The 1.15.0 operators changes seem to have introduced incompatibilities.
    We are working on fixing them, and have started to build a regression test to
    prevent similar future problems.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.15.0</title><pubDate>Sat, 17 Jun 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Added Library: Random Number. Updated Libraries: Utility, Config, Cast.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    &lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt; from Jens
    Maurer added. Updated utility library &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators&lt;/a&gt;
    eliminates code bloat. Minor additions to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;
    and &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; for Microsoft compilers.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.14.3</title><pubDate>Mon, 29 May 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Config, Type Traits.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Minor additions to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; for Borland
    compilers. Minor fix to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_traits&lt;/span&gt;&lt;/code&gt;
    example. Minor web site fixes. &lt;a href=&quot;/more/formal_review_process.htm&quot;&gt;Library
    Formal Review Process&lt;/a&gt; page added.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.14.2</title><pubDate>Tue,  9 May 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Documentation updates.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    No libraries updated. &lt;a href=&quot;/more/lib_guide.htm&quot;&gt;Library Requirements and
    Guidelines&lt;/a&gt; expanded, &lt;a href=&quot;/more/submission_process.htm&quot;&gt;Library
    Submission Process&lt;/a&gt; added.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.14.1</title><pubDate>Fri, 17 Mar 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Rational, Smart Pointer, Call Traits, Compressed Pair, Type
      Traits.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Minor fix to &lt;a href=&quot;/boost/rational.hpp&quot;&gt;rational.hpp&lt;/a&gt;. Minor documentation
    changes to the &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointer&lt;/a&gt;
    Library and &lt;a href=&quot;/libs/utility/call_traits.htm&quot;&gt;call_traits&lt;/a&gt;,
    &lt;a href=&quot;/libs/utility/compressed_pair.htm&quot;&gt;compressed_pair&lt;/a&gt;, and type_traits.
    Updated &lt;a href=&quot;/more/lib_guide.htm&quot;&gt;Library Guidelines&lt;/a&gt; and &lt;a href=&quot;/users/people.html&quot;&gt;People&lt;/a&gt; page.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.14.0</title><pubDate>Sun,  5 Mar 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Integer. Experimental libraries moved to vault.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    &lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt; status upgraded
    after removing bin_bun.hpp. The &amp;quot;Experimental&amp;quot; library category has
    been removed; the boost files/vault now serves the purpose. Minor fix to &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt; line endings.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.13.0</title><pubDate>Tue, 29 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Added Libraries: Utility, Type Traits, Call Traits, Compressed Pair.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Adds &lt;a href=&quot;/libs/utility/index.html&quot;&gt;Utility Library&lt;/a&gt; &lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;type_traits&lt;/a&gt;,
    &lt;a href=&quot;/libs/utility/call_traits.htm&quot;&gt;call_traits&lt;/a&gt;, and &lt;a href=&quot;/libs/utility/compressed_pair.htm&quot;&gt;compressed_pair&lt;/a&gt;
    headers from John Maddock, Steve Cleary and Howard Hinnant.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.12.0</title><pubDate>Wed, 23 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Library: Integer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Adds a &lt;a href=&quot;/libs/integer/integer_traits.html&quot;&gt;integer_traits&lt;/a&gt;
    header from Jens Maurer to the &lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer
    Library&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.11.2</title><pubDate>Mon, 21 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Smart Pointer.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    &lt;a href=&quot;/libs/smart_ptr/smarttests.htm&quot;&gt;Smart pointer timings&lt;/a&gt; added
    (thanks to Gavin Collings). Minor fix to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;min_rand&lt;/span&gt;&lt;/code&gt;
    sample program. Minor fixes to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.11.1</title><pubDate>Wed,  2 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Minor fix for cast.hpp.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Minor fix to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; (thanks to Doncho
    Angelov).
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.11.0</title><pubDate>Tue,  1 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      New Library: Rational Number. Updated Libraries: Case, Config, Smart Pointer,
      Utility.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Added &lt;a href=&quot;/libs/rational/index.html&quot;&gt;Rational Number Library&lt;/a&gt;.
    Minor fixes to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;, &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;,
    &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt;, &lt;a href=&quot;/boost/utility.hpp&quot;&gt;utility.hpp&lt;/a&gt;,
    and to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;min_rand&lt;/span&gt;&lt;/code&gt; sample programs.
    Minor site cleanup (thanks to Paul Baxter).
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.10.4</title><pubDate>Fri, 31 Dec 1999 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Smart Pointer, Cast.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Minor fixes to &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt; and &lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;cast documentation&lt;/a&gt;.
  &lt;/p&gt;
&lt;/div&gt;</description></item><item><title>Version 1.10.3</title><pubDate>Thu, 30 Dec 1999 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Updated Libraries: Compse, Operators, Cast, Config, Smart Pointer First release
      with a version number.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;p&gt;
    Minor fixes to the compose library examples, &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators
    documentation&lt;/a&gt;, &lt;a href=&quot;/boost/operators.hpp&quot;&gt;operators.hpp&lt;/a&gt;,
    &lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;cast documentation&lt;/a&gt;, &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;,
    &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;, and &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt;.
  &lt;/p&gt;
  &lt;p&gt;
    This is the first release with a version number. The version numbering scheme
    is xxx.yyy.zzz.
  &lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;
      xxx = Major version
    &lt;/li&gt;
    &lt;li&gt;
      yyy = New library or feature added
    &lt;/li&gt;
    &lt;li&gt;
      zzz = Bug fixes only
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;</description></item><item><title>Old Versions</title><pubDate>Tue, 14 Dec 1999 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
      Early releases of boost without version numbers.
    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
  
  
  &lt;div id=&quot;old_versions.14_dec_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;14 Dec 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/boost/operators.hpp&quot;&gt;Operators.hpp&lt;/a&gt; &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;documentation&lt;/a&gt;
      improved.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.13_dec_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;13 Dec 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Added iterator operators and helpers to &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;header
      operators.hpp&lt;/a&gt;, together with an iterator test program. This header
      is maturing into something really useful for building arithmetic or iterator
      user-defined types, so look it over even if you browsed one of the earlier
      versions.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.11_dec_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;11 Dec 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Added next() and prior() to &lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;header utility.hpp&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.8_dec_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;8 Dec 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Minor improvements to the &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;smart pointer&lt;/a&gt;
      library: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;/code&gt;,
      &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;!=&lt;/span&gt;&lt;/code&gt;,
      and specializations for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;/code&gt; and
      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;less&lt;/span&gt;&lt;/code&gt; now provided.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.18_nov_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;18 Nov 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Minor improvements made to the &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;Operator
      templates&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.15_nov_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;15 Nov 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;Operator templates&lt;/a&gt; have been
      added to the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt; library.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.11_oct_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;11 Oct 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Minor &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;smart pointer&lt;/a&gt; library
      and &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; changes to improve portability.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.26_sep_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;26 Sep 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Minor updates to several libraries: * &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_downcast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; in the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt;
      library &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; header now works for
      multiple inheritance cases. * &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; functions added in the &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;smart
      pointer&lt;/a&gt; library. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/boost/timer.hpp&quot;&gt;timer.hpp&lt;/a&gt;&lt;/span&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;elapsed_max&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;elapsed_min&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
      functions added to the &lt;a href=&quot;/libs/timer/index.html&quot;&gt;timer&lt;/a&gt; library.
      * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;integer&lt;/a&gt;&lt;/span&gt; library bin_ubin.hpp
      changes to eliminate compiler warning messages. * &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;
      minor changes to aid library developers. No impact on library users.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.3_sep_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;3 Sep 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The cast functions in the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt;
      library were considerably simplified.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.1_sep_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;1 Sep 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The cast functions initially in &lt;a href=&quot;/boost/utility.hpp&quot;&gt;utility.hpp&lt;/a&gt;
      have been moved to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;, still in
      the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt; library.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;div id=&quot;old_versions.1_sep_1999&quot;&gt;
    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;1 Sep 1999&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      The category &amp;quot;Experimental&amp;quot; has been added to the &lt;a href=&quot;/libs/libraries.htm&quot;&gt;library&lt;/a&gt;
      page. The &lt;a href=&quot;/libs/integer/index.html&quot;&gt;integer&lt;/a&gt; library is
      the first entry.
    &lt;/p&gt;
  &lt;/div&gt;
  &lt;p&gt;
    ...And the remainder are lost to the mists of time (for now, anyway)....
  &lt;/p&gt;
&lt;/div&gt;</description></item>
  </channel>
</rss>
