<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:boostbook="urn:boost-org:boostbook" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <generator>Boost Website Site Tools</generator>
    <title>Boost News</title>
    <link>https://www.boost.org/users/news/</link>
    <atom:link href="https://www.boost.org/generated/news.rss" rel="self" type="application/rss+xml" />
    <description></description>
    <language>en-us</language>
    <copyright>Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or https://www.boost.org/LICENSE_1_0.txt)</copyright>
<item><title>Version 1.79.0</title><link>https://www.boost.org/users/history/version_1_79_0.html</link><guid>https://www.boost.org/users/history/version_1_79_0.html</guid><pubDate>Wed, 13 Apr 2022 14:22:59 +0000</pubDate><description>


  &lt;div id="version_1_79_0.known_issues"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Known Issues&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      These are patches from library authors which were found too late to be fixed
      in the release.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Boost.JSON &lt;code&gt;&lt;span class="identifier"&gt;array&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;erase&lt;/span&gt;&lt;/code&gt; can segfault, see &lt;a href="https://github.com/boostorg/json/issues/692"&gt;#692&lt;/a&gt;.
          &lt;a href="https://www.boost.org/patches/1_79_0/0001-json-array-erase-relocate.patch"&gt;Patch&lt;/a&gt;.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_79_0.new_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          No new libraries.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_79_0.updated_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;bind_allocator&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;file_base&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;sync_all_on_write&lt;/span&gt;&lt;/code&gt; flag.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing implementation of &lt;code&gt;&lt;span class="identifier"&gt;basic_file&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;release&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added per-operation cancellation support to signal sets.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Exposed &lt;code&gt;&lt;span class="identifier"&gt;recycling_allocator&lt;/span&gt;&lt;/code&gt;
                as part of the public interface.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class="identifier"&gt;nodiscard&lt;/span&gt;&lt;/code&gt;
                attribute to a number of functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added OpenSSL 3.0 compatibility.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for adopting an existing &lt;code&gt;&lt;span class="identifier"&gt;SSL&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; into an &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stream&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled &lt;code&gt;&lt;span class="identifier"&gt;executor_work_guard&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; in all build configurations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled movable socket iostreams when using clang.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;bind_cancellation_slot&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;bind_executor&lt;/span&gt;&lt;/code&gt;
                compatibility with legacy completion tokens.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;associator&lt;/span&gt;&lt;/code&gt;
                specialisations for &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;append&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;prepend&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;associated_allocator&lt;/span&gt;&lt;/code&gt;
                primary template.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;tt&gt;io_uring&lt;/tt&gt; implementations of &lt;code&gt;&lt;span class="identifier"&gt;async_receive_from&lt;/span&gt;&lt;/code&gt; for sockets
                and &lt;code&gt;&lt;span class="identifier"&gt;write_some_at&lt;/span&gt;&lt;/code&gt;
                for files.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;tt&gt;io_uring&lt;/tt&gt; feature detection.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;coro&lt;/span&gt;&lt;/code&gt;'s
                per-operation cancellation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed memory management in &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;promise&lt;/span&gt;&lt;/code&gt;'s
                type-erased completion handlers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed move &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;=&lt;/span&gt;&lt;/code&gt; implementation for &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stream&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;any_io_executor&lt;/span&gt;&lt;/code&gt;
                implementation to work when both &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_SEPARATE_COMPILATION&lt;/span&gt;&lt;/code&gt;
                are defined.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed implementation of &lt;code&gt;&lt;span class="identifier"&gt;basic_socket&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;at_mark&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; when using the &lt;code&gt;&lt;span class="identifier"&gt;sockatmark&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; system call.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the recycling allocator to use the default alignment as the
                minimum alignment for allocations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a workaround for apparent coroutine codegen bug with Apple's
                clang.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Windows, changed the file support to open files using the same
                sharing mode as &lt;code&gt;&lt;span class="identifier"&gt;fopen&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Linux, fixed UNIX domain sockets implementation to correctly handle
                &lt;code&gt;&lt;span class="identifier"&gt;EAGAIN&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed implementation of &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_channel&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;reset&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_concurrent_channel&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;reset&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed potential undefined behaviour in the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;promise&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the &lt;code&gt;&lt;span class="identifier"&gt;co_spawn&lt;/span&gt;&lt;/code&gt;
                implementation to dispatch cancellation signals through the executor
                in some circumstances.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed various header inclusion issues.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed various warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                A number of documentation enhancements, including:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added an overview of Asio's asynchronous model.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Reworked reference and requirements documentation in terms
                      of asynchronous model.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Updated documentation for &lt;code&gt;&lt;span class="identifier"&gt;dispatch&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;post&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class="identifier"&gt;defer&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Documented per-operation cancellation for serial ports.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Clarified the non-concurrency guarantees made for allocators.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Reverted the &lt;code&gt;&lt;span class="identifier"&gt;io_context&lt;/span&gt;&lt;/code&gt;
                      reference documentation to use &lt;code&gt;&lt;span class="identifier"&gt;executor_work_guard&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added more detailed reference documentation to &lt;code&gt;&lt;span class="identifier"&gt;make_strand&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class="identifier"&gt;make_work_guard&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;address_v4&lt;/span&gt;&lt;/code&gt;,
                      &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;address_v6&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_channel&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_concurrent_channel&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Re-arranged and extended the Overview documentation to cover
                      recently added features.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a C++11 example showing file descriptor passing over local
                sockets.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++14 examples of wrapping callback-based APIs in asynchronous
                operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Consult the &lt;a href="https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/history.html"&gt;Revision
                History&lt;/a&gt; for further details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/assert/"&gt;Assert&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;span class="special"&gt;().&lt;/span&gt;&lt;span class="identifier"&gt;file_name&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;span class="special"&gt;().&lt;/span&gt;&lt;span class="identifier"&gt;function_name&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; now return &lt;code&gt;&lt;span class="string"&gt;""&lt;/span&gt;&lt;/code&gt;
                instead of &lt;code&gt;&lt;span class="string"&gt;"(unknown)"&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a &lt;code&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;/code&gt;
                constructor from &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed &lt;code&gt;&lt;span class="identifier"&gt;BOOST_CURRENT_LOCATION&lt;/span&gt;&lt;/code&gt;
                to more closely match the behavior of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;current&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, such as being usable at top level
                or as a default function argument.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation for Universal Windows Platform (UWP). (&lt;a href="https://github.com/boostorg/atomic/issues/54"&gt;#54&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ATOMIC_NO_DARWIN_ULOCK&lt;/span&gt;&lt;/code&gt;
                configuration macro. The macro affects compilation on Darwin systems
                and disables &lt;code&gt;&lt;span class="identifier"&gt;ulock&lt;/span&gt;&lt;/code&gt;-based
                implementation of waiting and notifying operations. This may be useful
                to comply with Apple App Store requirements. (&lt;a href="https://github.com/boostorg/atomic/issues/55"&gt;#55&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing include for file_body test.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed WebSocket handshake response on failure.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed open append mode for &lt;code&gt;&lt;span class="identifier"&gt;file_posix&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;file_win32&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed file open with append/append_existing flag on Windows
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed clang-cl UTF8 path handling for &lt;code&gt;&lt;span class="identifier"&gt;file_win32&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;file_stdio&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added ARM64 builds to drone CI.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed async_base documentation link.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added tests for file open in append/append_existing mode.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated CI to include gcc 11, clang 12, msvc 14.3.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added individual tests to CMake workflow.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                We'd love to know how you or your company use Beast, consider adding
                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
                and Individuals Using Beast&lt;/a&gt; list.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
                Notes&lt;/a&gt; for a complete list of changes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Made &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;pointer_traits&lt;/span&gt;&lt;/code&gt; SFINAE friendly,
                addressing LWG3545. (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt; that uses the
                individual allocator access traits. This implementation supports
                C++03 and above. (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated the allocator access traits to support most of the C++11
                allocator model in C++03. (Glen Fernandes)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; is deprecated and will be removed
                in a future release. The header defines &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt;
                template, which is equivalent to &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt;
                in &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; header. However, since &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt; is itself deprecated in
                C++17, users are advised to remove &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt;
                or &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt; use from their code.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;verbose_terminate_handler&lt;/span&gt;&lt;/code&gt;, a utility
                function intended to be passed to &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;set_terminate&lt;/span&gt;&lt;/code&gt;
                that prints information about the uncaught exception to &lt;code&gt;&lt;span class="identifier"&gt;stderr&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/describe/"&gt;Describe&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled unions in &lt;code&gt;&lt;span class="identifier"&gt;BOOST_DESCRIBE_STRUCT&lt;/span&gt;&lt;/code&gt;
                and updated examples to check &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_union&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added example of defining a &lt;code&gt;&lt;span class="identifier"&gt;fmtlib&lt;/span&gt;&lt;/code&gt;
                class formatter.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added example of defining a &lt;code&gt;&lt;span class="identifier"&gt;fmtlib&lt;/span&gt;&lt;/code&gt;
                enum formatter.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added example of printing pointers to members.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;v3:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;replace_extension&lt;/span&gt;&lt;/code&gt;
                now works in terms of &lt;strong&gt;v3&lt;/strong&gt; definition
                of &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;extension&lt;/span&gt;&lt;/code&gt; rather than &lt;strong&gt;v4&lt;/strong&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation of path appending and concatenation operators with
                arguments of types convertible to &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;
                or compatible string type. (&lt;a href="https://github.com/boostorg/filesystem/issues/223"&gt;#223&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On POSIX systems that support &lt;code&gt;&lt;span class="identifier"&gt;fdopendir&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;O_NOFOLLOW&lt;/span&gt;&lt;/code&gt; and
                on Windows, &lt;code&gt;&lt;span class="identifier"&gt;remove_all&lt;/span&gt;&lt;/code&gt;
                is now protected against &lt;a href="https://www.cve.org/CVERecord?id=CVE-2022-21658"&gt;CVE-2022-21658&lt;/a&gt;.
                The vulnerability is a race condition that allows a third party process
                to replace a directory that is being concurrently processed by &lt;code&gt;&lt;span class="identifier"&gt;remove_all&lt;/span&gt;&lt;/code&gt; with a directory symlink
                and cause &lt;code&gt;&lt;span class="identifier"&gt;remove_all&lt;/span&gt;&lt;/code&gt;
                to follow the symlink and remove files in the linked directory instead
                of removing the symlink itself. (&lt;a href="https://github.com/boostorg/filesystem/issues/224"&gt;#224&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Windows, in &lt;code&gt;&lt;span class="identifier"&gt;remove&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;remove_all&lt;/span&gt;&lt;/code&gt; implementation,
                use POSIX semantics for file removal, when supported by the OS (Windows
                10 1709 and later). When POSIX semantics is supported, the file name
                is removed from the filesystem namespace as soon as the file is marked
                for deletion, even if it is still open and in use. With legacy Windows
                semantics, the file name remains present in the the filesystem namespace
                until the last file handle to the file is closed, which allows the
                file marked for deletion to be opened and prevents creating new files
                with the same name. (&lt;a href="https://github.com/boostorg/filesystem/issues/216"&gt;#216&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Windows, &lt;code&gt;&lt;span class="identifier"&gt;remove&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;remove_all&lt;/span&gt;&lt;/code&gt; now
                support deleting read-only directories. Support for removing read-only
                non-directory files was added previously.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Windows, &lt;code&gt;&lt;span class="identifier"&gt;directory_iterator&lt;/span&gt;&lt;/code&gt;
                internal implementation has been reworked to better utilize modern
                Windows APIs, which may improve performance while handling symlinks.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Windows, initialize internal WinAPI function pointers early, if
                possible, to allow Boost.Filesystem operations to be invoked in global
                constructors. This is only supported on MSVC, GCC, Clang and compatible
                compilers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Windows, &lt;code&gt;&lt;span class="identifier"&gt;resize_file&lt;/span&gt;&lt;/code&gt;
                should no longer fail with an error if the file to be resized is
                opened.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disabled use of the &lt;code&gt;&lt;span class="identifier"&gt;statx&lt;/span&gt;&lt;/code&gt;
                syscall on Android prior to 11.0 (API version 30). The syscall is
                blacklisted by seccomp and causes process termination in runtime.
                (&lt;a href="https://github.com/boostorg/filesystem/issues/229"&gt;#229&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Deprecated:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;string_file&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
                header is deprecated and will be removed in a future release. The
                header is no longer included by &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
                by default. Users are advised to implement the functionality themselves
                or migrate to other implementations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Deprecated:&lt;/strong&gt; Windows CE support is
                deprecated and will be removed in a future release. Windows CE has
                been untested for many years and is likely non-functional.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Major change
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/977"&gt;PR#977&lt;/a&gt; Rescaling is turned off by default. This avoids
                      many related bugs in set operations and buffer.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improvements
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/961"&gt;PR#961&lt;/a&gt; Added Web Mercator projection.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/966"&gt;PR#966&lt;/a&gt; More efficient cartesian distance strategy
                      used in simplify.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Solved issues
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/issues/956"&gt;#956&lt;/a&gt; Result of simplify algorithm with incorrect
                      closure.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/issues/962"&gt;#962&lt;/a&gt; Runtime error in R-tree deserialization due
                      to load factor.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/issues/971"&gt;#971&lt;/a&gt; R-tree insertion time impacted by use of long
                      double on ARM platforms.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfixes
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/936"&gt;PR#936&lt;/a&gt; Envelope of polygon containing pole.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/948"&gt;PR#948&lt;/a&gt; Spherical and geographic envelope for near
                      meridian segments.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/974"&gt;PR#974&lt;/a&gt; Spheroidal normalization utilities for NaN
                      coordinates.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Various fixes in set operations and buffer.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/integer/"&gt;Integer&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Optimized &lt;code&gt;&lt;span class="identifier"&gt;integer_log2&lt;/span&gt;&lt;/code&gt;
                implementation to use bit operations internally. This allows to employ
                bit instructions available on most modern CPUs. (&lt;a href="https://github.com/boostorg/integer/issues/31"&gt;#31&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/io/"&gt;IO&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;io&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_nullbuf&lt;/span&gt;&lt;/code&gt;, a null stream buffer,
                and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_onullstream&lt;/span&gt;&lt;/code&gt;, a null output
                stream (Glen Fernandes).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/iterator/"&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                In &lt;code&gt;&lt;span class="identifier"&gt;counting_iterator&lt;/span&gt;&lt;/code&gt;,
                added support for built-in 128-bit integer types supported by gcc
                and clang and compatible compilers on some target platforms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Silenced gcc warnings about deprecated implicit copy assignment operator
                in &lt;code&gt;&lt;span class="identifier"&gt;counting_iterator&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/json/"&gt;JSON&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Standalone mode of the library is removed. Users who wish to continue
                using standalone JSON can switch to &lt;a href="https://github.com/CPPAlliance/standalone-json.git"&gt;the
                C++ Alliance fork&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt; overloads.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class="identifier"&gt;error_codes&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for JSON Pointer.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Naturally grow string during serialization.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/leaf/"&gt;LEAF&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for FreeRTOS and other embedded platforms
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved diagnostic information
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved configuration macros
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                BOOST_LEAF_CHECK using statement expressions under __GNUC__
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed symbol demangling bug
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                General changes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      In &lt;code&gt;&lt;span class="identifier"&gt;text_file_backend&lt;/span&gt;&lt;/code&gt;,
                      added support for appending to a previously written log file,
                      when file rotation is used and log file names use file counters.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;strong&gt;Breaking change:&lt;/strong&gt; The &lt;code&gt;&lt;span class="identifier"&gt;file_collector&lt;/span&gt;&lt;/code&gt; interface
                      has changed:
                      &lt;ul&gt;
                        &lt;li&gt;
                          &lt;div&gt;
                            &lt;code&gt;&lt;span class="identifier"&gt;scan_for_files&lt;/span&gt;&lt;/code&gt;
                            method returns a &lt;code&gt;&lt;span class="identifier"&gt;scan_result&lt;/span&gt;&lt;/code&gt;
                            structure that contains information collected during
                            the scan;
                          &lt;/div&gt;
                        &lt;/li&gt;
                        &lt;li&gt;
                          &lt;div&gt;
                            &lt;code&gt;&lt;span class="identifier"&gt;is_in_storage&lt;/span&gt;&lt;/code&gt;
                            method added for testing if a path refers to a file within
                            the target storage directory.
                          &lt;/div&gt;
                        &lt;/li&gt;
                      &lt;/ul&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a new &lt;code&gt;&lt;span class="identifier"&gt;invoke_manip&lt;/span&gt;&lt;/code&gt;
                      stream manipulator that can be used for injecting user's function
                      into a stream output expression.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed file counter being set to zero if the user calls &lt;code&gt;&lt;span class="identifier"&gt;text_file_backend&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;scan_for_files&lt;/span&gt;&lt;/code&gt; multiple times,
                      and the second and the following calls don't find any new files.
                      (&lt;a href="https://github.com/boostorg/log/issues/179"&gt;#179&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved the efficiency of &lt;code&gt;&lt;span class="identifier"&gt;count&lt;/span&gt;&lt;/code&gt;
                operations in ranked indices from &lt;code&gt;&lt;span class="identifier"&gt;O&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;log&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;n&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt; &lt;span class="special"&gt;+&lt;/span&gt; &lt;span class="identifier"&gt;count&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;
                to &lt;code&gt;&lt;span class="identifier"&gt;O&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;log&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;n&lt;/span&gt;&lt;span class="special"&gt;))&lt;/span&gt;&lt;/code&gt;.
                Contributed by Damian Sawicki.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance work.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/nowide/"&gt;Nowide&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix compilation issues on some platforms (e.g. GCC 11 on MinGW-w64
                and Cygwin)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix missing include when using &lt;code&gt;&lt;span class="identifier"&gt;BOOST_USE_WINDOWS_H&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;WIN32_LEAN_AND_MEAN&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add sanity check when using &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;nowide&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stat&lt;/span&gt;&lt;/code&gt;
                with &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;nowide&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stat_t&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/optional/"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;a href="https://github.com/boostorg/optional/issues/98"&gt;issue
                #98&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;a href="https://github.com/boostorg/optional/issues/92"&gt;issue
                #92&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_IOSTREAM&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Now aligned storage uses &lt;code&gt;&lt;span class="keyword"&gt;unsigned&lt;/span&gt;
                &lt;span class="keyword"&gt;char&lt;/span&gt;&lt;/code&gt; rather than &lt;code&gt;&lt;span class="keyword"&gt;char&lt;/span&gt;&lt;/code&gt; to avoid UB.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Now using cv-unqualified &lt;code&gt;&lt;span class="identifier"&gt;value_type&lt;/span&gt;&lt;/code&gt;
                with placement &lt;code&gt;&lt;span class="keyword"&gt;new&lt;/span&gt;&lt;/code&gt; to
                avoid UB.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Version 1.14.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add detection of LoongArch (from Zhang Na).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/qvm/"&gt;QVM&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added constexpr under C++17
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved single header distribution
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/smart_ptr/"&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;get_allocator_pointer&lt;/span&gt;&lt;/code&gt; to obtain
                the Allocator pointer from the result of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocate_unique&lt;/span&gt;&lt;/code&gt;
                (Glen Fernandes).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/system/"&gt;System&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;/code&gt; parameter to &lt;code&gt;&lt;span class="identifier"&gt;throw_exception_from_error&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;throw_exception_from_error&lt;/span&gt;&lt;/code&gt;
                overloads for &lt;code&gt;&lt;span class="identifier"&gt;errc&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;errc_t&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;errc&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;exception_ptr&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;value&lt;/span&gt;&lt;/code&gt; now automatically supplies
                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_CURRENT_LOCATION&lt;/span&gt;&lt;/code&gt;
                to &lt;code&gt;&lt;span class="identifier"&gt;throw_exception_from_error&lt;/span&gt;&lt;/code&gt;
                via a default argument.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added an &lt;code&gt;&lt;span class="identifier"&gt;errc&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;make_error_code&lt;/span&gt;&lt;/code&gt; overload taking
                a source location.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/throw_exception/"&gt;ThrowException&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;throw_with_location&lt;/span&gt;&lt;/code&gt;, a more lightweight
                alternative of &lt;code&gt;&lt;span class="identifier"&gt;BOOST_THROW_EXCEPTION&lt;/span&gt;&lt;/code&gt;
                for programs that do not use Boost.Exception.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/unordered/"&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                All containers have been updated to support heterogeneous &lt;code&gt;&lt;span class="identifier"&gt;count&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;equal_range&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;find&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                All containers now implement the member function &lt;code&gt;&lt;span class="identifier"&gt;contains&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;erase_if&lt;/span&gt;&lt;/code&gt; has been
                implemented for all containers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                All containers have been updated to support heterogeneous &lt;code&gt;&lt;span class="identifier"&gt;erase&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;extract&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed behavior of &lt;code&gt;&lt;span class="identifier"&gt;reserve&lt;/span&gt;&lt;/code&gt;
                to eagerly allocate.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Various warning fixes in the test suite.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Update code to internally use &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Switch to Fibonacci hashing.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Update documentation to be written in AsciiDoc instead of QuickBook.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant2/"&gt;Variant2&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/code&gt;
                for &lt;code&gt;&lt;span class="identifier"&gt;monostate&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/wave/"&gt;Wave&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                C++11 now required for building Wave itself
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/wave/issues/135"&gt;#135&lt;/a&gt;: Comma operators in array subscripts are deprecated
                      in C++20
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/wave/issues/137"&gt;#137&lt;/a&gt;: Simple unknown directive =&amp;gt; found_unknown_directive
                      is not called, stripped of pound.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/wave/issues/138"&gt;#138&lt;/a&gt;: Empty ifdef block does not emit line directive
                      for missing whitespace
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/wave/issues/143"&gt;#143&lt;/a&gt;: Parsing __has_include() fails with trailing tokens
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/wave/issues/145"&gt;#145&lt;/a&gt;: Sanitizer complains about reset_version()
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/wave/issues/147"&gt;#147&lt;/a&gt;: bitwise operations between different enumeration
                      types are deprecated
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_79_0.updated_tools"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/tools/build/"&gt;Build&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Includes release of &lt;a href="https://www.boost.org/tools/build/doc/html/#_version_4_8_2"&gt;B2
                version 4.8.2&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_79_0.compilers_tested"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.4, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++20: 11.0.0, 12.0.0, 13.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.6.3, 11
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.5, 11
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++20: 8.0.1, 9.1.0, 10, 11
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 11.0.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 11.0.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 11.0.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++17: 11.0.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++20: 11.0.3
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_79_0.acknowledgements"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.78.0</title><link>https://www.boost.org/users/history/version_1_78_0.html</link><guid>https://www.boost.org/users/history/version_1_78_0.html</guid><pubDate>Wed, 08 Dec 2021 03:45:49 +0000</pubDate><description>


  &lt;div id="version_1_78_0.known_issues"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Known Issues&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      These are patches from library authors which were found too late to be fixed
      in the release.
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Boost.Build silently skips installation of library headers and binaries
          in some cases, see &lt;a href="https://github.com/bfgroup/b2/issues/104"&gt;#104&lt;/a&gt;.
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed in &lt;a href="https://github.com/bfgroup/b2/pull/113"&gt;PR#113&lt;/a&gt;,
                &lt;a href="https://www.boost.org/patches/1_78_0/0001-b2-fix-install.patch"&gt;patch&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Boost.Atomic fails to build when targeting UWP, see &lt;a href="https://github.com/boostorg/atomic/issues/54"&gt;#54&lt;/a&gt;. &lt;a href="https://www.boost.org/patches/1_78_0/0002-atomic-fix-uwp-build.patch"&gt;Patch&lt;/a&gt;.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_78_0.new_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          No new libraries.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_78_0.updated_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added an io_uring backend that may optionally be used for all I/O
                objects, including sockets, timers, and posix descriptors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for files, with new new classes for stream-oriented
                and random-access files. This feature currently supports I/O completion
                ports on Windows, and io_uring on Linux.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for portable pipes on POSIX and Windows (when I/O completion
                ports are available).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for registered buffers, which are optimised when using
                the io_uring backend.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added experimental support for channels, that may be used to send
                and queue completions as messages.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implemented improvements to &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;coro&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disabled &lt;code&gt;&lt;span class="identifier"&gt;aligned_alloc&lt;/span&gt;&lt;/code&gt;
                on &lt;tt&gt;clang&lt;/tt&gt; when using an MSVC runtime.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed to use a faster implementation for &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;network_v4&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;canonical&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added template specialisations for common uses to improve compile
                time.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced the size of &lt;code&gt;&lt;span class="identifier"&gt;io_context&lt;/span&gt;&lt;/code&gt;
                executors to a single pointer.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Increased the small object buffer size for &lt;code&gt;&lt;span class="identifier"&gt;execution&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;any_executor&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;any_io_executor&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed multi-signature handling when variadic templates are disabled.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compatibility with new versions of &lt;tt&gt;gcc&lt;/tt&gt; and
                &lt;tt&gt;clang&lt;/tt&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation on Solaris.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed defence against Qt-defined macros when building with MSVC.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved error messages emitted by &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;/code&gt;
                facilities.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;bind_executor&lt;/span&gt;&lt;/code&gt;
                compatibility with completion tokens.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed build errors when &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT&lt;/span&gt;&lt;/code&gt;
                is defined.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing move assignment operator to &lt;code&gt;&lt;span class="identifier"&gt;awaitable&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an access violation when using coroutines with MSVC, due to
                incorrect alignment of allocated memory.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a cleanup issue in &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;parallel_group&lt;/span&gt;&lt;/code&gt;
                that occured when the execution context was shut down with parallel
                operations still pending.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added clarifications to the documentation on concurrency hints.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added documentation on error handling techniques for C++20 coroutines.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed various warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Consult the &lt;a href="https://www.boost.org/doc/libs/1_78_0/doc/html/boost_asio/history.html"&gt;Revision
                History&lt;/a&gt; for further details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/assert/"&gt;Assert&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;to_string&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Use process-local futex operations on Android for non-IPC waiting
                and notifying operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for Linux targets that only define &lt;code&gt;&lt;span class="identifier"&gt;SYS_futex_time64&lt;/span&gt;&lt;/code&gt;
                syscall, such as riscv32.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a workaround for incorrect result of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;alignment_of&lt;/span&gt;&lt;/code&gt;
                on clang 8 for 64-bit types on 32-bit x86 targets.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a ulock backend for waiting and notifying operations on Darwin
                systems since Mac OS 10.12, iOS 10.0, tvOS 10.0 or watchOS 3.0.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Windows, corrected discrepancy between &lt;tt&gt;&lt;em&gt;atomic-type&lt;/em&gt;::always_has_native_wait_notify&lt;/tt&gt;
                and the corresponding capability macros when targeting Windows 8
                or later. The library will now directly use &lt;code&gt;&lt;span class="identifier"&gt;WaitOnAddress&lt;/span&gt;&lt;/code&gt;
                and related APIs from public headers and therefore require user to
                link with &lt;code&gt;&lt;span class="identifier"&gt;synchronization&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;lib&lt;/span&gt;&lt;/code&gt;
                if the user requires Windows 8 or later by defining &lt;code&gt;&lt;span class="identifier"&gt;BOOST_USE_WINAPI_VERSION&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;_WIN32_WINNT&lt;/span&gt;&lt;/code&gt; or similar macros.
                The library is linked automatically on compilers that support auto-linking
                (e.g. MSVC).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for types with padding bits, except unions, on compilers
                that provide a way to clear the padding bits. This feature is supported
                by gcc 11 and MSVC 14.2 (compiler version 19.27) and newer, as well
                as other compilers supporting similar intrinsics. On compilers that
                don't allow to clear the padding bits, types with padding are still
                generally not supported with the exception of 80-bit &lt;code&gt;&lt;span class="keyword"&gt;long&lt;/span&gt; &lt;span class="keyword"&gt;double&lt;/span&gt;&lt;/code&gt;
                on x86 targets. A new &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ATOMIC_NO_CLEAR_PADDING&lt;/span&gt;&lt;/code&gt;
                capability macro is defined to indicate when clearing the padding
                is not supported.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Initializing constructors of &lt;code&gt;&lt;span class="identifier"&gt;atomic_ref&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic_ref&lt;/span&gt;&lt;/code&gt;
                no longer use atomic instructions to clear the padding bits in the
                referenced object. This reduces the cost of the atomic reference
                construction.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Initializing constructors of &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic&lt;/span&gt;&lt;/code&gt; are
                now &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt; for enums,
                classes and floating point types. For classes and floating point
                types, the constructors are &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
                if the compiler supports &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;bit_cast&lt;/span&gt;&lt;/code&gt;, the type has no padding
                bytes and no padding is required to implement native atomic operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                In accordance with C++20, default constructors of &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic&lt;/span&gt;&lt;/code&gt; now
                perform value initialization of the contained object. For types without
                a user-defined default constructor, this means the default-constructed
                atomic will be zero-initialized.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a workaround for compilation error on AIX caused by the assembler
                tool not supporting numeric labels. (&lt;a href="https://github.com/boostorg/atomic/pull/50"&gt;PR#50&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a workaround for compilation error with Visual Studio 2015
                prior to Update 3. (&lt;a href="https://github.com/boostorg/atomic/issues/52"&gt;#52&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href="https://www.boost.org/doc/html/atomic/changelog.html"&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This maintenance update brings minor bug fixes and updated CI reporting.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed security vulnerability CVE-2016-9840 in zlib implementation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed WebSocket permessage_deflate implementation. This should result
                in an increase in compression performance when using Beast WebSockets.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed the test stream and test framework's dependency on RTTI.
                You can now use our handy test stream to check your embedded asynchronous
                communications code!
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                We'd love to know how you or your company use Beast, consider adding
                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
                and Individuals Using Beast&lt;/a&gt; list.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
                Notes&lt;/a&gt; for a complete list of changes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a generic implementation to &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;cmath&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;,
                enabled when &lt;code&gt;&lt;span class="identifier"&gt;BOOST_CORE_USE_GENERIC_CMATH&lt;/span&gt;&lt;/code&gt;
                is defined or when the platform does not provide the necessary facilities
                in &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;cmath&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;type_name&lt;/span&gt;&lt;/code&gt;, a utility function that
                returns the name of a type as a string.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;span&lt;/span&gt;&lt;/code&gt;, a C++11 implementation of
                C++20's &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;span&lt;/span&gt;&lt;/code&gt; (Glen Fernandes).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/describe/"&gt;Describe&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;has_describe_enumerators&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;has_describe_bases&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;has_describe_members&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;enum_to_string&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;enum_from_string&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added relational and stream insertion operators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;descriptor_by_name&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;descriptor_by_pointer&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed missing #include, thanks to Denis Blank (&lt;a href="https://github.com/boostorg/dll/pull/54"&gt;PR#54&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Dropped TravisCI in favor of GithubAction CI
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;v4:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;filename&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt; no longer return an implicit
                trailing dot (".") element if the path ends with a directory
                separator. Instead, an empty path is returned, similar to C++17 std::filesystem.
                This also affects other methods that are defined in terms of iterators
                or filename, such as &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stem&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;compare&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span class="identifier"&gt;lexicographical_compare&lt;/span&gt;&lt;/code&gt;.
                For example, &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"a/b/"&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt; &lt;span class="special"&gt;==&lt;/span&gt; &lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"a/b/."&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;
                no longer holds true. (&lt;a href="https://github.com/boostorg/filesystem/issues/193"&gt;#193&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;v4:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;lexically_normal&lt;/span&gt;&lt;/code&gt;
                no longer produce a trailing dot (".") element and omits
                a directory separator after a trailing dot-dot ("..") element
                in the normalized paths.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;v4:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;
                append operations now consider root name and root directory in the
                appended path. If the appended path is absolute, or root name is
                present and differs from the source path, the resulting path is equivalent
                to the appended path. If root directory is present, the result is
                the root directory and relative path rebased on top of the root name
                of the source path. Otherwise, the behavior is similar to v3. (&lt;a href="https://github.com/boostorg/filesystem/issues/214"&gt;#214&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;lexically_normal&lt;/span&gt;&lt;/code&gt; now converts directory
                separators to preferred separators in the root name of the normalized
                paths.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Optimized overloads of &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;assign&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;append&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;concat&lt;/span&gt;&lt;/code&gt;
                and the corresponding operators to avoid unnecessary path copying
                and reduce the amount of code redundancy.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On POSIX systems, fixed &lt;code&gt;&lt;span class="identifier"&gt;absolute&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;p&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;base&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; returning a path with root name
                &lt;code&gt;&lt;span class="identifier"&gt;base&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;root_name&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
                if &lt;code&gt;&lt;span class="identifier"&gt;p&lt;/span&gt;&lt;/code&gt; starts with
                a root directory. In such a case &lt;code&gt;&lt;span class="identifier"&gt;p&lt;/span&gt;&lt;/code&gt;
                is already an absolute path and should be returned as is.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;create_directories&lt;/span&gt;&lt;/code&gt;
                no longer reports an error if the input path consists entirely of
                dot (".") and dot-dot ("..") elements. The implementation
                is no longer using recursion internally and therefore is better protected
                from stack overflow on extremely long paths.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Windows, &lt;code&gt;&lt;span class="identifier"&gt;remove&lt;/span&gt;&lt;/code&gt;
                now supports deleting read-only files. The operation will attempt
                to reset the read-only attribute prior to removal. Note that this
                introduces a possibility of the read-only attribute being left unset,
                if the operation fails and the original value of the attribute fails
                to be restored. This also affects &lt;code&gt;&lt;span class="identifier"&gt;remove_all&lt;/span&gt;&lt;/code&gt;.
                (&lt;a href="https://github.com/boostorg/filesystem/issues/216"&gt;#216&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;remove_all&lt;/span&gt;&lt;/code&gt; now returns
                &lt;code&gt;&lt;span class="keyword"&gt;static_cast&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;
                &lt;span class="identifier"&gt;uintmax_t&lt;/span&gt; &lt;span class="special"&gt;&amp;gt;(-&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;
                in case of error, similar to C++17 std::filesystem.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed a linking error about unresolved references to Boost.ContainerHash
                functions when user's code includes &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
                but not &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;container_hash&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; and the compiler is set to
                preserve unused inline functions. (&lt;a href="https://github.com/boostorg/filesystem/issues/215"&gt;#215&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a workaround for MSVC and compatible compilers eliminating
                path globals cleanup in release builds. This could lead to a memory
                leak if Boost.Filesystem shared library was repeatedly loaded and
                unloaded in the process. (&lt;a href="https://github.com/boostorg/filesystem/issues/217"&gt;#217&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improvements
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/894"&gt;PR#894&lt;/a&gt; Optimization and refactoring of rtree queries.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/913"&gt;PR#913&lt;/a&gt; DynamicGeometry and GeometryCollection support
                      in various algorithms (undocumented for now).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/922"&gt;PR#922&lt;/a&gt; DynamicGeometry and GeometryCollection support
                      in distance (undocumented for now).
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Solved issues
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/issues/867"&gt;#867&lt;/a&gt; Poor performance of rtree query iterator with
                      nearest predicate for big k.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/issues/870"&gt;#870&lt;/a&gt; Compilation error in boost::geometry::self_turns.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/issues/896"&gt;#896&lt;/a&gt; Assertion failure in get_turns with BOOST_GEOMETRY_NO_ROBUSTNESS.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfixes
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/906"&gt;PR#906&lt;/a&gt; Invalid result of buffer on macos-11 with
                      clang-12.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/921"&gt;PR#921&lt;/a&gt; Compilation errors with c++20 (various compilers)
                      and gcc-5.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Various fixes in set operations and buffer.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/json/"&gt;JSON&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Standalone mode of the library is deprecated.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Allow external libraries to forward declare &lt;code&gt;&lt;span class="identifier"&gt;value_to&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;value_from&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed signed integer overflow in number parsing.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for &lt;code&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;Zc&lt;/span&gt;&lt;span class="special"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;implicitNoexcept&lt;/span&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;/code&gt; on MSVC.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lambda2/"&gt;Lambda2&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added special cases in &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; when the first argument is
                a stream, to allow &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;cout&lt;/span&gt;
                &lt;span class="special"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="identifier"&gt;_1&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;-&amp;gt;*&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;first&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;second&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                General changes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Updated detection of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;codecvt&lt;/span&gt;&lt;/code&gt;
                      specializations for &lt;code&gt;&lt;span class="keyword"&gt;char16_t&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class="keyword"&gt;char32_t&lt;/span&gt;&lt;/code&gt; for
                      compatibility with C++17 and later. (&lt;a href="https://github.com/boostorg/log/pull/159"&gt;PR#159&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for C++17 &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;byte&lt;/span&gt;&lt;/code&gt;
                      type to receive methods of the inter-process message queue.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      On Windows, when building the library for Windows 8 or later,
                      the library will use &lt;code&gt;&lt;span class="identifier"&gt;nt62&lt;/span&gt;&lt;/code&gt;
                      tag in the version namespace to denote the target OS ABI. For
                      example, the version namespace could be named as &lt;code&gt;&lt;span class="identifier"&gt;v2_mt_nt62&lt;/span&gt;&lt;/code&gt;. This name will
                      be part of all symbols exported by the library. Use the &lt;code&gt;&lt;span class="identifier"&gt;BOOST_USE_WINAPI_VERSION&lt;/span&gt;&lt;/code&gt;
                      macro consistenly when building Boost and your code to request
                      the minimum target Windows version.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Improved performance of SSSE3 and AVX2 implementations of the
                      &lt;code&gt;&lt;span class="identifier"&gt;dump&lt;/span&gt;&lt;/code&gt; stream
                      manipulator.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added support for CMake build system. Only library build is
                      supported at this moment, Boost.Build is still used for running
                      tests.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Fixed a race condition on POSIX systems in &lt;code&gt;&lt;span class="identifier"&gt;reliable_message_queue&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;open_or_create&lt;/span&gt;&lt;/code&gt;
                      or the equivalent constructor. Multiple threads or processes
                      calling &lt;code&gt;&lt;span class="identifier"&gt;open_or_create&lt;/span&gt;&lt;/code&gt;
                      concurrently with sending or receiving messages from the same
                      queue could end up corrupting the queue contents and potentially
                      crashing the process. (&lt;a href="https://github.com/boostorg/log/issues/162"&gt;#162&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Added a workaround for &lt;code&gt;&lt;span class="identifier"&gt;b2&lt;/span&gt;
                      &lt;span class="identifier"&gt;install&lt;/span&gt;&lt;/code&gt; failing on
                      Windows because of missing &lt;code&gt;&lt;span class="identifier"&gt;boost_log_setup&lt;/span&gt;&lt;/code&gt;
                      library if &lt;code&gt;&lt;span class="identifier"&gt;BOOST_LOG_WITHOUT_SETTINGS_PARSERS&lt;/span&gt;&lt;/code&gt;
                      is defined. (&lt;a href="https://github.com/boostorg/log/issues/164"&gt;#164&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for cubic roots.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
                versions of various standard library math routines.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for Bezier polynomials.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve worst-case tanh-sinh integration performance.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disable inadvertant use of integral types in integration routines.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minor update for erf approximations when the result is with 2ulp
                of 1.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Allow Bernoulli code to be used on platforms with no atomic integers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve the mode of the non-central Chi Squared distribution.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve certain edge cases for &amp;lt;cstdfloat&amp;gt; complex-valued elementary
                functions, see &lt;a href="https://github.com/boostorg/math/issues/507"&gt;#507&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;contains&lt;/span&gt;&lt;/code&gt; to
                key-based indices (issue &lt;a href="https://github.com/boostorg/multi_index/issues/35"&gt;#35&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;merge&lt;/span&gt;&lt;/code&gt; operations
                to key-based indices. The functionality goes beyond the standard
                specification for (unordered) associative containers in a number
                of ways, most notably:
              &lt;/div&gt;
              &lt;ul&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    The source index can be of any type, including non key-based
                    indices.
                  &lt;/div&gt;
                &lt;/li&gt;
                &lt;li&gt;
                  &lt;div&gt;
                    Partial merge is provided: for instance, &lt;code&gt;&lt;span class="identifier"&gt;x&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;merge&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;y&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt;&lt;span class="identifier"&gt;first&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt;&lt;span class="identifier"&gt;last&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; merges only the elements of
                    &lt;code&gt;&lt;span class="identifier"&gt;y&lt;/span&gt;&lt;/code&gt; within [&lt;code&gt;&lt;span class="identifier"&gt;first&lt;/span&gt;&lt;/code&gt;,&lt;code&gt;&lt;span class="identifier"&gt;last&lt;/span&gt;&lt;/code&gt;).
                  &lt;/div&gt;
                &lt;/li&gt;
              &lt;/ul&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Previous versions of &lt;code&gt;&lt;span class="identifier"&gt;splice&lt;/span&gt;&lt;/code&gt;
                for sequenced and random access indices were destructive, i.e. elements
                were copy-inserted into the destination and then erased from the
                source. Now, &lt;code&gt;&lt;span class="identifier"&gt;splice&lt;/span&gt;&lt;/code&gt;
                is based on node transfer much as &lt;code&gt;&lt;span class="identifier"&gt;merge&lt;/span&gt;&lt;/code&gt;
                in key-based indices, and has been similarly extended to accept source
                indices of any type: in fact, &lt;code&gt;&lt;span class="identifier"&gt;splice&lt;/span&gt;&lt;/code&gt;
                can be regarded as a frontend to the same functionality provided
                by &lt;code&gt;&lt;span class="identifier"&gt;merge&lt;/span&gt;&lt;/code&gt; in key-based
                indices. For reasons of backwards compatibility, the destructive
                behavior of &lt;code&gt;&lt;span class="identifier"&gt;splice&lt;/span&gt;&lt;/code&gt;
                has been retained in the case that the source and destination containers
                have unequal allocators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The fact has been documented that index iterator types do only depend
                on &lt;code&gt;&lt;span class="identifier"&gt;node_type&lt;/span&gt;&lt;/code&gt; and
                the position of the index in its &lt;code&gt;&lt;span class="identifier"&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;,
                (except for hashed indices, where uniqueness/non-uniqueness is also
                a dependency). This has implications on the validity of iterators
                to elements transferred by &lt;code&gt;&lt;span class="identifier"&gt;merge&lt;/span&gt;&lt;/code&gt;
                or &lt;code&gt;&lt;span class="identifier"&gt;splice&lt;/span&gt;&lt;/code&gt;. This property
                is a variant of what has been called &lt;a href="https://wg21.link/n2980"&gt;SCARY
                iterators&lt;/a&gt; in the C++ standard mailing lists. SCARYness is
                currently (August 2021) not mandated for standard containers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Iterator SCARYness is now also preserved in &lt;a href="https://www.boost.org/libs/multi_index/doc/tutorial/debug.html#safe_mode"&gt;safe
                mode&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multiprecision/"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Rework rational_adaptor to remove dependency on Boost.Rational and
                improve performance.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix issue with type_traits and clang, see &lt;a href="https://github.com/boostorg/multiprecision/issues/383"&gt;#383&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed buggy Lehmer's GCD routine, see &lt;a href="https://github.com/boostorg/multiprecision/issues/370"&gt;#370&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix mpc_complex constructors so that lossy conversions are explicit,
                see &lt;a href="https://github.com/boostorg/multiprecision/issues/363"&gt;#363&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct miscellaneous configuration issues (Intel intrinsic usage
                and Apple clang).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct some iostream operators for unsigned char types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct mpq_rational conversions to integer types, see &lt;a href="https://github.com/boostorg/multiprecision/issues/342"&gt;#342&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/nowide/"&gt;Nowide&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Breaking Change: &lt;code&gt;&lt;span class="identifier"&gt;do_unshift&lt;/span&gt;&lt;/code&gt;
                for the UTF-32 specialization of &lt;code&gt;&lt;span class="identifier"&gt;utf8_codecvt&lt;/span&gt;&lt;/code&gt;
                now correctly returns &lt;code&gt;&lt;span class="identifier"&gt;noconv&lt;/span&gt;&lt;/code&gt;
                instead of &lt;code&gt;&lt;span class="identifier"&gt;ok&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove unnecessary branch in &lt;code&gt;&lt;span class="identifier"&gt;utf8_codecvt&lt;/span&gt;&lt;/code&gt;
                for UTF-16 output
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Suppress deprecation warnings in MSVC when using &lt;code&gt;&lt;span class="identifier"&gt;utf8_codecvt&lt;/span&gt;&lt;/code&gt;
                with unicode char types
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix possible double-free when setting a custom buffer (&lt;code&gt;&lt;span class="identifier"&gt;setbuf&lt;/span&gt;&lt;/code&gt;) after &lt;code&gt;&lt;span class="identifier"&gt;filebuf&lt;/span&gt;&lt;/code&gt;
                already allocated an internal buffer
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/pfr/"&gt;PFR&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added missing &lt;code&gt;&lt;span class="preprocessor"&gt;#include&lt;/span&gt;
                &lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;memory&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; for inclusion of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;addressof&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed -Wzero-length-array warning when dealing with empty aggregates
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation on msvc compilers &amp;lt;= 1920 (thanks to Alexey
                Romanov aka @alexey-romanov)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added basic CMakeLists.txt support (thanks to @pdimov aka Peter Dimov)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Multiple improvements for docs, including links to https://github.com/apolukhin/pfr_non_boost
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added misc/strip_boost_namespace.sh script to remove &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_&lt;/span&gt;&lt;/code&gt; prefixes
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Version 1.13.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix spelling of "epoch".
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add missing parenthesis in sparc.h (from tkoecker).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Update documentation to use Rouge code styling and Amber general
                style.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/regex/"&gt;Regex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking Change:&lt;/strong&gt; Change \B to be
                the opposite of \b as per Perl behaviour.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Change w32_regex_traits.hpp so that windows.h is no longer included.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fxed fuzzing related issues &lt;a href="https://github.com/boostorg/regex/issues/151"&gt;#151&lt;/a&gt;,
                &lt;a href="https://github.com/boostorg/regex/issues/152"&gt;#152&lt;/a&gt;,
                &lt;a href="https://github.com/boostorg/regex/issues/153"&gt;#153&lt;/a&gt;,
                &lt;a href="https://github.com/boostorg/regex/issues/156"&gt;#156&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/system/"&gt;System&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for source locations to &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;to_string&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;to_string&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;what&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;system_error&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;what&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
                now contains the source location, if present.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;E&lt;/span&gt; &lt;span class="special"&gt;=&lt;/span&gt; &lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;,
                a class holding either a value or an error, defined in &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;system&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;result&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/utility/"&gt;Utility&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Library documentation converted to QuickBook (thanks to Alan de Freitas,
                &lt;a href="https://github.com/boostorg/utility/pull/79"&gt;PR#79&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant2/"&gt;Variant2&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;variant2&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;unsafe_get&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;I&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;visit_by_index&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_78_0.updated_tools"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/tools/build/"&gt;Build&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Includes release of &lt;a href="https://www.boost.org/tools/build/doc/html/#_version_4_7_2"&gt;B2
                version 4.7.2&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_78_0.compilers_tested"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.4, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++20: 11.0.0, 12.0.0, 13.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.6.3, 11
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.5, 11
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++20: 8.0.1, 9.1.0, 10, 11
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 11.0.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 11.0.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 11.0.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++17: 11.0.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++20: 11.0.3
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_78_0.acknowledgements"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Version 1.77.0</title><link>https://www.boost.org/users/history/version_1_77_0.html</link><guid>https://www.boost.org/users/history/version_1_77_0.html</guid><pubDate>Wed, 11 Aug 2021 14:25:13 +0000</pubDate><description>


  &lt;div id="version_1_77_0.new_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/describe/"&gt;Describe&lt;/a&gt;:&lt;/span&gt; A C++14 reflection
          library, from Peter Dimov. Provides macros for describing enumerators and
          struct/class members, and primitives for querying this information.
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lambda2/"&gt;Lambda2&lt;/a&gt;:&lt;/span&gt; A C++14, dependency-free,
          single header lambda library, from Peter Dimov. Allows simple function
          objects to be constructed via expressions such as &lt;code&gt;&lt;span class="identifier"&gt;_1&lt;/span&gt;
          &lt;span class="special"&gt;+&lt;/span&gt; &lt;span class="number"&gt;5&lt;/span&gt;&lt;/code&gt;,
          &lt;code&gt;&lt;span class="identifier"&gt;_1&lt;/span&gt; &lt;span class="special"&gt;%&lt;/span&gt;
          &lt;span class="number"&gt;2&lt;/span&gt; &lt;span class="special"&gt;==&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;_1&lt;/span&gt;
          &lt;span class="special"&gt;&amp;gt;&lt;/span&gt; &lt;span class="identifier"&gt;_2&lt;/span&gt;&lt;/code&gt;,
          or &lt;code&gt;&lt;span class="identifier"&gt;_1&lt;/span&gt; &lt;span class="special"&gt;==&lt;/span&gt;
          &lt;span class="char"&gt;' '&lt;/span&gt; &lt;span class="special"&gt;||&lt;/span&gt; &lt;span class="identifier"&gt;_1&lt;/span&gt; &lt;span class="special"&gt;==&lt;/span&gt; &lt;span class="char"&gt;'\t'&lt;/span&gt;&lt;/code&gt;.
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_77_0.updated_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/any/"&gt;Any&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;anys&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_any&lt;/span&gt;&lt;/code&gt; - a data type with customizable
                Small Object Optimization whose instances can hold instances of any
                type that satisfies ValueType requirements (many thanks to Ruslan
                Arutyunyan @rarutyun). If you are not sure that you really need it,
                then use &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;any&lt;/span&gt;&lt;/code&gt; instead.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Started using GithubActions CI for additional testing
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for cancellation of individual asynchronous operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class="identifier"&gt;associator&lt;/span&gt;&lt;/code&gt;
                trait, used to generically forward associators.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed all asynchronous operations implemented in Asio to invoke
                their completion handlers as rvalue references.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added support for asynchronous operations with multiple completion
                signatures.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;||&lt;/span&gt;&lt;/code&gt;
                for &lt;code&gt;&lt;span class="identifier"&gt;awaitable&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;,
                to allow coroutines to be trivially awaited in parallel.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;as_tuple&lt;/span&gt;&lt;/code&gt;
                completion token adapter.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;append&lt;/span&gt;&lt;/code&gt;
                completion token adapter.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;prepend&lt;/span&gt;&lt;/code&gt;
                completion token adapter.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;deferred&lt;/span&gt;&lt;/code&gt;
                completion token, whicih allows deferred execution of asynchronous
                operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;parallel_group&lt;/span&gt;&lt;/code&gt;
                class and &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;make_parallel_group&lt;/span&gt;&lt;/code&gt;
                function.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;promise&lt;/span&gt;&lt;/code&gt;,
                which allows eager execution and synchronisation of asynchronous
                operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;coro&lt;/span&gt;&lt;/code&gt;
                class template, a C++20 coroutine primitive with the ability to combine
                both asynchronous waiting (&lt;code&gt;&lt;span class="identifier"&gt;co_await&lt;/span&gt;&lt;/code&gt;)
                and yielding (&lt;code&gt;&lt;span class="identifier"&gt;co_yield&lt;/span&gt;&lt;/code&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added move assignment to &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stream&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed &lt;code&gt;&lt;span class="identifier"&gt;co_spawn&lt;/span&gt;&lt;/code&gt;
                to &lt;code&gt;&lt;span class="identifier"&gt;dispatch&lt;/span&gt;&lt;/code&gt; the coroutine's
                initial step to the executor.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enabled additional optimisations for &lt;code&gt;&lt;span class="identifier"&gt;any_executor&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;any_io_executor&lt;/span&gt;&lt;/code&gt;
                when used with asynchronous operations.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added the &lt;code&gt;&lt;span class="identifier"&gt;nodiscard&lt;/span&gt;&lt;/code&gt;
                attribute to &lt;code&gt;&lt;span class="identifier"&gt;awaitable&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Increased the number of cached slots in the default recycling allocator.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed the default allocator behaviour to respect alignment requirements,
                to support over-aligned types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured the result strings are always initialised in reverse name
                resolution.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed recursive template instantiation issues in &lt;code&gt;&lt;span class="identifier"&gt;use_awaitable_t&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;executor_with_default&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed the &lt;code&gt;&lt;span class="identifier"&gt;any_io_executor&lt;/span&gt;&lt;/code&gt;
                equality operators to correctly return a result based on the target
                executor.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;strand&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                to avoid using a potentially moved-from executor.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured &lt;tt&gt;gcc&lt;/tt&gt; tests are not used for &lt;tt&gt;clang&lt;/tt&gt;
                when detecting compiler features.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Disabled coroutines support for the &lt;tt&gt;clang&lt;/tt&gt; shipped
                with MSVC.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compatibility with recent LibreSSL when &lt;code&gt;&lt;span class="identifier"&gt;OPENSSL_NO_SSL_INTERN&lt;/span&gt;&lt;/code&gt;
                is defined.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;posix&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_stream_descriptor&lt;/span&gt;&lt;/code&gt; move operations
                to work with non-defaulted executors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Consult the &lt;a href="https://www.boost.org/doc/libs/1_77_0/doc/html/boost_asio/history.html"&gt;Revision
                History&lt;/a&gt; for further details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;make_atomic_ref&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;make_ipc_atomic_ref&lt;/span&gt;&lt;/code&gt;
                factory functions for constructing atomic reference objects.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added C++17 template argument deduction guides for &lt;code&gt;&lt;span class="identifier"&gt;atomic_ref&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic_ref&lt;/span&gt;&lt;/code&gt;
                to allow omitting template arguments when they can be deduced from
                constructor arguments.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This maintenance update brings minor bug fixes and updated CI reporting.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                We'd love to know how you or your company use Beast, consider adding
                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
                and Individuals Using Beast&lt;/a&gt; list.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
                Notes&lt;/a&gt; for a complete list of changes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/conversion/"&gt;Conversion&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;implicit_cast&lt;/span&gt;&lt;/code&gt; is now &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt; (&lt;a href="https://github.com/boostorg/conversion/issues/25"&gt;#25&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed broken links (&lt;a href="https://github.com/boostorg/conversion/pull/23"&gt;PR#23&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Started using GithubActions CI for additional testing
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;uncaught_exceptions&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; has been modified for compatibility
                with Mac OS 10.4 and older. (&lt;a href="https://github.com/boostorg/core/pull/92"&gt;PR#92&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                More runtime checks for malformed ELFs in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;library_info&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                In &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;library_info&lt;/span&gt;&lt;/code&gt; use info from &lt;code&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;dynsym&lt;/span&gt;&lt;/code&gt;
                ELF section if &lt;code&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;symtab&lt;/span&gt;&lt;/code&gt;
                is empty or missing
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                List protected ELF symbols in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;library_info&lt;/span&gt;&lt;/code&gt;
                as they are available for import (&lt;a href="https://github.com/boostorg/dll/issues/50"&gt;#50&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Remove unneeded convert from &lt;code&gt;&lt;span class="keyword"&gt;wchar_t&lt;/span&gt;&lt;/code&gt;
                to char on POSIX environment, thanks to Vladislav Shchapov (&lt;a href="https://github.com/boostorg/dll/pull/49"&gt;PR#49&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Started using GithubAction CI for additional testing
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Introducing Boost.Filesystem v4.&lt;/strong&gt;
                This new version of the library removes all deprecated features of
                v3 and also makes a number of breaking API changes intended to make
                Boost.Filesystem more compatible with std::filesystem introduced
                in C++17. The differences are described in the release notes and
                documentation using &lt;strong&gt;v3&lt;/strong&gt; and &lt;strong&gt;v4&lt;/strong&gt; tags and are also summarised in a separate
                section. Users can select Boost.Filesystem version by defining &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FILESYSTEM_VERSION&lt;/span&gt;&lt;/code&gt; macro
                to either 3 or 4 when compiling their code. There is no need to separately
                compile Boost.Filesystem for each library version - a single binary
                supports both v3 and v4. Users should avoid using both v3 and v4
                in the same application as this can lead to subtle bugs. Currently,
                v3 is the default. In a future release v4 will become the default,
                and eventually v3 will be removed. v4 is functional, but it is still
                a work in progress and there may be breaking API changes in the future.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;v4:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;filename&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stem&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;extension&lt;/span&gt;&lt;/code&gt;
                no longer consider root name or root directory of the path as a filename
                if the path only consists of those components. For example, on Windows
                &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"C:"&lt;/span&gt;&lt;span class="special"&gt;).&lt;/span&gt;&lt;span class="identifier"&gt;filename&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
                used to return "C:" and &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"C:\\"&lt;/span&gt;&lt;span class="special"&gt;).&lt;/span&gt;&lt;span class="identifier"&gt;filename&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; used to return "\" and
                both will return an empty path now. (&lt;a href="https://github.com/boostorg/filesystem/issues/88"&gt;#88&lt;/a&gt;, &lt;a href="https://github.com/boostorg/filesystem/issues/194"&gt;#194&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;v4:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stem&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;extension&lt;/span&gt;&lt;/code&gt; no longer treat a filename
                that starts with a dot and has no other dots as an extension. Filenames
                starting with a dot are commonly treated as filenames with an empty
                extension. The leading dot is used to indicate a hidden file on most
                UNIX-like systems. (&lt;a href="https://github.com/boostorg/filesystem/issues/88"&gt;#88&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Improved support for various
                path prefixes on Windows. Added support for local device prefix ("\\.\")
                and experimental support for NT path prefix ("\??\"). The
                prefixes will be included in the root name of a path. Note that using
                the prefixes with Boost.Filesystem v3 can lead to surprising results
                (e.g. &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"\\\\.\\"&lt;/span&gt;&lt;span class="special"&gt;).&lt;/span&gt;&lt;span class="identifier"&gt;stem&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;
                &lt;span class="special"&gt;==&lt;/span&gt; &lt;span class="string"&gt;"\\\\"&lt;/span&gt;&lt;/code&gt;).
                It is recommended to use the prefixes only with Boost.Filesystem
                v4.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reworked &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;lexically_normal&lt;/span&gt;&lt;/code&gt; implementation
                to eliminate some cases of duplicate dot (".") elements
                in the normalized paths.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Added runtime detection of
                the &lt;code&gt;&lt;span class="identifier"&gt;statx&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;getrandom&lt;/span&gt;&lt;/code&gt; system calls on Linux.
                This can be useful if the syscall is present at compile time but
                fails with &lt;code&gt;&lt;span class="identifier"&gt;ENOSYS&lt;/span&gt;&lt;/code&gt;
                at run time (for example, in Docker containers that restrict the
                syscall, even if available on the host). (&lt;a href="https://github.com/boostorg/filesystem/issues/172"&gt;#172&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Added support for disabling
                usage of various system APIs at library build time. This can be useful
                when a certain API is detected as present by the library configuration
                scripts but must not be used for some reason (for example, when runtime
                detection does not work on the target system). See the description
                of configuration macros in the library documentationfor for more
                details.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;synchronize_data&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;synchronize&lt;/span&gt;&lt;/code&gt;
                options for the &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
                operation. These options allow to synchronize the written data and
                attributes with the permanent storage. These options are expensive
                in terms of performance, but allow to ensure reliability of the copied
                data. Note that &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
                performed implicit data synchronization on POSIX systems since Boost.Filesystem
                1.74.0. This release adds support for more platforms and disables
                data synchronization by default while allowing the caller to explicitly
                request it. (&lt;a href="https://github.com/boostorg/filesystem/issues/186"&gt;#186&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added handling of &lt;code&gt;&lt;span class="identifier"&gt;EINTR&lt;/span&gt;&lt;/code&gt;
                error code on POSIX systems for some system calls issued internally.
                In particular, &lt;code&gt;&lt;span class="identifier"&gt;EINTR&lt;/span&gt;&lt;/code&gt;
                could have been ignored on &lt;code&gt;&lt;span class="identifier"&gt;close&lt;/span&gt;&lt;/code&gt;,
                which on HP-UX would result in a leaked file descriptor.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                In the &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
                implementations based on Linux &lt;code&gt;&lt;span class="identifier"&gt;sendfile&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;copy_file_range&lt;/span&gt;&lt;/code&gt;
                system calls, added handling of error codes indicating that a particular
                filesystem does not support the system call and fall back to the
                generic &lt;code&gt;&lt;span class="identifier"&gt;read&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;write&lt;/span&gt;&lt;/code&gt; loop. This should fix &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt; failing on &lt;a href="https://www.ecryptfs.org/"&gt;eCryptFS&lt;/a&gt;
                and possibly other filesystems. (&lt;a href="https://github.com/boostorg/filesystem/issues/184"&gt;#184&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The &lt;code&gt;&lt;span class="identifier"&gt;copy_file_range&lt;/span&gt;&lt;/code&gt;
                system call is now used since Linux kernel 4.5, whereas previously
                it was only enabled since 5.3. The &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
                implementation will fall back to &lt;code&gt;&lt;span class="identifier"&gt;sendfile&lt;/span&gt;&lt;/code&gt;
                or &lt;code&gt;&lt;span class="identifier"&gt;read&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;write&lt;/span&gt;&lt;/code&gt; loop if &lt;code&gt;&lt;span class="identifier"&gt;copy_file_range&lt;/span&gt;&lt;/code&gt;
                fails to copy a given file across filesystems.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt; implementations
                based on Linux &lt;code&gt;&lt;span class="identifier"&gt;sendfile&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;copy_file_range&lt;/span&gt;&lt;/code&gt;
                system calls will not be used on filesystems that are known to contain
                files with generated content. These system calls are incompatible
                with such files, and copying them would result in zero-sized files.
                The generic &lt;code&gt;&lt;span class="identifier"&gt;read&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;write&lt;/span&gt;&lt;/code&gt; loop will be used instead.
                Currently, the blacklisted filesystems are: procfs, sysfs, tracefs
                and debugfs.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                In the &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
                implementation based on &lt;code&gt;&lt;span class="identifier"&gt;read&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;write&lt;/span&gt;&lt;/code&gt; loop, increased the maximum
                size of the buffer used for temporary storage and take into account
                the target filesystem block size for more optimal performance.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Windows CE, calling &lt;code&gt;&lt;span class="identifier"&gt;current_path&lt;/span&gt;&lt;/code&gt;
                to obtain the current path for a process will now fail with an error
                instead of returning successfully with a root path. This platform
                does not support current directory. Changing the current path was
                already failing similarly in previous releases of Boost.Filesystem.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                In &lt;code&gt;&lt;span class="identifier"&gt;canonical&lt;/span&gt;&lt;/code&gt;, fixed
                the check for a symlink referencing a directory above root, if an
                earlier symlink was resolved to an absolute path with a different
                root from the original path.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                In &lt;code&gt;&lt;span class="identifier"&gt;canonical&lt;/span&gt;&lt;/code&gt;, added
                a limit for the maximum number of symlinks that can be resolved during
                the call. The limit is currently at least 40 symlinks.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Windows, &lt;code&gt;&lt;span class="identifier"&gt;canonical&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;weakly_canonical&lt;/span&gt;&lt;/code&gt;
                will now use &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;preferred_separator&lt;/span&gt;&lt;/code&gt;
                for the root directory separator in the resulting paths. This fixes
                "file not found" errors caused by Windows API not handling
                generic separators in UNC paths and paths that start with the Win32
                filesystem prefix ("\\?\"). (&lt;a href="https://github.com/boostorg/filesystem/issues/87"&gt;#87&lt;/a&gt;, &lt;a href="https://github.com/boostorg/filesystem/issues/187"&gt;#187&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;weakly_canonical&lt;/span&gt;&lt;/code&gt;
                overloads taking &lt;code&gt;&lt;span class="identifier"&gt;base&lt;/span&gt;&lt;/code&gt;
                path as an argument.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Windows, &lt;code&gt;&lt;span class="identifier"&gt;weakly_canonical&lt;/span&gt;&lt;/code&gt;
                no longer fails with an error if the input path contains elements
                that do not exist in the filesystem but are cancelled by a subsequent
                dot-dot ("..") element. For example, &lt;code&gt;&lt;span class="identifier"&gt;weakly_canonical&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"C:\\a\\.."&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; would previously fail if "C:\a"
                directory did not exist. (&lt;a href="https://github.com/boostorg/filesystem/issues/201"&gt;#201&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                In &lt;code&gt;&lt;span class="identifier"&gt;read_symlink&lt;/span&gt;&lt;/code&gt; on
                Windows, corrected reparse point handling. The operation would return
                an empty path for some mount points (for example, created by &lt;a href="https://www.box.com/"&gt;Box&lt;/a&gt; cloud storage driver) and
                directory junction points that had empty print names. The new implementation
                now parses substitute name of the reparse point and attempts to reconstruct
                a Win32 path from it. (&lt;a href="https://github.com/boostorg/filesystem/issues/187"&gt;#187&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Windows, file streams provided in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;fstream&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
                will use wide character paths on libc++ versions 7.0 and higher,
                when the standard library supports opening files with wide character
                paths. (&lt;a href="https://github.com/boostorg/filesystem/issues/181"&gt;#181&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                On Windows, creating symlinks should no longer require elevated privileges,
                if Windows is configured in &lt;a href="https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development"&gt;Developer
                mode&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                With some compilers, global objects used internally in Boost.Filesystem
                are now destroyed after user's global destructors are called. This
                allows to call Boost.Filesystem methods during the program termination
                stage. In particular, this concerns the path locale that is used
                for character code conversion and can be installed by calling &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;imbue&lt;/span&gt;&lt;/code&gt;. The supported compilers
                include MSVC, GCC and Clang, as well as other compilers that support
                customizing program initialization order through &lt;code&gt;&lt;span class="preprocessor"&gt;#pragma&lt;/span&gt;
                &lt;span class="identifier"&gt;section&lt;/span&gt;&lt;/code&gt; (for MSVC-compatible
                compilers) or &lt;code&gt;&lt;span class="identifier"&gt;__attribute__&lt;/span&gt;
                &lt;span class="special"&gt;((&lt;/span&gt;&lt;span class="identifier"&gt;init_priority&lt;/span&gt;&lt;span class="special"&gt;))&lt;/span&gt;&lt;/code&gt; (for GCC-compatible compilers).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improvements
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/812"&gt;PR#812&lt;/a&gt; Umbrella strategies for distance and comparable_distance
                      (undocumented for now).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/840"&gt;PR#840&lt;/a&gt; Umbrella strategies for various algorithms
                      (undocumented for now).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/850"&gt;PR#850&lt;/a&gt; Introduced DynamicGeometry and GeometryCollection
                      concepts and support in some algorithms (undocumented for now).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/855"&gt;PR#855&lt;/a&gt; Various improvements related to strategies.
                      Default strategies are now included with algorithms.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Solved issues
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/issues/865"&gt;#865&lt;/a&gt; Exception thrown in rtree serialization.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/issues/439"&gt;#439&lt;/a&gt; Invalid box spherical area computation.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/issues/838"&gt;#838&lt;/a&gt; Invalid result of union_().
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/issues/851"&gt;#851&lt;/a&gt; Invalid geographic disjoint segment/box result.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/issues/861"&gt;#861&lt;/a&gt; Invalid result of intersection().
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfixes
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/832"&gt;PR#832&lt;/a&gt; Fixed box spherical and geographic area computation.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/853"&gt;PR#853&lt;/a&gt; Fixed geographic disjoint segment/box.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/866"&gt;PR#866&lt;/a&gt; Fixed serialization of rtree containing lesser
                      number of elements in root node than minimum.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/886"&gt;PR#886&lt;/a&gt; Fixed knn rtree query bug causing it to be
                      slow for big k.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Various fixes in set operations and buffer.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/json/"&gt;JSON&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;value_to&lt;/span&gt;&lt;/code&gt; supports
                &lt;code&gt;&lt;span class="identifier"&gt;TupleLike&lt;/span&gt;&lt;/code&gt; types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;value_to&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;value_from&lt;/span&gt;&lt;/code&gt; support &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;array&lt;/span&gt;&lt;/code&gt; and similar types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Implicit conversion operator from &lt;code&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;/code&gt;
                to &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string_view&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt; specializations for json types.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed allocation errors in &lt;code&gt;&lt;span class="identifier"&gt;object&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;key_value_pair&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed crash when constructing &lt;code&gt;&lt;span class="identifier"&gt;array&lt;/span&gt;&lt;/code&gt;
                from a pair of iterators that form an empty range.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lexical_cast/"&gt;LexicalCast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed assignment to an int of a floating point value that is out
                of representable range for int.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Started using GithubActions CI for additional testing
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation for riscv32 target. (&lt;a href="https://github.com/boostorg/log/pull/150"&gt;PR#150&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/mp11/"&gt;Mp11&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_intersperse&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;mp_split&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;mp_join&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Maintenance work.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/nowide/"&gt;Nowide&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Allow for usage of &lt;code&gt;&lt;span class="identifier"&gt;iostream&lt;/span&gt;&lt;/code&gt;
                classes before &lt;code&gt;&lt;span class="identifier"&gt;main&lt;/span&gt;&lt;/code&gt;
                (best effort, works for most environments)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix initialization of &lt;code&gt;&lt;span class="identifier"&gt;rdbuf&lt;/span&gt;&lt;/code&gt;
                in &lt;code&gt;&lt;span class="identifier"&gt;cin&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;cout&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;cerr&lt;/span&gt;&lt;/code&gt; for redirected input/output
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix corner case in &lt;code&gt;&lt;span class="identifier"&gt;cin&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;unget&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; after using &lt;code&gt;&lt;span class="identifier"&gt;putback&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix possibly delayed &lt;code&gt;&lt;span class="identifier"&gt;close&lt;/span&gt;&lt;/code&gt;
                of &lt;code&gt;&lt;span class="identifier"&gt;filebuf&lt;/span&gt;&lt;/code&gt; after
                move assignment
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improve performance of &lt;code&gt;&lt;span class="identifier"&gt;utf8_codecvt&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/pfr/"&gt;PFR&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                A MurMur Hash based implementation of hash_combine() is now used
                to reduce collisions count and improve quality of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;pfr&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash_value&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual Studio 2017 now supported in C++14 mode (thanks to Denis Mikhailov
                aka @denzor200)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Issues found by inspect tool were fixed
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed some warnings, including removal of extra semicolons in include/boost/pfr/detail/fields_count.hpp
                (&lt;a href="https://github.com/boostorg/pfr/issues/72"&gt;#72&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a compile time assert for inherited types (thanks to Denis
                Mikhailov aka @denzor200)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reflection of aggregates with non movable fields is now possible
                if guaranteed copy elision is on
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed spelling issues
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Started using GithubActions CI for additional testing
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/property_tree/"&gt;PropertyTree&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This is a maintenance release.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Extend compiler coverage in CI.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix Boost compatibility for CMakeLists.txt.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/system/"&gt;System&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                The conversion operator from &lt;code&gt;&lt;span class="identifier"&gt;error_category&lt;/span&gt;&lt;/code&gt;
                to &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_category&lt;/span&gt;&lt;/code&gt; has been improved
                and no longer requires &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;map&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
                or &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;mutex&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The comparison operators of &lt;code&gt;&lt;span class="identifier"&gt;error_category&lt;/span&gt;&lt;/code&gt;
                are now inline friends instead of member functions (a side effect
                of the previous change.)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;/code&gt; now
                defers calling &lt;code&gt;&lt;span class="identifier"&gt;generic_category&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; to avoid instantiating the object
                until it's actually needed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;failed&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;message&lt;/span&gt;&lt;/code&gt;
                have been undeprecated, and &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;
                &lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
                now once again returns &lt;code&gt;&lt;span class="identifier"&gt;failed&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The system category now doesn't call &lt;code&gt;&lt;span class="identifier"&gt;generic_category&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, to avoid instantiating the object.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The return value of &lt;code&gt;&lt;span class="identifier"&gt;default_error_condition&lt;/span&gt;&lt;/code&gt;
                changes in some cases into an &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;/code&gt;
                from the generic category, instead of from the system category. This
                happens on POSIX when the input &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
                is from the system category and does not correspond to any &lt;code&gt;&lt;span class="identifier"&gt;errc_t&lt;/span&gt;&lt;/code&gt; value.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The interoperability of &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt; has been improved substantially.
                It is now possible to construct &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;system&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
                from &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;, and it's possible to
                pass &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;system&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt; to functions taking
                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                A stream insertion operator for &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;/code&gt;
                has been added.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/uuid/"&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;to_chars&lt;/span&gt;&lt;/code&gt; for
                writing uuid strings without allocating (&lt;a href="https://github.com/boostorg/uuid/pull/116"&gt;PR#116&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_77_0.updated_tools"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/tools/build/"&gt;Build&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Includes release of &lt;a href="https://www.boost.org/tools/build/doc/html/#_version_4_6_1"&gt;B2
                version 4.6.1&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_77_0.compilers_tested"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.4, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++20: 11.0.0, 12.0.0, 13.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.6.3, 11
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.5, 11
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++20: 8.0.1, 9.1.0, 10, 11
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 11.0.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 11.0.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 11.0.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++17: 11.0.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++20: 11.0.3
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_77_0.acknowledgements"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item><item><title>Boost has moved downloads to JFrog Artifactory</title><link>https://www.boost.org/users/news/boost_has_moved_downloads_to_jfr.html</link><guid>https://www.boost.org/users/news/boost_has_moved_downloads_to_jfr.html</guid><pubDate>Thu, 29 Apr 2021 11:00:00 -0700</pubDate><description>


  &lt;p&gt;
    The service that Boost uses to serve up its releases, Bintray.com is being retired
    by JFrog on the 1st of May. Fortunately for Boost, they have a new service, called
    JFrog.Arifactory, which we have transitioned to.
  &lt;/p&gt;
  &lt;p&gt;
    For the users of Boost, the only difference is that there is a new URL to download
    releases and snapshots.
  &lt;/p&gt;
  &lt;p&gt;
    Instead of: &lt;a href="https://dl.bintray.com/boostorg/release/"&gt;https://dl.bintray.com/boostorg/release/&lt;/a&gt;
    you should use &lt;a href="https://boostorg.jfrog.io/artifactory/main/release/"&gt;https://boostorg.jfrog.io/artifactory/main/release/&lt;/a&gt;
    to retrieve boost releases.
  &lt;/p&gt;
  &lt;p&gt;
    Note: The pre-1.64 Boost releases are still available via Sourceforge.
  &lt;/p&gt;
  &lt;p&gt;
    Thank you to JFrog for all your past and current support.
  &lt;/p&gt;
</description></item><item><title>Version 1.76.0</title><link>https://www.boost.org/users/history/version_1_76_0.html</link><guid>https://www.boost.org/users/history/version_1_76_0.html</guid><pubDate>Fri, 16 Apr 2021 21:05:27 +0000</pubDate><description>


  &lt;div id="version_1_76_0.new_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          No new libraries
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_76_0.updated_libraries"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;scope_id_type&lt;/span&gt;&lt;/code&gt; type alias.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;port_type&lt;/span&gt;&lt;/code&gt; type alias.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt; specialisations for IP addresses.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt; specialisations for &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_endpoint&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Refactored SFINAE usage to improve compile times.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added friendship support to customisation points, and made most customisations
                private.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Changed &lt;code&gt;&lt;span class="identifier"&gt;any_io_executor&lt;/span&gt;&lt;/code&gt;
                to a "strong typedef"-style class.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;as_single&lt;/span&gt;&lt;/code&gt;
                to work with handler hook deprecation.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured pthread condition variable attributes are cleaned up on all
                platforms.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clarified thread safety notes on sockets and descriptors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured &lt;code&gt;&lt;span class="identifier"&gt;errno&lt;/span&gt;&lt;/code&gt; is
                not overwritten if &lt;code&gt;&lt;span class="identifier"&gt;socket&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; fails on macOS/FreeBSD.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed work tracking for &lt;code&gt;&lt;span class="identifier"&gt;io_context&lt;/span&gt;&lt;/code&gt;
                and &lt;code&gt;&lt;span class="identifier"&gt;thread_pool&lt;/span&gt;&lt;/code&gt; executors
                when move-assigned.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Ensured internal &lt;code&gt;&lt;span class="identifier"&gt;call_stack&lt;/span&gt;&lt;/code&gt;
                objects are accessed only from implementation files.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed I/O object move-assignment to ensure the executor is left in
                a valid state.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed detection of compiler support for defaulted template argument
                on functions with MSVC.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Prevented the &lt;code&gt;&lt;span class="identifier"&gt;blocking&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;always&lt;/span&gt;&lt;/code&gt;
                property from being used with &lt;code&gt;&lt;span class="identifier"&gt;strand&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, as it did not produce the
                correct semantics.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Removed deprecated file &lt;tt&gt;asio/impl/src.cpp&lt;/tt&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed compilation with MSVC for ARM. (&lt;a href="https://github.com/boostorg/atomic/pull/49"&gt;PR#49&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This update brings minor bug fixes and revamped CI reporting.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                We'd love to know how you or your company use Beast, consider adding
                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
                and Individuals Using Beast&lt;/a&gt; list.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
                Notes&lt;/a&gt; for a complete list of changes.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/bind/"&gt;Bind&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add support for using the standard C++11 placeholders with &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;bind&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Update &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;apply&lt;/span&gt;&lt;/code&gt; to use variadic templates
                and perfect forwarding.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/continer/"&gt;Container&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added [[no-discard]] attribute in all containers to catch bugs related
                to unused return values.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Replaced default standard exception classes with Boost.Container
                own classes, reducing considerably the included files overhead. Example:
                in MSVC 19 &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;container&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;vector&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
                preprocessed file size reduces from 1,5MB to 930KB. If you still
                want to use standard exception classes, you can define &lt;code&gt;&lt;span class="identifier"&gt;BOOST_CONTAINER_USE_STD_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
                before using any Boost.Container class.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs/issues:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/102"&gt;GitHub
                      #102: &lt;em&gt;"flat_map::insert ambiguous with initializer
                      list &amp;amp; pairs that need to convert"&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/139"&gt;GitHub
                      #139: &lt;em&gt;"flat_map merge and iterators"&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/141"&gt;GitHub
                      #141: &lt;em&gt;"small_vector does not propagate no throw
                      properties of move operation of contained type"&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/164"&gt;GitHub
                      #164: &lt;em&gt;"Compile error when using &lt;code&gt;&lt;span class="identifier"&gt;pmr&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;map&lt;/span&gt;&lt;/code&gt; with a &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;pair&lt;/span&gt;&lt;/code&gt;; works when using a
                      &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;tuple&lt;/span&gt;&lt;/code&gt;"&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/container/issues/171"&gt;GitHub
                      #171: &lt;em&gt;"deque::clear() uses undefined behaviour"&lt;/em&gt;&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add implicit conversion between compatible reference wrappers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;cmath&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;, a portable implementation
                of the floating point classification functions from &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;cmath&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;bit&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;, a portable implementation
                of the C++20 standard header &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;bit&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_EQ&lt;/span&gt;&lt;/code&gt;,
                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_NE&lt;/span&gt;&lt;/code&gt; for
                character types under C++20.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Revise allocator access utilities (now support VS2013, and no workarounds
                use &lt;code&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;.)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;BREAKING CHANGE&lt;/strong&gt;: &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;import&lt;/span&gt;&lt;/code&gt;
                was renamed to &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;import_symbol&lt;/span&gt;&lt;/code&gt;
                to avoid collision with C++20 &lt;code&gt;&lt;span class="identifier"&gt;import&lt;/span&gt;&lt;/code&gt;
                keyword.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated docs, including FAQ section.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Updated compatibility with WASI platform. (&lt;a href="https://github.com/boostorg/filesystem/pull/169"&gt;PR#169&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed an exception being thrown by &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;remove_filename&lt;/span&gt;&lt;/code&gt;
                if the path is "////". (&lt;a href="https://github.com/boostorg/filesystem/issues/176"&gt;#176&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;code&gt;&lt;span class="identifier"&gt;create_directories&lt;/span&gt;&lt;/code&gt;
                disregarding errors from file status query operations issued internally.
                This could result in incorrect error codes returned by &lt;code&gt;&lt;span class="identifier"&gt;create_directories&lt;/span&gt;&lt;/code&gt;. (&lt;a href="https://github.com/boostorg/filesystem/issues/182"&gt;#182&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improvements
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/670"&gt;PR#670&lt;/a&gt; New IOs to_wkt() and from_wkt() (thanks to
                      Baidyanath Kundu).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/756"&gt;PR#756&lt;/a&gt; Non cartesian and robust convex hulls.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/768"&gt;PR#768&lt;/a&gt; Umbrella strategies for relops, setops, index,
                      buffer and more (undocumented for now).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/797"&gt;PR#797&lt;/a&gt; New azimuth() algorithm.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/801"&gt;PR#801&lt;/a&gt; Improved accuracy in geographic area computations.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/820"&gt;PR#820&lt;/a&gt; Parameter scale added to svg_mapper.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bugfixes
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/808"&gt;PR#808&lt;/a&gt; Fixed compilation error with rtree serialization
                      enabled (thanks to Tristan Carel).
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/geometry/pull/815"&gt;PR#815&lt;/a&gt; Fixed issue in buffer().
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Various fixes in set operations and buffer.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Breaking changes
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Removed strategy convex_hull::graham_andrew.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/gil/"&gt;GIL&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                BREAKING: In next release, we are going to drop support for GCC 5.
                We will also change the required minimum C++ version from C++11 to
                C++14.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/histogram/"&gt;Histogram&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                This release contains critical fixes, please check that your results
                are not affected.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href="https://www.boost.org/libs/histogram/doc/html/histogram/history.html"&gt;Release
                Notes&lt;/a&gt; for details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/intrusive/"&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Reduced compile-time dependencies:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;linear_slist_algorithms&lt;/span&gt;&lt;/code&gt;
                      use a simple node_ptr instead of std::pair on return.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;list&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;slist&lt;/span&gt;&lt;/code&gt; use &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;
                      &lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;
                      &lt;span class="special"&gt;==&lt;/span&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;equal_to&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;less&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed &lt;a href="https://github.com/boostorg/intrusive/issues/54"&gt;GitHub
                #54: &lt;em&gt;set.rbegin() looks like O(log(N))&lt;/em&gt;&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/interprocess/"&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="keyword"&gt;wchar_t&lt;/span&gt;&lt;/code&gt; API support
                for named resources in operating systems that offer native wide character
                API (e.g. Windows). The following classes were updated with &lt;code&gt;&lt;span class="keyword"&gt;wchar_t&lt;/span&gt;&lt;/code&gt; name support:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;file_mapping&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;managed_mapped_file&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;managed_shared_memory&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;managed_windows_shared_memory&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;shared_memory_object&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;windows_shared_memory_object&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;file_lock&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;named_condition&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;named_condition_any&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;named_mutex&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;named_recursive_mutex&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;named_semaphore&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;named_sharable_mutex&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;named_upgradable_mutex&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;code&gt;&lt;span class="identifier"&gt;message_queue&lt;/span&gt;&lt;/code&gt;
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;code&gt;&lt;span class="identifier"&gt;BOOST_INTERPROCESS_FORCE_NATIVE_EMULATION&lt;/span&gt;&lt;/code&gt;
                macro option to disable the use of generic emulation code for process
                shared synchronization primitives instead of native POSIX or Winapi
                functions.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed bugs:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/interprocess/issues/76"&gt;GitHub
                      #76 (&lt;em&gt;"Cygwin compilation errors"&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/interprocess/pull/83"&gt;GitHub
                      #83 (&lt;em&gt;"Add BOOST_INTERPROCESS_FORCE_NATIVE_EMULATION
                      option"&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/interprocess/pull/92"&gt;GitHub
                      #92 (&lt;em&gt;"bufferstream: Correct MSVC compilation
                      warning"&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/interprocess/pull/106"&gt;GitHub
                      #106 (&lt;em&gt;"Use fallocate on truncate_file"&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/interprocess/issues/120"&gt;GitHub
                      #120 (&lt;em&gt;"segment_manager customization"&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/interprocess/issues/122"&gt;GitHub
                      #122 (&lt;em&gt;"Mark constructors/assignment/swap noexcept
                      where possible"&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      &lt;a href="https://github.com/boostorg/interprocess/issues/126"&gt;GitHub
                      #126 (&lt;em&gt;"_ReadWriteBarrier is deprecated warning
                      when compiling with clang-cl.exe"&lt;/em&gt;)&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/json/"&gt;JSON&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="https://cppalliance.org/pdf/C%20Plus%20Plus%20Alliance%20-%20Boost%20JSON%20Security%20Assessment%202020%20-%20Assessment%20Report%20-%2020210317.pdf"&gt;Security
                Report&lt;/a&gt; from Bishop Fox.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                (&lt;a href="https://github.com/boostorg/json/issues/481"&gt;#481&lt;/a&gt;) Refactored &lt;code&gt;&lt;span class="identifier"&gt;value_from&lt;/span&gt;&lt;/code&gt;
                implementation; user customizations are now always preferred over
                library-provided overloads.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                (&lt;a href="https://github.com/boostorg/json/issues/484"&gt;#484&lt;/a&gt;) Fix imprecise parsing for some floating point numbers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                (&lt;a href="https://github.com/boostorg/json/issues/485"&gt;#485&lt;/a&gt;) Fix link errors in standalone mode, when used alongside
                Boost.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                (&lt;a href="https://github.com/boostorg/json/issues/497"&gt;#497&lt;/a&gt;) Fix Boost.Build builds on GCC 4.8.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lexical_cast/"&gt;LexicalCast&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Dropped dependency on Boost.Math (thanks to Peter Dimov &lt;a href="https://github.com/boostorg/lexical_cast/issues/37"&gt;#37&lt;/a&gt;,
                &lt;a href="https://github.com/boostorg/lexical_cast/issues/39"&gt;#39&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixes for the CI and coverage (thanks to Sam Darwin from "The
                C++ Alliance" &lt;a href="https://github.com/boostorg/lexical_cast/issues/38"&gt;#38&lt;/a&gt;, &lt;a href="https://github.com/boostorg/lexical_cast/issues/42"&gt;#42&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Corrected a formal race condition in the thread-safe log record
                      queue implementation used in the &lt;code&gt;&lt;span class="identifier"&gt;unbounded_fifo_queue&lt;/span&gt;&lt;/code&gt;
                      policy of the &lt;code&gt;&lt;span class="identifier"&gt;asynchronous_sink&lt;/span&gt;&lt;/code&gt;
                      frontend. The race could be detected by TSAN, but it was not
                      a real problem on most current CPU architectures and compilers.
                      (&lt;a href="https://github.com/boostorg/log/issues/139"&gt;#139&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      When copying a logger with a channel attribute (e.g. &lt;code&gt;&lt;span class="identifier"&gt;channel_logger&lt;/span&gt;&lt;/code&gt;), the channel
                      attribute is now deep-copied from the original logger. This
                      means that modifying the channel in the new logger will no
                      longer affect the original logger.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Replaced the use of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; in template parameters
                      with a new tag type &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;log&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;use_std_allocator&lt;/span&gt;&lt;/code&gt;
                      to silence libc++ warnings about the former being deprecated
                      in C++17 and later. The tag indicates that the instantiated
                      template should be using a specialization of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator&lt;/span&gt;&lt;/code&gt; internally to allocate
                      dynamic memory, so the change has no functional effect. (&lt;a href="https://github.com/boostorg/log/issues/141"&gt;#141&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Boost.Log no longer defines &lt;code&gt;&lt;span class="identifier"&gt;__MSVCRT_VERSION__&lt;/span&gt;&lt;/code&gt;
                      macro on MinGW and MinGW-w64. Defining this macro caused incompatibility
                      with UCRT, which is available as an option in recent MinGW-w64.
                      (&lt;a href="https://github.com/boostorg/log/pull/149"&gt;PR#149&lt;/a&gt;)
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
                for more details.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;Breaking Change:&lt;/strong&gt; C++03 support is
                now removed, a C++11 or later conformant compiler is now required
                to use this library.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added &lt;span class="link"&gt;Z-test&lt;/span&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added execution policy support to univariate and bivariate statistics:
                enables parallel execution (requires C++17 and &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;execution&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Big update/improvement on CI testing.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bivariate statistics now have integer support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                T-Test now has integer support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Linear regression now has integer support.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct PDF of the beta distribution at the endpoints.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct use of Stirling's approximation in certain multiprecision
                cases, fixes &lt;a href="https://github.com/boostorg/math/issues/396"&gt;#396&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Eliminate -Wimplicit-int-float-conversion on clang.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix some constexpr issues in quaternion/octonion.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Minor performance fix to tanh_sinh integration.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Update hypergeometric functions internal scaling to allow for 64-bit
                (long long) exponents with multiprecision types.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/move/"&gt;Move&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;a href="https://github.com/boostorg/move/issues/35"&gt;Git Issue
                #35: &lt;em&gt;"New nothrow move traits are incomplete"&lt;/em&gt;&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multiprecision/"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                &lt;strong&gt;BREAKING CHANGE&lt;/strong&gt;: Massive refactoring
                and code simplification makes C++11 an absolute requirement.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Use BOOST_TRY/CATCH in headers so code can be used in exception-free
                environments.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct corner case in pow, fixes &lt;a href="https://github.com/boostorg/multiprecision/issues/277"&gt;#277&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Correct exception type thrown to match docs in lsb/msb: fixes &lt;a href="https://github.com/boostorg/multiprecision/issues/257"&gt;#257&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Allow moves and operators between related but different types (ie
                types with the same allocator), fixes &lt;a href="https://github.com/boostorg/multiprecision/issues/278"&gt;#278&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/nowide/"&gt;Nowide&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix discarding of characters for text file streams when seek or sync
                functions are used and newlines were converted (e.g. on Windows)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix potential use-after-free bug when reusing (via &lt;code&gt;&lt;span class="identifier"&gt;open&lt;/span&gt;&lt;/code&gt;) a file stream that has been
                closed
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix potential invalid memory access when using a file stream that
                has been moved or swapped to where the source had a put-back character
                or was set to unbuffered mode
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix compatibility with ucrt runtime by not defining &lt;code&gt;&lt;span class="identifier"&gt;__MSVCRT_VERSION__&lt;/span&gt;&lt;/code&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Known issues: Read performance for text files is degraded. Binary
                files and writing is unaffected.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/optional/"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed MSVC warning C4702.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/outcome/"&gt;Outcome&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Announcements:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      BREAKING CHANGE: After a year and three major Boost releases
                      announcing this upcoming change, this is the FIRST RELEASE
                      of the v2.2 branch. This branch has a number of major breaking
                      changes to the Outcome v2.1 which shipped in Boost 1.75 and
                      earlier, see the documentation for details.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Enhancements:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      VS2019.8 changed how to enable Coroutines, which caused Outcome
                      to not compile on that compiler.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      If on C++ 20, we now use C++ 20 &lt;code&gt;&lt;span class="special"&gt;[[&lt;/span&gt;&lt;span class="identifier"&gt;likely&lt;/span&gt;&lt;span class="special"&gt;]]&lt;/span&gt;&lt;/code&gt;
                      instead of compiler-specific markup to indicate when TRY has
                      likely success or failure.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      BREAKING CHANGE: Previously the value of &lt;code&gt;&lt;span class="identifier"&gt;spare_storage&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;const&lt;/span&gt;
                      &lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;span class="special"&gt;|&lt;/span&gt;&lt;span class="identifier"&gt;basic_outcome&lt;/span&gt; &lt;span class="special"&gt;*)&lt;/span&gt;
                      &lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt; was not propagated
                      over &lt;code&gt;&lt;span class="identifier"&gt;BOOST_OUTCOME_TRY&lt;/span&gt;&lt;/code&gt;,
                      which causes things like stack backtraces captured at the point
                      of construction of an errored result to get dropped at every
                      &lt;code&gt;&lt;span class="identifier"&gt;TRY&lt;/span&gt;&lt;/code&gt; point.
                      This has been fixed by adding an optional &lt;code&gt;&lt;span class="identifier"&gt;spare_storage&lt;/span&gt;&lt;/code&gt;
                      to &lt;code&gt;&lt;span class="identifier"&gt;success_type&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;failure_type&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, as well as to &lt;code&gt;&lt;span class="keyword"&gt;auto&lt;/span&gt; &lt;span class="identifier"&gt;success&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;
                      &lt;span class="special"&gt;&amp;amp;&amp;amp;,&lt;/span&gt; &lt;span class="special"&gt;...)&lt;/span&gt;&lt;/code&gt;
                      and &lt;code&gt;&lt;span class="keyword"&gt;auto&lt;/span&gt; &lt;span class="identifier"&gt;failure&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;
                      &lt;span class="special"&gt;&amp;amp;&amp;amp;,&lt;/span&gt; &lt;span class="special"&gt;...)&lt;/span&gt;&lt;/code&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bug fixes:
                &lt;ul&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      Boost.Outcome should now compile with &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
                      defined. Thanks to Emil, maintainer of Boost.Exception, making
                      a change for me, Boost.Outcome should now compile with C++
                      exceptions globally disabled. You won't be able to use &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;exception_ptr&lt;/span&gt;&lt;/code&gt; as it can't
                      be included if C++ exceptions are globally disabled.
                    &lt;/div&gt;
                  &lt;/li&gt;
                  &lt;li&gt;
                    &lt;div&gt;
                      BREAKING CHANGE &lt;a href="https://github.com/ned14/outcome/issues/244"&gt;#244&lt;/a&gt;
                      It came as a shock to learn that &lt;code&gt;&lt;span class="identifier"&gt;BOOST_OUTCOME_TRY&lt;/span&gt;&lt;/code&gt;
                      had been broken since the inception of this library for certain
                      corner case code, which required a breaking change in how TRY
                      works. See &lt;a href="https://boostorg.github.io/outcome/changelog.html"&gt;the
                      changelog in the documentation for more detail&lt;/a&gt;.
                    &lt;/div&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/parameter/"&gt;Parameter&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Added a workaround for MSVC 2015 code miscompilation when an rvalue
                was used as a default value of a named parameter of a function. (&lt;a href="https://github.com/boostorg/parameter/pull/109"&gt;PR#109&lt;/a&gt;,
                &lt;a href="https://github.com/boostorg/log/issues/132"&gt;#132&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/pfr/"&gt;PFR&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed reflection of types with missing &lt;code&gt;&lt;span class="keyword"&gt;const&lt;/span&gt;&lt;/code&gt;
                in SFINAE expressions in template constructor. Now reflection of
                aggregates with &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;chrono&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;duration&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;???&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; fields works on any
                Standard Library implementation, even if LWG3050 is not fixed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Comparison functions are now &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
                &lt;a href="https://github.com/boostorg/pfr/issues/52"&gt;#52&lt;/a&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fixed numerous typos in docs (thanks to Phil Miller &lt;a href="https://github.com/boostorg/pfr/issues/63"&gt;#63&lt;/a&gt;)
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Worked around &lt;a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95888"&gt;GCC
                bug&lt;/a&gt; affecting GCC versions 9.3-10.2 (issue &lt;a href="https://github.com/boostorg/poly_collection/issues/20"&gt;#20&lt;/a&gt;).
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Version 1.13
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class="identifier"&gt;ARCH_PPC_64&lt;/span&gt;&lt;/code&gt; predef.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix &lt;code&gt;&lt;span class="identifier"&gt;ARCH_WORD_BITS&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; redefinition warnings/errors.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class="identifier"&gt;ARCH_E2K&lt;/span&gt;&lt;/code&gt;, Elbrus
                2000, architecture from Konstantin Ivlev.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix not handling recent C++ version that go above 10.x version.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Version 1.12
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Switch to using the endian.h header on OpenBSD. (Brad Smith)
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix not handling recent versions of stdcxx that go above version
                9.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix including sub-BSD OS headers directly causing redef warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add CI testing of direct inclusion of all headers.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add CI testing on FreeBSD for clang and gcc.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add &lt;code&gt;&lt;span class="identifier"&gt;WORD_BITS&lt;/span&gt;&lt;/code&gt; set
                of predefs to detect the architecture word size. Initial implementation
                inspired by submission from Mikhail Komarov.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add CI testing for Cygwin 32 and 64.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/property_tree/"&gt;PropertyTree&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Property Tree has a new maintainer.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix usage of deprecated Boost.Bind features.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Link to Wikipedia fixed.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Use BOOST_OVERRIDE to fix GCC warnings.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Add extensive CI testing.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/regex/"&gt;Regex&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Regex is now header only except in C++03 mode.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Support for C++03 is now deprecated.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                The library can now be used "standalone" without the rest
                of Boost being present.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Better support for pre-C++11 builds on clang &lt;a href="https://github.com/boostorg/stacktrace/issues/102"&gt;#102&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Bigger warning for &lt;strong&gt;do not use boost::stacktrace::stacktrace
                in signal handlers&lt;/strong&gt; &lt;a href="https://github.com/boostorg/stacktrace/issues/71"&gt;#71&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_traits/"&gt;TypeTraits&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Fix for Visual Studio managed code projects.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant2/"&gt;Variant2&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Improved generated code for the double buffered case.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_76_0.updated_tools"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/tools/build/"&gt;Build&lt;/a&gt;:&lt;/span&gt;
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Includes release of &lt;a href="https://www.boost.org/tools/build/doc/html/#_version_4_4_1"&gt;B2
                version 4.4.1&lt;/a&gt;.
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_76_0.compilers_tested"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Boost's primary test compilers are:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 4.0.1, 6.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++0x: 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0,
                9.0.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
                6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.3.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++14: 18.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 9.0.0, 9.1.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++17: 9.1.0, 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++1z: 9.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++2a: 10.0.0, 11.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.6.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1z: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;
      Boost's additional test compilers include:
    &lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;
        &lt;div&gt;
          Linux:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++0x: 3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
                6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.4.7
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.3.0, 8.0.1
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Intel, C++14: 18.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          OS X:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++17: 9.1.0, 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++1z: 9.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Apple Clang, C++2a: 10.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          Windows:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++0x: 4.6.4
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;div&gt;
          FreeBSD:
          &lt;ul&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++11: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++14: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;div&gt;
                Clang, C++1z: 4.0.0
              &lt;/div&gt;
            &lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
  &lt;div id="version_1_76_0.acknowledgements"&gt;
    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
    &lt;p&gt;
      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
    &lt;/p&gt;
  &lt;/div&gt;
</description></item>
  </channel>
</rss>
