(feed/history/boost_1_64_0.qbk:1.64.0 beta1
-description_xhtml
"
"
"
"  <div id="version_1_64_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/any/">Any</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Suppressed false warnings about returning reference to temporary
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">addressof</span></code> is now used instead of
"                directly taking the address <a href="https://svn.boost.org/trac/boost/ticket/12615">#12615</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Headers are not included using double quotes any more <a href="https://svn.boost.org/trac/boost/ticket/12053">#12053</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>,
"                <code><span class="identifier">leak</span></code>, and <code><span class="identifier">undefined</span></code> sanitizers
"              </div>
"            </li>
"            <li>
"              <div>
"                Added more test
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed possible incorrect code generation in 64-bit atomic operations
"                on 32-bit x86 with gcc versions older than 4.7 and compatible compilers.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/config/">Config</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">BOOST_NO_CXX11_SFINAE_EXPR</span></code>
"                defect detection.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/container/">Container</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12749">Trac
"                      #12749: <em>"container::pmr::polymorphic_allocator
"                      compilation error"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/11333">Trac
"                      #11333: <em>"boost::basic_string_ref should interop
"                      with boost::container::basic_string"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/pull/45">GitHub
"                      #45: <em>"emplace_back must return reference to
"                      back(), not to *end()"</em></a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                new API: call/cc
"              </div>
"            </li>
"            <li>
"              <div>
"                deprecated API:execution-context
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/12719">#12719</a> segmentation fault when built with mingw-w64
"              </div>
"            </li>
"            <li>
"              <div>
"                #38: context_entry() crashes on macOS
"              </div>
"            </li>
"            <li>
"              <div>
"                #39: Unknown directive .cpu on aarch64 with Clang 3.8 on Android
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/conversion/">Conversion</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Docs were ported to Quickbook (thanks to Mikhail Maksimov for the
"                port)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a memory leak in test (thanks to Mikhail Maksimov for the fix)
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>,
"                <code><span class="identifier">leak</span></code>, and <code><span class="identifier">undefined</span></code> sanitizers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented <code><span class="keyword">constexpr</span></code>
"                <code><span class="identifier">addressof</span></code> on compilers
"                that support C++11 <code><span class="keyword">constexpr</span></code>
"                and SFINAE expressions (Glen Fernandes). <code><span class="identifier">BOOST_CORE_NO_CONSTEXPR_ADDRESSOF</span></code>
"                macro indicates when <code><span class="keyword">constexpr</span></code>
"                <code><span class="identifier">addressof</span></code> is not
"                available.
"              </div>
"            </li>
"            <li>
"              <div>
"                In <code><span class="identifier">lightweight_test</span><span class="special">.</span><span class="identifier">hpp</span></code>,
"                added new macros <code><span class="identifier">BOOST_TEST_ALL_EQ</span></code>
"                and <code><span class="identifier">BOOST_TEST_ALL_WITH</span></code>
"                for testing container contents (Bjorn Reese).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/coroutine2/">Coroutine2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                #4: coroutine2&lt;&gt; does not accept std::bind
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed WinCE compilation
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">boost</span><span class="special">:</span><span class="identifier">dll</span><span class="special">::</span><span class="identifier">symbol_location_ptr</span></code> function for
"                getting location of a symbol by pointer that could not be dereferenced
"                (<code><span class="keyword">void</span></code> pointer for example)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed UB in <code><span class="identifier">detail</span><span class="special">::</span><span class="identifier">aggressive_ptr_cast</span></code>
"                for member pointers
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed leaks in experimental smart imports
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed warnings
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>
"                and <code><span class="identifier">leak</span></code> sanitizers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                #100: ASIO: unbuffered_channel / scheduler notify issue
"              </div>
"            </li>
"            <li>
"              <div>
"                #106: Passing a fixed_stack allocator to async/packaged_task doesn't
"                compile
"              </div>
"            </li>
"            <li>
"              <div>
"                #111: endless-loop in buffered_channel::try_value_pop()
"              </div>
"            </li>
"            <li>
"              <div>
"                (un)bounded_channel&lt;&gt; removed
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/functional/hash/">Hash</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Stop using <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">unary_function</span></code> and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">binary_function</span></code> when they're not
"                available.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/interprocess/">Interprocess</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12617">Trac
"                      #12617 (<em>"clock_gettime not available on OS X
"                      10.11"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12744">Trac
"                      #12744 (<em>"winapi::set_timer_resolution inadvertently
"                      changes timer resolution (Windows)"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/32">GitHub
"                      Pull #32 (<em>"Conform to std::pointer_traits requirements"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/33">GitHub
"                      Pull #33 (<em>"explicit cast to derived class"
"                      and "64/32 bit processes sharing"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/34">GitHub
"                      Pull #34 (<em>"Update example to use multi_index::member
"                      instead of BOOST_MULTI_INDEX_MEMBER"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/35">GitHub
"                      Pull #35 (<em>"Fixed options for cross-compilation"</em>)</a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                New experimental option <code><span class="identifier">BOOST_INTERPROCESS_BOOTSTAMP_IS_SESSION_MANAGER_BASED</span></code>
"                from Windows systems. This option derives the unique bootstamp used
"                to name the folder where shared memory is placed from registry values
"                associated with the session manager. This option only works on Vista
"                and later systems and might be more stable than the default version.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/intrusive/">Intrusive</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12745">Boost
"                      Trac #12745: <em>key_nodeptr_comp broken if the key type
"                      is void*</em></a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12761">Boost
"                      Trac #12761: <em>intrusive::set::swap doesn't swap the
"                      comparison function*</em></a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/lexical_cast/">LexicalCast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed multiple warnings <a href="https://svn.boost.org/trac/boost/ticket/11842">#11842</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>,
"                <code><span class="identifier">leak</span></code>, and <code><span class="identifier">undefined</span></code> sanitizers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Big push to ensure all functions in also in C99 are compatible with
"                Annex F.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved accuracy of the Bessel functions I0, I1, K0 and K1, see
"                <a href="https://svn.boost.org/trac/boost/ticket/12066">12066</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multiprecision/">Multiprecision</a>:</span>
"          <ul>
"            <li>
"              <div>
"                In <code><span class="identifier">cpp_bin_float</span></code>
"                prevent double rounding when converting to a denormalized float.
"                See <a href="https://svn.boost.org/trac/boost/ticket/12527">#12527</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in integer sqrt for very small integers. See <a href="https://svn.boost.org/trac/boost/ticket/12559">#12559</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix conversion to signed-zero in <code><span class="identifier">cpp_bin_float</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Change <code><span class="identifier">cpp_bin_float</span></code>
"                rounding code to round at arbitrary location so we can use it for
"                conversions, see <a href="https://svn.boost.org/trac/boost/ticket/12527">#12527</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve performance of 128-bit bit-scan operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix subtraction of very small quantities in <code><span class="identifier">cpp_bin_float</span></code>.
"                See: <a href="https://svn.boost.org/trac/boost/ticket/12580">#12580</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Bring error handling into line with C99 Annex F. See <a href="https://svn.boost.org/trac/boost/ticket/12581">#12581</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bitwise export of trivial <code><span class="identifier">cpp_int</span></code>'s,
"                see <a href="https://svn.boost.org/trac/boost/ticket/12627">#12627</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <code><span class="identifier">ilogb</span></code> (and code
"                that uses it) to consistently return the smallest value of the exponent
"                type when the argument is zero, see <a href="https://svn.boost.org/trac/boost/ticket/12625">#12625</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Allow conversion from <code><span class="identifier">__float128</span></code>
"                to <code><span class="identifier">cpp_bin_float</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in left shift of <code><span class="identifier">cpp_int</span></code>
"                which would result in bit-loss, see <a href="https://svn.boost.org/trac/boost/ticket/12790">#12790</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bugs in bounded but variable precision <code><span class="identifier">cpp_int</span></code>'s
"                caused by over-aggressive constexpr optimization, see <a href="https://svn.boost.org/trac/boost/ticket/12798">#12798</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/predef/">Predef</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix Intel C/C++ compiler version specification.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add <code><span class="identifier">BOOST_VERSION_NUMBER_MAJOR</span></code>,
"                <code><span class="identifier">BOOST_VERSION_NUMBER_MINOR</span></code>,
"                <code><span class="identifier">BOOST_VERSION_NUMBER_PATCH</span></code>
"                macros to extract components from valid version numbers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Change VS version numbering. Versions after VS2015 will use the compiler
"                version instead of the varied product versions.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/program_options/">Program Options</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for storing values into <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">optional</span></code>,
"                thanks to Ed Catmur (<a href="https://svn.boost.org/trac/boost/ticket/7495">#7495</a>,
"                <a href="https://github.com/boostorg/program_options/pull/18">PR#18</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/regex/">Regex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Compiling with Oracle C++ toolset is no longer restricted to static
"                linking.
"              </div>
"            </li>
"            <li>
"              <div>
"                Big effort to de-fuzz the library using libFuzzer and fix identified
"                issues, see: <a href="https://svn.boost.org/trac/boost/ticket/12818">#12818</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/smart_ptr/">Smart Pointers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Rewrite of <code><span class="identifier">allocate_shared</span></code>
"                and <code><span class="identifier">make_shared</span></code> for
"                arrays for a more optimal and more maintainable implementation (Glen
"                Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Pointer cast functions with move semantics (Chris Glover)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/test/">Test</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.test v3.5 see the <a href="/doc/libs/1_64_0/libs/test/doc/html/boost_test/change_log.html">Change
"                log</a> section for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                New feature:
"                <ul>
"                  <li>
"                    <div>
"                      Now Boost.Test provides <strong>customization
"                      points</strong> for logging user defined types
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      JUnit output format can now have a <em>log-level</em>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      JUnit output format has not better performances when the test
"                      modules have a lot of checks
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes
"                <ul>
"                  <li>
"                    <div>
"                      Trac tickets <a href="https://svn.boost.org/trac/boost/ticket/11756">#11756</a>, <a href="https://svn.boost.org/trac/boost/ticket/12540">#12540</a>, <a href="https://svn.boost.org/trac/boost/ticket/12712">#12712</a>, <a href="https://svn.boost.org/trac/boost/ticket/12748">#12748</a>,
"                      <a href="https://svn.boost.org/trac/boost/ticket/12778">#12778</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Pull request <a href="https://github.com/boostorg/test/pull/107">PR107</a>,
"                      <a href="https://github.com/boostorg/test/pull/108">PR108</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_index/">TypeIndex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">BOOST_TYPE_INDEX_IMPLEMENT_RUNTIME_CAST</span></code>,
"                which implements the functionality for <code><span class="identifier">runtime_cast</span></code>
"                but does not include the <code><span class="identifier">BOOST_TYPE_INDEX_REGISTER_CLASS</span></code>
"                macro (thanks to Chris Glover for imlpementing it)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed undefined macro warning in stl_type_index.hpp <a href="https://svn.boost.org/trac/boost/ticket/12739">#12739</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>,
"                <code><span class="identifier">leak</span></code>, and <code><span class="identifier">undefined</span></code> sanitizers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_traits/">TypeTraits</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added new traits <code><span class="identifier">make_void</span></code>
"                and <code><span class="identifier">void_t</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/unordered/">Unordered</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Initial support for new C++17 member functions: <code><span class="identifier">insert_or_assign</span></code>
"                and <code><span class="identifier">try_emplace</span></code> in
"                <code><span class="identifier">unordered_map</span></code>, <code><span class="identifier">merge</span></code> and <code><span class="identifier">extract</span></code>
"                in all containers.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed construction of variant from <code><span class="identifier">recursive_variant_</span></code>
"                (thanks to Mikhail Maksimov for the fix) <a href="https://svn.boost.org/trac/boost/ticket/12508">#12508</a>, <a href="https://svn.boost.org/trac/boost/ticket/12645">#12645</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Do not enable variadic templates for MSVC2015Update1 as it still
"                has issues <a href="https://svn.boost.org/trac/boost/ticket/12236">#12236</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Workaround GCC6 crash (thanks to Mikhail Maksimov for the workaround)
"                <a href="https://svn.boost.org/trac/boost/ticket/12680">#12680</a>, <a href="https://svn.boost.org/trac/boost/ticket/7120">#7120</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Made <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">polymorphic_</span><span class="special">*</span><span class="identifier">get</span></code> to work as <code><span class="identifier">boost</span><span class="special">::*</span><span class="identifier">get</span></code>
"                in undocumented border cases and fixed tests <a href="https://svn.boost.org/trac/boost/ticket/11950">#11950</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>,
"                <code><span class="identifier">leak</span></code>, and <code><span class="identifier">undefined</span></code> sanitizers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_64_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5, 3.6, 3.7.1, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.1, 6.2.0, 6.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++1z: 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++11: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 16.0, 17.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 7.0.2
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 7.0.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14, mingw: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4, 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.8
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC: 4.4.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          SunOS:
"          <ul>
"            <li>
"              <div>
"                Oracle Solaris Studio: 12.5
"              </div>
"            </li>
"            <li>
"              <div>
"                Oracle Solaris Studio, C++11: 12.5
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.4, 3.5, 3.6, 3.7. 3.8, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.9.1, 4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.1, 6.2.0, 6.3.0, 7.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++1z: 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++11: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 16.0, 17.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 7.0.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4, 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang, C++98: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.8
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC: 4.4.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          SunOS:
"          <ul>
"            <li>
"              <div>
"                Oracle Solaris Studio: 12.5
"              </div>
"            </li>
"            <li>
"              <div>
"                Oracle Solaris Studio, C++11: 12.5
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_64_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/beman_dawes.html">Beman Dawes</a>, Eric Niebler,
"      <a href="/users/people/rene_rivera.html">Rene Rivera</a>, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    </p>
"  </div>
"
-hash
"f74e862ba3d755f777873526318fc1aac9e1ee075d91b4523ec74f54e028b2fb
-id
"version_1_64_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      Updated Libraries: Any, Atomic, Config, Container, Context, Conversion, Core,
"      Coroutine2, DLL, Fiber, Hash, Interprocess, Intrusive, LexicalCast, Math, Multiprecision,
"      Predef, Program Options, Regex, Smart Pointers, Test, TypeIndex, TypeTraits,
"      Unordered, Variant.
"
-title_xml
"Version 1.64.0
)
(feed/history/boost_1_64_0.qbk:1.64.0 beta2
-description_xhtml
"
"
"
"  <div id="version_1_64_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/process/">Process</a>:</span>
"  Process library by Klemens
"          D. Morgenstern, that provides cross platorm ways to allows you to:
"        </div>
"        <ul>
"          <li>
"            <div>
"              create child processes
"            </div>
"          </li>
"          <li>
"            <div>
"              setup streams for child processes
"            </div>
"          </li>
"          <li>
"            <div>
"              communicate with child processes through streams (synchronously or
"              asynchronously)
"            </div>
"          </li>
"          <li>
"            <div>
"              wait for processes to exit (synchronously or asynchronously)
"            </div>
"          </li>
"          <li>
"            <div>
"              terminate processes
"            </div>
"          </li>
"        </ul>
"        <div>
"          Broken feature:
"        </div>
"        <ul>
"          <li>
"            <div>
"              <a href="https://github.com/klemens-morgenstern/boost-process/issues/67">GitHub
"              #67: <em>"group.wait() does not return"</em></a>.
"            </div>
"          </li>
"        </ul>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_64_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/any/">Any</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Suppressed false warnings about returning reference to temporary
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">addressof</span></code> is now used instead of
"                directly taking the address <a href="https://svn.boost.org/trac/boost/ticket/12615">#12615</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Headers are not included using double quotes any more <a href="https://svn.boost.org/trac/boost/ticket/12053">#12053</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>,
"                <code><span class="identifier">leak</span></code>, and <code><span class="identifier">undefined</span></code> sanitizers
"              </div>
"            </li>
"            <li>
"              <div>
"                Added more test
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed possible incorrect code generation in 64-bit atomic operations
"                on 32-bit x86 with gcc versions older than 4.7 and compatible compilers.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/config/">Config</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">BOOST_NO_CXX11_SFINAE_EXPR</span></code>
"                defect detection.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/container/">Container</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12749">Trac
"                      #12749: <em>"container::pmr::polymorphic_allocator
"                      compilation error"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/11333">Trac
"                      #11333: <em>"boost::basic_string_ref should interop
"                      with boost::container::basic_string"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/pull/45">GitHub
"                      #45: <em>"emplace_back must return reference to
"                      back(), not to *end()"</em></a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                new API: call/cc
"              </div>
"            </li>
"            <li>
"              <div>
"                deprecated API:execution-context
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/12719">#12719</a> segmentation fault when built with mingw-w64
"              </div>
"            </li>
"            <li>
"              <div>
"                #38: context_entry() crashes on macOS
"              </div>
"            </li>
"            <li>
"              <div>
"                #39: Unknown directive .cpu on aarch64 with Clang 3.8 on Android
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/conversion/">Conversion</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Docs were ported to Quickbook (thanks to Mikhail Maksimov for the
"                port)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a memory leak in test (thanks to Mikhail Maksimov for the fix)
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>,
"                <code><span class="identifier">leak</span></code>, and <code><span class="identifier">undefined</span></code> sanitizers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented <code><span class="keyword">constexpr</span></code>
"                <code><span class="identifier">addressof</span></code> on compilers
"                that support C++11 <code><span class="keyword">constexpr</span></code>
"                and SFINAE expressions (Glen Fernandes). <code><span class="identifier">BOOST_CORE_NO_CONSTEXPR_ADDRESSOF</span></code>
"                macro indicates when <code><span class="keyword">constexpr</span></code>
"                <code><span class="identifier">addressof</span></code> is not
"                available.
"              </div>
"            </li>
"            <li>
"              <div>
"                In <code><span class="identifier">lightweight_test</span><span class="special">.</span><span class="identifier">hpp</span></code>,
"                added new macros <code><span class="identifier">BOOST_TEST_ALL_EQ</span></code>
"                and <code><span class="identifier">BOOST_TEST_ALL_WITH</span></code>
"                for testing container contents (Bjorn Reese).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/coroutine2/">Coroutine2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                #4: coroutine2&lt;&gt; does not accept std::bind
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed WinCE compilation
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">boost</span><span class="special">:</span><span class="identifier">dll</span><span class="special">::</span><span class="identifier">symbol_location_ptr</span></code> function for
"                getting location of a symbol by pointer that could not be dereferenced
"                (<code><span class="keyword">void</span></code> pointer for example)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed UB in <code><span class="identifier">detail</span><span class="special">::</span><span class="identifier">aggressive_ptr_cast</span></code>
"                for member pointers
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed leaks in experimental smart imports
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed warnings
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>
"                and <code><span class="identifier">leak</span></code> sanitizers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                #100: ASIO: unbuffered_channel / scheduler notify issue
"              </div>
"            </li>
"            <li>
"              <div>
"                #106: Passing a fixed_stack allocator to async/packaged_task doesn't
"                compile
"              </div>
"            </li>
"            <li>
"              <div>
"                #111: endless-loop in buffered_channel::try_value_pop()
"              </div>
"            </li>
"            <li>
"              <div>
"                (un)bounded_channel&lt;&gt; removed
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/functional/hash/">Hash</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Stop using <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">unary_function</span></code> and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">binary_function</span></code> when they're not
"                available.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/interprocess/">Interprocess</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12617">Trac
"                      #12617 (<em>"clock_gettime not available on OS X
"                      10.11"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12744">Trac
"                      #12744 (<em>"winapi::set_timer_resolution inadvertently
"                      changes timer resolution (Windows)"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/32">GitHub
"                      Pull #32 (<em>"Conform to std::pointer_traits requirements"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/33">GitHub
"                      Pull #33 (<em>"explicit cast to derived class"
"                      and "64/32 bit processes sharing"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/34">GitHub
"                      Pull #34 (<em>"Update example to use multi_index::member
"                      instead of BOOST_MULTI_INDEX_MEMBER"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/35">GitHub
"                      Pull #35 (<em>"Fixed options for cross-compilation"</em>)</a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                New experimental option <code><span class="identifier">BOOST_INTERPROCESS_BOOTSTAMP_IS_SESSION_MANAGER_BASED</span></code>
"                from Windows systems. This option derives the unique bootstamp used
"                to name the folder where shared memory is placed from registry values
"                associated with the session manager. This option only works on Vista
"                and later systems and might be more stable than the default version.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/intrusive/">Intrusive</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12745">Boost
"                      Trac #12745: <em>key_nodeptr_comp broken if the key type
"                      is void*</em></a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12761">Boost
"                      Trac #12761: <em>intrusive::set::swap doesn't swap the
"                      comparison function*</em></a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/lexical_cast/">LexicalCast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed multiple warnings <a href="https://svn.boost.org/trac/boost/ticket/11842">#11842</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>,
"                <code><span class="identifier">leak</span></code>, and <code><span class="identifier">undefined</span></code> sanitizers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Big push to ensure all functions in also in C99 are compatible with
"                Annex F.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved accuracy of the Bessel functions I0, I1, K0 and K1, see
"                <a href="https://svn.boost.org/trac/boost/ticket/12066">12066</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multiprecision/">Multiprecision</a>:</span>
"          <ul>
"            <li>
"              <div>
"                In <code><span class="identifier">cpp_bin_float</span></code>
"                prevent double rounding when converting to a denormalized float.
"                See <a href="https://svn.boost.org/trac/boost/ticket/12527">#12527</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in integer sqrt for very small integers. See <a href="https://svn.boost.org/trac/boost/ticket/12559">#12559</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix conversion to signed-zero in <code><span class="identifier">cpp_bin_float</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Change <code><span class="identifier">cpp_bin_float</span></code>
"                rounding code to round at arbitrary location so we can use it for
"                conversions, see <a href="https://svn.boost.org/trac/boost/ticket/12527">#12527</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve performance of 128-bit bit-scan operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix subtraction of very small quantities in <code><span class="identifier">cpp_bin_float</span></code>.
"                See: <a href="https://svn.boost.org/trac/boost/ticket/12580">#12580</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Bring error handling into line with C99 Annex F. See <a href="https://svn.boost.org/trac/boost/ticket/12581">#12581</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bitwise export of trivial <code><span class="identifier">cpp_int</span></code>'s,
"                see <a href="https://svn.boost.org/trac/boost/ticket/12627">#12627</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <code><span class="identifier">ilogb</span></code> (and code
"                that uses it) to consistently return the smallest value of the exponent
"                type when the argument is zero, see <a href="https://svn.boost.org/trac/boost/ticket/12625">#12625</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Allow conversion from <code><span class="identifier">__float128</span></code>
"                to <code><span class="identifier">cpp_bin_float</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in left shift of <code><span class="identifier">cpp_int</span></code>
"                which would result in bit-loss, see <a href="https://svn.boost.org/trac/boost/ticket/12790">#12790</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bugs in bounded but variable precision <code><span class="identifier">cpp_int</span></code>'s
"                caused by over-aggressive constexpr optimization, see <a href="https://svn.boost.org/trac/boost/ticket/12798">#12798</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/predef/">Predef</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix Intel C/C++ compiler version specification.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add <code><span class="identifier">BOOST_VERSION_NUMBER_MAJOR</span></code>,
"                <code><span class="identifier">BOOST_VERSION_NUMBER_MINOR</span></code>,
"                <code><span class="identifier">BOOST_VERSION_NUMBER_PATCH</span></code>
"                macros to extract components from valid version numbers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Change VS version numbering. Versions after VS2015 will use the compiler
"                version instead of the varied product versions.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/program_options/">Program Options</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for storing values into <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">optional</span></code>,
"                thanks to Ed Catmur (<a href="https://svn.boost.org/trac/boost/ticket/7495">#7495</a>,
"                <a href="https://github.com/boostorg/program_options/pull/18">PR#18</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/regex/">Regex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Compiling with Oracle C++ toolset is no longer restricted to static
"                linking.
"              </div>
"            </li>
"            <li>
"              <div>
"                Big effort to de-fuzz the library using libFuzzer and fix identified
"                issues, see: <a href="https://svn.boost.org/trac/boost/ticket/12818">#12818</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/smart_ptr/">Smart Pointers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Rewrite of <code><span class="identifier">allocate_shared</span></code>
"                and <code><span class="identifier">make_shared</span></code> for
"                arrays for a more optimal and more maintainable implementation (Glen
"                Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Pointer cast functions with move semantics (Chris Glover)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/test/">Test</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.test v3.5 see the <a href="/doc/libs/1_64_0/libs/test/doc/html/boost_test/change_log.html">Change
"                log</a> section for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                New feature:
"                <ul>
"                  <li>
"                    <div>
"                      Now Boost.Test provides <strong>customization
"                      points</strong> for logging user defined types
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      JUnit output format can now have a <em>log-level</em>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      JUnit output format has not better performances when the test
"                      modules have a lot of checks
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes
"                <ul>
"                  <li>
"                    <div>
"                      Trac tickets <a href="https://svn.boost.org/trac/boost/ticket/11756">#11756</a>, <a href="https://svn.boost.org/trac/boost/ticket/12540">#12540</a>, <a href="https://svn.boost.org/trac/boost/ticket/12712">#12712</a>, <a href="https://svn.boost.org/trac/boost/ticket/12748">#12748</a>,
"                      <a href="https://svn.boost.org/trac/boost/ticket/12778">#12778</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Pull request <a href="https://github.com/boostorg/test/pull/107">PR107</a>,
"                      <a href="https://github.com/boostorg/test/pull/108">PR108</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_index/">TypeIndex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">BOOST_TYPE_INDEX_IMPLEMENT_RUNTIME_CAST</span></code>,
"                which implements the functionality for <code><span class="identifier">runtime_cast</span></code>
"                but does not include the <code><span class="identifier">BOOST_TYPE_INDEX_REGISTER_CLASS</span></code>
"                macro (thanks to Chris Glover for imlpementing it)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed undefined macro warning in stl_type_index.hpp <a href="https://svn.boost.org/trac/boost/ticket/12739">#12739</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>,
"                <code><span class="identifier">leak</span></code>, and <code><span class="identifier">undefined</span></code> sanitizers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_traits/">TypeTraits</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added new traits <code><span class="identifier">make_void</span></code>
"                and <code><span class="identifier">void_t</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/unordered/">Unordered</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Initial support for new C++17 member functions: <code><span class="identifier">insert_or_assign</span></code>
"                and <code><span class="identifier">try_emplace</span></code> in
"                <code><span class="identifier">unordered_map</span></code>, <code><span class="identifier">merge</span></code> and <code><span class="identifier">extract</span></code>
"                in all containers.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed construction of variant from <code><span class="identifier">recursive_variant_</span></code>
"                (thanks to Mikhail Maksimov for the fix) <a href="https://svn.boost.org/trac/boost/ticket/12508">#12508</a>, <a href="https://svn.boost.org/trac/boost/ticket/12645">#12645</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Do not enable variadic templates for MSVC2015Update1 as it still
"                has issues <a href="https://svn.boost.org/trac/boost/ticket/12236">#12236</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Workaround GCC6 crash (thanks to Mikhail Maksimov for the workaround)
"                <a href="https://svn.boost.org/trac/boost/ticket/12680">#12680</a>, <a href="https://svn.boost.org/trac/boost/ticket/7120">#7120</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Made <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">polymorphic_</span><span class="special">*</span><span class="identifier">get</span></code> to work as <code><span class="identifier">boost</span><span class="special">::*</span><span class="identifier">get</span></code>
"                in undocumented border cases and fixed tests <a href="https://svn.boost.org/trac/boost/ticket/11950">#11950</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>,
"                <code><span class="identifier">leak</span></code>, and <code><span class="identifier">undefined</span></code> sanitizers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_64_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5, 3.6, 3.7.1, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.1, 6.2.0, 6.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++1z: 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++11: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 16.0, 17.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 7.0.2
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 7.0.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14, mingw: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4, 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.8
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC: 4.4.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          SunOS:
"          <ul>
"            <li>
"              <div>
"                Oracle Solaris Studio: 12.5
"              </div>
"            </li>
"            <li>
"              <div>
"                Oracle Solaris Studio, C++11: 12.5
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.4, 3.5, 3.6, 3.7. 3.8, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.9.1, 4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.1, 6.2.0, 6.3.0, 7.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++1z: 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++11: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 16.0, 17.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 7.0.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4, 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang, C++98: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.8
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC: 4.4.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          SunOS:
"          <ul>
"            <li>
"              <div>
"                Oracle Solaris Studio: 12.5
"              </div>
"            </li>
"            <li>
"              <div>
"                Oracle Solaris Studio, C++11: 12.5
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_64_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/beman_dawes.html">Beman Dawes</a>, Eric Niebler,
"      <a href="/users/people/rene_rivera.html">Rene Rivera</a>, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    </p>
"  </div>
"
-hash
"49428e286e2e3f6510264f1919576e142868276e74bebe9bc8aad8af3fd40e99
-id
"version_1_64_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: Process. Updated Libraries: Any, Atomic, Config, Container,
"      Context, Conversion, Core, Coroutine2, DLL, Fiber, Hash, Interprocess, Intrusive,
"      LexicalCast, Math, Multiprecision, Predef, Program Options, Regex, Smart Pointers,
"      Test, TypeIndex, TypeTraits, Unordered, Variant.
"
-title_xml
"Version 1.64.0
)
(feed/history/boost_1_65_0.qbk:1.65.0 beta1
-description_xhtml
"
"
"
"  <div id="version_1_65_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/poly_collection/">PolyCollection</a>:</span>
"  Fast
"          containers of polymorphic objects, from Joaquín M López Muñoz.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"  Gather, store,
"          copy and print backtraces, from Antony Polukhin.
"          <ul>
"            <li>
"              <div>
"                Note: Library has <a href="https://github.com/boostorg/stacktrace/issues/14">issue
"                with MinGW</a> and may produce empty backtraces with that compiler.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_65_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                call/cc supports ucontext-API (swapcontext)
"              </div>
"            </li>
"            <li>
"              <div>
"                call/cc supports Windows-Fiber-API
"              </div>
"            </li>
"            <li>
"              <div>
"                call/cc supports on demand growing (segmented/split) stacks
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/12719">#12719</a>: context test cases and examples segmentation fault when
"                built with mingw-w64 toolchain
"              </div>
"            </li>
"            <li>
"              <div>
"                #52: Failing to build callcc test with g++-4.9
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/config/">Config</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">BOOST_NO_CXX11_POINTER_TRAITS</span></code>,
"                <code><span class="identifier">BOOST_NO_CXX17_FOLD_EXPRESSIONS</span></code>,
"                <code><span class="identifier">BOOST_NO_CXX17_INLINE_VARIABLES</span></code>,
"                <code><span class="identifier">BOOST_NO_CXX17_STRUCTURED_BINDINGS</span></code>
"                defect detection.
"              </div>
"            </li>
"            <li>
"              <div>
"                BOOST_FALLTHROUGH support for GCC 7 and above. (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented <code><span class="identifier">pointer_traits</span></code>
"                for C++03 and higher, that implements <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0653r0.html">P0653r0</a>
"                (Glen Fernandes). This implementation is now used by Align, Circular
"                Buffer, Fiber, Geometry, among other libraries.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">BOOST_TEST_GT</span></code>
"                and <code><span class="identifier">BOOST_TEST_GE</span></code>
"                to Lightweight Test.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/coroutine2/">Coroutine2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                supports ucontext-API (swapcontext)
"              </div>
"            </li>
"            <li>
"              <div>
"                supports Windows-Fiber-API
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/13064">#13064</a>: different behavior coroutine and coroutine2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix PE parsing on non Windows platforms.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                hardware transactional memory (Intel TSX) supported
"              </div>
"            </li>
"            <li>
"              <div>
"                NUMA supported
"              </div>
"            </li>
"            <li>
"              <div>
"                ucontext-API (swapcontext) supported
"              </div>
"            </li>
"            <li>
"              <div>
"                Windows-Fiber-API supported
"              </div>
"            </li>
"            <li>
"              <div>
"                on demand growing stacks
"              </div>
"            </li>
"            <li>
"              <div>
"                #121: failing to build static lib with GCC 4.8 and C++11
"              </div>
"            </li>
"            <li>
"              <div>
"                #123: assertion failure in schedule_from_remote
"              </div>
"            </li>
"            <li>
"              <div>
"                #125: erratic crashes in testsuite
"              </div>
"            </li>
"            <li>
"              <div>
"                #126: incorrect std::memory_order value in compare_exchange_strong?
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/functional/hash/">Hash</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for <code><span class="keyword">char16_t</span></code>,
"                <code><span class="keyword">char32_t</span></code>, <code><span class="identifier">u16string</span></code>, <code><span class="identifier">u32string</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                General changes:
"                <ul>
"                  <li>
"                    <div>
"                      Improved compatibility with Solaris.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/predef/">Predef</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix Intel C/C++ version 9999 detection to be 12.1.0.
"              </div>
"            </li>
"            <li>
"              <div>
"                Addition of <code><span class="identifier">BOOST_PREDEF_WORKAROUND</span></code>
"                and <code><span class="identifier">BOOST_PREDEF_TESTED_AT</span></code>
"                macros for defect workarounds and detection.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add ARM64 MSVC SIMD detection. (from Minmin Gong)
"              </div>
"            </li>
"            <li>
"              <div>
"                Add detection of iOS simulator vs device as a platform choice. (from
"                Ruslan Baratov)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix MinGW incorrect header guard. (from Ruslan Baratov)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/program_options/">Program Options</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for storing values into <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">optional</span></code>,
"                thanks to Ed Catmur (<a href="https://svn.boost.org/trac/boost/ticket/7495">#7495</a>,
"                <a href="https://github.com/boostorg/program_options/pull/18">PR#18</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Parsing of implicit options can now use the value from the next token.
"                Since 1.59, unless the value of implicit option was specified in
"                the same token as the option itself, the implicit value was used.
"                That proved inconvenient, and now we again check the next token and
"                use it as value if it's not an option itself. (<a href="https://github.com/boostorg/program_options/issues/25">#25</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/smart_ptr/">Smart Pointers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New class template<code><span class="identifier">atomic_shared_ptr</span></code>,
"                that provides thread-safe atomic pointer operations over <code><span class="identifier">shared_ptr</span></code>. (Peter Dimov)
"              </div>
"            </li>
"            <li>
"              <div>
"                New class template <code><span class="identifier">local_shared_ptr</span></code>,
"                where the reference count is updated with non-atomic operations.
"                (Peter Dimov)
"              </div>
"            </li>
"            <li>
"              <div>
"                More optimizations in <code><span class="identifier">allocate_shared</span></code>
"                and <code><span class="identifier">make_shared</span></code> for
"                arrays. (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Documentation has been completely rewritten in Asciidoc format.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_index/">TypeIndex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Include &lt;boost/functional/hash.hpp&gt; if required, thanks to
"                Ed Catmur <a href="https://svn.boost.org/trac/boost/ticket/13009">#13009</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Use native <code><span class="identifier">hash_code</span><span class="special">()</span></code> when possible on GCC-like compilers
"                <a href="https://svn.boost.org/trac/boost/ticket/13027">#13027</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/unordered/">Unordered</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Use the same data structure for <code><span class="identifier">unordered_set</span></code>
"                and <code><span class="identifier">unordered_multiset</span></code>,
"                and for<code><span class="identifier">unordered_map</span></code>
"                and <code><span class="identifier">unordered_multimap</span></code>.
"                This is required for C++17, so that nodes can be merged and extracted
"                between compatible containers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add deprecated attributes to long deprecated functions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved use of <code><span class="identifier">allocator_traits</span></code>
"                <code><span class="identifier">construct</span></code> and <code><span class="identifier">destroy</span></code> on C++11 compilers, using
"                piecewise pair construction when appropriate.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fewer workarounds on newer Oracle compilers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Avoid dereferencing pointers to uninitialized memory (<a href="https://github.com/boostorg/unordered/pull/5">PR
"                #5</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                r-value overload for <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">get</span></code>
"                was added by Albert Sverdlov <a href="https://svn.boost.org/trac/boost/ticket/13018">#13018</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Missing include fro <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">variant</span><span class="special">/</span><span class="identifier">polymorphic_get</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code>
"                header was added by Adam Badura <a href="https://svn.boost.org/trac/boost/ticket/13037">#13037</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_65_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.8.1, 3.9.1, 4.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.4.1, 6.3.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++1z: 6.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++11: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 16.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 8.1.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.6.4, 4.7.3, 4.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.8.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.8.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.8.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.8.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC, C++11: 4.7.3
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          SunOS:
"          <ul>
"            <li>
"              <div>
"                Oracle Solaris Studio: 12.5_next, 12.5
"              </div>
"            </li>
"            <li>
"              <div>
"                Oracle Solaris Studio, C++11: 12.5_next, 12.5
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.8.1, 3.9.1, 4.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.1, 6.2.0, 6.3.0, 7.1.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++1z: 6.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++11: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 16.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 8.1.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.6.4, 4.7.3, 4.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.8.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.8.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.8.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.8.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          SunOS:
"          <ul>
"            <li>
"              <div>
"                Oracle Solaris Studio: 12.5_next, 12.5
"              </div>
"            </li>
"            <li>
"              <div>
"                Oracle Solaris Studio, C++11: 12.5_next, 12.5
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_65_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/beman_dawes.html">Beman Dawes</a>, Eric Niebler,
"      <a href="/users/people/rene_rivera.html">Rene Rivera</a>, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    </p>
"  </div>
"
-hash
"fdee2d49102d052157a230156b445cf88b8533eb28688b4787ec02f3a3ca1f05
-id
"version_1_65_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: PolyCollection, Stacktrace. Updated Libraries: Context, Config,
"      Core, Coroutine2, DLL, Fiber, Hash, Log, Predef, Program Options, Smart Pointers,
"      TypeIndex, Unordered, Variant.
"
-title_xml
"Version 1.65.0
)
(feed/history/boost_1_66_0.qbk:1.66.0 beta1
-description_xhtml
"
"
"
"  <div id="version_1_66_0.note_about_the_new_visual_studio">
"    <h3><span class="link">Note about
"    the new Visual Studio release</span></h3>
"    <p>
"      Visual Studio 15.5 was released too late for us to test this release with it.
"    </p>
"  </div>
"  <div id="version_1_66_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"  Portable HTTP, WebSocket,
"          and network operations using only C++11 and Boost.Asio, from Vinnie Falco.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/callable_traits/">CallableTraits</a>:</span>
"  A spiritual
"          successor to Boost.FunctionTypes, Boost.CallableTraits is a header-only
"          C++11 library for the compile-time inspection and manipulation of all 'callable'
"          types. Additional support for C++17 features, from Barrett Adair.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/mp11/">Mp11</a>:</span>
"  A C++11 metaprogramming library,
"          from Peter Dimov.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_66_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented interface changes to reflect the Networking TS (<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4656.pdf">N4656</a>).
"                <ul>
"                  <li>
"                    <div>
"                      See the <a href="/doc/libs/1_66_0/doc/html/boost_asio/net_ts.html">list</a>
"                      of new interfaces and, where applicable, the corresponding
"                      old interfaces that have been superseded.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      The service template parameters, and the corresponding classes,
"                      are disabled by default. For example, instead of <code><span class="identifier">basic_socket</span><span class="special">&lt;</span><span class="identifier">Protocol</span><span class="special">,</span>
"                      <span class="identifier">SocketService</span><span class="special">&gt;</span></code>
"                      we now have simply <code><span class="identifier">basic_socket</span><span class="special">&lt;</span><span class="identifier">Protocol</span><span class="special">&gt;</span></code>. The old interface can
"                      be enabled by defining the <code><span class="identifier">BOOST_ASIO_ENABLE_OLD_SERVICES</span></code>
"                      macro.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed previously deprecated functions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for customised handler tracking.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added reactor-related (i.e. descriptor readiness) events to handler
"                tracking.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added special "concurrency hint" values that may be used
"                to disable locking on a per <code><span class="identifier">io_context</span></code>
"                basis.
"              </div>
"            </li>
"            <li>
"              <div>
"                Enabled perfect forwarding for the first <code><span class="identifier">ssl</span><span class="special">::</span><span class="identifier">stream</span><span class="special">&lt;&gt;</span></code> constructor argument.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added ability to release ownership of the underlying native socket.
"                (Requires Windows 8.1 or later when using the I/O completion port
"                backend.)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented a set of experimental extended atomic operations for
"                integral types:
"                <ul>
"                  <li>
"                    <div>
"                      <code><span class="identifier">fetch_negate</span></code>,
"                      <code><span class="identifier">fetch_complement</span></code>
"                      - atomically replaces the value with a negated or binary complemented
"                      value and returns the original value
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">opaque_</span><span class="special">&lt;</span><span class="identifier">op</span><span class="special">&gt;</span></code>
"                      - equivalent to <code><span class="identifier">fetch_</span><span class="special">&lt;</span><span class="identifier">op</span><span class="special">&gt;</span></code> except that it doesn't
"                      return the original value
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="special">&lt;</span><span class="identifier">op</span><span class="special">&gt;</span><span class="identifier">_and_test</span></code>
"                      - atomically applies <code><span class="special">&lt;</span><span class="identifier">op</span><span class="special">&gt;</span></code>
"                      and returns <code><span class="keyword">true</span></code>
"                      if the result is zero
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">bit_test_and_set</span></code>,
"                      <code><span class="identifier">bit_test_and_reset</span></code>,
"                      <code><span class="identifier">bit_test_and_complement</span></code>
"                      - atomically sets, resets or complements the specified bit
"                      and returns the original value of the bit
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Following C++17 (<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf">P0558R1</a>),
"                arithmetic operations for pointers to non-object types are no longer
"                provided.
"              </div>
"            </li>
"            <li>
"              <div>
"                Also following C++17 exposed <code><span class="identifier">atomic</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">value_type</span></code>
"                and <code><span class="identifier">atomic</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">difference_type</span></code> member typedefs,
"                where applicable, to the user's code.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved compatibility with gcc 7. In particular, using 128-bit operations
"                on x86-64 should no longer require linking with libatomic (the compiler-supplied
"                library).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/date_time/">DateTime</a>:</span>
"          <ul>
"            <li>
"              <div>
"                The library has been converted to use Boost.WinAPI as the abstraction
"                layer for Windows SDK.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed an integral overflow that could cause incorrect results when
"                adding or subtracting many years from a date (see <a href="https://stackoverflow.com/questions/45537280/boost-datetime-issue-with-adding-long-year-durations">here</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                synchronization with CUDA streams
"              </div>
"            </li>
"            <li>
"              <div>
"                synchronization with ROCm/HIP streams
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/format/">Format</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements:
"                <ul>
"                  <li>
"                    <div>
"                      Accept new conversion specifiers:
"                      <ul>
"                        <li>
"                          <div>
"                            <a href="https://github.com/boostorg/format/pull/41"><code><span class="identifier">a</span></code></a>: sets flags
"                            <code><span class="identifier">fixed</span> <span class="special">|</span> <span class="identifier">scientific</span></code>
"                            (i.e. <code><span class="identifier">hexfloat</span></code>)
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            <a href="https://github.com/boostorg/format/pull/43"><code><span class="identifier">b</span></code></a>: sets flag
"                            <code><span class="identifier">boolalpha</span></code>
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            <a href="https://github.com/boostorg/format/pull/41"><code><span class="identifier">A</span></code></a>: same as
"                            <code><span class="identifier">a</span></code> plus
"                            flag <code><span class="identifier">uppercase</span></code>
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            <a href="https://github.com/boostorg/format/pull/41"><code><span class="identifier">F</span></code></a>: same as
"                            <code><span class="identifier">f</span></code> plus
"                            flag <code><span class="identifier">uppercase</span></code>
"                          </div>
"                        </li>
"                      </ul>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/format/pull/42">42</a>
"                      Accept new argument types <code><span class="identifier">j</span></code>
"                      and <code><span class="identifier">z</span></code> from
"                      ISO C99 (parsed and ignored like all others).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/format/pull/44">44</a>
"                      Accept new argument types <code><span class="identifier">I</span></code>,
"                      <code><span class="identifier">I32</span></code>, <code><span class="identifier">I64</span></code>, and <code><span class="identifier">w</span></code>
"                      from Microsoft (parsed and ignored like all others).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/format/issues/33">33</a>
"                      Added a development tool called <code><span class="identifier">format_matrix</span></code>
"                      that exercises as many different combinations of format strings
"                      as possible and logs them to a file:
"                      <ul>
"                        <li>
"                          <div>
"                            helps prevent regressions in between boost releases
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            allows for comparison against <code><span class="identifier">snprintf</span></code>
"                          </div>
"                        </li>
"                      </ul>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/format/issues/36">36</a>
"                      Safely allow volatile arguments to be used with operator%
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac10/ticket/4636">4636</a>
"                      Explicit clamping provided to allow MSVC /RTCc to succeed
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac10/ticket/7477">7477</a>
"                      Fix compatibility with MSVC /Za
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac10/ticket/10324">10324</a>
"                      Const-correct cast issue resolved
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac10/ticket/11632">11632</a>
"                      Fix <code><span class="special">-</span><span class="identifier">fsanitize</span><span class="special">=</span><span class="identifier">undefined</span></code>
"                      issue in <code><span class="identifier">alt_sstream</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fusion/">Fusion</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fusion/pull/149">PR#149</a>
"                <code><span class="identifier">isspace</span><span class="special">(</span><span class="identifier">c</span><span class="special">)</span></code>
"                is not a macro in Dinkum clib for VxWorks, thanks to Brian Kuhl(@kuhlenough).
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fusion/pull/150">PR#150</a>
"                Remove circular preprocessor include, thanks to Gregor Jasny(@gjasny).
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fusion/pull/151">PR#151</a>
"                Change base of <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">tuple</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fusion/pull/153">PR#153</a>
"                Fixed compile error with <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">array</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fusion/pull/154">PR#154</a>
"                Fixed bugs nesting and copying on c++03.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements:
"                <ul>
"                  <li>
"                    <div>
"                      Add distance for geographic PointLike/AnyGeometry.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes:
"                <ul>
"                  <li>
"                    <div>
"                      Fixes in results of union/intersection/difference which could
"                      be incorrect in very complex cases
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixes in validity of union/intersection/difference/buffer
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixes in set and relational operations for non-cartesian coordinate
"                      systems.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/iterator/">Iterator</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">next</span><span class="special">()</span></code>/<code><span class="identifier">prior</span><span class="special">()</span></code>
"                functions now support user's iterators that don't specify nested
"                types such as <code><span class="identifier">iterator_category</span></code>,
"                <code><span class="identifier">difference_type</span></code>,
"                etc. and instead specialize <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iterator_traits</span></code>
"                to define those types. The compiler must support C++17-compatible
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iterator_traits</span></code> for this to work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed a bug in <code><span class="identifier">file_collector</span><span class="special">::</span><span class="identifier">scan_for_files</span></code>
"                      that could cause incorrectly named log files in the target
"                      directory after the user's application restart.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New Features:
"                <ul>
"                  <li>
"                    <div>
"                      Add Gauss and Gauss-Kronrod quadrature routines.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add double-exponential (tanh-sinh, exp-sinh and sinh-sinh)
"                      quadrature routines.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add Chebyshev polynomial evaluation, roots, integration, differentiation,
"                      and interpolation routines.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/index.html">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Made <code><span class="identifier">modify</span></code> and
"                <code><span class="identifier">modify_key</span></code> more robust
"                so that the modified element is erased if the modifier throws or
"                the rollback functor does not properly restore the element (full
"                discussion at ticket <a href="https://svn.boost.org/trac/boost/ticket/12542">#12542</a>). This is technically backwards
"                incompatible; for instance, the following code:
"              </div>
"<pre><span class="identifier">c</span><span class="special">.</span><span class="identifier">modify</span><span class="special">(</span><span class="identifier">c</span><span class="special">.</span><span class="identifier">begin</span><span class="special">(),[](</span><span class="keyword">auto</span><span class="special">&amp;){</span><span class="keyword">throw</span> <span class="number">0</span><span class="special">;});</span>
"</pre>
"              <div>
"                keeps the container <code><span class="identifier">c</span></code>
"                untouched in former versions of Boost whereas now <code><span class="identifier">c</span><span class="special">.</span><span class="identifier">begin</span><span class="special">()</span></code> is erased. Thanks to Jon Kalb for
"                raising the issue.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/optional/index.html">Optional</a>:</span>
"          <ul>
"            <li>
"              <div>
"                On newer compilers <code><span class="identifier">optional</span></code>
"                is now trivially-copyable for scalar <code><span class="identifier">T</span></code>s.
"                This uses a different storage (just <code><span class="identifier">T</span></code>
"                rather than <code><span class="identifier">aligned_storage</span></code>).
"                We require the compiler to support defaulted functions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed the implementation of <code><span class="keyword">operator</span><span class="special">==</span></code> to get rid of the <code><span class="special">-</span><span class="identifier">Wmaybe</span><span class="special">-</span><span class="identifier">uninitialized</span></code>
"                false-positive warning from GCC.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/poly_collection/">PolyCollection</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.PolyCollection has been backported to GCC 4.8 to 4.9 and Clang
"                3.3 to 3.6. The version of libstdc++-v3 shipped with GCC 4.8 (which
"                can also be used by Clang) has deficiencies that result in the following
"                limitations when using Boost.PolyCollection:
"                <ul>
"                  <li>
"                    <div>
"                      Stateful allocators are not properly supported.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Allocator-extended move construction decays to allocator-extended
"                      copy construction.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Copy construction crashes if an exception is thrown during
"                      element copying.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/predef/">Predef</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved Windows Universal Platform detection. (from James E. King,
"                III)
"              </div>
"            </li>
"            <li>
"              <div>
"                Add detection for CloudABI with cloudlibc. (from James E. King, III)
"              </div>
"            </li>
"            <li>
"              <div>
"                Various other bug fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/regex/">Regex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Numerous small fixes for security issues discovered by de-fuzzing.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Now works out-of-the-box on MinGW-w64.
"              </div>
"            </li>
"            <li>
"              <div>
"                Now works on MinGW (without <code><span class="special">-</span><span class="identifier">w64</span></code>) if <code><span class="identifier">libbacktrace</span></code>
"                is properly installed. See "MinGW specific notes" section
"                in documentation for more info.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/thread/">Thread</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Bugs Fixes
"                <ul>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12323">#12323</a>
"                      windows - boost/thread/win32/mfc_thread_init.hpp has wrong
"                      signature for _pRawDllMainOrig
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12730">#12730</a>
"                      windows - static threads library is incompatible with MSVC
"                      2017 RC
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12976">#12976</a>
"                      Boost Thread Executors documentation mistakes
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12949">#12949</a>
"                      using sleep_for in a thread context without including boost/thread/thread.hpp
"                      yields incorrect behaviour when BOOST_THREAD_HAS_CONDATTR_SET_CLOCK_MONOTONIC
"                      is defined
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/13019">#13019</a>
"                      ABI compatibility for BOOST_THREAD_PROVIDES_INTERRUPTIONS incomplete
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/13069">#13069</a>
"                      Boost unit test "sync_pq_multi_thread_p_lib.exe"
"                      hung in thread library
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/13163">#13163</a>
"                      boost::detail::heap_new does not have a variadic variant
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/13226">#13226</a>
"                      getpagesize() is deprecated since 199506L
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/132">#132</a>
"                      VS 2017.4 Preview deadlocks on Test 10964
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/133">#133</a>
"                      windows - Spurious timing test failures on windows
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/134">#134</a>
"                      VS 2017.4 Preview deadlock in sync_pq_multi_thread_p_lib.exe
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/135">#135</a>
"                      VS 2017.4 Preview test_scheduled_tp_p.exe deadlock
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/136">#136</a>
"                      VS 2017.4 Preview test_scheduler_p.exe deadlock
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/137">#137</a>
"                      VS 2017.4 Preview executor_ex.exe deadlock
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/143">#143</a>
"                      Failures on msvc-12.0
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/145">#145</a>
"                      Clang build error with BOOST_THREAD_ATTRIBUTE_MAY_ALIAS
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                New Experimental Feature
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/116">#116</a>
"                      [Proposal] Add APIs for deferred set_value/exception
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/utility/">Utility</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">next_prior</span><span class="special">.</span><span class="identifier">hpp</span></code> has been moved to Boost.Iterator.
"                No changes needed to the user's code.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/uuid/">Uuid</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/uuid/issues/26">26</a>
"                      Refactored <code><span class="identifier">name_generator</span></code>
"                      to support a configurable hash provider concept and provide
"                      an optional MD5 hash implementation per RFC-4122. This will
"                      make it easier to support whatever becomes the next standard
"                      hash algorithm.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/uuid/issues/34">34</a>
"                      Added RFC-4122 namespaces in <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">uuids</span><span class="special">::</span><span class="identifier">ns</span></code>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac10/ticket/8630">8630</a>
"                      <a href="https://svn.boost.org/trac10/ticket/11482">11482</a>
"                      <a href="https://svn.boost.org/trac10/ticket/12253">12253</a>
"                      Various deficiencies in <code><span class="identifier">string_generator</span></code>
"                      were resolved.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac10/ticket/10665">10665</a>
"                      <code><span class="identifier">name_generator</span><span class="special">::</span><span class="keyword">operator</span><span class="special">()</span></code> is now const, matching docs.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Detail headers were moved into the detail subdirectory. No
"                      changes needed to user's code, however you may get build warnings
"                      if you use the old header location.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">apply_visitor</span></code> now does perfect
"                forwarding of visitables <a href="https://svn.boost.org/trac/boost/ticket/6971">#6971</a>. Great thanks to Levon Tarakchyan
"                for implementing this feature.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_66_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.2, 4.7.3, 4.8.5, 4.9.4, 6.4.0, 7.1.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.2.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 9.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC, C++0x: 4.4.2
"              </div>
"            </li>
"            <li>
"              <div>
"                QCC, C++11: 4.7.3
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.2.1, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 9.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC, C++0x: 4.4.2
"              </div>
"            </li>
"            <li>
"              <div>
"                QCC, C++11: 4.7.3
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_66_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/beman_dawes.html">Beman Dawes</a>, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    </p>
"  </div>
"
-hash
"3288c0fc455e8ee3c342cd5e1963272c67262aca25b439907e992bb5a04f43f2
-id
"version_1_66_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: Beast, CallableTraits, Mp11. Updated Libraries: Asio, Atomic,
"      DateTime, Fiber, Format, Fusion, Geometry, Iterator, Log, Multi-index Containers,
"      Optional, PolyCollection, Predef, Stacktrace, Thread, Utility, Uuid, Variant.
"
-title_xml
"Version 1.66.0
)
(feed/history/boost_1_67_0.qbk:1.67.0 beta1
-description_xhtml
"
"
"
"  <div id="version_1_67_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/contract/">Contract</a>:</span>
"  Contract programming
"          for C++. All contract programming features are supported: Subcontracting,
"          class invariants, postconditions (with old and return values), preconditions,
"          customizable actions on assertion failure (e.g., terminate or throw), optional
"          compilation and checking of assertions, etc, from Lorenzo Caminiti.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/hof/">HOF</a>:</span>
"  Higher-order functions for C++,
"          from Paul Fultz II.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_67_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added missing const qualifier to <code><span class="identifier">basic_socket_acceptor</span><span class="special">::</span><span class="identifier">get_option</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Worked around a parsing error that occurs with some versions of gcc.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed broken code samples in tutorial.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added new experimental features. (Note that "experimental"
"                features may be changed without notice in subsequent releases.)
"                <ul>
"                  <li>
"                    <div>
"                      Added <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">detached</span></code>
"                      completion token.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">redirect_error</span></code>
"                      completion token.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">co_spawn</span></code>
"                      facility for integration with the coroutines technical specification.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Breaking change:</strong> Changed the result
"                of the <code><span class="special">(</span><span class="identifier">op</span><span class="special">)</span><span class="identifier">_and_test</span></code>
"                operations added in Boost 1.66 to the opposite - the functions now
"                return <code><span class="keyword">true</span></code> if the operation
"                result is non-zero. This is consistent with other <code><span class="identifier">test</span></code>
"                methods in Boost.Atomic and the C++ standard library. Users can define
"                <code><span class="identifier">BOOST_ATOMIC_DETAIL_HIGHLIGHT_OP_AND_TEST</span></code>
"                when compiling their code to emit warnings on every use of the changed
"                functions. This way users can locate the code that needs to be updated.
"                (<a href="https://github.com/boostorg/atomic/issues/11">#11</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Update for C++2a. On C++11 compilers that support scoped enums, the
"                <code><span class="identifier">memory_order</span></code> enumeration
"                is now scoped and contains constants with shorter names like <code><span class="identifier">acquire</span></code>, <code><span class="identifier">release</span></code>
"                or <code><span class="identifier">seq_cst</span></code> (i.e.
"                users can use <code><span class="identifier">memory_order</span><span class="special">::</span><span class="identifier">acquire</span></code>
"                instead of <code><span class="identifier">memory_order_acquire</span></code>).
"                The old constants are also provided for backward compatibility. (<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0439r0.html">P0439R0</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Update for C++2a. Added experimental support for atomic operations
"                on floating point types. In addition to general operations, <code><span class="identifier">add</span></code>, <code><span class="identifier">sub</span></code>,
"                <code><span class="identifier">negate</span></code> operations
"                and their <code><span class="identifier">fetch_</span><span class="special">(</span><span class="identifier">op</span><span class="special">)</span></code> and <code><span class="identifier">opaque_</span><span class="special">(</span><span class="identifier">op</span><span class="special">)</span></code> versions are supported. Lock-free
"                property can be tested with the new macros <code><span class="identifier">BOOST_ATOMIC_FLOAT</span><span class="special">/</span><span class="identifier">DOUBLE</span><span class="special">/</span><span class="identifier">LONG_DOUBLE_LOCK_FREE</span></code>.
"                The support for floating point types is optional and can be disabled
"                by defining <code><span class="identifier">BOOST_ATOMIC_NO_FLOATING_POINT</span></code>.
"                (<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0020r6.html">P0020R6</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added new experimental operations:
"                <ul>
"                  <li>
"                    <div>
"                      <code><span class="identifier">negate_and_test</span></code>
"                      and <code><span class="identifier">complement_and_test</span></code>
"                      which perform negation or bitwise complement and return <code><span class="keyword">true</span></code> if the result is not zero.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">add</span></code>, <code><span class="identifier">sub</span></code>, <code><span class="identifier">negate</span></code>,
"                      <code><span class="identifier">bitwise_and</span></code>,
"                      <code><span class="identifier">bitwise_or</span></code>,
"                      <code><span class="identifier">bitwise_xor</span></code>,
"                      <code><span class="identifier">bitwise_complement</span></code>
"                      operations which perform the operation and return its result.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                For generic <code><span class="identifier">atomic</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code> specialization, the default constructor
"                is now trivial if <code><span class="identifier">T</span></code>'s
"                default constructor is.
"              </div>
"            </li>
"            <li>
"              <div>
"                The internal implementation of <code><span class="identifier">atomic</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code> has been updated to avoid undefined
"                behavior that stems from signed integer overflows. As required by
"                the C++ standard, the library uses two's complement representation
"                of signed integers internally and accroding rules of overflow. Currently,
"                the library requires the native signed integer types to also use
"                two's complement representation (but no defined overflow semantics).
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved Clang support. In particular, fixed DCAS not being lock-free
"                and fixed possible incorrect code generated on 32-bit x86.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved MinGW support. For gcc versions up to 4.6, fixed compilation
"                of DCAS on x86.
"              </div>
"            </li>
"            <li>
"              <div>
"                In x86 PIE code, asm blocks now preserve <code><span class="identifier">ebx</span></code>
"                value.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This version fixes significant defects in <code><span class="identifier">websocket</span><span class="special">::</span><span class="identifier">stream</span></code>
"                which can lead to asserts or undefined behavior. Users are encouraged
"                to update to the latest Boost release.
"              </div>
"            </li>
"            <li>
"              <div>
"                For a complete list of changes, please view the official <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/container_hash/">ContainerHash</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Extracted from the functional module to break a dependency cycle.
"              </div>
"            </li>
"            <li>
"              <div>
"                Moved headers to new location to reflect name change, the old include
"                paths will still work.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">string_view</span></code>,
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">error_code</span></code>, <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">error_condition</span></code>
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">optional</span></code>, <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">variant</span></code>,
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">monostate</span></code> where available.
"              </div>
"            </li>
"            <li>
"              <div>
"                More detail in the <a href="/doc/html/hash/changes.html#hash.changes.boost_1_67_0">library
"                change log</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/62">#62</a>/<a href="https://github.com/boostorg/context/pull/64">PR#64</a>: fix i386/macho routines to correctly
"                return transfer_t in EAX/EDX
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/65">#65</a>: <code><span class="identifier">__sanitizer_finish_switch_fiber</span></code>
"                should be called directly after context switch
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/66">#66</a>: Clang on Windows : error: No best alternative for libs/context/build/asm_sources
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/73">#73</a>: fixing C2492 for execution_context (v1)
"              </div>
"            </li>
"            <li>
"              <div>
"                known bug: including all.hpp + &lt;context-impl&gt;ucontext/winfib
"                causes error 'forced_unwind: is not a member of boost::context::detail'
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/coroutine2/">Coroutine2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/coroutine2/issues/13">#13</a>: Pull coroutine does not rethrow an exception if
"                it is thrown on the first entry
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/date_time/">DateTime</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed various year 2038 (32-bit) issues (<a href="https://svn.boost.org/trac/boost/ticket/2818">#2818</a>) (<a href="https://svn.boost.org/trac/boost/ticket/2819">#2819</a>) (<a href="https://svn.boost.org/trac/boost/ticket/3487">#3487</a>)
"                (<a href="https://svn.boost.org/trac/boost/ticket/4543">#4543</a>) (<a href="https://svn.boost.org/trac/boost/ticket/8450">#8450</a>) (<a href="https://svn.boost.org/trac/boost/ticket/9158">#9158</a>) (<a href="https://svn.boost.org/trac/boost/ticket/9489">#9489</a>) (<a href="https://svn.boost.org/trac/boost/ticket/10570">#10570</a>) (<a href="https://svn.boost.org/trac/boost/ticket/12609">#12609</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a binary serialization regression introduced in 1.66.0 (<a href="https://github.com/boostorg/date_time/issues/56">#56</a>)
"                (<a href="https://github.com/boostorg/date_time/pull/58">PR#58</a>) (<a href="https://github.com/boostorg/date_time/pull/70">PR#70</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Updated the timezone database file (<a href="https://svn.boost.org/trac/boost/ticket/4430">#4430</a>) (<a href="https://svn.boost.org/trac/boost/ticket/10087">#10087</a>) (<a href="https://github.com/boostorg/date_time/pull/68">PR#68</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Enhanced <code><span class="identifier">from_iso_string</span></code>
"                so it can read output of <code><span class="identifier">to_iso_string</span></code>
"                for special values (<a href="https://svn.boost.org/trac/boost/ticket/1078">#1078</a>) (<a href="https://github.com/boostorg/date_time/pull/69">PR#69</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed maximum supported year from 10000 to 9999 to resolve various
"                issues (<a href="https://svn.boost.org/trac/boost/ticket/13159">#13159</a>) (<a href="https://svn.boost.org/trac/boost/ticket/12630">#12630</a>) (<a href="https://github.com/boostorg/date_time/pull/71">PR#71</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">date_time</span><span class="special">::</span><span class="identifier">period_parser</span><span class="special">::</span><span class="identifier">delimiter_strings</span></code> did nothing (<a href="https://svn.boost.org/trac/boost/ticket/11142">#11142</a>)
"                (<a href="https://github.com/boostorg/date_time/pull/63">PR#63</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Ensure special values are not automatically translated to integral
"                types (<a href="https://svn.boost.org/trac/boost/ticket/11168">#11168</a>) (<a href="https://github.com/boostorg/date_time/pull/64">PR#64</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">int_adapter</span><span class="special">::</span><span class="identifier">is_signed</span></code> should be const (<a href="https://svn.boost.org/trac/boost/ticket/12363">#12363</a>)
"                (<a href="https://github.com/boostorg/date_time/pull/60">PR#60</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">date_time</span><span class="special">::</span><span class="identifier">time_input_facet</span></code> throws when using
"                <code><span class="special">%</span><span class="identifier">j</span></code>
"                alone (<a href="https://svn.boost.org/trac/boost/ticket/12910">#12910</a>) (<a href="https://github.com/boostorg/date_time/pull/59">PR#59</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Time input facet is not able to parse <code><span class="special">%</span><span class="identifier">e</span></code> day (<a href="https://svn.boost.org/trac/boost/ticket/13194">#13194</a>) (<a href="https://github.com/boostorg/date_time/pull/54">PR#54</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved Github CI build environment for better project metrics and
"                quality (<a href="https://github.com/boostorg/date_time/pull/52">PR#52</a>) (<a href="https://github.com/boostorg/date_time/pull/72">PR#72</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed various compiler warnings (<a href="https://svn.boost.org/trac/boost/ticket/3606">#3606</a>) (<a href="https://svn.boost.org/trac/boost/ticket/9882">#9882</a>) (<a href="https://github.com/boostorg/date_time/pull/62">PR#62</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixes for calling functions on dirty <code><span class="identifier">GetLastError</span><span class="special">()</span></code> <a href="https://github.com/boostorg/dll/issues/16">#16</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/128">#128</a>: Assertion "! ctx-&gt;ready_is_linked()" when
"                using condition_variable::wait_for
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/132">#132</a>: fatal error: 'stdexception' file not found
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/141">#141</a>: boost::fibers::async problem
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/146">#146</a>: remove unecessary lock of remote-ready-queue spinlock
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/153">#153</a>: docu: replace set_ready() by schedule()
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/154">#154</a>: Document iterators on channels
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/155">#155</a>: this_fiber is wrongly documented as being a member
"                of boost::fibers
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/156">#156</a>: Many examples are using their own barrier.hpp
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/158">#158</a>: add BOOST_FIBERS_DECL to work_stealing class
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/162">#162</a>: remove use-coutner increment for timed wait ops
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/166">#166</a>: remove assertion for wait_is_linked() in schedule()
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/167">#167</a>: call shared_state::owner_destroyed() only if future
"                was created from
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/168">#168</a>: fiber/doc/installing.qbk not not up to date
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix static initialization issue that caused a crash if path operations
"                were used before main() (<a href="https://github.com/boostorg/filesystem/pull/62">PR#62</a>, <a href="https://github.com/boostorg/filesystem/pull/43">PR#43</a>, <a href="https://github.com/boostorg/filesystem/pull/50">PR#50</a>,
"                <a href="https://github.com/boostorg/filesystem/pull/59">PR#59</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fusion/">Fusion</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Switch to SFINAE in template parameters on <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">map</span></code>
"                to fix compile error on newer MSVC 2017. (<a href="https://github.com/boostorg/fusion/pull/164">PR#164</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix for compilers not compatible with CWG defect 945 on <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">vector</span></code>. (<a href="https://github.com/boostorg/fusion/pull/166">PR#166</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added limits precheck on sequence converter to make error message
"                clearer. (<a href="https://github.com/boostorg/fusion/pull/168">PR#168</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Allow incomplete types in <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">tag_of</span></code>
"                and <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">is_native_fusion_sequence</span></code>. Note
"                that this changes no behaviour from previous release, but compliant
"                to TypeTraits's change. (<a href="https://github.com/boostorg/fusion/pull/171">PR#171</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/locale/">Locale</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support of <code><span class="identifier">unique_ptr</span></code>
"                interface in addition to C++2003 <code><span class="identifier">auto_ptr</span></code>
"                - in order to support C++2017, now you can use <code><span class="identifier">BOOST_LOCALE_HIDE_AUTO_PTR</span></code>
"                definiton to remove <code><span class="identifier">auto_ptr</span></code>
"                from the interfaces and prevent deprecated watnings.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed test problem with ICU &gt;60.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix of solaris build
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed wired FreeBSD/clang issue on optimized build. Probably compiler
"                workaround
"              </div>
"            </li>
"            <li>
"              <div>
"                Added workaround for failing MSVC tests due to 932 codepage codecvt
"                issue
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bugs 6851, 12572, 12453
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed missing throw in case of failure in <code><span class="identifier">icu</span><span class="special">/</span><span class="identifier">date_time</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed build agains Boost.Thread v4
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed Year of week instead of year ICU backend formatting
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed formatting test for ICU 56.1 and above
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved compatibility with C++17: use <code><span class="identifier">allocator_traits</span></code>
"                to work with allocators instead of directly accessing its members.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved compatibility with gcc 7 and later by updating library ABI
"                namespace definition.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added documentation for the "Append" config file parameter
"                for "TextFile" sinks. The parameter was supported previously,
"                only the documentation was missing.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/index.html">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Add naive Monte Carlo integration support.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add Chebyshev interpolation routines.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/index.html">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Elements with overloaded <code><span class="keyword">operator</span><span class="special">&amp;</span></code> are now fully accepted (ticket
"                <a href="https://svn.boost.org/trac/boost/ticket/13307">#13307</a>). Thanks to Daniel Frey for his updating <a href="/libs/utility/operators.htm#deref">Boost.Operators</a>
"                to help fix this issue.
"              </div>
"            </li>
"            <li>
"              <div>
"                Avoided usage of <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">allocator</span></code>
"                members deprecated in C++17. Contributed by Daniela Engert.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multiprecision/index.html">Multiprecision</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Breaking Change:</strong> When converting
"                a multiprecision integer to a narrower type, if the value is too
"                large (or negative) to fit in the smaller type, then the result is
"                either the maximum (or minimum) value of the target type. This was
"                always the intended behaviour, but was somewhat haphazardly enforced
"                before. If you really do want just the low order N bits of a value,
"                then you will need to mask these out prior to the case, for example:
"                <code><span class="keyword">static_cast</span><span class="special">&lt;</span><span class="keyword">unsigned</span><span class="special">&gt;(~</span><span class="keyword">static_cast</span><span class="special">&lt;</span><span class="keyword">unsigned</span><span class="special">&gt;(</span><span class="number">0</span><span class="special">)</span> <span class="special">&amp;</span> <span class="identifier">my_value</span><span class="special">)</span></code>. Note that technically (to avoid
"                undefined behaviour) you should do the same thing with built in integer
"                types too. See <a href="https://svn.boost.org/trac/boost/ticket/13109">#13109</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in conversion of decimal to rational types (zero needs special
"                handling), see <a href="https://svn.boost.org/trac/boost/ticket/13148">#13148</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix conversion from cpp_bin_float to a wider built in integer type,
"                see <a href="https://svn.boost.org/trac/boost/ticket/13301">#13301</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve performance heurists used in cpp_bin_float exp function.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in floor/ceil and cpp_bin_float when the exponent type is
"                wider than an int, see <a href="https://svn.boost.org/trac/boost/ticket/13264">#13264</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Disable explicit conversion operator when the target type is already
"                constructible from this type, see <a href="https://github.com/boostorg/multiprecision/issues/30">#30</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix support for changes new to MPIR-3.0, see <a href="https://svn.boost.org/trac/boost/ticket/13124">#13124</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/optional/index.html">Optional</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed issue <a href="https://github.com/boostorg/optional/issues/46">#46</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="special">-</span><span class="identifier">Wzero</span><span class="special">-</span><span class="identifier">as</span><span class="special">-</span><span class="identifier">null</span><span class="special">-</span><span class="identifier">pointer</span><span class="special">-</span><span class="identifier">constant</span></code>
"                warnings.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/phoenix/">Phoenix</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Correct documentation and example code. (<a href="https://svn.boost.org/trac/boost/ticket/8187">#8187</a>, <a href="https://github.com/boostorg/phoenix/pull/56">PR#56</a>,
"                <a href="https://github.com/boostorg/phoenix/pull/57">PR#57</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bug with initializing phoenix lazy from array types in C++11.
"                (<a href="https://svn.boost.org/trac/boost/ticket/12733">#12733</a>, <a href="https://github.com/boostorg/phoenix/pull/58">PR#58</a>, <a href="https://github.com/boostorg/phoenix/pull/61">PR#61</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Use proto subscript and assignment overload operators buildins to
"                fix compile error with some lambda experssions on recent MSVC. (<a href="https://github.com/boostorg/phoenix/issues/62">#62</a>,
"                <a href="https://github.com/boostorg/phoenix/pull/64">PR#64</a>, <a href="https://github.com/boostorg/phoenix/pull/66">PR#66</a>, <a href="https://github.com/boostorg/phoenix/pull/67">PR#67</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Remove use of deprecated <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iteratror</span></code>.
"                Thanks to Daniela Engert. (<a href="https://github.com/boostorg/phoenix/pull/59">PR#59</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/poly_collection/">PolyCollection</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Maintenance fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/python/">Python</a>:</span>
"          <ul>
"            <li>
"              <div>
"                The library name now includes the version suffix of the Python version
"                used to compile it. For example, a variant compiled with Python 2.7
"                will produce library names <code><span class="identifier">boost_python27</span></code>
"                and <code><span class="identifier">boost_numpy27</span></code>,
"                etc.. Combined with a related fix in Boost.Build, this means that
"                it is now possible to build variants for multiple Python versions
"                in a single build process.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/spirit/">Spirit</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Spirit.X3:
"                <ul>
"                  <li>
"                    <div>
"                      <strong>Breaking change:</strong> Removed
"                      <code><span class="identifier">with_context</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/239">#239</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added noexcept to <code><span class="identifier">x3</span><span class="special">::</span><span class="identifier">variant</span></code>
"                      and <code><span class="identifier">forward_ast</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/241">#241</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      CR+LF lines wrongly counted in <code><span class="identifier">error_handler</span><span class="special">::</span><span class="identifier">position</span><span class="special">()</span></code> (<a href="https://github.com/boostorg/spirit/issues/248">#248</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">unused_type</span></code>
"                      attribute case in <code><span class="identifier">parse_into_container</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/266">#266</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed parsing into associative containers (<a href="https://github.com/boostorg/spirit/issues/289">#289</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed overflow problem in <code><span class="identifier">uint_parser</span><span class="special">&lt;</span><span class="keyword">signed</span>
"                      <span class="identifier">T</span><span class="special">&gt;</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/297">#297</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added VS2015 Update 3 support by using workarounds (<a href="https://github.com/boostorg/spirit/issues/308">#308</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed include guard names collision with Qi (<a href="https://github.com/boostorg/spirit/issues/313">#313</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added parsing into range (<a href="https://github.com/boostorg/spirit/issues/316">#316</a>) (<a href="https://svn.boost.org/trac/boost/ticket/12928">#12928</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Changed iterator concept static assert from <code><span class="identifier">ForwardIterator</span></code>
"                      to <code><span class="identifier">ReadableIteratorConcept</span></code>
"                      &amp;&amp; <code><span class="identifier">ForwardTraversalConcept</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/320">#320</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Reenabled <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">map</span></code>
"                      support (<a href="https://github.com/boostorg/spirit/issues/330">#330</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">string</span><span class="special">(</span><span class="string">"..."</span><span class="special">)</span></code> and <code><span class="identifier">attr</span><span class="special">(</span><span class="string">"..."</span><span class="special">)</span></code> to single item sequence (<a href="https://github.com/boostorg/spirit/issues/337">#337</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Dereference a single item view instead of unwrapping sequence
"                      (<a href="https://github.com/boostorg/spirit/issues/340">#340</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Prevent <code><span class="identifier">parse_nan</span></code>
"                      from dereferencing out of range iterator (<a href="https://github.com/boostorg/spirit/issues/351">#351</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Use traits to test if container is empty (<a href="https://github.com/boostorg/spirit/issues/355">#355</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit V2
"                <ul>
"                  <li>
"                    <div>
"                      Fixed keyword directives compilation on C++11 (<a href="https://github.com/boostorg/spirit/issues/256">#256</a>)
"                      (<a href="https://svn.boost.org/trac/boost/ticket/11493">#11493</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed subrules compilation (<a href="https://github.com/boostorg/spirit/issues/279">#279</a>) (<a href="https://github.com/boostorg/spirit/issues/259">#259</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed subrules use after scope bug (<a href="https://github.com/boostorg/spirit/issues/284">#284</a>) (<a href="https://svn.boost.org/trac/boost/ticket/5270">#5270</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed undefined behavior in sequential or operator. Underlying
"                      parsers order of execution was dependent on compiler (<a href="https://github.com/boostorg/spirit/issues/310">#310</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Spirit was accidentally relaying on <code><span class="identifier">types</span></code>
"                      typedef of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">optional</span></code>.
"                      The typedef was removed in the new optional implementation
"                      (<a href="https://github.com/boostorg/spirit/issues/271">#271</a>) (<a href="https://svn.boost.org/trac/boost/ticket/12349">#12349</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed problems with <code><span class="identifier">BOOST_SPIRIT_NO_PREDEFINED_TERMINALS</span></code>
"                      (<code><span class="identifier">attr_cast</span></code>,
"                      <code><span class="identifier">confix</span></code>, <code><span class="identifier">distinct</span></code>, <code><span class="identifier">keywords</span></code>,
"                      and <code><span class="identifier">flush_multi_pass</span></code>)
"                      (<a href="https://github.com/boostorg/spirit/issues/314">#314</a>) (<a href="https://svn.boost.org/trac/boost/ticket/13311">#13311</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added missing copy assignment operator to <code><span class="identifier">hold_any</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/361">#361</a>) (<a href="https://svn.boost.org/trac/boost/ticket/8268">#8268</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit.Qi:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed alternate operator (<a href="https://github.com/boostorg/spirit/issues/201">#201</a>) (<a href="https://github.com/boostorg/spirit/issues/271">#271</a>) (<a href="https://svn.boost.org/trac/boost/ticket/12349">#12349</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed signed integer overflow in real parser (<a href="https://github.com/boostorg/spirit/issues/245">#245</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed overflow problem in <code><span class="identifier">uint_parser</span><span class="special">&lt;</span><span class="keyword">signed</span>
"                      <span class="identifier">T</span><span class="special">&gt;</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/297">#297</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">get_current_line</span></code>,
"                      <code><span class="identifier">get_line_start</span></code>,
"                      and added <code><span class="identifier">get_line_end</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/304">#304</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Permutations parser were always initializing optionals (<a href="https://github.com/boostorg/spirit/issues/319">#319</a>)
"                      (<a href="https://svn.boost.org/trac/boost/ticket/12473">#12473</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Changed iterator concept static assert from <code><span class="identifier">ForwardIterator</span></code>
"                      to <code><span class="identifier">ReadableIteratorConcept</span></code>
"                      &amp;&amp; <code><span class="identifier">ForwardTraversalConcept</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/320">#320</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added assertations to real parsers to ensure that the <code><span class="identifier">parse_frac_n</span></code> from user defined
"                      real policy does not return negative values and also to prevent
"                      static analyzers false-positives (<a href="https://github.com/boostorg/spirit/issues/358">#358</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit.Karma:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed alternate operator (<a href="https://github.com/boostorg/spirit/issues/271">#271</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">no_buffering_policy</span></code>
"                      missing copy constructor (<a href="https://github.com/boostorg/spirit/issues/261">#261</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      The <code><span class="identifier">ostream_iterator</span></code>
"                      was inheriting <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iterator</span></code>
"                      which is deprecated in C++17 (<a href="https://github.com/boostorg/spirit/issues/345">#345</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit.Lex:
"                <ul>
"                  <li>
"                    <div>
"                      Store id as promoted type to allow out-of-enum values (<a href="https://github.com/boostorg/spirit/issues/247">#247</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed C2001 'newline in constant' warning in generated lexers
"                      (<a href="https://github.com/boostorg/spirit/issues/324">#324</a>) (<a href="https://svn.boost.org/trac/boost/ticket/11540">#11540</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit.Classic:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">remove_reference</span></code>
"                      usage without a namespace in Phoenix (<a href="https://github.com/boostorg/spirit/issues/274">#274</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">complex</span></code> usage without the
"                      include (<a href="https://github.com/boostorg/spirit/issues/273">#273</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed compilation of <code><span class="identifier">match</span><span class="special">&lt;</span><span class="identifier">T</span>
"                      <span class="special">&amp;&gt;</span></code> (<a href="https://github.com/boostorg/spirit/issues/275">#275</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed compilation with <code><span class="identifier">BOOST_DISABLE_THREADS</span></code>
"                      defined (<a href="https://github.com/boostorg/spirit/issues/323">#323</a>) (<a href="https://svn.boost.org/trac/boost/ticket/12639">#12639</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Increment scanner through iterator policy (<a href="https://github.com/boostorg/spirit/issues/336">#336</a>) (<a href="https://svn.boost.org/trac/boost/ticket/7371">#7371</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Removed deprecated in C++17 <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iterator</span></code>
"                      usage (<a href="https://github.com/boostorg/spirit/issues/345">#345</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Async safe dumping into files on Windows OS was causing hangs on
"                some platforms and now is disabled <a href="https://github.com/boostorg/stacktrace/issues/33">#33</a>. Users are encouraged
"                to update to the latest Boost release.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/libs/container_hash/">ContainerHash</a> library
"                is now used to reduce dependencies.
"              </div>
"            </li>
"            <li>
"              <div>
"                Minor fixes (including <a href="https://github.com/boostorg/stacktrace/issues/31">#31</a>, <a href="https://github.com/boostorg/stacktrace/issues/38">#38</a>, <a href="https://github.com/boostorg/stacktrace/issues/39">#39</a>,
"                <a href="https://github.com/boostorg/stacktrace/issues/40">#40</a>, <a href="https://github.com/boostorg/stacktrace/issues/42">#42</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/test/">Test</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.test v3.7 see the <a href="/doc/libs/1_67_0/libs/test/doc/html/boost_test/change_log.html">Changes
"                log</a> for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                Breaking changes
"                <ul>
"                  <li>
"                    <div>
"                      Adding test cases with the same name to the same test suite
"                      is now reported as an error. See the changes log for more details.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                New feature:
"                <ul>
"                  <li>
"                    <div>
"                      Colour output on by default and available on Windows,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Improved and clearer command line help
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">BOOST_AUTO_TEST_CASE_TEMPLATE</span></code>
"                      now accepts a sequence of types in an <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">tuple</span></code>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes and pull requests:
"                <ul>
"                  <li>
"                    <div>
"                      Trac tickets: <a href="https://svn.boost.org/trac/boost/ticket/12092">#12092</a>, <a href="https://svn.boost.org/trac/boost/ticket/12596">#12596</a>, <a href="https://svn.boost.org/trac/boost/ticket/12597">#12597</a>, <a href="https://svn.boost.org/trac/boost/ticket/12969">#12969</a>,
"                      <a href="https://svn.boost.org/trac/boost/ticket/13058">#13058</a>, <a href="https://svn.boost.org/trac/boost/ticket/13149">#13149</a>, <a href="https://svn.boost.org/trac/boost/ticket/13170">#13170</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Trac tickets: <a href="https://svn.boost.org/trac/boost/ticket/13181">#13181</a>, <a href="https://svn.boost.org/trac/boost/ticket/13371">#13371</a>, <a href="https://svn.boost.org/trac/boost/ticket/13387">#13387</a>, <a href="https://svn.boost.org/trac/boost/ticket/13398">#13398</a>,
"                      <a href="https://svn.boost.org/trac/boost/ticket/13407">#13407</a>, <a href="https://svn.boost.org/trac/boost/ticket/13435">#13435</a>, <a href="https://svn.boost.org/trac/boost/ticket/13443">#13443</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Pull requests: <a href="https://github.com/boostorg/test/issues/112">#112</a>, <a href="https://github.com/boostorg/test/issues/118">#118</a>, <a href="https://github.com/boostorg/test/issues/118">#118</a>, <a href="https://github.com/boostorg/test/issues/121">#121</a>,
"                      <a href="https://github.com/boostorg/test/issues/122">#122</a>, <a href="https://github.com/boostorg/test/issues/125">#125</a>, <a href="https://github.com/boostorg/test/issues/127">#127</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_index/">TypeIndex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="/libs/container_hash/">ContainerHash</a> library
"                is now used to reduce dependencies.
"              </div>
"            </li>
"            <li>
"              <div>
"                Minor fixes (including <a href="https://github.com/boostorg/type_index/issues/17">#17</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_traits/">TypeTraits</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added new traits <code><span class="identifier">detected</span></code>,
"                <code><span class="identifier">detected_or</span></code>, <code><span class="identifier">is_detected</span></code>, <code><span class="identifier">is_detected_convertible</span></code>,
"                <code><span class="identifier">is_detected_exact</span></code>,
"                <code><span class="identifier">is_complete</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added greatly improved code for detecting binary operators.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add assertions for completeness to traits which require complete
"                types as arguments: this prevents various traits from giving eroneous
"                results from incomplete types.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix minor issue with mpl compatibility, see <a href="https://svn.boost.org/trac/boost/ticket/12212">#12212</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add macro to indicate when <code><span class="identifier">is_constructible</span></code>
"                is fully implemented, see <a href="https://svn.boost.org/trac/boost/ticket/12003">#12003</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Update <code><span class="identifier">is_function</span></code>
"                and <code><span class="identifier">is_member_function_pointer</span></code>
"                to work correctly with C++17 noexcept specifications.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add workaround for <code><span class="identifier">is_default_constructible</span></code>
"                and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">pair</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added fallback for <code><span class="identifier">is_nothrow_swappable</span></code>
"                on pre-C++11 compilers.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/utility/">Utility</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Breaking change:</strong> <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">utility</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code>
"                header no longer includes <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">next</span></code>
"                and <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">prior</span></code> as they have been moved to
"                the iterator module. Instead include <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">next_prior</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code>.
"                Other uses of <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">utility</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code> are discouraged, it's better
"                to use the header for the specific functionality instead.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/unordered/">Unordered</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Template deduction guides.
"              </div>
"            </li>
"            <li>
"              <div>
"                Standard conforming <code><span class="keyword">noexcept</span></code>
"                specifications for <code><span class="identifier">swap</span></code>,
"                <code><span class="keyword">operator</span><span class="special">=</span></code>
"                and node handles.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add <code><span class="identifier">element_type</span></code>
"                to iterators, so that <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">pointer_traits</span></code>
"                will work.
"              </div>
"            </li>
"            <li>
"              <div>
"                Support <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">piecewise_construct</span></code> on recent Visual
"                C++ and Dinkumware libraries.
"              </div>
"            </li>
"            <li>
"              <div>
"                Use <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iterator_traits</span></code> rather than the
"                boost iterator traits in order to remove dependency on Boost.Iterator.
"              </div>
"            </li>
"            <li>
"              <div>
"                Iterators no longer inherit from <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iterator</span></code>,
"                as it's deprecated (<a href="https://github.com/boostorg/unordered/pull/7">PR#7</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                More detail in the <a href="/doc/html/unordered/changes.html#unordered.changes.boost_1_67_0">library
"                change log</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/units/">Units</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix sqrt for scaled units <a href="https://svn.boost.org/trac/boost/ticket/10270">#10270</a> <a href="https://github.com/boostorg/units/issues/27">#27</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Add constexpr support <a href="https://github.com/boostorg/units/issues/22">#22</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                minor documentation fixes
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/uuid/">Uuid</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Breaking change:</strong> random_generator
"                is no longer copyable (<a href="https://github.com/boostorg/uuid/issues/61">#61</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Optimized random_generator to use OS-provided entropy directly (<a href="https://github.com/boostorg/uuid/pull/53">PR#53</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Provide <code><span class="identifier">random_generator_mt19937</span></code>
"                for bulk UUID generation
"              </div>
"            </li>
"            <li>
"              <div>
"                Handle entropy acquisition errors instead of ignoring them
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for Windows UWP (<a href="https://github.com/boostorg/uuid/issues/24">#24</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for CloudABI
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Substitute function arguments on compilers with variadic templates
"                support and do not generate substitution metafunctions using preprocessor
"                <a href="https://github.com/boostorg/variant/issues/42">#42</a>, <a href="https://github.com/boostorg/variant/issues/46">#46</a>. Many thanks to Nikita Kniazev for providing
"                an initial fix.
"              </div>
"            </li>
"            <li>
"              <div>
"                Perfect forwarding for passing visitor in apply_visitor <a href="https://github.com/boostorg/variant/issues/40">#40</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/13288">#13288</a>. Many thanks to Paweł Dac!
"              </div>
"            </li>
"            <li>
"              <div>
"                Minor fixes (including <a href="https://github.com/boostorg/variant/issues/41">#41</a>, <a href="https://github.com/boostorg/variant/issues/44">#44</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_67_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 9.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.9.2, 5.4.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 9.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_67_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/beman_dawes.html">Beman Dawes</a>, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    </p>
"  </div>
"
-hash
"808e772df89b5b17f8bd47a5f32143a7d97d29142973ea04a707abdaebac1c79
-id
"version_1_67_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: Contract, HOF. Updated Libraries: Asio, Atomic, Beast, Container
"      Hash, Context, Coroutine2, DateTime, DLL, Fiber, Filesystem, Fusion, Locale,
"      Log, Math, Multi-index Containers, Multiprecision, Optional, Phoenix, PolyCollection,
"      Python, Spirit, Stacktrace, Test, TypeIndex, TypeTraits, Unordered, Units,
"      Uuid, Utility, Variant.
"
-title_xml
"Version 1.67.0
)
(feed/history/boost_1_68_0.qbk:1.68.0 beta1
-description_xhtml
"
"
"
"  <div id="version_1_68_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/yap/">YAP</a>:</span> An expression template library
"          for C++14 and later, from Zach Laine.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_68_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This version fixes a missing executor work guard in all composed
"                operations used in the implementation. Users who are experiencing
"                crashes related to asynchronous completion handlers are encouraged
"                to upgrade.
"              </div>
"            </li>
"            <li>
"              <div>
"                For a complete list of changes, please view the official <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/170">#170</a>: buffered_channel::try_push has incorrect documentation
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/172: WIN64">#172: WIN64</a>: 'invalid conversion from 'HANDLE' to
"                'std::thread::native_handle_type' errors for builds using mingw-w64
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/175">#175</a>: throw exception "Operation not permitted"
"              </div>
"            </li>
"            <li>
"              <div>
"                NUMA support moved to extra library (fiber-numa); enabled via property
"                numa (numa=on)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/coroutine2/">Coroutine2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/coroutine2/issues/14">#14</a>: crash while stack unwinding
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/coroutine2/issues/18">#18</a>: some guidance on why to use coroutine2
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/coroutine2/issues/20">#20</a>: failes to compile test in due to the error C2039
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/coroutine2/issues/22">#22</a>: undefined behaviour documentation
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/78">#78</a>: Linker error with <code><span class="identifier">context</span><span class="special">-</span><span class="identifier">impl</span><span class="special">=</span><span class="identifier">ucontext</span></code>:
"                multiple definition of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">context</span><span class="special">::</span><span class="identifier">detail</span><span class="special">::</span><span class="identifier">current_rec</span></code>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/gil/">GIL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                The I/O extensions have been entirely rewritten.
"              </div>
"            </li>
"            <li>
"              <div>
"                The library now requires a C++11-compliant compiler.
"              </div>
"            </li>
"            <li>
"              <div>
"                Documentation has been reformatted and updated.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/graph/">Graph</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Conditionally replace deprecated/removed C++98 <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">bind1st</span></code>
"                by <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">bind</span></code>, <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">auto_ptr</span></code>
"                by <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">unique_ptr</span></code>, and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">random_shuffle</span></code>
"                by <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">shuffle</span></code>. (<a href="https://github.com/boostorg/graph/pull/89">PR#89</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix compiler error with release builds on VS2015 (<a href="https://github.com/boostorg/graph/pull/84">PR#84</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix the Stanford GraphBase examples (<a href="https://github.com/boostorg/graph/pull/87">PR#87</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix friend declarations for iterator_core_access (<a href="https://github.com/boostorg/graph/pull/103">PR#103</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Add missing <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">iterator</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code> include (<a href="https://github.com/boostorg/graph/pull/104">PR#104</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Avoid an unused variable warning (<a href="https://github.com/boostorg/graph/pull/90">PR#90</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix some typos in documentation (<a href="https://github.com/boostorg/graph/pull/88">PR#88</a>, <a href="https://github.com/boostorg/graph/pull/98">PR#98</a>, <a href="https://github.com/boostorg/graph/pull/102">PR#102</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix some issues in tests and examples (<a href="https://github.com/boostorg/graph/pull/85">PR#85</a>, <a href="https://github.com/boostorg/graph/pull/105">PR#105</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/index.html">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Containers of moveable but non-copyable elements can now be serialized
"                (ticket <a href="https://svn.boost.org/trac/boost/ticket/13478">#13478</a>). Thanks to Sébastien Paris for the report.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">multi_index_container</span></code>'s
"                default constructor is no longer <code><span class="keyword">explicit</span></code>
"                (ticket <a href="https://svn.boost.org/trac/boost/ticket/13518">#13518</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/optional/">Optional</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added member function <code><span class="identifier">has_value</span><span class="special">()</span></code> for compatibility with <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">optional</span></code> (<a href="https://github.com/boostorg/optional/issues/52">issue
"                #52</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added member function <code><span class="identifier">map</span><span class="special">()</span></code> for transforming <code><span class="identifier">optional</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code>
"                into <code><span class="identifier">optional</span><span class="special">&lt;</span><span class="identifier">U</span><span class="special">&gt;</span></code>
"                using a function of type <code><span class="identifier">T</span>
"                <span class="special">-&gt;</span> <span class="identifier">U</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added member function <code><span class="identifier">flat_map</span><span class="special">()</span></code> for transforming <code><span class="identifier">optional</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code>
"                into <code><span class="identifier">optional</span><span class="special">&lt;</span><span class="identifier">U</span><span class="special">&gt;</span></code>
"                using a function of type <code><span class="identifier">T</span>
"                <span class="special">-&gt;</span> <span class="identifier">optonal</span><span class="special">&lt;</span><span class="identifier">U</span><span class="special">&gt;</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/program_options/">Program Options</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for multiple long names for an option, thanks to Eyal Rozenberg
"                (<a href="https://github.com/boostorg/program_options/pull/53">PR#53</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for arbitrary precision complex valued quadrature and hence
"                contour integration
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve performance of polynomial addition
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multiprecision">Multiprecision</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for multiprecision complex numbers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/python/">Python</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Bug fixes to correct autolink support (Windows) (<a href="https://github.com/boostorg/python/issues/193">#193</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/rational/">Rational</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed undefined behavior in normalize() (<a href="https://github.com/boostorg/rational/pull/19">PR#19</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added pow method (<a href="https://github.com/boostorg/rational/pull/21">PR#21</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/uuid/">Uuid</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Breaking change:</strong> sha1 detail namespace
"                header redirection for backwards compatibility was removed (<a href="https://github.com/boostorg/uuid/pull/69">PR#69</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for std::hash (<a href="https://github.com/boostorg/uuid/pull/67">PR#67</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for move semantics on random generators (<a href="https://github.com/boostorg/uuid/pull/74">PR#74</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Properly handle EINTR when acquiring entropy (<a href="https://github.com/boostorg/uuid/pull/74">PR#74</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Use getrandom(2) instead of getentropy(3) on linux (<a href="https://github.com/boostorg/uuid/pull/75">PR#75</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/predef/">Predef</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Add support for __ARM_ARCH macro. (from Tim Blechmann)
"              </div>
"            </li>
"            <li>
"              <div>
"                Add detection for PTX architecture. (from Benjamin Worpitz)
"              </div>
"            </li>
"            <li>
"              <div>
"                Add nvcc compiler detection. (from Benjamin Worpitz)
"              </div>
"            </li>
"            <li>
"              <div>
"                Add support for detecting CUDA. (from Benjamin Worpitz)
"              </div>
"            </li>
"            <li>
"              <div>
"                Remove reference to obsolete BOOST_ARCH_AMD64. (from Peter Kolbus)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_68_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: 9.0.0, 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 9.0.0, 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 9.0.0, 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 9.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: 9.0.0, 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 9.0.0, 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 9.0.0, 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 9.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_68_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <em>TODO</em>
"    </p>
"  </div>
"
-hash
"2ba287bf70cafe6d8b8f9fdab228bb0c42678a18319eebf0e563bfa0befa1646
-id
"version_1_68_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: Updated Libraries:
"
-title_xml
"Version 1.68.0
)
(feed/history/boost_1_69_0.qbk:1.69.0 beta1
-description_xhtml
"
"
"
"  <div id="version_1_69_0.notes_for_non_windows_users">
"    <h3><span class="link">Notes for non-Windows
"    users</span></h3>
"    <p>
"      Boost build system now supports visibilities and builds shared libraries with
"      hidden visibility by default. As a result Boost shared libraries become smaller,
"      load faster and have less chances to get a symbol collision.
"    </p>
"    <p>
"      See <a href="/build/manual/develop/index.html#bbv2.builtin.features.visibility">Boost.Build
"      visibility and local-visibility</a> for more info.
"    </p>
"    <p>
"      To disable that feature use <code><span class="special">./</span><span class="identifier">b2</span> <span class="identifier">visibility</span><span class="special">=</span><span class="identifier">global</span></code> like
"      command during build.
"    </p>
"  </div>
"  <div id="version_1_69_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <em>TODO</em>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_69_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/any/">Any</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed issue with visibility. Now <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">any</span></code>
"                variables constructed in one shared library with hidden visibility
"                could be used and destroyed in other shared library with hidden visibility.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance: dropped some dependencies on other Boost libraries,
"                fixes for docs.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This version fixes some issues in the examples, and provides a new
"                experimental socket which supports built-in timeouts on asynchronous
"                operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                New CppCon 2018 <a href="https://www.boost.org/doc/libs/master/libs/beast/doc/html/beast/examples.html#beast.examples.cppcon_2018">websocket
"                chat example</a> and <a href="https://www.youtube.com/watch?v=7FQwAjELMek">presentation
"                video</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                For a complete list of changes, please view the official <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/circular_buffer/">CircularBuffer</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Use the empty base optimization for storing allocators that are empty
"                and not final (Glen Fernandes).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">empty_value</span></code>,
"                for library authors to conveniently leverage the Empty Base Optimization
"                to store objects of potentially empty types (Glen Fernandes). This
"                facility is now used in Boost.Beast, Boost.CircularBuffer, Boost.MultiArray,
"                and more.
"              </div>
"            </li>
"            <li>
"              <div>
"                Implemented <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">quick_exit</span></code>
"                to provide the C++11 standard library facility <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">quick_exit</span></code>
"                functionality (Peter Dimov).
"              </div>
"            </li>
"            <li>
"              <div>
"                Reduced the number of statics in Lightweight Test, and employ lighter
"                abort behavior for MSVC compilers upon failure to call <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">report_errors</span></code> (Glen Fernandes).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Resolved link issues with the smart library <a href="https://github.com/boostorg/dll/issues/20">#20</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance: fixes for docs and tests.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/181">#181</a>: unbuffered_channel push not return
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/182">#182</a>: Remove UTF-8 BOM at begining of the file
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/183">#183</a>: Fix boost-install use; should only be issued once
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Don't use <code><span class="identifier">readdir_r</span></code>
"                on Linux and Android since the <code><span class="identifier">readdir</span></code>
"                function is already thread-safe. (<a href="https://github.com/boostorg/filesystem/pull/68">PR#68</a>, <a href="https://github.com/boostorg/filesystem/issues/72">#72</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed crashes in <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">filesystem</span><span class="special">::</span><span class="identifier">copy</span></code>
"                due to undefined behavior in the implementation. (<a href="https://github.com/boostorg/filesystem/pull/71">PR#71</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed undefined behavior in <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">filesystem</span><span class="special">::</span><span class="identifier">directory_iterator</span></code>
"                implementation. (<a href="https://github.com/boostorg/filesystem/pull/77">PR#77</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compilation errors when using directory iterators with <code><span class="identifier">BOOST_FOREACH</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed workarounds for older PGI C++ compiler versions to fix compilation
"                on the newer ones. (<a href="https://github.com/boostorg/filesystem/pull/49">PR#49</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed MSVC warnings about narrowing conversions. (<a href="https://github.com/boostorg/filesystem/pull/44">PR#44</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/flyweight/index.html">Flyweight</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed some issues in GCC related to Boost.MPL placeholder expression
"                handling.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/integer/">Integer</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">pending</span><span class="special">/</span><span class="identifier">integer_log2</span><span class="special">.</span><span class="identifier">hpp</span></code> header is deprecated and will
"                be removed in future releases. Use <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">integer</span><span class="special">/</span><span class="identifier">integer_log2</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                instead.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/iterator/">Iterator</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed compilation problems with ambiguous unqualified calls to <code><span class="identifier">advance</span></code> and <code><span class="identifier">distance</span></code>
"                on iterators whose types involve types in the namespace <code><span class="identifier">boost</span></code>. (<a href="https://github.com/boostorg/iterator/issues/43">#43</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/lexical_cast/">LexicalCast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed sign-conversion warnings <a href="https://svn.boost.org/trac/boost/ticket/8991">#8991</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance: dropped some dependencies on other Boost libraries,
"                fixed build system warnings.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                General changes:
"                <ul>
"                  <li>
"                    <div>
"                      Updated syslog sink backend to avoid using deprecated Boost.ASIO
"                      interfaces. (<a href="https://github.com/boostorg/log/issues/59">#59</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed a possible incorrect estimation of the total size of
"                      rotated files in the target directory of a text file sink in
"                      some cases.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/mp11/">Mp11</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented the <code><span class="identifier">mp_starts_with</span></code>
"                facility (Glen Fernandes).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_array/">MultiArray</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improve C++11 allocator model support including: Support for C++11
"                minimal allocators, support for stateful allocators, using the allocator
"                for construction and destruction of the value type, and using the
"                empty base optimization for storing empty or stateless allocators
"                (Glen Fernandes).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/index.html">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Introduced an alternative <a href="/libs/multi_index/doc/tutorial/key_extraction.html#key">terse
"                key specification syntax</a> for C++17 compliant environments.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/poly_collection/">PolyCollection</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added Bost.PolyCollection-specific versions of algorithms <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">for_each_n</span></code> and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">sample</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/preprocessor/">Preprocessor</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Supports the new C++ standard conforming preprocessor in VC++ 14.1,
"                which is currently enabled by using the /experimental:preprocessor
"                switch, in Visual Studio 2017 15.8 on up.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/spirit/">Spirit</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Spirit.X3:
"                <ul>
"                  <li>
"                    <div>
"                      Drop own FP routines in favor of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">math</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/392">#392</a>) (<a href="https://svn.boost.org/trac/boost/ticket/13531">#13531</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Missing visibility mark on exception types (<a href="https://github.com/boostorg/spirit/issues/409">#409</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      to_utf8: Fixed wchar_t handling on Windows (<a href="https://github.com/boostorg/spirit/issues/413">#413</a>)
"                      (<a href="https://github.com/boostorg/spirit/issues/395">#395</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit V2
"                <ul>
"                  <li>
"                    <div>
"                      Drop own FP routines in favor of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">math</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/392">#392</a>) (<a href="https://svn.boost.org/trac/boost/ticket/13531">#13531</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Missing visibility mark on exception types (<a href="https://github.com/boostorg/spirit/issues/409">#409</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed transform_attribute ambiguity (<a href="https://github.com/boostorg/spirit/issues/407">#407</a>) (<a href="https://github.com/boostorg/spirit/issues/396">#396</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      to_utf8: Fixed wchar_t handling on Windows (<a href="https://github.com/boostorg/spirit/issues/413">#413</a>)
"                      (<a href="https://github.com/boostorg/spirit/issues/395">#395</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit.Classic:
"                <ul>
"                  <li>
"                    <div>
"                      Missing visibility mark on exception types (<a href="https://github.com/boostorg/spirit/issues/409">#409</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">libbacktrace</span></code> usage
"                was significantly improved. <code><span class="identifier">BOOST_STACKTRACE_USE_BACKTRACE</span></code>
"                or <code><span class="identifier">boost_stacktrace_backtrace</span></code>
"                users are encouraged to update:
"                <ul>
"                  <li>
"                    <div>
"                      Memory consumprion dropped down.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Stack capturing became faster by an order of magnitude.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">syminfo</span></code> fallback
"                      enabled to provide information for visible symbols even without
"                      debug information (thanks to github user driesdeschout!)<a href="https://github.com/boostorg/stacktrace/issues/60">#60</a>,
"                      <a href="https://github.com/boostorg/stacktrace/issues/61">#61</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Exact location of the <code><span class="identifier">backtrace</span><span class="special">.</span><span class="identifier">h</span></code>
"                      header now can be specified via <code><span class="identifier">BOOST_STACKTRACE_BACKTRACE_INCLUDE_FILE</span></code>,
"                      to allow <code><span class="identifier">backtrace</span><span class="special">.</span><span class="identifier">h</span></code>
"                      header usage on platforms and compilers where that header is
"                      unreachable otherwise (for example Ubuntu Xenial + Clang) <a href="https://github.com/boostorg/stacktrace/issues/59">#59</a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Optimized stack capturing if <code><span class="identifier">max_depth</span></code>
"                is set (thanks to Jan Eisenhauer for the PR!) <a href="https://github.com/boostorg/stacktrace/issues/67">#67</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">to_string</span><span class="special">(</span><span class="keyword">const</span> <span class="identifier">stacktrace</span><span class="special">&amp;</span> <span class="special">)</span></code>
"                functions for fast conversion of stacktraces to <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">string</span></code>
"                <a href="https://github.com/boostorg/stacktrace/issues/57">#57</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance: updated docs <a href="https://github.com/boostorg/stacktrace/issues/62">#62</a>, tests updated.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/system/">System</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.System is now header-only. A stub library is still built for
"                compatibility, but linking to it is no longer necessary.
"              </div>
"            </li>
"            <li>
"              <div>
"                Even more functions have been marked <code><span class="keyword">constexpr</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                The destructor of <code><span class="identifier">error_category</span></code>
"                is now <code><span class="keyword">protected</span></code> and
"                no longer <code><span class="keyword">virtual</span></code>. This
"                is a potentially breaking change, but its impact is expected to be
"                limited.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">error_category</span></code> now
"                has a constructor that accepts a 64 bit identifier, enabling distinct
"                category objects to compare equal.
"              </div>
"            </li>
"            <li>
"              <div>
"                The constructors of <code><span class="identifier">error_category</span></code>
"                are now <code><span class="keyword">protected</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                A non-allocating, nonthrowing overload of <code><span class="identifier">message</span></code>
"                has been added.
"              </div>
"            </li>
"            <li>
"              <div>
"                A virtual function <code><span class="identifier">failed</span></code>
"                has been added, allowing categories for which success is not synonymous
"                with 0.
"              </div>
"            </li>
"            <li>
"              <div>
"                The deprecated <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">system</span><span class="special">::</span><span class="identifier">throws</span></code>
"                object has been removed.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">throws</span><span class="special">()</span></code>
"                is now deprecated and its use is discouraged.
"              </div>
"            </li>
"            <li>
"              <div>
"                The constructor of <code><span class="identifier">system_error</span></code>
"                taking a single <code><span class="identifier">error_code</span></code>
"                argument is now <code><span class="keyword">explicit</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">system_error</span><span class="special">::</span><span class="identifier">code</span><span class="special">()</span></code>
"                now returns by value.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/test/">Test</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.test v3.9 see the <a href="libs/test/doc/html/boost_test/change_log.html">Changes
"                log</a> for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                New feature:
"                <ul>
"                  <li>
"                    <div>
"                      Official support of header-only variant of Boost.Test with
"                      multiple translation units.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Now possible to manually add a test case by specifying its
"                      name, with <code><span class="identifier">BOOST_TEST_CASE_NAME</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Better support of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">exception</span></code>
"                      in the logs
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes and pull requests:
"                <ul>
"                  <li>
"                    <div>
"                      Trac tickets: <a href="https://svn.boost.org/trac/boost/ticket/13380">#13380</a>, <a href="https://svn.boost.org/trac/boost/ticket/13625">#13625</a>, <a href="https://svn.boost.org/trac/boost/ticket/13637">#13637</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GitHub Issues: <a href="https://github.com/boostorg/test/issues/149">#149</a>, <a href="https://github.com/boostorg/test/issues/150">#150</a>, <a href="https://github.com/boostorg/test/issues/156">#156</a>, <a href="https://github.com/boostorg/test/issues/158">#158</a>,
"                      <a href="https://github.com/boostorg/test/issues/163">#163</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GitHub Pull Requests: <a href="https://github.com/boostorg/test/pull/147">PR#147</a>, <a href="https://github.com/boostorg/test/pull/148">PR#148</a>, <a href="https://github.com/boostorg/test/pull/151">PR#151</a>,
"                      <a href="https://github.com/boostorg/test/pull/154">PR#154</a>, <a href="https://github.com/boostorg/test/pull/161">PR#161</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_index/">TypeIndex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix the regression and speed up parsing of the <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">type_traits</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                header by 30% (thanks to Nikita Kniazev for the PR!) <a href="https://github.com/boostorg/type_index/issues/21">#21</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/utility/">Utility</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support for non-inheritable empty types to <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">compressed_pair</span></code>
"                by avoiding the empty base optimization for types which are declared
"                as final (Glen Fernandes).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed issue with visibility. Now <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">bad_visit</span></code>
"                exception could cross the boundaries of shared library with hidden
"                visibility and could be catched in other shared library with hidden
"                visibility.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/yap/">YAP</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Minor changes to support MSVC++ version 14.15 (Visual Studio 2017
"                version 15.8).
"              </div>
"            </li>
"            <li>
"              <div>
"                Doc fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <em>TODO</em>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_69_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          <em>TODO</em>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          <em>TODO</em>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_69_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <em>TODO</em>
"    </p>
"  </div>
"
-hash
"84e4e09aeb52fd7a14cfcde723133f0eaf75160a3302d46e5e2ce42df9eba295
-id
"version_1_69_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: Updated Libraries:
"
-title_xml
"Version 1.69.0
)
