(feed/history/boost_1_33_0.qbk
-description_xhtml
"
"
"
"
"  <div id="version_1_33_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/iostreams/doc/index.html">Iostreams
"          Library</a>:</span>
"  Framework for defining streams, stream buffers and i/o
"          filters, from Jonathan Turkanis.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/functional/hash/index.html">Functional/Hash
"          Library</a>:</span> A TR1 hash function object that can be extended to hash
"          user defined types, from Daniel James.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/parameter/doc/html/index.html">Parameter
"          Library</a>:</span>
"  Write functions that accept arguments by name: especially
"          useful when a function has more than one argument with a useful default
"          value, since named arguments can be passed in any order.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/ptr_container/index.html">Pointer
"          Container Library</a>:</span>
"  Containers for storing heap-allocated polymorphic
"          objects to ease OO-programming, from Thorsten Ottosen.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/wave/index.html">Wave</a>:</span> Standards
"          conformant implementation of the mandated C99/C++ preprocessor functionality
"          packed behind an easy to use iterator interface, from Hartmut Kaiser.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_33_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/doc/html/any.html">Any Library</a>:</span> <code><span class="identifier">any_cast</span></code> has been enhanced to allow direct
"          access to <code><span class="identifier">any</span></code>'s held value.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/assign/doc/index.html">Assignment
"          Library</a>:</span> Support for <a href="/doc/libs/1_33_1/libs/ptr_container/index.html">Pointer
"          Container Library</a> and new efficient functions <code><span class="identifier">ref_list_of</span><span class="special">()</span></code> and <code><span class="identifier">cref_list_of</span><span class="special">()</span></code> for generating anonymous ranges.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/bind/bind.html">Bind Library</a>:</span> Bind
"          expressions now support <a href="/doc/libs/1_33_1/libs/bind/bind.html#operators">comparisons
"          and negation</a>. Example: <code><span class="identifier">bind</span><span class="special">(&amp;</span><span class="identifier">X</span><span class="special">::</span><span class="identifier">name</span><span class="special">,</span> <span class="identifier">_1</span><span class="special">)</span> <span class="special">&lt;</span> <span class="identifier">bind</span><span class="special">(&amp;</span><span class="identifier">X</span><span class="special">::</span><span class="identifier">name</span><span class="special">,</span> <span class="identifier">_2</span><span class="special">)</span></code>.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/doc/html/date_time.html">Date-Time
"          Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <a href="/doc/libs/1_33_1/doc/html/date_time/local_time.html">local
"                time and time zone classes</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <a href="/doc/libs/1_33_1/doc/html/date_time/date_time_io.html">format-based
"                Input/Output facets</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                For a complete list of changes, see the library <a href="/doc/libs/1_33_1/doc/html/date_time/details.html#date_time.changes">change
"                history</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/graph/doc/index.html">Graph Library</a>:</span> Introduced
"          several new algorithms and improved existing algorithms:
"          <ul>
"            <li>
"              <div>
"                <a href="/doc/libs/1_33_1/libs/graph/doc/python.html">Experimental
"                Python bindings</a>, from Doug Gregor and Indiana University.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_33_1/libs/graph/doc/floyd_warshall_shortest.html"><code><span class="identifier">floyd</span> <span class="identifier">warshall</span>
"                <span class="identifier">all</span> <span class="identifier">pairs</span>
"                <span class="identifier">shortest</span> <span class="identifier">paths</span></code></a>,
"                from Lauren Foutz and Scott Hill.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_33_1/libs/graph/doc/astar_search.html"><code><span class="identifier">astar</span> <span class="identifier">search</span></code></a>,
"                from Kristopher Beevers and Jufeng Peng.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_33_1/libs/graph/doc/fruchterman_reingold.html"><code><span class="identifier">fruchterman</span> <span class="identifier">reingold</span>
"                <span class="identifier">force</span> <span class="identifier">directed</span>
"                <span class="identifier">layout</span></code></a>, from Doug
"                Gregor and Indiana University.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_33_1/libs/graph/doc/biconnected_components.html"><code><span class="identifier">biconnected</span> <span class="identifier">components</span></code>
"                and <code><span class="identifier">articulation</span> <span class="identifier">points</span></code></a>, from Jeremy Siek,
"                Janusz Piwowarski, and Doug Gregor.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_33_1/libs/graph/doc/sequential_vertex_coloring.html"><code><span class="identifier">sequential</span> <span class="identifier">vertex</span>
"                <span class="identifier">coloring</span></code></a> has been
"                updated, tested, and documented.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_33_1/libs/graph/doc/gursoy_atun_layout.html"><code><span class="identifier">gursoy</span> <span class="identifier">atun</span>
"                <span class="identifier">layout</span></code></a>, from Jeremiah
"                Willcock and Doug Gregor of Indiana University.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_33_1/libs/graph/doc/king_ordering.html"><code><span class="identifier">king</span> <span class="identifier">ordering</span></code></a>,
"                from D. Kevin McGrath of Indiana University.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_33_1/libs/graph/doc/cuthill_mckee_ordering.html"><code><span class="identifier">cuthill</span> <span class="identifier">mckee</span>
"                <span class="identifier">ordering</span></code></a> has been
"                recast as an invocation of <code><span class="identifier">breadth</span>
"                <span class="identifier">first</span> <span class="identifier">search</span></code>
"                and now supports graphs with multiple components.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_33_1/libs/graph/doc/dijkstra_shortest_paths.html"><code><span class="identifier">dijkstra</span> <span class="identifier">shortest</span>
"                <span class="identifier">paths</span></code></a> now uses
"                a relaxed heap [<a href="/doc/libs/1_33_1/libs/graph/doc/bibliography.html#driscoll88">61</a>]
"                as its priority queue, improving its complexity to O(V log V) and
"                improving real-world performance for larger graphs.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_33_1/libs/graph/doc/read_graphviz.html"><code><span class="identifier">read</span> <span class="identifier">graphviz</span></code></a>
"                now has a new, Spirit-based parser that works for all graph types
"                and supports arbitrary properties on the graph, from Ron Garcia.
"                The old, Bison-based GraphViz reader has been deprecated and will
"                be removed in a future Boost release. <a href="/doc/libs/1_33_1/libs/graph/doc/write-graphviz.html"><code><span class="identifier">write</span> <span class="identifier">graphviz</span></code></a>
"                also supports dynamic properties.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_33_1/libs/graph/doc/subgraph.html"><code><span class="identifier">subgraph</span></code></a>: <code><span class="identifier">get_property</span></code> now refers to the
"                subgraph property, not the root graph's property.
"              </div>
"            </li>
"            <li>
"              <div>
"                See the <a href="/doc/libs/1_33_1/libs/graph/doc/history.html#by-version">history</a>
"                for additional changes and bug fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/multi_index/doc/index.html">Multi-index
"          Containers Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New <a href="/doc/libs/1_33_1/libs/multi_index/doc/tutorial/indices.html#hashed_indices">hashed
"                indices</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <a href="/doc/libs/1_33_1/libs/multi_index/doc/tutorial/creation.html#serialization">serialization
"                support</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                For a complete list of changes, see the library <a href="/doc/libs/1_33_1/libs/multi_index/doc/release_notes.html">release
"                notes</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/program_options/doc/index.html">Program
"          Options Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Option descriptions are now printed with word wrapping.
"              </div>
"            </li>
"            <li>
"              <div>
"                Command line parser can bypass unregistered options, instread of
"                throwing.
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed support for "implicit" (optional) values.
"              </div>
"            </li>
"            <li>
"              <div>
"                New customization method 'command_line_parser::extra_style_parser'.
"                Unlike 'additional_parser', allows the user to parse several tokens
"                and return a vector of options, not just a single option.
"              </div>
"            </li>
"            <li>
"              <div>
"                Work with disabled exceptions.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/property_map/property_map.html">Property
"          Map Library</a>:</span> Introduced the <a href="/doc/libs/1_33_1/libs/property_map/doc/dynamic_property_map.html"><code><span class="identifier">dynamic</span> <span class="identifier">properties</span></code></a>
"          class, which provides dynamically-typed access to a set of property maps.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/python/doc/index.html">Boost.Python</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support for docstrings on nonstatic properties.
"              </div>
"            </li>
"            <li>
"              <div>
"                We now export the client-provided docstrings for <code><span class="identifier">init</span><span class="special">&lt;</span><span class="identifier">optional</span><span class="special">&lt;&gt;</span> <span class="special">&gt;</span></code>
"                and <em>XXX</em><code><span class="identifier">_FUNCTION_OVERLOADS</span><span class="special">()</span></code> for only the last overload.
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for Embedded VC++ 4 and GCC-3.3 on MacOS added
"              </div>
"            </li>
"            <li>
"              <div>
"                Introduced better support for rvalue from-python conversions of shared_ptr.
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for exposing <code><span class="identifier">vector</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">*&gt;</span></code> with the indexing suite.
"              </div>
"            </li>
"            <li>
"              <div>
"                updated visual studio project build file.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added search feature to the index page.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <p><span class="library"><a href="/doc/libs/1_33_1/libs/random/index.html">Random Number
"          Library</a>:</span>
"  Improved initialization for <code><span class="identifier">mersenne_twister</span></code>,
"          algorithm by Makoto Matsumoto and Takuji Nishimura, implemented for Boost
"          by Jens Maurer.</p>
"  <p>Note: All test vectors for <code><span class="identifier">mersenne_twister</span></code>s
"          constructed or seeded without parameters or with a single <code><span class="keyword">unsigned</span> <span class="keyword">int</span></code>
"          parameter become invalid.</p>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/range/index.html">Range Library</a>:</span> Minor
"          addition of convenience functions to <code><span class="identifier">iterator</span>
"          <span class="identifier">range</span></code> like <code><span class="identifier">front</span><span class="special">(),</span> <span class="identifier">back</span><span class="special">()</span></code> and <code><span class="keyword">operator</span><span class="special">[]()</span></code>.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/regex/index.html">Regex Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Rewritten front end parser now supports (?imsx-imsx) constructs,
"                plus lookbehind assertions and conditional expressions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Thin wrapper classes improve integration with MFC/ATL code.
"              </div>
"            </li>
"            <li>
"              <div>
"                Full (optional) Unicode support via the ICU library. Refer to the
"                <a href="/doc/libs/1_33_1/libs/regex/doc/history.html">regex history
"                page</a> for more information on these and other small changes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/serialization/doc/index.html">Serialization
"          Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                DLL version.
"              </div>
"            </li>
"            <li>
"              <div>
"                Auto-linking.
"              </div>
"            </li>
"            <li>
"              <div>
"                Serialization of variants.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved serialization of shared pointers.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/doc/html/signals.html">Signals Library</a>:</span> added
"          slot blocking/unblocking, from Frantz Maerten. Huge improvements to signal
"          invocation performance from Robert Zeh.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_33_0.supported_compilers">
"    <h3><span class="link">Supported Compilers</span></h3>
"    <p>
"      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
"      rely on modern C++ features not available in all compilers, not all Boost libraries
"      will work with every compiler. The following compilers and platforms have been
"      extensively tested with Boost, although many other compilers and platforms
"      will work as well. For more information, see the <a href="https://www.boost.org/regression/release/user/">regression
"      test results</a>.
"    </p>
"    <ul>
"      <li>
"        <div>
"          <a href="http://developer.apple.com/">Apple GCC</a> 3.x on Mac OS
"          X.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://www.codegear.com/products/cppbuilder">Borland C++</a>
"          5.6.4 on Windows.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://gcc.gnu.org">GNU C++</a> 2.95.3 (with and without
"          STLport), 3.2.x., 3.3.x, 3.4.x, 4.0.x on Windows, Linux and Solaris.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm">Intel
"          C++</a> 8.1, 9.0 on Windows, Linux.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://www.metrowerks.com">Metrowerks CodeWarrior</a> 8.3,
"          9.4, 9.5 on Mac OS X and Windows.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://msdn.microsoft.com/visualc/">Microsoft Visual C++</a>
"          6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0 beta. Note: due to intermittent
"          problems with Visual C++ 8.0 beta, and the presence of a variety of pre-release
"          compiler builds, we are unable to guarantee compatibility until the final
"          compiler is released.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_33_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <img src="/gfx/boost_1_33_0.jpg" alt="[]"/><a href="/users/people/doug_gregor.html">Douglas Gregor</a>
"      managed this release.
"    </p>
"    <p>
"      A great number of people contributed their time and expertise to make this
"      release possible. Special thanks go to Aleksey Gurtovoy and Misha Bergal, who
"      managed to keep the regression testing system working throughout the release
"      process; David Abrahams, Beman Dawes, Aleksey Gurtovoy, Rene Rivera and Jonathan
"      Turkanis for greatly improving the quality of this release; Rene Rivera for
"      the new Boost web page design; and Zoltan "cad" Juhasz for the new
"      Boost logo.
"    </p>
"  </div>
"
-hash
"ab3bbc9746f60a298f4148e093d41bbc6d52c12bafd0f1c498bff9b3879d505c
-id
"version_1_33_0
-notice_url
-notice_xml
-pub_date
@Thu, 11 Aug 2005 12:00:00 +0000
-purpose_xml
"
"      New Libraries: Iostream, Hash, Parameter, Pointer Container, Wave. Updated
"      Libraries: Any, Assignment, Bind, Date-Time, Graph, Multi-Index, Program Options,
"      Property Map, Python, Random Number, Range, Regex, Serialization, Signals.
"
-title_xml
"Version 1.33.0
)
(feed/history/boost_1_33_1.qbk
-description_xhtml
"
"
"
"
"  <div id="version_1_33_1.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/doc/html/any.html">Any Library</a>:</span> Cast
"          to reference types introduced in 1.33.0 is now documented on <code><span class="identifier">any_cast</span></code> documentation page.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/bind/bind.html">Bind Library</a>:</span> Bind
"          expressions now support <a href="/doc/libs/1_33_1/libs/bind/bind.html#operators">comparisons
"          and negation</a>. Example: <code><span class="identifier">bind</span><span class="special">(&amp;</span><span class="identifier">X</span><span class="special">::</span><span class="identifier">name</span><span class="special">,</span> <span class="identifier">_1</span><span class="special">)</span> <span class="special">&lt;</span> <span class="identifier">bind</span><span class="special">(&amp;</span><span class="identifier">X</span><span class="special">::</span><span class="identifier">name</span><span class="special">,</span> <span class="identifier">_2</span><span class="special">)</span></code>.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/config/index.html">Config Library</a>:</span> Don't
"          undef <code><span class="identifier">BOOST_LIB_TOOLSET</span></code>
"          after use.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/python/doc/index.html">Boost.Python</a>:</span>
"          <ul>
"            <li>
"              <div>
"                The build now assumes Python 2.4 by default, rather than 2.2
"              </div>
"            </li>
"            <li>
"              <div>
"                Support Python that's built without Unicode support
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for wrapping classes with overloaded address-of (<code><span class="special">&amp;</span></code>) operators
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/smart_ptr/index.html">Smart Pointer
"          Library</a>:</span> Fixed problems under Metrowerks CodeWarrior on PowerPC
"          (Mac OS X) with inlining on, GNU GCC on PowerPC 64.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/regex/doc/index.html">Regex Library</a>:</span> Fixed
"          the supplied makefiles, and other small compiler specific changes. Refer
"          to the <a href="/doc/libs/1_33_1/libs/regex/doc/history.html">regex
"          history page</a> for more information on these and other small changes.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/iostreams/doc/index.html">Iostreams
"          Library</a>:</span>
"  Improved the interface for accessing a chain's components,
"          added <code><span class="identifier">is_open</span></code> members to
"          the file and file descriptor devices, fixed memory-mapped files on Windows,
"          and made minor changes to the documentation.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/python/doc/index.html">Boost.Python</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support for docstrings on nonstatic properties.
"              </div>
"            </li>
"            <li>
"              <div>
"                We now export the client-provided docstrings for <code><span class="identifier">init</span><span class="special">&lt;</span><span class="identifier">optional</span><span class="special">&lt;&gt;</span> <span class="special">&gt;</span></code>
"                and <em>XXX</em><code><span class="identifier">_FUNCTION_OVERLOADS</span><span class="special">()</span></code> for only the last overload.
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for Embedded VC++ 4 and GCC-3.3 on MacOS added
"              </div>
"            </li>
"            <li>
"              <div>
"                Introduced better support for rvalue from-python conversions of shared_ptr.
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for exposing <code><span class="identifier">vector</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">*&gt;</span></code> with the indexing suite.
"              </div>
"            </li>
"            <li>
"              <div>
"                updated visual studio project build file.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added search feature to the index page.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/functional/hash/index.html">Functional/Hash
"          Library</a>:</span>
"  Fixed the points example.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/multi_index/doc/index.html">Multi-index
"          Containers Library</a>:</span>
"  Fixed a problem with multithreaded code, and
"          other minor changes. Refer to the library <a href="/doc/libs/1_33_1/libs/multi_index/doc/release_notes.html#boost_1_33_1">release
"          notes</a> for further details.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/graph/doc/table_of_contents.html">Graph
"          Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed a problem with the relaxed heap on x86 Linux (fixes bug in
"                <code><span class="identifier">dijkstra_shortest_paths</span></code>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed problems with <a href="/doc/libs/1_33_1/libs/graph/doc/cuthill_mckee_ordering.html"><code><span class="identifier">cuthill_mckee_ordering</span></code></a>
"                and <a href="/doc/libs/1_33_1/libs/graph/doc/king_ordering.html"><code><span class="identifier">king_ordering</span></code></a> producing
"                no results.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">color_map</span></code> parameter
"                to <code><span class="identifier">dijkstra_shortest_paths</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/signals/doc/index.html">Signals
"          Library</a>:</span> Fixed problems with the use of Signals across shared library
"          boundaries.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/thread/doc/index.html">Thread
"          library</a>:</span>
"  <code><span class="identifier">read_write_mutex</span></code>
"          has been removed due to problems with deadlocks.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_33_1/libs/wave/index.html">Wave library</a>
"          (V1.2.1):</span> Fixed a couple of problems, refer to the <a href="/doc/libs/1_33_1/libs/wave/ChangeLog">change
"          log</a> for further details.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_33_1.supported_compilers">
"    <h3><span class="link">Supported Compilers</span></h3>
"    <p>
"      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
"      rely on modern C++ features not available in all compilers, not all Boost libraries
"      will work with every compiler. The following compilers and platforms have been
"      extensively tested with Boost, although many other compilers and platforms
"      will work as well. For more information, see the <a href="https://www.boost.org/regression/release/user/">regression
"      test results</a>.
"    </p>
"    <p>
"      <em>New for this release</em>: Support for building with the newest
"      STLport-5.0 was added. The support includes building with MinGW Runtime 3.8
"      plus STLport-5.0 improved to support wide character operations. Apple GCC 4.0,
"      HP Tru64 C++, and Microsoft Visual C++ 8.0 are supported platforms. We have
"      added an experimental autoconf-like <tt>configure</tt> script for
"      Unix-like systems: run <tt>configure --help</tt> for more information.
"    </p>
"    <ul>
"      <li>
"        <div>
"          <a href="http://developer.apple.com/">Apple GCC</a> 3.3, 4.0 on
"          Mac OS X.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://www.codegear.com/products/cppbuilder">Borland C++</a>
"          5.6.4 on Windows.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://gcc.gnu.org">GNU C++</a> 2.95.3 (with and without
"          STLport), 3.2.x., 3.3.x, 3.4.x, 4.0.x on Windows, Linux and Solaris.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://h30097.www3.hp.com/cplus/">HP C++ for Tru64 UNIX 7.1</a>.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm">Intel
"          C++</a> 8.1, 9.0 on Windows, Linux.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://www.metrowerks.com">Metrowerks CodeWarrior</a> 8.3,
"          9.4, 9.5 on Mac OS X and Windows.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://msdn.microsoft.com/visualc/">Microsoft Visual C++</a>
"          6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
"          support the non-standard "Safe" C++ Library shipping with Visual
"          C++ 8.0, which may result in many spurious warnings from Boost headers
"          and other standards-conforming C++ code. To suppress these warnings, define
"          the macro <code><span class="identifier">_SCL_SECURE_NO_DEPRECATE</span></code>.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_33_1.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <span class="inset-left"><img src="/gfx/boost_1_33_0.jpg" alt="Medieval Mr. Gregor"/></span>
"<a href="/users/people/doug_gregor.html">Douglas
"      Gregor</a> managed this release.
"    </p>
"    <p>
"      A great number of people contributed their time and expertise to make this
"      release possible. Special thanks go to Aleksey Gurtovoy and Misha Bergal, who
"      managed to keep the regression testing system working throughout the release
"      process; David Abrahams, Beman Dawes, Aleksey Gurtovoy, Bronek Kozicki, Rene
"      Rivera and Jonathan Turkanis for greatly improving the quality of this release;
"      Rene Rivera for the new Boost web page design; and Zoltan "cad" Juhasz
"      for the new Boost logo.
"    </p>
"  </div>
"
-hash
"a747e2b1329808fea438b6e7ea065f2bb2b209cebe97ef56deb990a0da0dbc09
-id
"version_1_33_1
-notice_url
-notice_xml
-pub_date
@Tue, 05 Dec 2006 12:00:00 +0000
-purpose_xml
"
"      Updated Libraries: Any, Config, Python, Smart Pointer, Regex, Iostreams, Functional/Hash,
"      Multi-index Containers, Graph, Signals, Thread, and Wave.
"
-title_xml
"Version 1.33.1
)
(feed/history/boost_1_34_0.qbk
-description_xhtml
"
"
"
"
"  <div id="version_1_34_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/doc/html/foreach.html">Foreach Library</a>:</span> <code><span class="identifier">BOOST_FOREACH</span></code> macro for easily iterating
"          over the elements of a sequence, from Eric Niebler.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/statechart/doc/index.html">Statechart
"          Library</a>:</span>
"  Arbitrarily complex finite state machines can be implemented
"          in easily readable and maintainable C++ code, from Andreas Huber.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/tr1/index.html">TR1 Library</a>:</span> An
"          implementation of the C++ Technical Report on Standard Library Extensions,
"          from John Maddock. This library does not itself implement the TR1 components,
"          rather it's a thin wrapper that will include your standard library's TR1
"          implementation (if it has one), otherwise it will include the Boost Library
"          equivalents, and import them into namespace <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">tr1</span></code>.
"          Highlights include: Reference Wrappers, Smart Pointers, result_of, Function
"          Object Binders, Polymorphic function wrappers, Type Traits, Random Number
"          Generators and Distributions, Tuples, Fixed Size Array, Hash Function Objects,
"          Regular Expressions, and Complex Number Additional Algorithms.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/doc/html/typeof.html">Typeof Library</a>:</span> Typeof
"          operator emulation, from Arkadiy Vertleyb and Peder Holt.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/doc/html/xpressive.html">Xpressive
"          Library</a>:</span> Regular expressions that can be written as strings or as
"          expression templates, and that can refer to each other and themselves recursively
"          with the power of context-free grammars, from Eric Niebler.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_34_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/assign/index.html">Assign Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for <code><span class="identifier">ptr_map</span><span class="special">&lt;</span><span class="identifier">key</span><span class="special">,</span><span class="identifier">T</span><span class="special">&gt;</span></code> via the new function <code><span class="identifier">ptr_map_insert</span><span class="special">()</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for initialization of <a href="/doc/libs/1_34_0/libs/ptr_container/index.html">Pointer
"                Containers</a> when the containers hold pointers to an abstract
"                base class.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/doc/html/date_time.html">Date_time
"          library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for new US/Canada timezone rules and other bug fixes. See
"                <a href="/doc/libs/1_34_0/doc/html/date_time/details.html#changes">Change
"                History</a> for details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/filesystem/doc/index.htm">Filesystem
"          Library</a>:</span> Major upgrade in preparation for submission to the C++
"          Standards Committee for TR2. Changes include:
"          <ul>
"            <li>
"              <div>
"                <a href="/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Internationalization">Internationalization</a>,
"                provided by class templates <em>basic_path</em>, <em>basic_filesystem_error</em>,
"                <em>basic_directory_iterator</em>, and <em>basic_directory_entry</em>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Simplification">Simplification</a>
"                of the path interface by eliminating special constructors to identify
"                native formats.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Rationalization">Rationalization</a>
"                of predicate function design, including the addition of several new
"                functions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Clearer specification by reference to <a href="/doc/libs/1_34_0/libs/filesystem/doc/design.htm#POSIX-01">POSIX</a>,
"                the ISO/IEEE Single Unix Standard, with provisions for Windows and
"                other operating systems.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Preservation">Preservation</a>
"                of existing user code whenever possible.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#More_efficient">More
"                efficient</a> directory iteration.
"              </div>
"            </li>
"            <li>
"              <div>
"                Addition of a <a href="/doc/libs/1_34_0/libs/filesystem/doc/tr2_proposal.html#Class-template-basic_recursive_directory_iterator">recursive
"                directory iterator</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/function/index.html">Function
"          Library</a>:</span>
"  Boost.Function now implements a small buffer optimization,
"          which can drastically improve the performance when copying or constructing
"          Boost.Function objects storing small function objects. For instance, <code><span class="identifier">bind</span><span class="special">(&amp;</span><span class="identifier">X</span><span class="special">:</span><span class="identifier">foo</span><span class="special">,</span> <span class="special">&amp;</span><span class="identifier">x</span><span class="special">,</span> <span class="identifier">_1</span><span class="special">,</span> <span class="identifier">_2</span><span class="special">)</span></code> requires no heap allocation when placed
"          into a Boost.Function object.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/functional/hash/index.html">Functional/Hash
"          Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Use declarations for standard classes, so that the library doesn't
"                need to include all of their headers
"              </div>
"            </li>
"            <li>
"              <div>
"                Deprecated the <tt>&lt;boost/functional/hash/*.hpp&gt;</tt>
"                headers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add support for the <code><span class="identifier">BOOST_HASH_NO_EXTENSIONS</span></code>
"                macro, which disables the extensions to TR1
"              </div>
"            </li>
"            <li>
"              <div>
"                Minor improvements to the hash functions for floating point numbers.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/graph/doc/index.html">Graph Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="/doc/libs/1_34_0/libs/graph/doc/maximum_matching.html"><code><span class="identifier">edmonds_maximum_cardinality_matching</span></code></a>,
"                from Aaron Windsor.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_34_0/libs/graph/doc/lengauer_tarjan_dominator.htm"><code><span class="identifier">lengauer_tarjan_dominator_tree</span></code></a>,
"                from JongSoo Park.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_34_0/libs/graph/doc/compressed_sparse_row.html"><code><span class="identifier">compressed_sparse_row_graph</span></code></a>,
"                from Jeremiah Willcock and Douglas Gregor of Indiana University.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_34_0/libs/graph/doc/sorted_erdos_renyi_gen.html"><code><span class="identifier">sorted_erdos_renyi_iterator</span></code></a>,
"                from Jeremiah Willcock of Indiana University.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_34_0/libs/graph/doc/biconnected_components.html"><code><span class="identifier">biconnected_components</span></code></a>
"                now supports a visitor and named parameters, from Janusz Piwowarski.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_34_0/libs/graph/doc/adjacency_matrix.html"><code><span class="identifier">adjacency_matrix</span></code></a> now models
"                the <a href="/doc/libs/1_34_0/libs/graph/doc/BidirectionalGraph.html">Bidirectional
"                Graph</a> concept.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_34_0/libs/graph/doc/dijkstra_shortest_paths.html"><code><span class="identifier">dijkstra_shortest_paths</span></code></a>
"                now calls <code><span class="identifier">vis</span><span class="special">.</span><span class="identifier">initialize_vertex</span></code> for each vertex
"                during initialization.
"              </div>
"            </li>
"            <li>
"              <div>
"                <em>Note:</em> the name of the compiled library for the
"                <a href="/doc/libs/1_34_0/libs/graph/doc/read_graphviz.html">GraphViz
"                reader</a> has changed to <tt>boost_graph</tt> (from
"                <tt>bgl-viz</tt>) to match Boost conventions.
"              </div>
"            </li>
"            <li>
"              <div>
"                See the <a href="/doc/libs/1_34_0/libs/graph/doc/history.html#1.34.0">complete
"                revision history</a> for more information.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/multi_array/index.html">MultiArray
"          Library</a>:</span>
"  Boost.MultiArray now by default provides range-checking
"          for <code><span class="keyword">operator</span><span class="special">[]</span></code>.
"          Range checking can be disabled by defining the macro <code><span class="identifier">BOOST_DISABLE_ASSERTS</span></code>
"          before including <tt>multi_array.hpp</tt>. A bug in <code><span class="identifier">multi_array</span><span class="special">::</span><span class="identifier">resize</span><span class="special">()</span></code>
"          related to storage orders was fixed.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/multi_index/doc/index.html">Multi-index
"          Containers Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New <a href="/doc/libs/1_34_0/libs/multi_index/doc/tutorial/indices.html#rnd_indices">random
"                access indices</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Non key-based indices feature new <a href="/doc/libs/1_34_0/libs/multi_index/doc/tutorial/indices.html#rearrange">rearrange
"                facilities</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                This version also includes a number of optimizations and usage improvements.
"                For a complete list of changes, see the library <a href="/doc/libs/1_34_0/libs/multi_index/doc/release_notes.html#boost_1_34">release
"                notes</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/optional/index.html">Optional
"          Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">none_t</span> <span class="keyword">and</span>
"                <span class="identifier">boost</span><span class="special">::</span><span class="identifier">none</span></code> now added to Optional's documentation
"              </div>
"            </li>
"            <li>
"              <div>
"                Relational operators now directly support arguments of type <code><span class="char">'T'</span></code> and <code><span class="char">'none_t'</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                operator-&gt;() now also works with reference types.
"              </div>
"            </li>
"            <li>
"              <div>
"                Helper functions <code><span class="identifier">make_optional</span><span class="special">(</span><span class="identifier">val</span><span class="special">),</span> <span class="identifier">make_optional</span><span class="special">(</span><span class="identifier">cond</span><span class="special">,</span><span class="identifier">val</span><span class="special">)</span> <span class="keyword">and</span> <span class="identifier">get_optional_value_or</span><span class="special">(</span><span class="identifier">opt</span><span class="special">,</span><span class="identifier">alternative_value</span><span class="special">)</span></code>
"                added.
"              </div>
"            </li>
"            <li>
"              <div>
"                Constructor taking a boolean condition (as well as a value) added.
"              </div>
"            </li>
"            <li>
"              <div>
"                Member function <code><span class="identifier">get_value_or</span><span class="special">(</span><span class="identifier">alternative_value</span><span class="special">)</span></code> added.
"              </div>
"            </li>
"            <li>
"              <div>
"                Incompatbility bug with mpl::apply&lt;&gt; fixed.
"              </div>
"            </li>
"            <li>
"              <div>
"                Converting assignment bug with uninitialized lvalues fixed.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/parameter/index.html">Parameter
"          Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Every ArgumentPack is now a valid <a href="/doc/libs/1_34_0/libs/mpl/doc/refmanual/forward-sequence.html">MPL
"                Forward Sequence.</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for unnamed arguments (those whose keyword is deduced from
"                their types) is added.
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for named and unnamed template arguments is added.
"              </div>
"            </li>
"            <li>
"              <div>
"                New overload generation macros solve the <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1385.htm">forwarding
"                problem</a> directly.
"              </div>
"            </li>
"            <li>
"              <div>
"                See also the Python library changes, below.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/ptr_container/index.html">Pointer
"          Container Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for serialization via <a href="/doc/libs/1_34_0/libs/serialization/index.html">Boost.Serialization.</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Exceptions can be disabled by defining the macro BOOST_PTR_CONTAINER_NO_EXCEPTIONS
"                before including any header. This macro is defined by default if
"                BOOST_NO_EXCEPTIONS is defined.
"              </div>
"            </li>
"            <li>
"              <div>
"                Additional <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">auto_ptr</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code>
"                overloads added s.t. one can also pass <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">auto_ptr</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code> instead of only <code><span class="identifier">T</span><span class="special">*</span></code>
"                arguments to member functions.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">transfer</span><span class="special">()</span></code>
"                now has weaker requirements s.t. one can transfer objects from <code><span class="identifier">ptr_container</span><span class="special">&lt;</span><span class="identifier">Derived</span><span class="special">&gt;</span></code>
"                to <code><span class="identifier">ptr_container</span><span class="special">&lt;</span><span class="identifier">Base</span><span class="special">&gt;</span></code>,
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/python/index.html">Python Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.Python now automatically appends C++ signatures to docstrings.
"                The new <a href="/doc/libs/1_34_0/libs/python/doc/v2/docstring_options.html"><tt>docstring_options.hpp</tt></a>
"                header is available to control the content of docstrings.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_34_0/libs/python/doc/v2/stl_iterator.html#stl_input_iterator-spec"><code><span class="identifier">stl_input_iterator</span></code></a>, for
"                turning a Python iterable object into an STL input iterator, from
"                Eric Niebler.
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for <code><span class="keyword">void</span><span class="special">*</span></code>
"                conversions is added.
"              </div>
"            </li>
"            <li>
"              <div>
"                Integrated support for wrapping C++ functions built with the parameter
"                library; keyword names are automatically known to docsstrings.
"              </div>
"            </li>
"            <li>
"              <div>
"                Enhancements to the API for better embedding support (<code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">python</span><span class="special">::</span><span class="identifier">import</span><span class="special">()</span></code>,
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">python</span><span class="special">::</span><span class="identifier">exec</span><span class="special">()</span></code>,
"                and <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">python</span><span class="special">::</span><span class="identifier">exec_file</span><span class="special">()</span></code>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/doc/html/signals.html">Signals Library</a>:</span> More
"          improvements to signal invocation performance from Robert Zeh.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/smart_ptr/smart_ptr.htm">Smart
"          Pointers Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="/doc/libs/1_34_0/libs/smart_ptr/shared_ptr.htm#allocator_constructor">Allocator
"                support</a> as proposed in <a href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1851.pdf">N1851</a>
"                (162 Kb PDF).
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/doc/libs/1_34_0/libs/smart_ptr/pointer_cast.html"><code><span class="identifier">pointer_cast</span></code></a> and <a href="/doc/libs/1_34_0/libs/smart_ptr/pointer_to_other.html"><code><span class="identifier">pointer_to_other</span></code></a> utilities
"                to allow pointer-independent code, from Ion Gaztanaga.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/algorithm/string/index.html">String
"          Algorithm Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">lexicographical_compare</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">join</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                New comparison predicates <code><span class="identifier">is_less</span></code>,
"                <code><span class="identifier">is_not_greater</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Negative indexes support (like Perl) in various algorihtms (<code><span class="special">*</span><span class="identifier">_head</span><span class="special">/</span><span class="identifier">tail</span></code>,
"                <code><span class="special">*</span><span class="identifier">_nth</span></code>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/libs/1_34_0/libs/wave/index.html">Wave Library</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Wave now correctly recognizes pp-number tokens as mandated by the
"                C++ Standard, which are converted to C++ tokens right before they
"                are returned from the library.
"              </div>
"            </li>
"            <li>
"              <div>
"                Several new preprocessing hooks have been added. For a complete description
"                please refer to the related documentation page: <a href="/doc/libs/1_34_0/libs/wave/doc/class_reference_ctxpolicy.html">The
"                Context Policy</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Shared library (dll) support has been added for the generated Wave
"                libraries.
"              </div>
"            </li>
"            <li>
"              <div>
"                The overall error handling has been improved. It is now possible
"                to recover and continue after an error or a warning was issued.
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for optional comment and/or full whitespace preservation
"                in the generated output stream has been added.
"              </div>
"            </li>
"            <li>
"              <div>
"                The Wave library now performs automatic include guard detection to
"                avoid accessing header files more than once, if appropriate.
"              </div>
"            </li>
"            <li>
"              <div>
"                Full interactive mode has been added to the Wave tool. Now the Wave
"                tool can be used just like Python or Perl for instance to interactively
"                try out your BOOST_PP macros. Additionally it is now possible to
"                load and save the current state of an interactive session (macro
"                tables et.al.).
"              </div>
"            </li>
"            <li>
"              <div>
"                The overall performance has been improved by upto 40-60%, depending
"                on the concrete files to process.
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for new pragmas has been added allowing to control certain
"                library features from inside the preprocessed sources (partial output
"                redirection, control of generated whitespace and #line directives).
"              </div>
"            </li>
"            <li>
"              <div>
"                Optional support for #pragma message "..." has been added.
"              </div>
"            </li>
"            <li>
"              <div>
"                This version also includes a number of bug fixes and usage improvements.
"                For a complete list of changes, see the libraries <a href="/doc/libs/1_34_0/libs/wave/ChangeLog">change
"                log</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_34_0.supported_compilers">
"    <h3><span class="link">Supported Compilers</span></h3>
"    <p>
"      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
"      rely on modern C++ features not available in all compilers, not all Boost libraries
"      will work with every compiler. The following compilers and platforms have been
"      extensively tested with Boost, although many other compilers and platforms
"      will work as well. For more information, see the <a href="https://www.boost.org/regression/release/user/">regression
"      test results</a>.
"    </p>
"    <ul>
"      <li>
"        <div>
"          <a href="http://developer.apple.com/">Apple GCC</a> 4.0.1 on Mac
"          OS X.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://www.codegear.com/products/cppbuilder">Borland C++</a>
"          5.8.2 on Windows.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://gcc.gnu.org/">GNU C++</a>
"          <ul>
"            <li>
"              <div>
"                3.2.x., 3.3.x, 3.4.x, 4.0.x, 4.1.x on Linux
"              </div>
"            </li>
"            <li>
"              <div>
"                4.1.x on Solaris
"              </div>
"            </li>
"            <li>
"              <div>
"                3.4.x on Windows
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://h30097.www3.hp.com/cplus/">HP aC++ A.06.14</a>.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm">Intel
"          C++</a> 9.1 on Windows, 9.0 on Linux.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://www.metrowerks.com/">Metrowerks CodeWarrior</a>
"          9.4 on Windows.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://msdn.microsoft.com/visualc/">Microsoft Visual C++</a>
"          6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
"          support the non-standard "Safe" C++ Library shipping with Visual
"          C++ 8.0, which may result in many spurious warnings from Boost headers
"          and other standards-conforming C++ code. To suppress these warnings, define
"          the macro <code><span class="identifier">_SCL_SECURE_NO_DEPRECATE</span></code>.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://developers.sun.com/sunstudio/compilers_index.html">Sun
"          Studio 11</a> on Solaris.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_34_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/thomas_witt.html">Thomas Witt</a> managed this
"      release.
"    </p>
"    <p>
"      A great number of people contributed their time and expertise to make this
"      release possible. Special thanks go to Vladimir Prus for making Boost.Build
"      version 2 a reality, David Abrahams for authoring a new getting started guide
"      and Greg D. for answering countless questions.
"    </p>
"  </div>
"
-hash
"00f04c28816837c6a3be75774bad48800844546e09e5f6eb97e6a29d0270db36
-id
"version_1_34_0
-notice_url
-notice_xml
-pub_date
@Sat, 12 May 2007 12:00:00 +0000
-purpose_xml
"
"      New Libraries: Foreach, Statechart, TR1, Typeof, Xpressive. Updated Libraries:
"      Assign, Date_time, Filesystem, Function, Hash, Graph, MultiArray, Multi-Index,
"      Optional, Parameter, Pointer Container, Python, Signals, Smart Pointer, String
"      Algorithm, Wave
"
-title_xml
"Version 1.34.0
)
(feed/history/boost_1_34_1.qbk
-description_xhtml
"
"
"
"
"  <p>
"    This is a bug fix release addressing many problems with the 1.34.0 release. It
"    is a recommended upgrade for all users of Boost 1.34.0. For a complete list of
"    fixes see <a href="http://svn.boost.org/trac/boost/query?status=closed&amp;milestone=Boost+1.34.1">Boost
"    Trac</a>.
"  </p>
"  <div id="version_1_34_1.supported_compilers">
"    <h3><span class="link">Supported Compilers</span></h3>
"    <p>
"      New in this release is improved support for the IBM XL C/C++ compiler.
"    </p>
"    <p>
"      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
"      rely on modern C++ features not available in all compilers, not all Boost libraries
"      will work with every compiler. New in this release The following compilers
"      and platforms have been extensively tested with Boost, although many other
"      compilers and platforms will work as well. For more information, see the <a href="https://www.boost.org/regression/release/user/">regression test results</a>.
"    </p>
"    <ul>
"      <li>
"        <div>
"          <a href="http://developer.apple.com/">Apple GCC</a> 4.0.1 on Mac
"          OS X.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://www.codegear.com/products/cppbuilder">Borland C++</a>
"          5.8.2 on Windows.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://gcc.gnu.org/">GNU C++</a>
"          <ul>
"            <li>
"              <div>
"                3.2.x., 3.3.x, 3.4.x, 4.0.x, 4.1.x on Linux
"              </div>
"            </li>
"            <li>
"              <div>
"                4.1.x on Solaris
"              </div>
"            </li>
"            <li>
"              <div>
"                3.4.x on Windows
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://h30097.www3.hp.com/cplus/">HP C++ for Tru64 UNIX 7.1</a>.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://www.hp.com/go/c++">HP aC++ A.06.14</a>.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm">Intel
"          C++</a> 9.1 on Windows, 9.0 on Linux.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://www.metrowerks.com/">Metrowerks CodeWarrior</a>
"          9.4 on Windows.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://msdn.microsoft.com/visualc/">Microsoft Visual C++</a>
"          6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
"          support the non-standard "Safe" C++ Library shipping with Visual
"          C++ 8.0, which may result in many spurious warnings from Boost headers
"          and other standards-conforming C++ code. To suppress these warnings, define
"          the macro <code><span class="identifier">_SCL_SECURE_NO_DEPRECATE</span></code>.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://developers.sun.com/sunstudio/index.jsp">Sun Studio 11</a>
"          on Solaris.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_34_1.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/thomas_witt.html">Thomas Witt</a> managed this
"      release.
"    </p>
"    <p>
"      A great number of people contributed their time and expertise to make this
"      release possible. Special thanks go to Kim Barrett consolidating Boost.Iostreams
"      changes from various branches and Rene Rivera for general build and installation
"      support.
"    </p>
"  </div>
"
-hash
"ecf489dfd2ac0e411107511f5e03caa2e72aea77e60cdcea096173ad717d28ad
-id
"version_1_34_1
-notice_url
-notice_xml
-pub_date
@Tue, 24 Jul 2007 12:00:00 +0000
-purpose_xml
"
"      Bugfix Release.
"
-title_xml
"Version 1.34.1
)
(feed/history/boost_1_38_0.qbk
-description_xhtml
"
"
"
"
"  <div id="version_1_38_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/flyweight/index.html">Flyweight</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Design pattern to manage large quantities of highly redundant objects,
"                from Joaquín M López Muñoz.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/scope_exit/doc/html/index.html">ScopeExit</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Execute arbitrary code at scope exit, from Alexander Nasonov.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/utility/swap.html">Swap</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Enhanced generic swap function, from Joseph Gauterin.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_38_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/accumulators/index.html">Accumulators</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Add <code><span class="identifier">rolling_sum</span></code>,
"                <code><span class="identifier">rolling_count</span></code> and
"                <code><span class="identifier">rolling_mean</span></code> accumulators.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/html/any.html">Any</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Use a by-value argument for <code><span class="keyword">operator</span><span class="special">=</span></code> (<a href="https://svn.boost.org/trac/boost/ticket/2311">#2311</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/index.html">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved compatibility with some Windows firewall software.
"              </div>
"            </li>
"            <li>
"              <div>
"                Ensured arguments to <code><span class="identifier">windows</span><span class="special">::</span><span class="identifier">overlapped_ptr</span><span class="special">::</span><span class="identifier">complete</span><span class="special">()</span></code> are correctly passed to the completion
"                handler (<a href="https://svn.boost.org/trac/boost/ticket/2614">#2614</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a link problem and multicast failure on QNX (<a href="https://svn.boost.org/trac/boost/ticket/2504">#2504</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/2530">#2530</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a compile error in SSL support on MinGW / g++ 3.4.5.
"              </div>
"            </li>
"            <li>
"              <div>
"                Drop back to using a pipe for notification if eventfd is not available
"                at runtime on Linux (<a href="https://svn.boost.org/trac/boost/ticket/2683">#2683</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Various minor bug and documentation fixes (<a href="https://svn.boost.org/trac/boost/ticket/2534">#2534</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/2541">#2541</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/2607">#2607</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/2617">#2617</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/2619">#2619</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/config/index.html">Config</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Add new macros BOOST_NO_STD_UNORDERED and BOOST_NO_INITIALIZER_LISTS.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added Codegear compiler support.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added Dragonfly to the BSD family of configs.
"              </div>
"            </li>
"            <li>
"              <div>
"                Updated MSVC's binary ABI settings to match compiler default when
"                doing 64-bit builds.
"              </div>
"            </li>
"            <li>
"              <div>
"                Recognise latest compilers from MS and Intel.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/date_time/index.html">Date_Time</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support for formatting and reading time durations longer than
"                24 hours with new formatter: <code><span class="special">%</span><span class="number">0</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed the <code><span class="identifier">testfrmwk</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                file from the public include directory.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed several bugs and compile errors.
"              </div>
"            </li>
"            <li>
"              <div>
"                For full details see the <a href="/doc/libs/1_38_0/doc/html/date_time/details.html#date_time.changes">change
"                history</a>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/exception/index.html">Exception</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved and more customizable <a href="/libs/exception/doc/diagnostic_information.html">diagnostic_information</a>
"                output.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/index.html">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix native(name) test failures on POSIX-like systems.
"              </div>
"            </li>
"            <li>
"              <div>
"                Several bugfixes (<a href="https://svn.boost.org/trac/boost/ticket/2543">#2543</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/2224">#2224</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/2531">#2531</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/1840">#1840</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/2542">#2542</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/graph/index.html">Graph</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added a new algorithms for Travelling Salesman Problem approximation
"                (<code><span class="identifier">metric_tsp_approx</span></code>)
"                and resource-constrained Shortest Paths (<code><span class="identifier">r_c_shortest_paths</span></code>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for named vertices in <code><span class="identifier">adjacency_list</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                A number of bugfixes ( <a href="https://svn.boost.org/trac/boost/ticket/416">#416</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/1622">#1622</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/1700">#1700</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/2209">#2209</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/2392">#2392</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/2460">#2460</a>,
"                and <a href="https://svn.boost.org/trac/boost/ticket/2550">#2550</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/functional/hash/index.html">Hash</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">functional</span><span class="special">/</span><span class="identifier">detail</span><span class="special">/</span><span class="identifier">container_fwd</span><span class="special">.</span><span class="identifier">hpp</span></code> has been moved to <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">detail</span><span class="special">/</span><span class="identifier">container_fwd</span><span class="special">.</span><span class="identifier">hpp</span></code>. The current location is deprecated.
"              </div>
"            </li>
"            <li>
"              <div>
"                For more detail, see the <a href="/doc/html/hash/changes.html#hash.changes.boost_1_38_0">library
"                changelog</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/interprocess/index.html">Interprocess</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Updated documentation to show rvalue-references functions instead
"                of emulation functions.
"              </div>
"            </li>
"            <li>
"              <div>
"                More non-copyable classes are now movable.
"              </div>
"            </li>
"            <li>
"              <div>
"                Move-constructor and assignments now leave moved object in default-constructed
"                state instead of just swapping contents.
"              </div>
"            </li>
"            <li>
"              <div>
"                Several bugfixes (<a href="https://svn.boost.org/trac/boost/ticket/2391">#2391</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/2431">#2431</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/1390">#1390</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/2570">#2570</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/2528">#2528</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/intrusive/index.html">Intrusive</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New treap-based containers: treap, treap_set, treap_multiset.
"              </div>
"            </li>
"            <li>
"              <div>
"                Corrected compilation bug for Windows-based 64 bit compilers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Corrected exception-safety bugs in container constructors.
"              </div>
"            </li>
"            <li>
"              <div>
"                Updated documentation to show rvalue-references functions instead
"                of emulation functions.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/conversion/lexical_cast.htm">Lexical Cast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Changed to work without RTTI when <code><span class="identifier">BOOST_NO_TYPEID</span></code>
"                is defined (<a href="https://svn.boost.org/trac/boost/ticket/1220">#1220</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/doc/sf_and_dist/html/index.html">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added Johan Råde's optimised floating point classification routines.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed code so that it compiles in GCC's -pedantic mode (bug report
"                <a href="https://svn.boost.org/trac/boost/ticket/1451">#1451</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/doc/index.html">Multi-index Containers</a>:</span>
"  Some
"          redundant type definitions have been deprecated. Consult the library <a href="/libs/multi_index/doc/release_notes.html#boost_1_38">release notes</a>
"          for further information.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/proto/index.html">Proto</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix problem with SFINAE of binary operators (Bug <a href="https://svn.boost.org/trac/boost/ticket/2407">2407</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <code><span class="identifier">proto</span><span class="special">::</span><span class="identifier">call</span></code> transform for callable transforms
"                with &gt;3 arguments.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">result_of</span><span class="special">::</span><span class="identifier">value</span></code> changed behavior for array-by-value
"                terminals.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">unpack_expr</span></code> requires
"                only Forward Sequences rather than Random Access Sequences.
"              </div>
"            </li>
"            <li>
"              <div>
"                Deprecate legacy undocumented <code><span class="identifier">BOOST_PROTO_DEFINE_</span><span class="special">(</span><span class="identifier">VARARG_</span><span class="special">)</span><span class="identifier">FUNCTION_TEMPLATE</span></code>
"                macros.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add <code><span class="identifier">BOOST_PROTO_REPEAT</span></code>
"                and <code><span class="identifier">BOOST_PROTO_LOCAL_ITERATE</span></code>
"                macros to help with repetitive code generation
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for nullary expressions with tag types other than <code><span class="identifier">proto</span><span class="special">::</span><span class="identifier">tag</span><span class="special">::</span><span class="identifier">terminal</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Allow 0- and 1-argument variants of <code><span class="identifier">proto</span><span class="special">::</span><span class="identifier">or_</span></code>
"                and <code><span class="identifier">proto</span><span class="special">::</span><span class="identifier">and_</span></code>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/regex/index.html">Regex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <em>Breaking change</em>: empty expressions, and empty
"                alternatives are now allowed when using the Perl regular expression
"                syntax. This change has been added for Perl compatibility, when the
"                new <code><span class="identifier">syntax_option_type</span></code>
"                <em>no_empty_expressions</em> is set then the old behaviour
"                is preserved and empty expressions are prohibited. This is issue
"                <a href="https://svn.boost.org/trac/boost/ticket/1081">#1081</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for Perl style ${n} expressions in format strings (issue
"                <a href="https://svn.boost.org/trac/boost/ticket/2556">#2556</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for accessing the location of sub-expressions within
"                the regular expression string (issue <a href="https://svn.boost.org/trac/boost/ticket/2269">#2269</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compiler compatibility issues <a href="https://svn.boost.org/trac/boost/ticket/2244">#2244</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/2514">#2514</a>,
"                and <a href="https://svn.boost.org/trac/boost/ticket/2244">#2458</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/doc/html/thread.html">Thread</a>:</span>
"          <ul>
"            <li>
"              <div>
"                No longer catches unhandled exceptions in threads as this debuggers
"                couldn't identify the cause of unhandled exceptions in threads. An
"                unhandled exception will still cause the application to terminate.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/tr1/index.html">TR1</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support for the TR1 math functions and the unordered containers.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_traits/index.html">Type Traits</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support for Codegear intrinsics.
"              </div>
"            </li>
"            <li>
"              <div>
"                Minor tweaks to warning suppression and alignment_of code.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/unordered/index.html">Unordered</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Use <a href="/libs/utility/swap.html"><code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">swap</span></code></a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Use a larger prime number list for selecting the number of buckets.
"              </div>
"            </li>
"            <li>
"              <div>
"                Use <a href="/libs/type_traits/doc/html/boost_typetraits/category/alignment.html">aligned
"                storage</a> to store the types.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add support for C++0x initializer lists where they're available.
"              </div>
"            </li>
"            <li>
"              <div>
"                For more detail, see the <a href="/doc/html/unordered/changes.html#unordered.changes.boost_1_38_0">library
"                changelog</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/xpressive/index.html">Xpressive</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">basic_regex</span></code> gets
"                nested <code><span class="identifier">syntax_option_flags</span></code>
"                and <code><span class="identifier">value_type</span></code> typedef,
"                for compatibility with <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">basic_regex</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Ported to Proto v4; Proto v2 at <tt>boost/xpressive/proto</tt>
"                has been removed.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">regex_error</span></code> inherits
"                from <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">exception</span></code>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_38_0.other_changes">
"    <h3><span class="link">Other Changes</span></h3>
"    <ul>
"      <li>
"        <div>
"          Experimental support for building Boost with <a href="http://www.cmake.org/">CMake</a>
"          has been introduced in this version. For more details see the <a href="https://svn.boost.org/trac/boost/wiki/CMake">wiki</a>,
"          Discussion is taking place on the <a href="https://lists.boost.org/mailman/listinfo.cgi/boost-cmake">Boost-cmake
"          mailing list</a>.
"        </div>
"      </li>
"      <li>
"        <div>
"          Fixed subversion properties for several files. Most notably, unix shell
"          scripts should always have unix line endings, even in the windows packages.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_38_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                GCC 4.0.1 on Intel OS X 10.4.10, 10.5.2
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC 4.0.1 on PowerPC OS X 10.4.9
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                GCC 4.3.2 on Ubuntu Linux.
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC 4.3.3 on Debian "unstable".
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          HP-UX:
"          <ul>
"            <li>
"              <div>
"                GCC 4.2.1 on HP-UX 64-bit.
"              </div>
"            </li>
"            <li>
"              <div>
"                HP C/aC++ B3910B A.06.17 on HP-UX 64-bit.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                GCC 4.1.1, 4.2.1 on 64-bit Red Hat Enterprise Linux
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC 4.1.2 on 64-bit Redhat Server 5.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC 3.4.3, GCC 4.0.1, GCC 4.2.4 and GCC 4.3.2 on Red Hat Enterprise
"                Linux
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC 4.3.2 with C++0x extensions
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC 4.2.1 on OpenSuSE Linux
"              </div>
"            </li>
"            <li>
"              <div>
"                pgCC 8.0-0a 64-bit target on Red Hat Enterprise Linux
"              </div>
"            </li>
"            <li>
"              <div>
"                QLogic PathScale(TM) Compiler Suite: Version 3.1 on Red Hat Enterprise
"                Linux
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Intel 9.1, 10.0 on OS X 10.4.10
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel 10.1, 11.0 on OS X 10.5.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                Visual C++ 9.0 on Vista EE 64-bit.
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++ 9.0 express on Vista 32-bit.
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++ 9.0 on XP 32-bit.
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++ 8.0, using STLport, on XP and Windows Mobile 5.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++ 7.1, using STLport, on XP
"              </div>
"            </li>
"            <li>
"              <div>
"                Borland 5.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Borland 6.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel C++ 11.0, with a Visual C++ 9.0 backend, on XP 32-bit.
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel C++ 11.0, with a Visual C++ 9.0 backend, on Vista 64-bit.
"              </div>
"            </li>
"            <li>
"              <div>
"                Comeau 4.3.10.1 beta 2, with a Visual C++ 9.0 backend.
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC 3.4.4, on Cygwin
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          AIX:
"          <ul>
"            <li>
"              <div>
"                IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version
"                5.3.0.40
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                GCC 4.2.1 on FreeBSD 7.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          NetBSD:
"          <ul>
"            <li>
"              <div>
"                GCC 4.1.2 on NetBSD 4.0/i386 and NetBSD 4.0/amd64.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QNX Software Development Platform 6.4.0 x86
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Solaris:
"          <ul>
"            <li>
"              <div>
"                Sun C++ 5.7, 5.8, 5.9 on Solaris 5.10
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC 3.4.6 on Solaris 5.10
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_38_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/beman_dawes.html">Beman Dawes</a>, Eric Niebler,
"      <a href="/users/people/rene_rivera.html">Rene Rivera</a>, and Daniel
"      James managed this release. Thanks to Vicente Botet for helping compile these
"      release notes.
"    </p>
"  </div>
"
-hash
"4f69e64088ef6919d64361d96af2c4161a122dc40f6ec94547dd106e5fb5f3eb
-id
"version_1_38_0
-notice_url
-notice_xml
-pub_date
@Sun, 08 Feb 2009 12:00:00 +0000
-purpose_xml
"
"      New Libraries: Flyweight, ScopeExit, Swap. Updated Libraries: Accumulators,
"      Any, Asio, Config, Date_Time, Exception, Filesystem, Graph, Hash, Interprocess,
"      Intrusive, Lexical Cast, Math, Multi-index Containers, Proto, Regex, Thread,
"      TR1, Type Traits, Unordered, Xpressive. Other Changes: Experimental CMake build
"      system.
"
-title_xml
"Version 1.38.0
)
(feed/history/boost_1_50_0.qbk
-description_xhtml
"
"
"
"
"  <div id="version_1_50_0.patches">
"    <h3><span class="link">Patches</span></h3>
"    <ul>
"      <li>
"        <div>
"          <a href="/patches/1_50_0/001-unordered.patch">Boost.Unordered patch</a>
"          - Fixes a bug when compiled using a C++11 compiler, but with a C++03 allocator.
"          When inserting elements, <code><span class="identifier">allocator_traits</span></code>
"          detects that the node can be constructed using an accidental implicit conversion
"          which causes several problems.
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="http://cppcms.com/files/locale/boost_locale_utf.patch">Locale
"          Patch</a> - Fixes a bug which causes <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">locale</span><span class="special">::</span><span class="identifier">utf</span><span class="special">::</span><span class="identifier">utf_traits</span></code>
"          to accept some invalid UTF-8 sequences, which is a possible security flaw.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_50_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/algorithm/">Algorithm</a>:</span>
"  A collection of
"          useful generic algorithms, from Marshall Clow. This includes several different
"          searching algorithms, as well as most of the new algorithms from the C++11
"          standard library
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/functional/overloaded_function/">Functional/OverloadedFunction</a>:</span>
"  Overload
"          different functions into a single function object, from Lorenzo Caminiti.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/local_function/">LocalFunction</a>:</span>
"  Program
"          functions locally, within other functions, directly within the scope where
"          they are needed, from Lorenzo Caminiti.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/utility/identity_type/">Utility/IdentityType</a>:</span>
"  Wrap
"          types within round parenthesis so they can always be passed as macro parameters,
"          from Lorenzo Caminiti.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_50_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/accumulators/">Accumulators</a>:</span>
"          <ul>
"            <li>
"              <div>
"                add missing <code><span class="preprocessor">#include</span>
"                <span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">throw_exception</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code>, fixes <a href="https://svn.boost.org/trac/boost/ticket/6702">#6702</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                work around for msvc which allows ctor templates to be copy ctors,
"                fixes <a href="https://svn.boost.org/trac/boost/ticket/6535">#6535</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                shorten filenames to meet boost guidelines, fixes <a href="https://svn.boost.org/trac/boost/ticket/6196">#6196</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/array/">Array</a>:</span>
"          <ul>
"            <li>
"              <div>
"                add support for Boost.Hash <a href="https://svn.boost.org/trac/boost/ticket/6791">#6791</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Changed the <code><span class="identifier">epoll_reactor</span></code>
"                backend to do lazy registration for <code><span class="identifier">EPOLLOUT</span></code>
"                events.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed the <code><span class="identifier">epoll_reactor</span></code>
"                handling of out-of-band data, which was broken by an incomplete fix
"                in the last release.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed Asio's SSL wrapper to respect OpenSSL's <code><span class="identifier">OPENSSL_NO_ENGINE</span></code>
"                feature test <code><span class="preprocessor">#define</span></code>
"                (<a href="https://svn.boost.org/trac/boost/ticket/6432">#6432</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">windows</span><span class="special">::</span><span class="identifier">object_handle</span></code> so that it works
"                with Windows compilers that support C++11 move semantics (such as
"                <tt>g++</tt>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved the performance of strand rescheduling.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for <tt>g++</tt> 4.7 when compiling in C++11
"                mode (<a href="https://svn.boost.org/trac/boost/ticket/6620">#6620</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a problem where <code><span class="identifier">signal_set</span></code>
"                handlers were not being delivered when the <code><span class="identifier">io_service</span></code>
"                was constructed with a <code><span class="identifier">concurrency_hint</span></code>
"                of 1 (<a href="https://svn.boost.org/trac/boost/ticket/6657">#6657</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/bimap/">Bimap</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Remove spurious dependency on Boost.Serialization, fixes <a href="https://svn.boost.org/trac/boost/ticket/3868">#3868</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Solve unused constructor parameter warning, fixes <a href="https://svn.boost.org/trac/boost/ticket/5749">#5749</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add key_type and mapped_type (leaving data_type for backward compatibility)
"                typedefs to map views, fixes <a href="https://svn.boost.org/trac/boost/ticket/6031">#6031</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/chrono/">Chrono</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed Bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6361">#6361</a>
"                      integer overflow in boost::chrono::process_real_cpu_clock::now()
"                      under Windows 32bits.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6628">#6628</a>
"                      compiler warning in process_cpu_clocks.hpp.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6666">#6666</a>
"                      thread_clock.hpp needs pthread.h.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/concept_check/">Concept Check</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6738">#6738</a>
"                      Shadowed variable warning.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Remove Filesystem Version 2 from the distribution. Version 3 is now
"                the only distributed version. Those still using V2 are urged to migrate
"                to V3 as soon as possible.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add constexpr value_type preferred_separator to class path.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <a href="https://svn.boost.org/trac/boost/ticket/5118">#5118</a>,
"                <code><span class="identifier">replace_extension</span></code>
"                doesn't work as specified in documentation. The documentation, implementation,
"                and test cases have all had fixes applied. The documentation had
"                failed to mention that any existing extension is removed. The behavior
"                for simple cases has been reverted to the Version 2 behavior, but
"                with corrections so that complex replacements now work. Two test
"                cases from <a href="https://svn.boost.org/trac/boost/ticket/5118">#5118</a>
"                have been added.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <a href="https://svn.boost.org/trac/boost/ticket/3737">#3737</a>,
"                Boost.Filesystem does not compile on Windows Mobile. On Windows,
"                <code><span class="special">&lt;</span><span class="identifier">sys</span><span class="special">/</span><span class="identifier">stat</span><span class="special">.</span><span class="identifier">h</span><span class="special">&gt;</span></code> is no longer included.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <a href="https://svn.boost.org/trac/boost/ticket/4065">#4065</a>,
"                Boost Filesystem lexicographic path comparison inconsistent. This
"                required multiple source code bug fixes and code cleanup, correcting
"                problems not related to lexicographical issues.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add class path member function compare for consistency with std::string.
"              </div>
"            </li>
"            <li>
"              <div>
"                Tighten <code><span class="identifier">BOOST_FILESYSTEM_DYN_LINK</span></code>
"                and <code><span class="identifier">BOOST_FILESYSTEM_STATIC_LINK</span></code>
"                logic in <code><span class="identifier">filesystem</span><span class="special">/</span><span class="identifier">config</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                so that one or the other is always defined, and both being defined
"                is a <code><span class="preprocessor">#error</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <a href="https://svn.boost.org/trac/boost/ticket/6690">#6690</a>
"                and <a href="https://svn.boost.org/trac/boost/ticket/6737">#6737</a>,
"                resolving static linking related problems with VC++ 8 through 11.
"                Note that this fix may reintroduce codecvt thread safety problems
"                <a href="https://svn.boost.org/trac/boost/ticket/4889">#4889</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/6320">#6320</a>,
"                for these compilers if static linking is used.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add <code><span class="identifier">path</span><span class="special">::</span><span class="keyword">operator</span><span class="special">+=</span></code>
"                and concat functions to tack on things like suffixes or numbers.
"                Suggested by Ed Smith-Rowland and others.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <a href="https://svn.boost.org/trac/boost/ticket/6809">#6809</a>,
"                Implementation of <code><span class="identifier">filesystem</span><span class="special">::</span><span class="identifier">rename</span><span class="special">()</span></code> method for MS Windows is wrong,
"                by adding <code><span class="identifier">MOVEFILE_COPY_ALLOWED</span></code>
"                to deal with renames across drives, volumes, file systems. Fix has
"                no effect on non-Windows systems.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <a href="https://svn.boost.org/trac/boost/ticket/6819">#6819</a>,
"                A path operand with a source that was a one character array was treated
"                as empty, even if it wasn't empty. Such arrays can occur in unions
"                or in code using C variable length array idioms.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <a href="https://svn.boost.org/trac/boost/ticket/6932">#6932</a>,
"                create_directories throws exception even if <code><span class="identifier">error_code</span></code>
"                is specified.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/foreach/">Foreach</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Revert fix for <a href="https://svn.boost.org/trac/boost/ticket/6131">#6131</a>
"                which caused more harm than good.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed Bugs:
"                <ul>
"                  <li>
"                    <div>
"                      the return type of comparable projected point strategy for
"                      integer points was wrong (integer), fixed
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      several robustness issues in intersection of segments and polygons,
"                      fixed
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      invalid intersection output is filtered out
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      disjoint for multi_polygon's might incorrectly return true,
"                      fixed
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Solved tickets
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6585">6585</a>
"                      patch for alternative syntax multipoint, applied
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6584">6584</a>
"                      patch for bug in distance, applied
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/5730">5730</a>
"                      same issue as 6584, fixed
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6166">6166</a>
"                      patch for missing transformation, applied
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6696">6696</a>
"                      invalid intersection output, was (by chance) already fixed
"                      in Trunk before reported
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Additional functionality
"                <ul>
"                  <li>
"                    <div>
"                      added algorithm "touches" (OGC SF compliant) for
"                      *polygon/*polygon
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/graph/">Graph</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed Bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/4622">#4622</a>
"                      clear_vertex on a vertex with a self-loop can cause a segmentation
"                      fault.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6033">#6033</a>
"                      Lowpoint map calculated by biconnected_components(...) is sometimes
"                      wrong.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6242">#6242</a>
"                      isomorphism doesn't reset mapping.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6435">#6435</a>
"                      cube_topology documentation should say 3D, not 2D.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6520">#6520</a>
"                      small_world_1_70_6_0p02.png is broken in documentation of graph_parallel.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6564">#6564</a>
"                      BGL copy constructor for subgraph does not track local vertices/edges.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6573">#6573</a>
"                      BGL: boost::isomorphism routine fails with large graphs.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6583">#6583</a>
"                      Dijkstra Visitor Concept docs probably show wrong type for
"                      variable.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6647">#6647</a>
"                      BGL strong_components do not compile on MSVC 8.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6656">#6656</a>
"                      Dependent type in subgraph used without typename.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6707">#6707</a>
"                      is_straight_line_drawing.hpp missing #include &lt;map&gt;.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6708">#6708</a>
"                      Make bool boost::intersects() in is_straight_line_drawing.hpp
"                      inline?
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6739">#6739</a>
"                      Cannot use write_graphviz_dp with a constified subgraph.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6858">#6858</a>
"                      boost::get() calls wrongly resolved by g++.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6892">#6892</a>
"                      VertexIndexGraph concept not required for bron_kerbosch_all_cliques().
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Other bugs and warnings not in Trac.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/functional/hash/">Hash</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">array</span></code> and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">tuple</span></code>
"                when available (<a href="https://svn.boost.org/trac/boost/ticket/6806">#6806</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Avoid gcc's <code><span class="special">-</span><span class="identifier">Wfloat</span><span class="special">-</span><span class="identifier">equal</span></code>
"                warning (<a href="https://svn.boost.org/trac/boost/ticket/6771">#6771</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Add deprecation warning to the long deprecated <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">functional</span><span class="special">/</span><span class="identifier">detail</span><span class="special">/</span><span class="identifier">container_fwd</span><span class="special">.</span><span class="identifier">hpp</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/iostreams/">Iostreams</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved gzip support (<a href="https://svn.boost.org/trac/boost/ticket/5908">#5908</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Update tests for latest Boost.Filesystem and Boost.Test.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix some documentation errors (<a href="https://svn.boost.org/trac/boost/ticket/6530">#6530</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/6650">#6650</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/iterator/">Iterator</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/5127">#5127</a>
"                      Incorrect result_of usage in transform_iterator
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/5697">#5697</a>
"                      iterator_facade::operator-&gt; is broken for proxy references
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_array/">MultiArray</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Concepts bug fix and Workaround for Visual Studio 2010 (<a href="https://svn.boost.org/trac/boost/ticket/4874">#4874</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix to assert.cpp test case (<a href="https://svn.boost.org/trac/boost/changeset/78498">Patch</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/conversion/lexical_cast.htm">Lexical cast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">bad_lexical_cast</span></code> exception is now
"                globaly visible and can be catched even if code is compiled with
"                -fvisibility=hidden
"              </div>
"            </li>
"            <li>
"              <div>
"                Now it is possible to compile and use library with disabled exceptions
"                <a href="https://svn.boost.org/trac/boost/ticket/5800">#5800</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Better performance, less memory usage and bugfixes for <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">iterator_range</span><span class="special">&lt;</span><span class="identifier">character_type</span><span class="special">*&gt;</span></code>
"                conversions
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bugs and warnings: <a href="https://svn.boost.org/trac/boost/ticket/6645">#6645</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/6562">#6562</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/6812">#6812</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/6852">#6852</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/6717">#6717</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/6670">#6770</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/6504">#6504</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/locale/">Locale</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed build issues with STLPort library
"              </div>
"            </li>
"            <li>
"              <div>
"                Boost.System is now required depenency
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bugs <a href="https://svn.boost.org/trac/boost/ticket/6635">#6635</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/6833">#6833</a>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Promoted math constants to be 1st class citizens, including convenient
"                access to the most widely used built-in float, double, long double
"                via three namespaces.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the Owen's T function and Skew Normal distribution written
"                by Benjamin Sobotta.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added Hankel functions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Corrected issue <a href="https://svn.boost.org/trac/boost/ticket/6627">#6627
"                nonfinite_num_put formatting of 0.0 is incorrect</a> based on
"                a patch submitted by K R Walker.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed constant initialization mechanism so that it is thread safe
"                even for user-defined types, also so that user defined types get
"                the full precision of the constant, even when <code><span class="keyword">long</span>
"                <span class="keyword">double</span></code> does not. So for example
"                128-bit rational approximations will work with UDT's and do the right
"                thing, even though <code><span class="keyword">long</span> <span class="keyword">double</span></code> may be only 64 or 80 bits.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed issue in <code><span class="identifier">bessel_jy</span></code>
"                which causes Y[sub 8.5](4[pi]) to yield a NaN.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/msm/">MSM</a>:</span>
"          <ul>
"            <li>
"              <div>
"                eUML : better syntax for front-ends defined with eUML as transition
"                table only. Caution: Breaking Change!<a href="https://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table">https://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfix: graph building was only working if initial_state defined
"                as a sequence.
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfix: flags defined for a Terminate or Interrupt state do not break
"                the blocking function of these states any more.
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfix: multiple deferred events from several regions were not working
"                in every case.
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfix: visitor was passed by value to submachines.
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfix: no_transition was not called for submachines who send an
"                event to themselves.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed warnings with gcc.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/program_options/">Program Options</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved error reporting (<a href="https://svn.boost.org/trac/boost/changeset/77827">Patch
"                from Leo Goodstadt</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for customizing name of option's value in help messages (<a href="https://svn.boost.org/trac/boost/ticket/4781">#4781</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compilation with gcc 4.7 (<a href="https://svn.boost.org/trac/boost/ticket/6790">#6790</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/property_map/">PropertyMap</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed Bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6539">#6539</a>
"                      the return type of get() is not documented correctly.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6721">#6721</a>
"                      property_map_traits documentation does not mention reference.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/proto/">Proto</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Use <code><span class="keyword">decltype</span></code>-based
"                <code><span class="identifier">result_of</span></code> if and
"                only if the compiler implements N3276.
"              </div>
"            </li>
"            <li>
"              <div>
"                For C++11, force parameter to <code><span class="identifier">mpl</span><span class="special">::</span><span class="identifier">eval_if_c</span></code>
"                and <code><span class="identifier">mpl</span><span class="special">::</span><span class="identifier">if_c</span></code> to be <code><span class="keyword">bool</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Disable <tt>'__forceinline not inlined'</tt> warning on
"                msvc.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/ratio/">Ratio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed Bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6498">#6498</a>
"                      boost::ratio won't compile with default settings.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/scope_exit/">ScopeExit</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New Features:
"                <ul>
"                  <li>
"                    <div>
"                      Use variadic macros to specify captures as commas-separated
"                      lists (but kept preprocessor sequence syntax for backward compatibility).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Capture the object in scope using <code><span class="identifier">this_</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Support empty captures using <code><span class="keyword">void</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Implicit lambda-like captures using <code><span class="identifier">BOOST_SCOPE_EXIT_ALL</span></code>
"                      on compilers that support C++11 lambda functions.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/thread/">Thread</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New Features:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/1850">#1850</a>
"                      Request for unlock_guard to compliment lock_guard.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/2637">#2637</a>
"                      Request for shared_mutex duration timed_lock and timed_lock_shared.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/2741">#2741</a>
"                      Proposal to manage portable and non portable thread attributes.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/3567">#3567</a>
"                      Request for shared_lock_guard.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6194">#6194</a>
"                      Adapt to Boost.Move.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6195">#6195</a>
"                      c++11 compliance: Provide the standard time related interface
"                      using Boost.Chrono.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6217">#6217</a>
"                      Enhance Boost.Thread shared mutex interface following Howard
"                      Hinnant proposal.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6224">#6224</a>
"                      c++11 compliance: Add the use of standard noexcept on compilers
"                      supporting them.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6226">#6226</a>
"                      c++11 compliance: Add explicit bool conversion from locks.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6228">#6228</a>
"                      Add promise constructor with allocator following the standard
"                      c++11.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6230">#6230</a>
"                      c++11 compliance: Follows the exception reporting mechanism
"                      as defined in the c++11.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6266">#6266</a>
"                      Breaking change: thread destructor should call terminate if
"                      joinable.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6269">#6269</a>
"                      Breaking change: thread move assignment should call terminate
"                      if joinable.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6272">#6272</a>
"                      c++11 compliance: Add thread::id hash specialization.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6273">#6273</a>
"                      c++11 compliance: Add cv_status enum class and use it on the
"                      conditions wait functions.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6231">#6231</a>
"                      Add BasicLockable requirements in the documentation to follow
"                      c++11.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6342">#6342</a>
"                      c++11 compliance: Adapt the one_flag to the c++11 interface.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6671">#6671</a>
"                      upgrade_lock: missing mutex and release functions.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6672">#6672</a>
"                      upgrade_lock:: missing constructors from time related types.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6675">#6675</a>
"                      upgrade_lock:: missing non-member swap.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added missing packaged_task::result_type and packaged_task::
"                      constructor with allocator.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added packaged_task::reset()
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed Bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/2575">#2575</a>
"                      Bug- Boost 1.36.0 on Itanium platform.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/4345">#4345</a>
"                      thread::id and joining problem with cascade of threads.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/4921">#4921</a>
"                      BOOST_THREAD_USE_DLL and BOOST_THREAD_USE_LIB are crucial and
"                      need to be documented.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/5013">#5013</a>
"                      documentation: boost::thread: pthreas_exit causes terminate().
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/5173">#5173</a>
"                      boost::this_thread::get_id is very slow.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/5351">#5351</a>
"                      interrupt a future get boost::unknown_exception.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/5516">#5516</a>
"                      Upgrade lock is not acquired when previous upgrade lock releases
"                      if another read lock is present.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/5990">#5990</a>
"                      shared_future&lt;T&gt;::get() has wrong return type.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6174">#6174</a>
"                      packaged_task doesn't correctly handle moving results.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6222">#6222</a>
"                      Compile error with SunStudio: unique_future move.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6673">#6673</a>
"                      shared_lock: move assign doesn't works with c++11.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6674">#6674</a>
"                      shared_mutex: try_lock_upgrade_until doesn't works.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix issue signaled on the ML with task_object(task_object const&amp;)
"                      in presence of task_object(task_object&amp;&amp;)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/unordered/">Unordered</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix equality for <code><span class="identifier">unordered_multiset</span></code>
"                and <code><span class="identifier">unordered_multimap</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Implement <code><span class="identifier">reserve</span></code>
"                (<a href="https://svn.boost.org/trac/boost/ticket/6857">#6857</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Avoid gcc's <code><span class="special">-</span><span class="identifier">Wfloat</span><span class="special">-</span><span class="identifier">equal</span></code>
"                and <code><span class="special">-</span><span class="identifier">Wshadow</span></code>
"                warnings (<a href="https://svn.boost.org/trac/boost/ticket/6190">#6190</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/6771">#6771</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix namespace issue with bcp (<a href="https://svn.boost.org/trac/boost/ticket/6905">#6905</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix Sun workarounds (<a href="https://svn.boost.org/trac/boost/ticket/6784">#6784</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Some internal changes to bucket allocation.
"              </div>
"            </li>
"            <li>
"              <div>
"                See the <a href="/doc/html/unordered/changes.html#unordered.changes.boost_1_50_0">change
"                log</a> for full details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/wave/index.html">Wave</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Wave V2.3.2, see the <a href="/libs/wave/ChangeLog">Changelog</a>
"                for details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/xpressive/">xpressive</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Remove very ugly <code><span class="identifier">lexical_cast</span></code>
"                hack with a slightly less ugly one.
"              </div>
"            </li>
"            <li>
"              <div>
"                Replace MPL assert with static assert since it's problematic in C++11,
"                fixes <a href="https://svn.boost.org/trac/boost/ticket/6846">#6846</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_50_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Intel: 11.1
"              </div>
"            </li>
"            <li>
"              <div>
"                LLVM Clang 2.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Intel: 11.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x mode: 4.4.4
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                Visual C++ 8.0, 9.0, 10.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1, 4.7.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                GCC 4.2.1, 32 and 64 bit
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC, C++0x mode: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang from subversion
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.3, 4.6.2
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x mode: 4.3.4, 4.4.4, 4.5.3, 4.6.2
"              </div>
"            </li>
"            <li>
"              <div>
"                pgCC: 11.9
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 10.1, 11.1, 12.0, 12.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual Age 10.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang from subversion
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel 11.1, 12.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x mode: 4.4.4
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                Visual C++ 8.0, 10.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++ with STLport: 9.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++, Windows Mobile 5, with STLport: 9.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, mingw: 4.4.0, 4.4.7, 4.5.2, 4.5.4, 4.6.4, 4.7.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x mode, mingw: 4.5.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          AIX:
"          <ul>
"            <li>
"              <div>
"                IBM XL C/C++ Enterprise Edition, V12.1.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                GCC 4.2.1, 32 and 64 bit
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Solaris:
"          <ul>
"            <li>
"              <div>
"                Sun 5.10
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_50_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/beman_dawes.html">Beman Dawes</a>, Eric Niebler,
"      <a href="/users/people/rene_rivera.html">Rene Rivera</a>, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    </p>
"  </div>
"
-hash
"2d06c08c5b7b1c3a7a2563de6d8dfcdf72f4752f8f433f91d36c26ab1ee90e8c
-id
"version_1_50_0
-notice_url
-notice_xml
-pub_date
@Thu, 28 Jun 2012 08:48:57 -0400
-purpose_xml
"
"      New Libraries: Algorithm, Functional/OverloadedFunction, LocalFunction, Utility/IdentityType.
"      Updated Libraries: Accumulators, Array, Asio, Bimap, Chrono, Concept Check,
"      Filesystem, Foreach, Graph, Geometry, Hash, Iostreams, Iterator, MultiArray,
"      Lexical cast, Locale, MSM, Program Options, PropertyMap, Proto, Ratio, ScopeExit,
"      Thread, Unordered, Wave, xpressive
"
-title_xml
"Version 1.50.0
)
(feed/history/boost_1_51_0.qbk
-description_xhtml
"
"
"
"
"  <div id="version_1_51_0.patches">
"    <h3><span class="link">Patches</span></h3>
"    <ul>
"      <li>
"        <div>
"          <a href="http://cppcms.com/files/locale/boost_locale_utf.patch">Locale
"          Patch</a> - Fixes a bug which causes <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">locale</span><span class="special">::</span><span class="identifier">utf</span><span class="special">::</span><span class="identifier">utf_traits</span></code>
"          to accept some invalid UTF-8 sequences, which is a possible security flaw.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_51_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"  Context switching library,
"          from Oliver Kowalke.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_51_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/algorithm/">Algorithm</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">is_sorted_until</span></code>
"                ; now matches the c++11 standard behavior on ranges with duplicate
"                values.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added range support for the rest of the search algorithms.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">unhex</span></code> now uses Boost.Exception
"                to signal bad input.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed an incompatibility between <code><span class="identifier">ip</span><span class="special">::</span><span class="identifier">tcp</span><span class="special">::</span><span class="identifier">iostream</span></code>
"                and C++11 (<a href="https://svn.boost.org/trac/boost/ticket/7162">#7162</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Decorated GCC attribute names with underscores to prevent interaction
"                with user-defined macros (<a href="https://svn.boost.org/trac/boost/ticket/6415">#6415</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added missing <code><span class="preprocessor">#include</span>
"                <span class="special">&lt;</span><span class="identifier">cctype</span><span class="special">&gt;</span></code>, needed for some versions of
"                MinGW.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed to use <tt>gcc</tt>'s atomic builtins on ARM CPUs,
"                when available (<a href="https://svn.boost.org/trac/boost/ticket/7140">#7140</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed strand destruction to be a no-op, to allow strand objects
"                to be destroyed after their associated <code><span class="identifier">io_service</span></code>
"                has been destroyed.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for some newer versions of glibc which provide the
"                <code><span class="identifier">epoll_create1</span><span class="special">()</span></code>
"                function but always fail with <code><span class="identifier">ENOSYS</span></code>
"                (<a href="https://svn.boost.org/trac/boost/ticket/7012">#7012</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed the SSL implementation to throw an exception if SSL engine
"                initialisation fails (<a href="https://svn.boost.org/trac/boost/ticket/6303">#6303</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed another regression in <code><span class="identifier">buffered_write_stream</span></code>
"                (<a href="https://svn.boost.org/trac/boost/ticket/6310">#6310</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Implemented various minor performance improvements, primarily targeted
"                at Linux x86 and x86-64 platforms.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/config/">Config</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Deprecated a whole bunch of macros that were c++11 specific, but
"                not named to show that they were c++11 specific. Made new macros
"                with better names, and paired the old macros with the new ones. Updated
"                the documentation to list the deprecated macros.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/chrono/">Chrono</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/6918">#6918</a>
"                Boost Chrono compilation failure on HP uX due to undefined pthread_getcpuclockid.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/6241">#6241</a>
"                boost::chrono compilation problems without std::wstring support.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/6987">#6987</a>
"                Documentation &amp; C++11.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/7041">#7041</a>
"                time_point.hpp depends on Boost.System.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/7042">#7042</a>
"                Avoiding time_point and duration dependency on time.h and CLOCK_REALTIME.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/7058">#7058</a>
"                Make it work when BOOST_NO_EXCEPTIONS is defined.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/7069">#7069</a>
"                Misspellings in clock_string&lt;thread_clock&gt;.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/7081">#7081</a>
"                WinError.h capitalization in boost/detail/win/basic_types.hpp.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                points accessed through a pointer (e.g. in a linestring) should now
"                be specialized without the pointer. In previous versions a type
"                <code><span class="identifier">my_point</span></code> used like
"                <code><span class="identifier">linestring</span><span class="special">&lt;</span><span class="identifier">my_point</span><span class="special">*&gt;</span></code>
"                had to be specalized like: <code><span class="keyword">template</span><span class="special">&lt;&gt;</span> <span class="keyword">struct</span>
"                <span class="identifier">tag</span><span class="special">&lt;</span><span class="identifier">my_point</span><span class="special">*&gt;</span></code>.
"                Now the library itself removes the pointer before calling the traits
"                class, so now it should be like: <code><span class="keyword">template</span><span class="special">&lt;&gt;</span> <span class="keyword">struct</span>
"                <span class="identifier">tag</span><span class="special">&lt;</span><span class="identifier">my_point</span><span class="special">&gt;</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                intersection was sometimes wrong for integer points, fixed
"              </div>
"            </li>
"            <li>
"              <div>
"                documentation, order of parameters in simplify was wrong, fixed
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/7030">7030</a>
"                spherical distance, fixed (by patch of Karsten Ahnert)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/graph/">Graph</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Refactored support for internal and bundled properties in Boost.Graph-provided
"                graph types, and cleaned up named parameter functionality:
"                <ul>
"                  <li>
"                    <div>
"                      Enabled old-style (non-bundled) internal properties in <code><span class="identifier">compressed_sparse_row_graph</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Bundled properties should work correctly for all graph types
"                      and adaptors.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugs fixed:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6993">#6993</a>: Typo Bundled Properties document
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/7002">#7002</a>: Problem with initialization of CSR bidirectional
"                      graph
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/7023">#7023</a>: Enclose internal type graphml_reader in anonymous
"                      namespace
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Other bugs and warnings not in Trac
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/functional/hash/">Hash</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support the standard smart pointers.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">hash_value</span></code> now implemented
"                using SFINAE to avoid implicit casts to built in types when calling
"                it.
"              </div>
"            </li>
"            <li>
"              <div>
"                Updated to use the new config macros.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/conversion/lexical_cast.htm">Lexical cast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Better performance, less memory usage for <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">array</span><span class="special">&lt;</span><span class="identifier">character_type</span><span class="special">,</span> <span class="identifier">N</span><span class="special">&gt;</span></code> and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">array</span><span class="special">&lt;</span><span class="identifier">character_type</span><span class="special">,</span> <span class="identifier">N</span><span class="special">&gt;</span></code> conversions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bug with volatile input parameter <a href="https://svn.boost.org/trac/boost/ticket/7157">#7157</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Updated to use the new config macros.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/msm/">MSM</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for boost::any <a href="https://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s03.html#any-event">https://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s03.html#any-event</a>
"                or kleene <a href="https://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s04.html#kleene-event">https://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s04.html#kleene-event</a>
"                as acceptable events
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfix: compiler error with fsm internal table and none (compound)
"                event.
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfix: euml::defer_ leading to stack overflow.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/proto/">Proto</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Proto transforms get pseudo-parameter pack expansion support for
"                unpacking expressions. See the <a href="/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_51">Release
"                Notes</a> for more information.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/ratio/">Ratio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/7075">#7075</a>
"                Workaround for error: the type of partial specialization template
"                parameter constant "n1" depends on another template parameter.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/regex/">Regex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Updated to use the new config macros.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/thread/">Thread</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/4258">#4258</a>
"                Linking with boost thread does not work on mingw/gcc 4.5.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/4885">#4885</a>
"                Access violation in set_tss_data at process exit due to invalid assumption
"                about TlsAlloc.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/6931">#6931</a>
"                mutex waits forwever with Intel Compiler and /debug:parallel
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/7044">#7044</a>
"                boost 1.50.0 header missing.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/7052">#7052</a>
"                Thread: BOOST_THREAD_PROVIDES_DEPRECATED_FEATURES_SINCE_V3_0_0 only
"                masks thread::operator==, thread::operator!= forward declarations,
"                not definitions.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/7066">#7066</a>
"                An attempt to fix current_thread_tls_key static initialization order.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/7074">#7074</a>
"                Multiply defined symbol boost::allocator_arg.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/7078">#7078</a>
"                Trivial 64-bit warning fix on Windows for thread attribute stack
"                size
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/7089">#7089</a>
"                BOOST_THREAD_WAIT_BUG limits functionality without solving anything
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/unordered/">Unordered</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix construction/destruction issue when using a C++11 compiler with
"                a C++03 allocator (<a href="https://svn.boost.org/trac/boost/ticket/7100">#7100</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Remove a <code><span class="keyword">try</span><span class="special">..</span><span class="keyword">catch</span></code> to support compiling without
"                exceptions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Adjust SFINAE use to try to supprt g++ 3.4 (<a href="https://svn.boost.org/trac/boost/ticket/7175">#7175</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Updated to use the new config macros.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/wave/">Wave</a>:</span>
"          <ul>
"            <li>
"              <div>
"                See the <a href="/libs/wave/ChangeLog">Changelog</a> for details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/xpressive/">xpressive</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Work around buggy wide ctype facet on cygwin and mingw.
"              </div>
"            </li>
"            <li>
"              <div>
"                Work around absence of __isctype on some glibc implementations.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">op</span><span class="special">::</span><span class="identifier">as</span></code> shouldn't assume <code><span class="identifier">string</span><span class="special">::</span><span class="identifier">iterator</span></code> != <code><span class="keyword">char</span><span class="special">*</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix assertion in <code><span class="identifier">cpp_regex_traits</span></code>
"                on libc++, thanks to John Fletcher.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_51_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2, 4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11 mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 11.1, 12.0, 12.1
"              </div>
"            </li>
"            <li>
"              <div>
"                LLVM Clang 2.8
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                GCC: 4.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11 mode: 4.4
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 11.1, 12.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 8.0, 9.0, 10.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                GCC: 4.2.1, 32 and 64 bit
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: from subversion
"              </div>
"            </li>
"            <li>
"              <div>
"                LLVM Clang: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.2.4, 4.3.4, 4.4.4, 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.0, 4.7.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11 mode: 4.3.4, 4.4.4, 4.5.3, 4.6.3
"              </div>
"            </li>
"            <li>
"              <div>
"                pgCC: 11.9
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 10.1, 11.1, 12.0, 12.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual Age: 10.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: from subversion
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11 mode: from subversion
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 11.1, 12.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11 mode: 4.4
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                Visual C++: 8.0, 9.0, 10.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, mingw: 4.4.0, 4.6.3, 4.7.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          AIX:
"          <ul>
"            <li>
"              <div>
"                IBM XL C/C++ Enterprise Edition: V12.1.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                GCC: 4.2.1, 32 and 64 bit
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Solaris:
"          <ul>
"            <li>
"              <div>
"                Sun: 5.10
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_51_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/beman_dawes.html">Beman Dawes</a>, Eric Niebler,
"      <a href="/users/people/rene_rivera.html">Rene Rivera</a>, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    </p>
"  </div>
"
-hash
"9e684e2980e609aa395842445efa590af6f16155ce879319aad6bae1c9b345e1
-id
"version_1_51_0
-notice_url
-notice_xml
-pub_date
@Mon, 20 Aug 2012 16:00:21 -0700
-purpose_xml
"
"      New Libraries: Context. Updated Libraries: Algorithm, Asio, Config, Chrono,
"      Geometry, Graph, Hash, Lexical Cast, Math, MSM, Proto, Ratio, Regex, Thread,
"      Unordered, Wave, xpressive
"
-title_xml
"Version 1.51.0
)
(feed/history/boost_1_55_0.qbk
-description_xhtml
"
"
"
"
"  <div id="version_1_55_0.other_downloads">
"    <h3><span class="link">Other Downloads</span></h3>
"    <ul>
"      <li>
"        <div>
"          <a href="https://sourceforge.net/projects/boost/files/boost-binaries/1.55.0/">Windows
"          binaries</a>
"        </div>
"      </li>
"      <li>
"        <div>
"          <a href="https://sourceforge.net/projects/boost/files/boost-docs/1.55.0/">PDF
"          documentation</a> (only for BoostBook based documentation).
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_55_0.news">
"    <h3><span class="link">News</span></h3>
"    <p>
"      Support was removed from <a href="/libs/config/">Config</a> for some
"      very old versions of compilers. The new minimum requirements are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Digitial Mars 8.41
"        </div>
"      </li>
"      <li>
"        <div>
"          GCC 3.3
"        </div>
"      </li>
"      <li>
"        <div>
"          Intel 6.0
"        </div>
"      </li>
"      <li>
"        <div>
"          Visual C++ 7.1
"        </div>
"      </li>
"    </ul>
"    <p>
"      <strong>Note:</strong> This is just the mininimum requirements
"      for Config. Some Boost libraries may have higher mininimum requirements and
"      not support all platforms or compilers.
"    </p>
"    <p>
"      Other compilers are currently unchanged, but we are considering removing support
"      for some other old compilers. <strong>Candidates</strong> for
"      removal are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Metroworks C++ (i.e. codewarrior)
"        </div>
"      </li>
"      <li>
"        <div>
"          SunPro 5.7 and earlier
"        </div>
"      </li>
"      <li>
"        <div>
"          Borland C++ Builder 2006 (5.82) and earlier
"        </div>
"      </li>
"    </ul>
"    <p>
"      If you're using any of these, please let us know on the mailing lists. We will
"      take into account any feedback received before making a decision.
"    </p>
"  </div>
"  <div id="version_1_55_0.known_bugs">
"    <h3><span class="link">Known Bugs with Visual Studio
"    2013/Visual C++ 12</span></h3>
"    <p>
"      Visual Studio 2013 was released quite late in the release process, so there
"      exist several unresolved issues. These include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Serialization can't compile because of a missing include.
"        </div>
"      </li>
"      <li>
"        <div>
"          Using <code><span class="identifier">has_member_function_callable_with</span></code>
"          from Boost.Container's <code><span class="identifier">allocator_traits</span></code>
"          causes a compile error (<a href="https://svn.boost.org/trac/boost/ticket/9332">#9332</a>).
"        </div>
"      </li>
"      <li>
"        <div>
"          In libraries such as Unordered and MultiIndex, calling overloaded functions
"          with initializer lists can result in a compile error, with Visual C++ claiming
"          that the overloads are ambiguous. This is a Visual C++ bug and it isn't
"          clear if there's a good workaround. This won't affect code that doesn't
"          use initializer lists, or uses an initializer list that doesn't require
"          an implicit conversion (i.e. an initializer list of the container's exact
"          value type).
"        </div>
"      </li>
"      <li>
"        <div>
"          Thread: <code><span class="identifier">ex_scoped_thread</span></code>
"          compile fails (<a href="https://svn.boost.org/trac/boost/ticket/9333">#9333</a>).
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_55_0.patches">
"    <h3><span class="link">Patches</span></h3>
"    <ol>
"      <li>
"        <div>
"          <a href="/patches/1_55_0/001-log_fix_dump_avx2.patch">Log patch</a>:
"          fixes incorrect output of the <a href="https://www.boost.org/doc/libs/1_55_0/libs/log/doc/html/log/detailed/utilities.html#log.detailed.utilities.manipulators.dump">dump</a>
"          manipulator, when used on AVX2-enabled CPU (e.g. Intel Haswell).
"        </div>
"      </li>
"    </ol>
"  </div>
"  <div id="version_1_55_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/predef/">Predef</a>:</span> This library defines a
"          set of compiler, architecture, operating system, library, and other version
"          numbers from the information it can gather of C, C++, Objective C, and
"          Objective C++ predefined macros or those defined in generally available
"          headers, from Rene Rivera.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_55_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/accumulators/">Accumulators</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/7915">#7915</a> Fix silly typos.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/8850">#8850</a> Fix MSVC warnings.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/8262">#8262</a> Rename <code><span class="identifier">average</span></code>
"                to <code><span class="identifier">fdiv</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/any/">Any</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">bad_any_cast</span></code> exception is now visible
"                across modules <a href="https://svn.boost.org/trac/boost/ticket/8751">#8751</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">clear</span><span class="special">()</span></code>
"                member function.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added missing <code><span class="identifier">BOOST_NOEXCEPT</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed issue with const rvalues <a href="https://svn.boost.org/trac/boost/ticket/9215">#9215</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented a limited port to Windows Runtime. This support requires
"                that the language extensions be enabled. Due to the restricted facilities
"                exposed by the Windows Runtime API, the port also comes with the
"                following caveats:
"                <ul>
"                  <li>
"                    <div>
"                      The core facilities such as the <code><span class="identifier">io_service</span></code>,
"                      <code><span class="identifier">strand</span></code>, buffers,
"                      composed operations, timers, etc., should all work as normal.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      For sockets, only client-side TCP is supported.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Explicit binding of a client-side TCP socket is not supported.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      The <code><span class="identifier">cancel</span><span class="special">()</span></code> function is not supported
"                      for sockets. Asynchronous operations may only be cancelled
"                      by closing the socket.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Operations that use <code><span class="identifier">null_buffers</span></code>
"                      are not supported.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Only <code><span class="identifier">tcp</span><span class="special">::</span><span class="identifier">no_delay</span></code> and <code><span class="identifier">socket_base</span><span class="special">::</span><span class="identifier">keep_alive</span></code> options are supported.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Resolvers do not support service names, only numbers. I.e.
"                      you must use "80" rather than "http".
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Most resolver query flags have no effect.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a regression (introduced in Boost 1.54) where, on some platforms,
"                errors from <code><span class="identifier">async_connect</span></code>
"                were not correctly propagated through to the completion handler (<a href="https://svn.boost.org/trac/boost/ticket/8795">#8795</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a Windows-specific regression (introduced in Boost 1.54) that
"                occurs when multiple threads are running an <code><span class="identifier">io_service</span></code>.
"                When the bug occurs, the result of an asynchronous operation (error
"                and bytes transferred) is incorrectly discarded and zero values used
"                instead. For TCP sockets this results in spurious end-of-file notifications
"                (<a href="https://svn.boost.org/trac/boost/ticket/8933">#8933</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a bug in handler tracking, where it was not correctly printing
"                out some handler IDs (<a href="https://svn.boost.org/trac/boost/ticket/8808">#8808</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed the comparison used to test for successful synchronous accept
"                operations so that it works correctly with unsigned socket descriptors
"                (<a href="https://svn.boost.org/trac/boost/ticket/8752">#8752</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Ensured the signal number is correctly passed to the completion handler
"                when starting an <code><span class="identifier">async_wait</span></code>
"                on a signal that is already raised (<a href="https://svn.boost.org/trac/boost/ticket/8738">#8738</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Suppressed a g++ 4.8+ warning about unused typedefs (<a href="https://svn.boost.org/trac/boost/ticket/8980">#8980</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Enabled the move optimisation for handlers that use the default invocation
"                hook (<a href="https://svn.boost.org/trac/boost/ticket/8624">#8624</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Clarified that programs must not issue overlapping <code><span class="identifier">async_write_at</span></code> operations (<a href="https://svn.boost.org/trac/boost/ticket/8669">#8669</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed the Windows <code><span class="identifier">HANDLE</span></code>
"                backend to treat <code><span class="identifier">ERROR_MORE_DATA</span></code>
"                as a non-fatal error when returned by <code><span class="identifier">GetOverlappedResult</span></code>
"                for a synchronous read (<a href="https://svn.boost.org/trac/boost/ticket/8722">#8722</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++ language extensions use <code><span class="identifier">generic</span></code>
"                as a keyword. Added a workaround that renames the namespace to <code><span class="identifier">cpp_generic</span></code> when those language
"                extensions are in effect.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed some asynchronous operations that missed out on getting <code><span class="identifier">async_result</span></code> support in Boost 1.54.
"                In particular, the buffered stream templates have been updated so
"                that they adhere to current handler patterns (<a href="https://svn.boost.org/trac/boost/ticket/9000">#9000</a>, <a href="https://svn.boost.org/trac/boost/ticket/9001">#9001</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Enabled move support for Microsoft Visual Studio 2012 (<a href="https://svn.boost.org/trac/boost/ticket/8959">#8959</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">use_future</span></code>
"                support for Microsoft Visual Studio 2012.
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed a use of <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">min</span></code>
"                in the Windows IOCP backend to avoid a dependency on the <code><span class="special">&lt;</span><span class="identifier">algorithm</span><span class="special">&gt;</span></code> header (<a href="https://svn.boost.org/trac/boost/ticket/8758">#8758</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Eliminated some unnecessary handler copies.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed various minor and cosmetic issues in code and documentation
"                (including <a href="https://svn.boost.org/trac/boost/ticket/8347">#8347</a>, <a href="https://svn.boost.org/trac/boost/ticket/8950">#8950</a>, <a href="https://svn.boost.org/trac/boost/ticket/8953">#8953</a>, <a href="https://svn.boost.org/trac/boost/ticket/8965">#8965</a>, <a href="https://svn.boost.org/trac/boost/ticket/8997">#8997</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support for 64-bit atomic operations on x86 target for GCC,
"                MSVC and compatible compilers. The support is enabled when it is
"                known at compile time that the target CPU supports required instructions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for 128-bit atomic operations on x86-64 target for
"                GCC and compatible compilers. The support is enabled when it is known
"                at compile time that the target CPU supports required instructions.
"                The support can be tested for with the new <code><span class="identifier">BOOST_ATOMIC_INT128_LOCK_FREE</span></code>
"                macro.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a more efficient implementation of <code><span class="identifier">atomic</span><span class="special">&lt;&gt;</span></code> based on GCC <code><span class="identifier">__atomic</span><span class="special">*</span></code>
"                intrinsics available since GCC 4.7.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for more ARM v7 CPUs, improved detection of Thumb 2.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for x32 (i.e. 64-bit x86 with 32-bit pointers) target
"                on GCC and compatible compilers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed dependency on Boost.Thread.
"              </div>
"            </li>
"            <li>
"              <div>
"                Internal lock pool now includes proper padding and alignment to avoid
"                false sharing.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compilation with Intel compiler on Windows. Removed internal
"                macro duplication when compiled on Windows.
"              </div>
"            </li>
"            <li>
"              <div>
"                Some code refactoring to use C++11 features when available.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/chrono/">Chrono</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <em>Fixed Bugs:</em>
"                <ul>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/7868">#7868</a>
"                      <code><span class="identifier">chrono_io</span></code> parses
"                      time incorrectly (1.53 and 1.52)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/9028">#9028</a>
"                      Typo in <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">chrono</span><span class="special">/</span><span class="identifier">stopwatches</span><span class="special">/</span><span class="identifier">formatters</span><span class="special">/</span><span class="identifier">base_formatter</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/9147">#9147</a>
"                      uninitialized <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">tm</span></code>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/circular_buffer/">Circular Buffer</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support for rvalue references and rvalue references emulation
"                using Boost.Move. Values are moved only if value type has noexcept
"                move constructor and noexcept move assignment operator <a href="https://svn.boost.org/trac/boost/ticket/7888">#7888</a>.
"                Now Circular Buffer is usable with move-only types.
"              </div>
"            </li>
"            <li>
"              <div>
"                Much better documentation.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="http://svn.boost.org/trac/boost/ticket/5362">#5362</a>
"                circular_buffer does not compile with <code><span class="identifier">BOOST_NO_EXCEPTIONS</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="http://svn.boost.org/trac/boost/ticket/7025">#7025</a>
"                circular buffer reports warning: " type qualifiers ignored on
"                function return type" while compile.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="http://svn.boost.org/trac/boost/ticket/7950">#7950</a>
"                Eliminate W4-warnings under VS2005 - warning C4913: user defined
"                binary operator ',' exists but no overload could convert all operands,
"                default built-in binary operator ',' used.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/config/">Config</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Breaking change:</strong> Removed support
"                for some older compilers. The new minimum compiler versions are:
"              </div>
"              <ul>
"                <li>
"                  <div>
"                    Digitial Mars 8.41
"                  </div>
"                </li>
"                <li>
"                  <div>
"                    GCC 3.3
"                  </div>
"                </li>
"                <li>
"                  <div>
"                    Intel 6.0
"                  </div>
"                </li>
"                <li>
"                  <div>
"                    Visual C++ 7.1
"                  </div>
"                </li>
"              </ul>
"              <div>
"                Other compilers are unchanged.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/container/">Container</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented <span class="link">SCARY
"                iterators</span>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bugs <a href="https://svn.boost.org/trac/boost/ticket/8269">#8269</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/8473">#8473</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/8892">#8892</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/9009">#9009</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/9064">#9064</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/9092">#9092</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/9108">#9108</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="http://svn.boost.org/trac/boost/ticket/8650">#8650</a>
"                SSE2 intrinsics
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/coroutine/">Coroutine</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New interface (unidirectional data transfer).
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="http://svn.boost.org/trac/boost/ticket/8782">#8782</a>
"                no best alternative
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="http://svn.boost.org/trac/boost/ticket/8801">#8801</a>
"                auto-linking
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed Android compilation <a href="https://svn.boost.org/trac/boost/ticket/8706">#8706</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fusion/">Fusion</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/8759">#8759</a> specialization of <code><span class="identifier">convert_impl</span></code>
"                for <code><span class="identifier">map_tag</span></code>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/index.html">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <em>Additional functionality</em>
"                <ul>
"                  <li>
"                    <div>
"                      Added centroid for segment type
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added intersects() and disjoints() for Segment-Box and Linestring-Box
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added rtree creation using packing algorithm
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added contains() and covers() spatial query predicates
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added iterative queries
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                <em>Bugfixes</em>
"                <ul>
"                  <li>
"                    <div>
"                      In some cases .back() or .clear() was called, violating the
"                      usage of Concepts. Fixed for the reported cases
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                <em>Solved tickets</em>
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/6958">6958</a>
"                      Intersection generates self-intersection. Caused by spike,
"                      fixed
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/8364">8364</a>
"                      Invalid input exception, caused by spikes in previous steps,
"                      fixed
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/8365">8365</a>
"                      Invalid input exception, caused by spikes in previous steps,
"                      fixed
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/8969">8969</a>
"                      boost::geometry::model::point single argument constructor should
"                      be explicit
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/8825">8825</a>
"                      Patch adding member variable documentation to doxygen_xml2qbk
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/8652">8652</a>
"                      Intersection fails for triangle-triangle intersection. Caused
"                      by spike, fixed
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/9047">9047</a>
"                      Boost files that include themselves (strategies/intersection.hpp),
"                      fixed
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/graph/index.html">Graph</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="keyword">void</span></code> is no longer allowed
"                as a bundled property type (for example, in the VertexProperties
"                template parameters to graph types); it did not work reliably before,
"                but a static assertion now forbids it entirely. Use <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">no_property</span></code> instead.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for <code><span class="identifier">finish_edge</span></code>
"                visitor event point in depth-first search; the change should be backward-compatible
"                with visitors that do not have that member function.
"              </div>
"            </li>
"            <li>
"              <div>
"                Disabled building of tests on Sun compiler.
"              </div>
"            </li>
"            <li>
"              <div>
"                Multiple source vertices are supported in non-named-parameter versions
"                of <code><span class="identifier">breadth_first_visit</span></code>,
"                <code><span class="identifier">breadth_first_search</span></code>,
"                <code><span class="identifier">dijkstra_shortest_paths</span></code>,
"                and <code><span class="identifier">dijkstra_shortest_paths_no_init</span></code>.
"                This feature is not yet documented; to use it, replace the single
"                parameter for the source vertex in each of these functions by two
"                input iterators of the same type containing the source vertices to
"                use.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added Hawick circuits algorithm; contributed by Louis Dionne.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added edge coloring algorithm; contributed by Maciej Piechotka.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added min-cost max-flow algorithm; contributed by Piotr Wygocki.
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugs and feature requests from Trac fixed: <a href="https://svn.boost.org/trac/boost/ticket/5269">#5269</a>, <a href="https://svn.boost.org/trac/boost/ticket/8317">#8317</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/8433">#8433</a>, <a href="https://svn.boost.org/trac/boost/ticket/8791">#8791</a>, <a href="https://svn.boost.org/trac/boost/ticket/8877">#8877</a>, <a href="https://svn.boost.org/trac/boost/ticket/8986">#8986</a>, <a href="https://svn.boost.org/trac/boost/ticket/9012">#9012</a>, <a href="https://svn.boost.org/trac/boost/ticket/9080">#9080</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/functional/hash/">Hash</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Simplify a SFINAE check so that it will hopefully work on Sun 5.9
"                (<a href="https://svn.boost.org/trac/boost/ticket/8822">#8822</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Suppress Visual C++ infinite loop warning (<a href="https://svn.boost.org/trac/boost/ticket/8568">#8568</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/interprocess/">Interprocess</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs <a href="https://svn.boost.org/trac/boost/ticket/7156">#7156</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/7164">#7164</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/8277">#8277</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/8976">#8976</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/9065">#9065</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/9073">#9073</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/9008">#9008</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/intrusive/">Intrusive</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Source breaking</strong>: Deprecated <code><span class="identifier">xxx_dont_splay</span></code> functions from splay
"                containers. Deprecated <code><span class="identifier">splay_set_hook</span></code>
"                from splay containers, use <code><span class="identifier">bs_set_hook</span></code>
"                instead. Both will be removed in Boost 1.56.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>ABI breaking</strong>: Hash containers' end
"                iterator was implemented pointing to one-past the end of the bucket
"                array (see <a href="https://svn.boost.org/trac/boost/ticket/8698">#8698</a>)
"                causing severe bugs when values to be inserted where allocated next
"                to the bucket array. End iterator implementation was changed to point
"                to the beginning of the bucket array.
"              </div>
"            </li>
"            <li>
"              <div>
"                Big refactoring in order to reduce template and debug symbol bloat.
"                Test object files have been slashed to half in MSVC compilers in
"                Debug mode. Toolchains without Identical COMDAT Folding (ICF) should
"                notice size improvements.
"              </div>
"            </li>
"            <li>
"              <div>
"                Implemented <span class="link">SCARY iterators</span>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/conversion/lexical_cast.htm">Lexical cast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">bad_alloc</span></code> exceptions are now are
"                not converted to <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">bad_lexical_cast</span></code>
"                <a href="https://svn.boost.org/trac/boost/ticket/8966">#8966</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added static assert that checks for <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">numeric_limits</span></code>
"                specializations if they are required for conversion. Use <code><span class="identifier">BOOST_HAS_INT128</span></code> for detecting
"                128 bit integers support <a href="https://svn.boost.org/trac/boost/ticket/8790">#8790</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Documentation improved and more usage examples added.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                General changes:
"                <ul>
"                  <li>
"                    <div>
"                      Added a new configuration macro <code><span class="identifier">BOOST_LOG_WITHOUT_DEFAULT_FACTORIES</span></code>.
"                      By defining this macro the user can disable compilation of
"                      the default filter and formatter factories used by settings
"                      parsers. This can substantially reduce binary sizes while still
"                      retaining support for settings parsers.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Rewritten some of the parsers to reduce the compiled binary
"                      size. The rewritten parsers are more robust in detecting ambiguous
"                      and incorrect input.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      The following headers are deprecated: <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">log</span><span class="special">/</span><span class="identifier">utility</span><span class="special">/</span><span class="identifier">intrusive_ref_counter</span><span class="special">.</span><span class="identifier">hpp</span></code>,
"                      <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">log</span><span class="special">/</span><span class="identifier">utility</span><span class="special">/</span><span class="identifier">explicit_operator_bool</span><span class="special">.</span><span class="identifier">hpp</span></code>, <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">log</span><span class="special">/</span><span class="identifier">utility</span><span class="special">/</span><span class="identifier">empty_deleter</span><span class="special">.</span><span class="identifier">hpp</span></code>.
"                      These headers will be removed in future releases. The contents
"                      of these headers were moved to other libraries.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">timer</span></code>
"                      attribute generating incorrect time readings on Windows on
"                      heavy thread contention when <code><span class="identifier">QueryPerformanceCounter</span></code>
"                      API was used.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed a bug in the filter parser that prevented using parsed
"                      filters with some attributes.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed thread id formatting discrepancies between the default
"                      sink and formatters.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Closed tickets: <a href="https://svn.boost.org/trac/boost/ticket/8815">#8815</a>, <a href="https://svn.boost.org/trac/boost/ticket/8819">#8819</a>, <a href="https://svn.boost.org/trac/boost/ticket/8915">#8915</a>, <a href="https://svn.boost.org/trac/boost/ticket/8917">#8917</a>,
"                      <a href="https://svn.boost.org/trac/boost/ticket/9139">#9139</a>, <a href="https://svn.boost.org/trac/boost/ticket/9140">#9140</a>, <a href="https://svn.boost.org/trac/boost/ticket/9153">#9153</a>, <a href="https://svn.boost.org/trac/boost/ticket/9155">#9155</a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Suppress numerous warnings (mostly from GCC-4.8 and MSVC) <a href="https://svn.boost.org/trac/boost/ticket/8384">#8384</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/8855">#8855</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/9107">#9107</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/9109">#9109</a>..
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed PGI compilation issue <a href="https://svn.boost.org/trac/boost/ticket/8333">#8333</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed PGI constant value initialization issue that caused erf to
"                generate incorrect results <a href="https://svn.boost.org/trac/boost/ticket/8621">#8621</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Prevent macro expansion of some C99 macros that are also C++ functions
"                <a href="https://svn.boost.org/trac/boost/ticket/8732">#8732</a>
"                and <a href="https://svn.boost.org/trac/boost/ticket/8733">#8733</a>..
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed Student's T distribution to behave correctly with huge degrees
"                of freedom (larger than the largest representable integer) <a href="https://svn.boost.org/trac/boost/ticket/8837">#8837</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Make some core functions usable with <code><span class="keyword">long</span>
"                <span class="keyword">double</span></code> even when the platform
"                has no standard library <code><span class="keyword">long</span>
"                <span class="keyword">double</span></code> support <a href="https://svn.boost.org/trac/boost/ticket/8940">#8940</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix error handling of distributions to catch invalid scale and location
"                parameters when the random variable is infinite <a href="https://svn.boost.org/trac/boost/ticket/9042">#9042</a>
"                and <a href="https://svn.boost.org/trac/boost/ticket/9126">#9126</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add workaround for broken &lt;tuple&gt; in Intel C++ 14 <a href="https://svn.boost.org/trac/boost/ticket/9087">#9087</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve consistency of argument reduction in the elliptic integrals
"                <a href="https://svn.boost.org/trac/boost/ticket/9104">#9104</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in inverse incomplete beta that results in cancellation errors
"                when the beta function is really an arcsine or Student's T distribution.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix issue in Bessel I and K function continued fractions that causes
"                spurious over/underflow.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add improvement to non-central chi squared distribution quantile
"                due to Thomas Luu.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/move/">Move</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs <a href="https://svn.boost.org/trac/boost/ticket/7952">#7952</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/8764">#8764</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/8765">#8765</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/8842">#8842</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/8979">#8979</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/msm/">Meta State Machine</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New feature: interrupt states now support a sequence of events to
"                end the interruption.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed Trac <a href="https://svn.boost.org/trac/boost/ticket/8686">#8686</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multiprecision/">Multiprecision</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support for Boost.Serialization.
"              </div>
"            </li>
"            <li>
"              <div>
"                Suppressed some GCC warnings. See <a href="https://svn.boost.org/trac/boost/ticket/8872">8872</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bug in pow for large integer arguments. See <a href="https://svn.boost.org/trac/boost/ticket/8809">8809</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bug in pow for calculation of 0[super N]. See <a href="https://svn.boost.org/trac/boost/ticket/8798">8798</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bug in fixed precision cpp_int IO code that causes conversion
"                to string to fail when the bit count is very small (less than CHAR_BIT).
"                See <a href="https://svn.boost.org/trac/boost/ticket/8745">8745</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bug in cpp_int that causes left shift to fail when a fixed
"                precision type would overflow. See <a href="https://svn.boost.org/trac/boost/ticket/8741">8741</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed some cosmetic warnings from cpp_int. See <a href="https://svn.boost.org/trac/boost/ticket/8748">8748</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed calls to functions which are required to be macros in C99.
"                See <a href="https://svn.boost.org/trac/boost/ticket/8732">8732</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bug that causes construction from INT_MIN, LONG_MIN etc to
"                fail in cpp_int. See <a href="https://svn.boost.org/trac/boost/ticket/8711">8711</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/index.html">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.MultiIndex has been brought to a higher level of compliance
"                with C++11.
"              </div>
"              <ul>
"                <li>
"                  <div>
"                    <code><span class="identifier">multi_index_container</span></code>
"                    is now efficiently movable.
"                  </div>
"                </li>
"                <li>
"                  <div>
"                    Initializer lists supported.
"                  </div>
"                </li>
"                <li>
"                  <div>
"                    Emplace functions provided.
"                  </div>
"                </li>
"                <li>
"                  <div>
"                    Non-copyable elements (such as <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">unique_ptr</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code>) supported. This includes
"                    insertion of a range [<code><span class="identifier">first</span></code>,<code><span class="identifier">last</span></code>) where the iterators point
"                    to a type that is convertible to that of the element: no copy
"                    construction happens in the process.
"                  </div>
"                </li>
"                <li>
"                  <div>
"                    Random access indices provide <code><span class="identifier">shrink_to_fit</span><span class="special">()</span></code>.
"                  </div>
"                </li>
"              </ul>
"              <div>
"                Refer to the <a href="/libs/multi_index/doc/compiler_specifics.html">compiler
"                specifics</a> section for limitations on pre-C++11 compilers.
"              </div>
"            </li>
"            <li>
"              <div>
"                The following classes are deprecated:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="/libs/multi_index/doc/reference/key_extraction.html#member_offset"><code><span class="identifier">member_offset</span></code></a>,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit"><code><span class="identifier">const_mem_fun_explicit</span></code></a>,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit"><code><span class="identifier">mem_fun_explicit</span></code></a>,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_equal_to"><code><span class="identifier">composite_key_result_equal_to</span></code></a>,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_less"><code><span class="identifier">composite_key_result_less</span></code></a>,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_greater"><code><span class="identifier">composite_key_result_greater</span></code></a>,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_hash"><code><span class="identifier">composite_key_result_hash</span></code></a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/mpi/">MPI</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Replaced calls to deprecated MPI functions
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for multi-threaded initialization
"              </div>
"            </li>
"            <li>
"              <div>
"                Added in-place collectives
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/phoenix/">Phoenix</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/9049">#9049</a> <code><span class="identifier">phoenix</span><span class="special">::</span><span class="identifier">function</span></code>
"                constructor is constexpr.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/polygon/">Polygon</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Updated CGAL part of the Voronoi benchmark with patches from Sebastien
"                Loriot. Updated documentation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added polygon decomposition capability to polygon_90_set_data container
"                (patch from Intel). Updated documentation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugs fixed from Trac: <a href="https://svn.boost.org/trac/boost/ticket/8197">#8197</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/property_map/index.html">PropertyMap</a>:</span>
"          <ul>
"            <li>
"              <div>
"                dynamic_properties objects can now be built by non-destructively
"                chaining <code><span class="special">.</span><span class="identifier">property</span><span class="special">(</span><span class="identifier">name</span><span class="special">,</span> <span class="identifier">pm</span><span class="special">)</span></code> calls. Example:
"              </div>
"<pre><span class="identifier">boost</span><span class="special">::</span><span class="identifier">dynamic_properties</span><span class="special">()</span>
"  <span class="special">.</span><span class="identifier">property</span><span class="special">(</span><span class="string">"color"</span><span class="special">,</span> <span class="identifier">color_map</span><span class="special">)</span>
"  <span class="special">.</span><span class="identifier">property</span><span class="special">(</span><span class="string">"pos"</span><span class="special">,</span> <span class="identifier">position_map</span><span class="special">)</span>
"</pre>
"            </li>
"            <li>
"              <div>
"                The use of raw pointers as property maps is deprecated; it often
"                failed on Visual Studio in the past. This usage has been removed
"                from all tests and examples in Boost.Graph. The replacement to use
"                for vertex properties in graphs (the most common use for this feature)
"                is:
"              </div>
"<pre><span class="identifier">boost</span><span class="special">::</span><span class="identifier">make_iterator_property_map</span><span class="special">(</span>
"  <span class="special">&lt;</span><span class="identifier">pointer</span> <span class="keyword">or</span> <span class="identifier">container</span> <span class="special">.</span><span class="identifier">begin</span><span class="special">()</span> <span class="identifier">iterator</span><span class="special">&gt;,</span>
"  <span class="identifier">get</span><span class="special">(</span><span class="identifier">boost</span><span class="special">::</span><span class="identifier">vertex_index</span><span class="special">,</span> <span class="special">&lt;</span><span class="identifier">graph</span> <span class="identifier">object</span><span class="special">&gt;))</span>
"</pre>
"              <div>
"                (Note: the lack of namespace qualification on get() in this code
"                is necessary for generic code). Outside a graph context, the closest
"                equivalent is:
"              </div>
"<pre><span class="identifier">boost</span><span class="special">::</span><span class="identifier">make_iterator_property_map</span><span class="special">(</span>
"  <span class="special">&lt;</span><span class="identifier">pointer</span><span class="special">&gt;,</span>
"  <span class="identifier">boost</span><span class="special">::</span><span class="identifier">typed_identity_property_map</span><span class="special">&lt;</span><span class="identifier">std</span><span class="special">::</span><span class="identifier">size_t</span><span class="special">&gt;())</span>
"</pre>
"              <div>
"                There are commented-out static assertions on lines 151 and 159 of
"                <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">property_map</span><span class="special">/</span><span class="identifier">property_map</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code> that can be un-commented to find
"                deprecated uses of pointers in user code.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/rational">Rational</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">lowest</span></code> and
"                <code><span class="identifier">max_digits10</span></code>, members
"                of std::numeric_limits added in C++11, to the unit-test code. Needed
"                since Boost.Test refers to one of them when compiled in C++11 mode.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed initialization of some internal variables to something that
"                cannot be a narrowing conversion, which fixes issue <a href="https://svn.boost.org/trac/boost/ticket/5855">#5855</a>. Needed
"                since narrowing conversions are an error in C++11.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/smart_ptr/index.html">SmartPtr</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">smart_ptr</span><span class="special">/</span><span class="identifier">intrusive_ref_counter</span><span class="special">.</span><span class="identifier">hpp</span></code> header, extracted from Boost.Log.
"                The header implements a mixin base class that adds support for <code><span class="identifier">intrusive_ptr</span></code> to user's classes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/thread/">Thread</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <em>New Features:</em>
"                <ul>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/8519">#8519</a>
"                      Synchro: Update class barrier with a completion function.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/8515">#8515</a>
"                      Async: Add <code><span class="identifier">shared_future</span><span class="special">::</span><span class="identifier">then</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/8519">#8519</a>
"                      Synchro: Update class barrier with a completion function
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/8615">#8615</a>
"                      Async: Replace make_future/make_shared_future by make_ready_future.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/8627">#8627</a>
"                      Async: Add future&lt;&gt;::unwrap and unwrapping constructor.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/8677">#8677</a>
"                      Async: Add future&lt;&gt;::get_or.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/8678">#8678</a>
"                      Async: Add future&lt;&gt;::fallback_to.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/8891">#8891</a>
"                      upgrade_to_unique_lock: missing mutex() function.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/8955">#8955</a>
"                      Request for more efficient way to get exception_ptr from future.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                <em>Fixed Bugs:</em>
"                <ul>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/7461">#7461</a>
"                      detail::win32::ReleaseSemaphore may be called with count_to_release
"                      equal to 0
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/8070">#8070</a>
"                      prefer GetTickCount64 over GetTickCount
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/8768">#8768</a>
"                      win32 condition_variable::wait_until infinite wait in rare
"                      cases.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/8817">#8817</a>
"                      Boost Thread Windows CE _createthreadex handling breaks mingw
"                      w64.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/8943">#8943</a>
"                      Failed to compile code using boost::call_once with Intel C++
"                      Composer XE 2013 on Windows.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/8931">#8931</a>
"                      Typos in external_locking reference.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/9029">#9029</a>
"                      Misprint in documentation.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/9037">#9037</a>
"                      gcc -Wshadow gives warnings in condition_variable{,_fwd}.hpp.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/9041">#9041</a>
"                      Boost.Thread DSO's may need to link with Boost.Atomic.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/9048">#9048</a>
"                      boost::scoped_thread useless ctor with variadic template arguments.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/9079">#9079</a>
"                      Condition variable will wait forever for some timepoint values
"                      (Win).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/timer/">Timer</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed compilation on Intel compiler <a href="https://svn.boost.org/trac/boost/ticket/8956">#8956</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_traits/">Type Traits</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">is_copy_contructible</span></code>
"                trait <a href="https://svn.boost.org/trac/boost/ticket/8802">#8802</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/unordered/">Unordered</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Avoid some warnings (<a href="https://svn.boost.org/trac/boost/ticket/8851">#8851</a>, <a href="https://svn.boost.org/trac/boost/ticket/8874">#8874</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Avoid exposing some detail functions via. ADL on the iterators.
"              </div>
"            </li>
"            <li>
"              <div>
"                Work around variadic parameter bug in Visual Studio 2013. The compiler
"                still has problems with initializer lists, but it might not be possible
"                to work around those.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/utility/index.html">Utility</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">result_of</span></code> can be set to use TR1
"                protocol by default and fall back to <code><span class="keyword">decltype</span></code>
"                if the function object does not support it (like C++11 lambda functions,
"                for example). Define <code><span class="identifier">BOOST_RESULT_OF_USE_TR1_WITH_DECLTYPE_FALLBACK</span></code>
"                configuration macro to enable this mode.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved support for C++11 in the <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">base_from_member</span></code>
"                class template. The class implements perfect forwarding for the constructor
"                arguments, if the compiler supports rvalue references, variadic templates
"                and function template default arguments.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">utility</span><span class="special">/</span><span class="identifier">explicit_operator_bool</span><span class="special">.</span><span class="identifier">hpp</span></code> and <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">utility</span><span class="special">/</span><span class="identifier">empty_deleter</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                headers, which were extracted from Boost.Log. The headers implement
"                utilities for defining explicit conversion operators to <code><span class="keyword">bool</span></code> and a deleter function object
"                that does nothing, respectively.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed compilation of constructor and assignment operator with const
"                rvalues input parameters <a href="https://svn.boost.org/trac/boost/ticket/8988">#8988</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compilation of move assignment operator for situations when
"                one of the variant template classes has nothrow copy constructor
"                and throwing move constructor <a href="https://svn.boost.org/trac/boost/ticket/8772">#8772</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix compilation on exception-disabled environments <a href="https://svn.boost.org/trac/boost/ticket/8717">#8717</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix unreachable code warnings <a href="https://svn.boost.org/trac/boost/ticket/8665">#8665</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed duplicate code <a href="https://svn.boost.org/trac/boost/ticket/7601">#7601</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/wave/">Wave</a>:</span>
"          <ul>
"            <li>
"              <div>
"                See the <a href="/libs/wave/ChangeLog">Changelog</a> for details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/xpressive">xpressive</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/8843">#8843</a> throw instead of assert at incomplete charset
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/8880">#8880</a> remove unused local typedef
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/8882">#8882</a> use RAII instead of try/catch in sequence_stack.hpp
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/8474">#8474</a> make xpressive play nice with clang's -Wimplicit-fallthrough
"                diagnostic
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_55_0.updated_tools">
"    <h3><span class="link">Updated Tools</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/tools/quickbook">Quickbook</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Quickbook 1.6 finalized, see the <a href="/doc/html/quickbook/versions.html#language_versions.1_6">Quickbook
"                documentation for details</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_55_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.3, 3.2, 3.1, 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11, libc++: 3.4, 3.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.8.1, 4.7.3, 4.6.3, 4.5.3, 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++98: 4.8.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                GCC: 4.2
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang: 5.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 5.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 11.0, 10.0, 9.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 5.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 5.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang: trunk
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: trunk
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.2.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.3, 3.2, 3.1, 3.0, trunk
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.4
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11, libc++: 3.4, 3.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9.0 (experimental), 4.8.1, 4.7.3, 4.6.4, 4.5.3, 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++98: 4.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 13.0.1, 12.1.6
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 11.0, 10.0, 9.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_55_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/beman_dawes.html">Beman Dawes</a>, Eric Niebler,
"      <a href="/users/people/rene_rivera.html">Rene Rivera</a>, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    </p>
"  </div>
"
-hash
"fe8648672118c6c59e478971676e0fb2c5fd51c182b9917c11c18a7e5e8b8911
-id
"version_1_55_0
-notice_url
-notice_xml
-pub_date
@Mon, 11 Nov 2013 11:50:20 -0800
-purpose_xml
"
"      New Libraries: Predef. Updated Libraries: Accumulators, Any, Asio, Atomic,
"      Config, Chrono, Circular Buffer, Container, Context, Coroutine, Filesystem,
"      Fusion, Geometry, Graph, Hash, Interprocess, Intrusive, Lexical Cast, Log,
"      Math, Meta State Machine, Move, Multiprecision, Multi-index Containers, MPI,
"      Phoenix, Polygon, PropertyMap, Rational, Thread, Timer, Type Traits, Unordered,
"      Utility, Variant, Wave, xpressive.
"
-title_xml
"Version 1.55.0
)
(feed/history/boost_1_63_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_63_0.post_release_patches">
"    <h3><span class="link">Post-release Patches</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Using 64-bit atomic operations on 32-bit x86 with gcc versions older
"                than 4.7 and compatible compilers can result in generation of incorrect
"                code. This problem is fixed in <a href="https://github.com/boostorg/atomic/commit/a67cc1b055cf09f371e2eca544884634a1ccc886">this</a>
"                commit.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_63_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added the static constant <code><span class="identifier">atomic</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">is_always_lock_free</span></code>
"                for conformance with C++17. The constant indicates that the given
"                specialization always provides lock-free implementation of atomic
"                operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved support of Oracle Studio on x86 targets.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/container/">Container</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12534">Trac
"                      #12534: <em>"flat_map fails to compile if included
"                      after type_traits is instantiated under gcc"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12577">Trac
"                      #12577: <em>"Null reference in pair.hpp triggers
"                      runtime warning with -fsanitize=undefined"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/pull/40">GitHub
"                      #40: <em>Fix parameter types in copy_move_algo.hpp: iterator_traits::difference_type
"                      -&gt; allocator_traits::size_type</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/pull/41">GitHub
"                      #41: <em>Avoid -Wunreachable-code in do_allocate()</em></a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/11687">#11687</a> Xcode (Apple clang) and thread_local
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/12114">#12114</a> context does not preserve fpu context on ios arm64 devices
"                (fixed for other architecturs too)
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/12411">#12411</a> fpu registers not preserved with O2 optimizations in Visual
"                Studio (fixed for other architecturs too)
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/12551">#12551</a> building boost on arm64 causes error: unknown directive
"              </div>
"            </li>
"            <li>
"              <div>
"                reduced signatur for ontop-functions
"              </div>
"            </li>
"            <li>
"              <div>
"                unit-test for private fcontext-API
"              </div>
"            </li>
"            <li>
"              <div>
"                performance-test for ucontext and fcontext fixed
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                unbounded_channel and bounded_channel marked as deprecated
"              </div>
"            </li>
"            <li>
"              <div>
"                new classes buffered_channel and unbuffered_channel
"              </div>
"            </li>
"            <li>
"              <div>
"                performance improved
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fusion/">Fusion</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">vector</span></code> buggy constructors (Thanks
"                to Lee Clagett).
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">BOOST_FUSION_ADAPT</span><span class="special">*</span></code> and <code><span class="identifier">BOOST_FUSION_DEFINE</span><span class="special">*</span></code> now allow empty structures. (<a href="https://svn.boost.org/trac/boost/ticket/6592">#6592</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">BOOST_FUSION_DEFINE</span><span class="special">*</span></code> allows move constructor and assignment.
"                (<a href="https://svn.boost.org/trac/boost/ticket/10099">#10099</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Adaptor for <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">array</span></code> (Thanks to Mateusz Łoskot).
"                (<a href="https://svn.boost.org/trac/boost/ticket/8241">#8241</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed returning temporary variable warnings on MSVC.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <em>Improvements:</em>
"                <ul>
"                  <li>
"                    <div>
"                      Intersection: take care that output is valid (work in progres,
"                      not yet finished - but more is valid)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                <em>Solved tickets:</em>
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12289">#12289</a>
"                      Avoid warning/compilation error for std::cout
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12412">#12412</a>
"                      Invalid result of covered_by() with geographic Points and Boxes
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12413">#12413</a>
"                      rtree::remove() not working properly with geographic Points
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/functional/hash">Hash</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed some warnings.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/interprocess/">Interprocess</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12499">Trac
"                      #12499 (<em>"Memory allocation fails"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/30">GitHub
"                      Pull #30 (<em>"Provide extension point so library
"                      user can provide default temp folder"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/31">GitHub
"                      Pull #31 (<em>"Add xsi_key(key_t) constructor"</em>)</a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/intrusive/">Intrusive</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12556">Boost
"                      Trac #12556: <em>member_value_traits.hpp has a missing
"                      #include</em></a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/lexical_cast/">Lexical Cast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed issue found by <code><span class="special">-</span><span class="identifier">fsanitize</span><span class="special">=</span><span class="identifier">undefined</span></code> <a href="https://github.com/boostorg/lexical_cast/issues/21">#21</a>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                General changes:
"                <ul>
"                  <li>
"                    <div>
"                      Removed the previously deprecated <code><span class="identifier">type_info_wrapper</span></code>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                New features:
"                <ul>
"                  <li>
"                    <div>
"                      Added a way to access the current file name from the text file
"                      sink backend. The file name can be obtained with the <code><span class="identifier">get_current_file_name</span></code> method.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed compilation errors for Android API prior to version 21.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Streaming operators now take scalar types and enums by value.
"                      This allows to output static constants and bitfields directly
"                      into formatting stream and record stream. (<a href="https://svn.boost.org/trac/boost/ticket/11998">#11998</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed auto-detection of native syslog API. (<a href="https://svn.boost.org/trac/boost/ticket/12600">#12600</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      In UDP socket based syslog backend implementation, changed
"                      the syslog message format for better compliance with RFC3164.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      File close handler installed in text file sink backend is no
"                      longer called if the file is not open yet.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/metaparse/">Metaparse</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved the implementation of <code><span class="identifier">BOOST_METAPARSE_STRING</span></code>
"                <ul>
"                  <li>
"                    <div>
"                      The maximal string length limit has been increased to 2048
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      The maximal string length limit can be extended beyond 2048
"                      by regenerating some of the Boost headers using a script (part
"                      of the library)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      The string length limit can be changed within a compilation
"                      unit
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/move/">Move</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved experimental adaptive sort algorithm performance
"              </div>
"            </li>
"            <li>
"              <div>
"                Activate BOOST_MOVE_FORCEINLINE
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/optional/">Optional</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added two new in-place constructors. They work similarly to <code><span class="identifier">emplace</span><span class="special">()</span></code>
"                functions: they initialize the contained value by perfect-forwarding
"                the obtained arguments. One constructor always initializes the contained
"                value, the other based on a boolean condition.
"              </div>
"            </li>
"            <li>
"              <div>
"                Syntax <code><span class="identifier">o</span> <span class="special">=</span>
"                <span class="special">{}</span></code> now correctly un-initializes
"                an <code><span class="identifier">optional</span></code>, just
"                like in <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">optional</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">optional</span><span class="special">&lt;</span><span class="identifier">optional</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;&amp;&gt;</span></code>
"                initialization. (<a href="https://svn.boost.org/trac/boost/ticket/12203">#12203</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Optional constructors are sfinae-friendly. This fixes interaction
"                with <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">tuple</span></code>. (<a href="https://svn.boost.org/trac/boost/ticket/12563">#12563</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/phoenix/">Phoenix</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Most of modules now support C++11 variadic templates.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed type deduction failure with result type.
"              </div>
"            </li>
"            <li>
"              <div>
"                Suppress unused warnings.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed too few arguments error on binary math functions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added workarounds for older compiler.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/python/">Python</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added (basic) support for C++11 (std::shared_ptr, std::unique_ptr)
"              </div>
"            </li>
"            <li>
"              <div>
"                Incorporated an extension API to wrap <a href="http://www.numpy.org/">NumPy</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed obsolete bits and pieces
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/test/">Test</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.test v3.4 see the <a href="/doc/libs/1_63_0/libs/test/doc/html/boost_test/change_log.html">Change
"                log</a> section for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                New feature: <code><span class="identifier">per_element</span></code>
"                and <code><span class="identifier">lexicographic</span></code>
"                modifiers of <code><span class="identifier">BOOST_TEST</span></code>
"                can also be applied to string comparison
"              </div>
"            </li>
"            <li>
"              <div>
"                Breaking change: colons that appear in test case names are replaced
"                with underscores
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes
"                <ul>
"                  <li>
"                    <div>
"                      Trac tickets <a href="https://svn.boost.org/trac/boost/ticket/11756">#11756</a>, <a href="https://svn.boost.org/trac/boost/ticket/11907">#11907</a>, <a href="https://svn.boost.org/trac/boost/ticket/12339">#12339</a>, <a href="https://svn.boost.org/trac/boost/ticket/12506">#12506</a>,
"                      <a href="https://svn.boost.org/trac/boost/ticket/12507">#12507</a>, <a href="https://svn.boost.org/trac/boost/ticket/12530">#12530</a>,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Trac tickets <a href="https://svn.boost.org/trac/boost/ticket/12531">#12531</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Pull request <a href="https://github.com/boostorg/test/pull/103">PR103</a>,
"                      <a href="https://github.com/boostorg/test/pull/104">PR104</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_index/">TypeIndex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">runtime_cast</span></code>
"                to the library as an emulation of <code><span class="keyword">dynamic_cast</span></code>.
"                Thanks to Chris Glover for the implementation. See <a href="/doc/html/boost_typeindex_header_reference.html#header.boost.type_index.runtime_cast_hpp">runtime_cast
"                reference</a> for more info.
"              </div>
"            </li>
"            <li>
"              <div>
"                Internals of the CTTI were made more platform independant, due to
"                change of the <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">size_t</span></code>
"                type to <code><span class="keyword">unsigned</span> <span class="keyword">int</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/units/">Units</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix inspection warnings
"              </div>
"            </li>
"            <li>
"              <div>
"                updated physico-chemical constants to CODATA 2014 values
"              </div>
"            </li>
"            <li>
"              <div>
"                define biot correctly as 10 Ampere
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/unordered/">Unordered</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix an exception safety issue in assignment.
"              </div>
"            </li>
"            <li>
"              <div>
"                Use <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">allocator_traits</span></code> where available,
"                and support modern style rebind (<a href="https://svn.boost.org/trac/boost/ticket/12459">#12459</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Add some allocator aware constructors.
"              </div>
"            </li>
"            <li>
"              <div>
"                Use the hint iterator in <code><span class="identifier">emplace_hint</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed some warnings.
"              </div>
"            </li>
"            <li>
"              <div>
"                See the <a href="/doc/html/unordered/changes.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_63_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5, 3.6, 3.7, 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.2.0, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.3, 5.2.0, 6.1.1, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.2.0, 5.3.0, 6.1.1, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++11: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 16.0, 17.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 7.0.2
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 7.0.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14, mingw: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4, 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC: 4.4.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          SunOS:
"          <ul>
"            <li>
"              <div>
"                Oracle Solaris Studio: 12.5
"              </div>
"            </li>
"            <li>
"              <div>
"                Oracle Solaris Studio, C++11: 12.5
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5, 3.6, 3.7, 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.2.0, 6.1.1, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.3, 5.2.0, 6.1.1, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.2.0, 5.3.0, 6.1.1, 6.2.0, 7.0.0 (experimental)
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++1z: 6.1.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++11: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 16.0, 17.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 7.0.2
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 7.0.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14, mingw: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4, 6.2
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC,C++14: 6.1.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC: 4.4.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          SunOS:
"          <ul>
"            <li>
"              <div>
"                Oracle Solaris Studio: 12.5
"              </div>
"            </li>
"            <li>
"              <div>
"                Oracle Solaris Studio, C++11: 12.5
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_63_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/beman_dawes.html">Beman Dawes</a>, Eric Niebler,
"      <a href="/users/people/rene_rivera.html">Rene Rivera</a>, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    </p>
"  </div>
"
-hash
"bf8278b3b352dde70b55bfd5dfe34247277016aeb3ed435396f9bc3807340811
-id
"version_1_63_0
-notice_url
-notice_xml
-pub_date
@Mon, 26 Dec 2016 15:37:40 -0800
-purpose_xml
"
"      Updated Libraries: Atomic, Container, Context, Fiber, Fusion, Geometry, Hash,
"      Interprocess, Intrusive, LexicalCast, Log, Metaparse, Move, Optional, Phoenix,
"      Python, Test, TypeIndex, Units, Unordered.
"
-title_xml
"Version 1.63.0
)
(feed/history/boost_1_64_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_64_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/process/">Process</a>:</span>
"  Process library by Klemens
"          D. Morgenstern, that provides cross platorm ways to allows you to:
"        </div>
"        <ul>
"          <li>
"            <div>
"              create child processes
"            </div>
"          </li>
"          <li>
"            <div>
"              setup streams for child processes
"            </div>
"          </li>
"          <li>
"            <div>
"              communicate with child processes through streams (synchronously or
"              asynchronously)
"            </div>
"          </li>
"          <li>
"            <div>
"              wait for processes to exit (synchronously or asynchronously)
"            </div>
"          </li>
"          <li>
"            <div>
"              terminate processes
"            </div>
"          </li>
"        </ul>
"        <div>
"          Broken feature:
"        </div>
"        <ul>
"          <li>
"            <div>
"              <a href="https://github.com/klemens-morgenstern/boost-process/issues/67">GitHub
"              #67: <em>"group.wait() does not return"</em></a>.
"            </div>
"          </li>
"        </ul>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_64_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/any/">Any</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Suppressed false warnings about returning reference to temporary
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">addressof</span></code> is now used instead of
"                directly taking the address <a href="https://svn.boost.org/trac/boost/ticket/12615">#12615</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Headers are not included using double quotes any more <a href="https://svn.boost.org/trac/boost/ticket/12053">#12053</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>,
"                <code><span class="identifier">leak</span></code>, and <code><span class="identifier">undefined</span></code> sanitizers
"              </div>
"            </li>
"            <li>
"              <div>
"                Added more test
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed possible incorrect code generation in 64-bit atomic operations
"                on 32-bit x86 with gcc versions older than 4.7 and compatible compilers.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/config/">Config</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">BOOST_NO_CXX11_SFINAE_EXPR</span></code>
"                defect detection.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/container/">Container</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12749">Trac
"                      #12749: <em>"container::pmr::polymorphic_allocator
"                      compilation error"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/11333">Trac
"                      #11333: <em>"boost::basic_string_ref should interop
"                      with boost::container::basic_string"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/pull/45">GitHub
"                      #45: <em>"emplace_back must return reference to
"                      back(), not to *end()"</em></a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                new API: call/cc
"              </div>
"            </li>
"            <li>
"              <div>
"                deprecated API:execution-context
"              </div>
"            </li>
"            <li>
"              <div>
"                stack manipulation on MIPS fixed
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/12719">#12719</a> segmentation fault when built with mingw-w64
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/12948">#12948</a> Unexpected snprintf result is on Android ARM
"              </div>
"            </li>
"            <li>
"              <div>
"                #38: context_entry() crashes on macOS
"              </div>
"            </li>
"            <li>
"              <div>
"                #39: Unknown directive .cpu on aarch64 with Clang 3.8 on Android
"              </div>
"            </li>
"            <li>
"              <div>
"                #41: std::bind() fails with invoke()
"              </div>
"            </li>
"            <li>
"              <div>
"                #46: "rename of continuation member functions" missed a
"                spot
"              </div>
"            </li>
"            <li>
"              <div>
"                #50: bad assembly for fcontext on ppc64/sysv/elf
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/conversion/">Conversion</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Docs were ported to Quickbook (thanks to Mikhail Maksimov for the
"                port)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a memory leak in test (thanks to Mikhail Maksimov for the fix)
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>,
"                <code><span class="identifier">leak</span></code>, and <code><span class="identifier">undefined</span></code> sanitizers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented <code><span class="keyword">constexpr</span></code>
"                <code><span class="identifier">addressof</span></code> on compilers
"                that support C++11 <code><span class="keyword">constexpr</span></code>
"                and SFINAE expressions (Glen Fernandes). <code><span class="identifier">BOOST_CORE_NO_CONSTEXPR_ADDRESSOF</span></code>
"                macro indicates when <code><span class="keyword">constexpr</span></code>
"                <code><span class="identifier">addressof</span></code> is not
"                available.
"              </div>
"            </li>
"            <li>
"              <div>
"                In <code><span class="identifier">lightweight_test</span><span class="special">.</span><span class="identifier">hpp</span></code>,
"                added new macros <code><span class="identifier">BOOST_TEST_ALL_EQ</span></code>
"                and <code><span class="identifier">BOOST_TEST_ALL_WITH</span></code>
"                for testing container contents (Bjorn Reese).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/coroutine2/">Coroutine2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                #4: coroutine2&lt;&gt; does not accept std::bind
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed WinCE compilation
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">boost</span><span class="special">:</span><span class="identifier">dll</span><span class="special">::</span><span class="identifier">symbol_location_ptr</span></code> function for
"                getting location of a symbol by pointer that could not be dereferenced
"                (<code><span class="keyword">void</span></code> pointer for example)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed UB in <code><span class="identifier">detail</span><span class="special">::</span><span class="identifier">aggressive_ptr_cast</span></code>
"                for member pointers
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed leaks in experimental smart imports
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed warnings
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>
"                and <code><span class="identifier">leak</span></code> sanitizers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                (un)bounded_channel&lt;&gt; removed
"              </div>
"            </li>
"            <li>
"              <div>
"                #100: ASIO: unbuffered_channel / scheduler notify issue
"              </div>
"            </li>
"            <li>
"              <div>
"                #105: skynet variants crash on windows
"              </div>
"            </li>
"            <li>
"              <div>
"                #106: Passing a fixed_stack allocator to async/packaged_task doesn't
"                compile
"              </div>
"            </li>
"            <li>
"              <div>
"                #110: Compile error on ARMv6
"              </div>
"            </li>
"            <li>
"              <div>
"                #111: endless-loop in buffered_channel::try_value_pop()
"              </div>
"            </li>
"            <li>
"              <div>
"                #114: buffered_channel::try_push<code> <span class="identifier">does</span>
"                <span class="keyword">not</span> <span class="identifier">wake</span>
"                <span class="identifier">fibers</span> <span class="identifier">in</span>
"                </code>pop`
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements:
"                <ul>
"                  <li>
"                    <div>
"                      matrix transformation is now based on Boost.QVM instead of
"                      Boost.Ublas
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Breaking changes:
"                <ul>
"                  <li>
"                    <div>
"                      ublas_transformer is renamed to matrix_transformer
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      explicit modifier is added to constructors of rtree index::dynamic_*
"                      parameters
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      strategy::area::huiller replaced by strategy::area::spherical
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Solved issues:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/363">363</a>
"                      Missing includes in geometry/index/parameters.hpp
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/364">364</a>
"                      within(Linear, Areal) compilation error when arguments use
"                      different point types
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/370">370</a>
"                      Buffer Seg Faults with Ring as Input
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Solved tickets:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/11899">11899</a>
"                      boost::geometry::equals doesn't handle open polygons
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/11930">11930</a>
"                      Inaccuracy of area::huiller strategy
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/11931">11931</a>
"                      Wrong spherical area with pole encircling polygons
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12410">12410</a>
"                      Lack of support of geographic coordinate system in correct()
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12566">12566</a>
"                      Ambiguous template instantiation in equal_to&lt;&gt; when pair
"                      value contains raw pointer
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12861">12861</a>
"                      Segmentation fault in stdlibc++ (gcc 4.8.2) affecting rtree
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12885">12885</a>
"                      Use BOOST_THROW_EXCEPTION instead of throw
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes:
"                <ul>
"                  <li>
"                    <div>
"                      Fix distance_measure in get_turn_info
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/functional/hash/">Hash</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Stop using <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">unary_function</span></code> and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">binary_function</span></code> when they're not
"                available.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/interprocess/">Interprocess</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12617">Trac
"                      #12617 (<em>"clock_gettime not available on OS X
"                      10.11"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12744">Trac
"                      #12744 (<em>"winapi::set_timer_resolution inadvertently
"                      changes timer resolution (Windows)"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/32">GitHub
"                      Pull #32 (<em>"Conform to std::pointer_traits requirements"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/33">GitHub
"                      Pull #33 (<em>"explicit cast to derived class"
"                      and "64/32 bit processes sharing"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/34">GitHub
"                      Pull #34 (<em>"Update example to use multi_index::member
"                      instead of BOOST_MULTI_INDEX_MEMBER"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/35">GitHub
"                      Pull #35 (<em>"Fixed options for cross-compilation"</em>)</a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                New experimental option <code><span class="identifier">BOOST_INTERPROCESS_BOOTSTAMP_IS_SESSION_MANAGER_BASED</span></code>
"                from Windows systems. This option derives the unique bootstamp used
"                to name the folder where shared memory is placed from registry values
"                associated with the session manager. This option only works on Vista
"                and later systems and might be more stable than the default version.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/intrusive/">Intrusive</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12745">Boost
"                      Trac #12745: <em>key_nodeptr_comp broken if the key type
"                      is void*</em></a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12761">Boost
"                      Trac #12761: <em>intrusive::set::swap doesn't swap the
"                      comparison function*</em></a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/lexical_cast/">LexicalCast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed multiple warnings <a href="https://svn.boost.org/trac/boost/ticket/11842">#11842</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>,
"                <code><span class="identifier">leak</span></code>, and <code><span class="identifier">undefined</span></code> sanitizers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Big push to ensure all functions in also in C99 are compatible with
"                Annex F.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved accuracy of the Bessel functions I0, I1, K0 and K1, see
"                <a href="https://svn.boost.org/trac/boost/ticket/12066">12066</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/index.html">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed a bug related to ambiguous references in the presence of more
"                than one ranked index (ticket <a href="https://svn.boost.org/trac/boost/ticket/12955">#12955</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multiprecision/">Multiprecision</a>:</span>
"          <ul>
"            <li>
"              <div>
"                In <code><span class="identifier">cpp_bin_float</span></code>
"                prevent double rounding when converting to a denormalized float.
"                See <a href="https://svn.boost.org/trac/boost/ticket/12527">#12527</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in integer sqrt for very small integers. See <a href="https://svn.boost.org/trac/boost/ticket/12559">#12559</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix conversion to signed-zero in <code><span class="identifier">cpp_bin_float</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Change <code><span class="identifier">cpp_bin_float</span></code>
"                rounding code to round at arbitrary location so we can use it for
"                conversions, see <a href="https://svn.boost.org/trac/boost/ticket/12527">#12527</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve performance of 128-bit bit-scan operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix subtraction of very small quantities in <code><span class="identifier">cpp_bin_float</span></code>.
"                See: <a href="https://svn.boost.org/trac/boost/ticket/12580">#12580</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Bring error handling into line with C99 Annex F. See <a href="https://svn.boost.org/trac/boost/ticket/12581">#12581</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bitwise export of trivial <code><span class="identifier">cpp_int</span></code>'s,
"                see <a href="https://svn.boost.org/trac/boost/ticket/12627">#12627</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <code><span class="identifier">ilogb</span></code> (and code
"                that uses it) to consistently return the smallest value of the exponent
"                type when the argument is zero, see <a href="https://svn.boost.org/trac/boost/ticket/12625">#12625</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Allow conversion from <code><span class="identifier">__float128</span></code>
"                to <code><span class="identifier">cpp_bin_float</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in left shift of <code><span class="identifier">cpp_int</span></code>
"                which would result in bit-loss, see <a href="https://svn.boost.org/trac/boost/ticket/12790">#12790</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bugs in bounded but variable precision <code><span class="identifier">cpp_int</span></code>'s
"                caused by over-aggressive constexpr optimization, see <a href="https://svn.boost.org/trac/boost/ticket/12798">#12798</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/predef/">Predef</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix Intel C/C++ compiler version specification.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add <code><span class="identifier">BOOST_VERSION_NUMBER_MAJOR</span></code>,
"                <code><span class="identifier">BOOST_VERSION_NUMBER_MINOR</span></code>,
"                <code><span class="identifier">BOOST_VERSION_NUMBER_PATCH</span></code>
"                macros to extract components from valid version numbers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Change VS version numbering. Versions after VS2015 will use the compiler
"                version instead of the varied product versions.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/regex/">Regex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Compiling with Oracle C++ toolset is no longer restricted to static
"                linking.
"              </div>
"            </li>
"            <li>
"              <div>
"                Big effort to de-fuzz the library using libFuzzer and fix identified
"                issues, see: <a href="https://svn.boost.org/trac/boost/ticket/12818">#12818</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/smart_ptr/">Smart Pointers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Rewrite of <code><span class="identifier">allocate_shared</span></code>
"                and <code><span class="identifier">make_shared</span></code> for
"                arrays for a more optimal and more maintainable implementation (Glen
"                Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Pointer cast functions with move semantics (Chris Glover)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/test/">Test</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.test v3.5 see the <a href="/doc/libs/1_64_0/libs/test/doc/html/boost_test/change_log.html">Change
"                log</a> section for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                New feature:
"                <ul>
"                  <li>
"                    <div>
"                      Now Boost.Test provides <strong>customization
"                      points</strong> for logging user defined types
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      JUnit output format can now have a <em>log-level</em>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      JUnit output format has not better performances when the test
"                      modules have a lot of checks
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes
"                <ul>
"                  <li>
"                    <div>
"                      Trac tickets <a href="https://svn.boost.org/trac/boost/ticket/11756">#11756</a>, <a href="https://svn.boost.org/trac/boost/ticket/12540">#12540</a>, <a href="https://svn.boost.org/trac/boost/ticket/12712">#12712</a>, <a href="https://svn.boost.org/trac/boost/ticket/12748">#12748</a>,
"                      <a href="https://svn.boost.org/trac/boost/ticket/12778">#12778</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Pull request <a href="https://github.com/boostorg/test/pull/107">PR107</a>,
"                      <a href="https://github.com/boostorg/test/pull/108">PR108</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_index/">TypeIndex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">BOOST_TYPE_INDEX_IMPLEMENT_RUNTIME_CAST</span></code>,
"                which implements the functionality for <code><span class="identifier">runtime_cast</span></code>
"                but does not include the <code><span class="identifier">BOOST_TYPE_INDEX_REGISTER_CLASS</span></code>
"                macro (thanks to Chris Glover for imlpementing it)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed undefined macro warning in stl_type_index.hpp <a href="https://svn.boost.org/trac/boost/ticket/12739">#12739</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>,
"                <code><span class="identifier">leak</span></code>, and <code><span class="identifier">undefined</span></code> sanitizers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_traits/">TypeTraits</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added new traits <code><span class="identifier">make_void</span></code>
"                and <code><span class="identifier">void_t</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/unordered/">Unordered</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Initial support for new C++17 member functions: <code><span class="identifier">insert_or_assign</span></code>
"                and <code><span class="identifier">try_emplace</span></code> in
"                <code><span class="identifier">unordered_map</span></code>, <code><span class="identifier">merge</span></code> and <code><span class="identifier">extract</span></code>
"                in all containers.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed construction of variant from <code><span class="identifier">recursive_variant_</span></code>
"                (thanks to Mikhail Maksimov for the fix) <a href="https://svn.boost.org/trac/boost/ticket/12508">#12508</a>, <a href="https://svn.boost.org/trac/boost/ticket/12645">#12645</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Do not enable variadic templates for MSVC2015Update1 as it still
"                has issues <a href="https://svn.boost.org/trac/boost/ticket/12236">#12236</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Workaround GCC6 crash (thanks to Mikhail Maksimov for the workaround)
"                <a href="https://svn.boost.org/trac/boost/ticket/12680">#12680</a>, <a href="https://svn.boost.org/trac/boost/ticket/7120">#7120</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Made <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">polymorphic_</span><span class="special">*</span><span class="identifier">get</span></code> to work as <code><span class="identifier">boost</span><span class="special">::*</span><span class="identifier">get</span></code>
"                in undocumented border cases and fixed tests <a href="https://svn.boost.org/trac/boost/ticket/11950">#11950</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                CI tests now run with <code><span class="identifier">address</span></code>,
"                <code><span class="identifier">leak</span></code>, and <code><span class="identifier">undefined</span></code> sanitizers
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_64_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5, 3.6, 3.7.1, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.1, 6.2.0, 6.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++1z: 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++11: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 16.0, 17.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 7.0.2
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 7.0.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14, mingw: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4, 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.8
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC: 4.4.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          SunOS:
"          <ul>
"            <li>
"              <div>
"                Oracle Solaris Studio: 12.5
"              </div>
"            </li>
"            <li>
"              <div>
"                Oracle Solaris Studio, C++11: 12.5
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.4, 3.5, 3.6, 3.7. 3.8, 3.8.1, 3.9.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.9.1, 4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.1, 6.2.0, 6.3.0, 7.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++1z: 6.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++11: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 16.0, 17.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 7.0.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4, 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang, C++98: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.8
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC: 4.4.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          SunOS:
"          <ul>
"            <li>
"              <div>
"                Oracle Solaris Studio: 12.5
"              </div>
"            </li>
"            <li>
"              <div>
"                Oracle Solaris Studio, C++11: 12.5
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_64_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/beman_dawes.html">Beman Dawes</a>, Eric Niebler,
"      <a href="/users/people/rene_rivera.html">Rene Rivera</a>, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    </p>
"  </div>
"
-hash
"b567df07e42085fe7f6679e9a0cc4963578cc06651deeb18111695bdc5c9bd0d
-id
"version_1_64_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Library: Process. Updated Libraries: Any, Atomic, Config, Container, Context,
"      Conversion, Core, Coroutine2, DLL, Fiber, Geometry, Hash, Interprocess, Intrusive,
"      LexicalCast, Math, Multi-index Containers, Multiprecision, Predef, Regex, Smart
"      Pointers, Test, TypeIndex, TypeTraits, Unordered, Variant.
"
-title_xml
"Version 1.64.0
)
(feed/history/boost_1_65_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_65_0.known_issues">
"    <h3><span class="link">Known Issues</span></h3>
"    <p>
"      These are patches from library authors which were found too late to be fixed
"      in the release. Be careful as they have not been through the normal testing
"      process.
"    </p>
"    <p>
"      Combined patch for fixes to issues: <a href="/patches/1_65_0/boost_1_65_0.patch">boost_1_65_0.patch</a>.
"      Use <code><span class="identifier">patch</span> <span class="special">-</span><span class="identifier">p1</span> <span class="special">&lt;</span> <span class="identifier">boost_1_65_0</span><span class="special">.</span><span class="identifier">patch</span></code> from the root of the boost repo to
"      apply. Or you can apply the patches individually below.
"    </p>
"    <ul>
"      <li>
"        <div>
"          Context and Fiber don't return continuations when they should:
"          <ul>
"            <li>
"              <div>
"                <a href="/patches/1_65_0/0001-context-function-executed-by-resume_with-has-to-retu.patch">Context
"                patch</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/patches/1_65_0/0002-fiber-resume_with-requires-tor-return-a-continuation.patch">Fiber
"                patch</a>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Thread: Bug in <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">condition_variable</span></code> on Windows:
"          <ul>
"            <li>
"              <div>
"                <a href="/patches/1_65_0/0003-thread-130-Bug-in-boost-condition_variable-on-Window.patch">Thread
"                patch 1</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/patches/1_65_0/0004-thread-130-Bug-in-boost-condition_variable-on-Window.patch">Thread
"                patch 2</a>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_65_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/poly_collection/">PolyCollection</a>:</span>
"  Fast
"          containers of polymorphic objects, from Joaquín M López Muñoz.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"  Gather, store,
"          copy and print backtraces, from Antony Polukhin.
"          <ul>
"            <li>
"              <div>
"                Note: Library has <a href="https://github.com/boostorg/stacktrace/issues/14">issue
"                with MinGW</a> and may produce empty backtraces with that compiler.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_65_0.removed_libraries">
"    <h3><span class="link">Removed Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          TR1
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_65_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Changed to require <tt>g++</tt> versions &gt;= 4.7 to use
"                standard atomics, to fix a linker error when using <tt>g++</tt>
"                4.6 (<a href="https://svn.boost.org/trac/boost/ticket/13121">#13121</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Enabled use of <code><span class="keyword">constexpr</span></code>
"                and variadic templates with recent MSVC versions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a race condition in the Linux epoll backend, which may occur
"                when a socket or descriptor is closed while another thread is blocked
"                on epoll.
"              </div>
"            </li>
"            <li>
"              <div>
"                Eliminated use of deprecated <code><span class="identifier">auto_ptr</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed misplaced use of <code><span class="identifier">asio_handler_is_continuation</span></code>
"                result in reactive <code><span class="identifier">async_accept</span></code>
"                implementation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed to use <code><span class="identifier">poll</span><span class="special">.</span><span class="identifier">h</span></code>
"                rather than <code><span class="identifier">sys</span><span class="special">/</span><span class="identifier">poll</span><span class="special">.</span><span class="identifier">h</span></code> on some modern POSIX platforms
"                (<a href="https://svn.boost.org/trac/boost/ticket/12419">#12419</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed MSVC intellisense detection.
"              </div>
"            </li>
"            <li>
"              <div>
"                Disabled use of the <code><span class="identifier">__thread</span></code>
"                keyword extension for android/clang/x86 targets.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements:
"                <ul>
"                  <li>
"                    <div>
"                      call/cc supports ucontext-API (swapcontext)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      call/cc supports Windows-Fiber-API
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      call/cc supports on demand growing (segmented/split) stacks
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12719">#12719</a>: context test cases and examples segmentation fault
"                      when built with mingw-w64 toolchain
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      #52: Failing to build callcc test with g++-4.9
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                important:
"                <ul>
"                  <li>
"                    <div>
"                      required bug fix <a href="https://github.com/boostorg/context/commit/420554fe9ac01482990e8ae314f4f7ba81010c9a">420554fe9ac01482990e8ae314f4f7ba81010c9a</a>
"                      not included in 1.65
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/config/">Config</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">BOOST_NO_CXX11_POINTER_TRAITS</span></code>,
"                <code><span class="identifier">BOOST_NO_CXX17_FOLD_EXPRESSIONS</span></code>,
"                <code><span class="identifier">BOOST_NO_CXX17_INLINE_VARIABLES</span></code>,
"                <code><span class="identifier">BOOST_NO_CXX17_STRUCTURED_BINDINGS</span></code>
"                defect detection.
"              </div>
"            </li>
"            <li>
"              <div>
"                BOOST_FALLTHROUGH support for GCC 7 and above. (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented <code><span class="identifier">pointer_traits</span></code>
"                for C++03 and higher, that implements <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0653r0.html">P0653r0</a>
"                (Glen Fernandes). This implementation is now used by Align, Circular
"                Buffer, Fiber, Geometry, among other libraries.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">BOOST_TEST_GT</span></code>
"                and <code><span class="identifier">BOOST_TEST_GE</span></code>
"                to Lightweight Test.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/coroutine2/">Coroutine2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                supports ucontext-API (swapcontext)
"              </div>
"            </li>
"            <li>
"              <div>
"                supports Windows-Fiber-API
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/13064">#13064</a>: different behavior coroutine and coroutine2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix PE parsing on non Windows platforms.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements:
"                <ul>
"                  <li>
"                    <div>
"                      hardware transactional memory (Intel TSX) supported
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      NUMA supported
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      ucontext-API (swapcontext) supported
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Windows-Fiber-API supported
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      on demand growing stacks
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes:
"                <ul>
"                  <li>
"                    <div>
"                      #121: failing to build static lib with GCC 4.8 and C++11
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      #123: assertion failure in schedule_from_remote
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      #125: erratic crashes in testsuite
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      #126: incorrect std::memory_order value in compare_exchange_strong?
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                important:
"                <ul>
"                  <li>
"                    <div>
"                      required bug fix <a href="https://github.com/boostorg/fiber/commit/63f1041f0e484e64dec437a0fa780ea2463abda2">63f1041f0e484e64dec437a0fa780ea2463abda2</a>
"                      not included in 1.65
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fusion/">Fusion</a>:</span>
"          <ul>
"            <li>
"              <div>
"                MSVC 14.1 supports variadic containers, such as <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">vector</span></code>,
"                <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">deque</span></code>, <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">map</span></code>,
"                <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">set</span></code>, and <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">tuple</span></code>.
"                (<a href="https://svn.boost.org/trac/boost/ticket/12986">#12986</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements:
"                <ul>
"                  <li>
"                    <div>
"                      Add correct() overload taking area strategy
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add is_convex() overload taking side strategy
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add missing relational operations (covered_by, crosses, equals,
"                      etc.) for MultiPoint/AnyGeometry
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Solved issues:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12410">12410</a>
"                      Lack of support of geographic coordinate system in correct()
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/13035">13035</a>
"                      Wrong result of non-cartesian intersection strategies for segments
"                      near poles.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/13057">13057</a>
"                      Wrong result of intersects() for linestrings caused by numerical
"                      issue in disjoint() for boxes.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes:
"                <ul>
"                  <li>
"                    <div>
"                      Fix is_valid which could return false for multipolygons where
"                      an interior ring touches another interior ring
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix is_valid which could return false for multipolygons where
"                      a polygon was located in an interior ring, all touching each
"                      other
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix union which could produce invalid results (for some cases,
"                      this needs to define BOOST_GEOMETRY_INCLUDE_SELF_TURNS)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix intersection (idem), but some cases are still not yet valid
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix difference (idem), but some cases are still not yet valid
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix propagation of area strategy into the internals of various
"                      algorithms from intersection strategy
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix uninitialized variable in relate and reference to temporary
"                      in overlay
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix error in disjoint for geographic Segment/Box
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix handling of non-cartesian geometries in various algorithms
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/functional/hash/">Hash</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for <code><span class="keyword">char16_t</span></code>,
"                <code><span class="keyword">char32_t</span></code>, <code><span class="identifier">u16string</span></code>, <code><span class="identifier">u32string</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                General changes:
"                <ul>
"                  <li>
"                    <div>
"                      Improved compatibility with Solaris.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/phoenix/">Phoenix</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Corrected some documentation. (<a href="https://github.com/boostorg/phoenix/pull/50">PR#50</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">phoenix</span><span class="special">::</span><span class="identifier">erase</span></code> with associative container
"                returns iterator in C++11 mode. (<a href="https://svn.boost.org/trac/boost/ticket/7423">#7423</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">set</span></code> and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">multiset</span></code>
"                should be worked with predefined lazy functions. (<a href="https://github.com/boostorg/phoenix/pull/52">PR#52</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Disable <code><span class="identifier">phoenix</span><span class="special">::</span><span class="identifier">random_shuffle</span></code> in C++17. (<a href="https://github.com/boostorg/phoenix/pull/53">PR#53</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Don't forward declare, include instead. (<a href="https://svn.boost.org/trac/boost/ticket/11875">#11875</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/predef/">Predef</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix Intel C/C++ version 9999 detection to be 12.1.0.
"              </div>
"            </li>
"            <li>
"              <div>
"                Addition of <code><span class="identifier">BOOST_PREDEF_WORKAROUND</span></code>
"                and <code><span class="identifier">BOOST_PREDEF_TESTED_AT</span></code>
"                macros for defect workarounds and detection.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add ARM64 MSVC SIMD detection. (from Minmin Gong)
"              </div>
"            </li>
"            <li>
"              <div>
"                Add detection of iOS simulator vs device as a platform choice. (from
"                Ruslan Baratov)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix MinGW incorrect header guard. (from Ruslan Baratov)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/program_options/">Program Options</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for storing values into <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">optional</span></code>,
"                thanks to Ed Catmur (<a href="https://svn.boost.org/trac/boost/ticket/7495">#7495</a>,
"                <a href="https://github.com/boostorg/program_options/pull/18">PR#18</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Parsing of implicit options can now use the value from the next token.
"                Since 1.59, unless the value of implicit option was specified in
"                the same token as the option itself, the implicit value was used.
"                That proved inconvenient, and now we again check the next token and
"                use it as value if it's not an option itself. (<a href="https://github.com/boostorg/program_options/issues/25">#25</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/python/">Python</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">eval</span><span class="special">()</span></code>,
"                <code><span class="identifier">exec</span><span class="special">()</span></code>,
"                and <code><span class="identifier">exec_statement</span><span class="special">()</span></code> now allow <code><span class="keyword">char</span>
"                <span class="keyword">const</span> <span class="special">*</span></code>
"                arguments, in addition to <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">python</span><span class="special">::</span><span class="identifier">str</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                The <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">python</span><span class="special">::</span><span class="identifier">numeric</span></code> API has been removed, as
"                it is being obsoleted by <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">python</span><span class="special">::</span><span class="identifier">numpy</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix some build issues when using Python3 with MSVC.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/smart_ptr/">Smart Pointers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New class template<code><span class="identifier">atomic_shared_ptr</span></code>,
"                that provides thread-safe atomic pointer operations over <code><span class="identifier">shared_ptr</span></code>. (Peter Dimov)
"              </div>
"            </li>
"            <li>
"              <div>
"                New class template <code><span class="identifier">local_shared_ptr</span></code>,
"                where the reference count is updated with non-atomic operations.
"                (Peter Dimov)
"              </div>
"            </li>
"            <li>
"              <div>
"                More optimizations in <code><span class="identifier">allocate_shared</span></code>
"                and <code><span class="identifier">make_shared</span></code> for
"                arrays. (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Documentation has been completely rewritten in Asciidoc format.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/test/">Test</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.test v3.6 see the <a href="/doc/libs/1_65_0/libs/test/doc/html/boost_test/change_log.html">Change
"                log</a> section for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                New feature:
"                <ul>
"                  <li>
"                    <div>
"                      C++17 compatibility (tested on VS2017), thanks to <a href="https://github.com/DanielaE">Daniela
"                      Engert</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Direct comparison of C-arrays in <code><span class="identifier">BOOST_TEST</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Better global fixtures mechanism, and spitting of responsibilities
"                      with <a href="/doc/libs/1_65_0/libs/test/doc/html/boost_test/utf_reference/test_org_reference/test_org_boost_test_global_fixture.html"><code><span class="identifier">BOOST_TEST_GLOBAL_FIXTURE</span></code></a>
"                      for global fixtures and <a href="/doc/libs/1_65_0/libs/test/doc/html/boost_test/utf_reference/link_references/link_boost_test_global_configuration.html"><code><span class="identifier">BOOST_TEST_GLOBAL_CONFIGURATION</span></code></a>
"                      for global initialization (compile time configuration).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Improved support for fixtures (<code><span class="identifier">setup</span></code>
"                      / <code><span class="identifier">teardown</span></code>
"                      member function) which enables better teardown time checks
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Breaking changes
"                <ul>
"                  <li>
"                    <div>
"                      Some API changes for the loggers
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Deprecating <code><span class="identifier">BOOST_GLOBAL_FIXTURE</span></code>
"                      in favor of <code><span class="identifier">BOOST_TEST_GLOBAL_FIXTURE</span></code>
"                      and <code><span class="identifier">BOOST_TEST_GLOBAL_CONFIGURATION</span></code>
"                      (see above)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes
"                <ul>
"                  <li>
"                    <div>
"                      Trac tickets <a href="https://svn.boost.org/trac/boost/ticket/5282">#5282</a>, <a href="https://svn.boost.org/trac/boost/ticket/5563">#5563</a>, <a href="https://svn.boost.org/trac/boost/ticket/11471">#11471</a>, <a href="https://svn.boost.org/trac/boost/ticket/11962">#11962</a>,
"                      <a href="https://svn.boost.org/trac/boost/ticket/12228">#12228</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Trac tickets <a href="https://svn.boost.org/trac/boost/ticket/12631">#12631</a>, <a href="https://svn.boost.org/trac/boost/ticket/13011">#13011</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Pull request <a href="https://github.com/boostorg/test/pull/106">PR106</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/thread/">Thread</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Important Regression on Windows:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/130">#130</a>
"                      windows: Bug in boost::condition_variable on Windows Please,
"                      merge these two patches
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/commit/fdc0cbcd8ce8f34a19c7cdaf6f1fa679f0a49657">https://github.com/boostorg/thread/commit/fdc0cbcd8ce8f34a19c7cdaf6f1fa679f0a49657</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/commit/395e3d786bc1dce9c60eb84da85f5845a2c1fb3d">https://github.com/boostorg/thread/commit/395e3d786bc1dce9c60eb84da85f5845a2c1fb3d</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes
"                <ul>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/6787">#6787</a>
"                      boost::thread::sleep() hangs if system time is rolled back
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12519">#12519</a>
"                      boost::thread::try_join_for does not return after timeout
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12874">#12874</a>
"                      future&lt;&gt; extension constructor must be under BOOST_THREAD_PROVIDES_FUTURE_UNWRAP
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12888">#12888</a>
"                      Linking with boost thread does not work on mingw/gcc 4.4
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12958">#12958</a>
"                      sync_bounded_queue::wait_pull_front( lve ) might throw
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/13077">#13077</a>
"                      Linking to static 64bit libboost_thread fails DLL initialization
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/13155">#13155</a>
"                      log doesn't build on a system with pthreads
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/121">#121</a>
"                      on_tls_prepare is broken under VS2017
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_index/">TypeIndex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Include &lt;boost/functional/hash.hpp&gt; if required, thanks to
"                Ed Catmur <a href="https://svn.boost.org/trac/boost/ticket/13009">#13009</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Use native <code><span class="identifier">hash_code</span><span class="special">()</span></code> when possible on GCC-like compilers
"                <a href="https://svn.boost.org/trac/boost/ticket/13027">#13027</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <code><span class="identifier">ctti_type_index</span></code>
"                for GCC 7 and later, thanks to Benjamin Buch <a href="https://github.com/boostorg/type_index/pull/16">PR16</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/typeof/">Typeof</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix compilation error with clang-cl <a href="https://svn.boost.org/trac10/ticket/11821">ticket
"                11821</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/unordered/">Unordered</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Use the same data structure for <code><span class="identifier">unordered_set</span></code>
"                and <code><span class="identifier">unordered_multiset</span></code>,
"                and for<code><span class="identifier">unordered_map</span></code>
"                and <code><span class="identifier">unordered_multimap</span></code>.
"                This is required for C++17, so that nodes can be merged and extracted
"                between compatible containers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add deprecated attributes to long deprecated functions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved use of <code><span class="identifier">allocator_traits</span></code>
"                <code><span class="identifier">construct</span></code> and <code><span class="identifier">destroy</span></code> on C++11 compilers, using
"                piecewise pair construction when appropriate.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fewer workarounds on newer Oracle compilers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Avoid dereferencing pointers to uninitialized memory (<a href="https://github.com/boostorg/unordered/pull/5">PR
"                #5</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/utility/">Utility</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved compatibility of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">next</span></code>/<code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">prior</span></code> with SFINAE-unfriendly iterators.
"                <a href="https://svn.boost.org/trac/boost/ticket/10847">#10847</a>, <a href="https://svn.boost.org/trac/boost/ticket/13002">#13002</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                r-value overload for <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">get</span></code>
"                was added by Albert Sverdlov <a href="https://svn.boost.org/trac/boost/ticket/13018">#13018</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Missing include fro <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">variant</span><span class="special">/</span><span class="identifier">polymorphic_get</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code>
"                header was added by Adam Badura <a href="https://svn.boost.org/trac/boost/ticket/13037">#13037</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">make_variant_over</span></code> was fixed and
"                now works with views and other Forward Sequences (thanks to Mikhail
"                Maksimov for the fix) <a href="https://svn.boost.org/trac/boost/ticket/8554">#8554</a>, <a href="https://svn.boost.org/trac/boost/ticket/10041">#10041</a>, <a href="https://github.com/boostorg/variant/pull/35">PR#35</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_65_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.8.1, 3.9.1, 4.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.4.1, 6.3.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++1z: 6.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++11: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 16.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 8.1.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.6.4, 4.7.3, 4.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.8.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.8.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.8.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.8.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC, C++11: 4.7.3
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          SunOS:
"          <ul>
"            <li>
"              <div>
"                Oracle Solaris Studio: 12.5_next, 12.5
"              </div>
"            </li>
"            <li>
"              <div>
"                Oracle Solaris Studio, C++11: 12.5_next, 12.5
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.8.1, 3.9.1, 4.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.1, 6.2.0, 6.3.0, 7.1.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++1z: 6.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++11: 16.0, 17.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 16.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 8.1.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.6.4, 4.7.3, 4.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.8.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.8.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.8.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.8.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          SunOS:
"          <ul>
"            <li>
"              <div>
"                Oracle Solaris Studio: 12.5_next, 12.5
"              </div>
"            </li>
"            <li>
"              <div>
"                Oracle Solaris Studio, C++11: 12.5_next, 12.5
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_65_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/beman_dawes.html">Beman Dawes</a>, Eric Niebler,
"      <a href="/users/people/rene_rivera.html">Rene Rivera</a>, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    </p>
"  </div>
"
-hash
"86a56965c1c30f1ff9ac0013f8a4e252adb9a5239b36479831018ed7b90afddf
-id
"version_1_65_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: PolyCollection, Stacktrace. Removed Libraries: TR1. Updated
"      Libraries: Asio, Context, Config, Core, Coroutine2, DLL, Fiber, Fusion, Geometry,
"      Hash, Log, Phoenix, Predef, Program Options, Python, Smart Pointers, Test,
"      Thread, TypeIndex, Typeof, Unordered, Utility, Variant.
"
-title_xml
"Version 1.65.0
)
(feed/history/boost_1_65_1.qbk
-description_xhtml
"
"
"
"  <div id="version_1_65_1.fixes_in_1_65_1">
"    <h3><span class="link">Fixes in 1.65.1</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/config/">Config</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Version macro changes for CUDA.
"              </div>
"            </li>
"            <li>
"              <div>
"                Update last known MSVC version.
"              </div>
"            </li>
"            <li>
"              <div>
"                MSVC 14.11 supports structured bindings.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Return a continuation from functions executed by <code><span class="identifier">resume_with</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Return a continuation from functions executed by <code><span class="identifier">resume_with</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/smart_ptr/">Smart Pointers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix Visual C++ version checks.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix compilation for NVCC with host compiler clang.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Update build testing file to detail with a MinGW issue.
"              </div>
"            </li>
"            <li>
"              <div>
"                Change preprocessor file extensions to work with the installation
"                system.
"              </div>
"            </li>
"            <li>
"              <div>
"                Support FreeBSD and other OSs that do not define <code><span class="identifier">_GNU_SOURCE</span></code>
"                but have <code><span class="identifier">_Unwind_Backtrace</span></code>
"                function.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/thread/">Thread</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix bug in <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">condition_variable</span></code>
"                on Windows (<a href="https://github.com/boostorg/thread/issues/130">#130</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_65_1.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 4.0.1, 5.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 5.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++1z: 6.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 17.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 8.1.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.6.4, 4.7.3, 4.8.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0,
"                7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.8.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.8.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.8.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 3.8.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC, C++11: 4.4.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          SunOS:
"          <ul>
"            <li>
"              <div>
"                Oracle Solaris Studio: 12.5_next, 12.5
"              </div>
"            </li>
"            <li>
"              <div>
"                Oracle Solaris Studio, C++11: , 12.5_next, 12.5
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_65_1.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/beman_dawes.html">Beman Dawes</a>, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    </p>
"  </div>
"  <div id="version_1_65_1.new_libraries_in_1_65_0">
"    <h3><span class="link">New Libraries in
"    1.65.0</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/poly_collection/">PolyCollection</a>:</span>
"  Fast
"          containers of polymorphic objects, from Joaquín M López Muñoz.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"  Gather, store,
"          copy and print backtraces, from Antony Polukhin.
"          <ul>
"            <li>
"              <div>
"                Note: Library has <a href="https://github.com/boostorg/stacktrace/issues/14">issue
"                with MinGW</a> and may produce empty backtraces with that compiler.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_65_1.removed_libraries_in_1_65_0">
"    <h3><span class="link">Removed Libraries
"    in 1.65.0</span></h3>
"    <ul>
"      <li>
"        <div>
"          TR1
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_65_1.updated_libraries_in_1_65_0">
"    <h3><span class="link">Updated Libraries
"    in 1.65.0</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Changed to require <tt>g++</tt> versions &gt;= 4.7 to use
"                standard atomics, to fix a linker error when using <tt>g++</tt>
"                4.6 (<a href="https://svn.boost.org/trac/boost/ticket/13121">#13121</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Enabled use of <code><span class="keyword">constexpr</span></code>
"                and variadic templates with recent MSVC versions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a race condition in the Linux epoll backend, which may occur
"                when a socket or descriptor is closed while another thread is blocked
"                on epoll.
"              </div>
"            </li>
"            <li>
"              <div>
"                Eliminated use of deprecated <code><span class="identifier">auto_ptr</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed misplaced use of <code><span class="identifier">asio_handler_is_continuation</span></code>
"                result in reactive <code><span class="identifier">async_accept</span></code>
"                implementation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed to use <code><span class="identifier">poll</span><span class="special">.</span><span class="identifier">h</span></code>
"                rather than <code><span class="identifier">sys</span><span class="special">/</span><span class="identifier">poll</span><span class="special">.</span><span class="identifier">h</span></code> on some modern POSIX platforms
"                (<a href="https://svn.boost.org/trac/boost/ticket/12419">#12419</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed MSVC intellisense detection.
"              </div>
"            </li>
"            <li>
"              <div>
"                Disabled use of the <code><span class="identifier">__thread</span></code>
"                keyword extension for android/clang/x86 targets.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements:
"                <ul>
"                  <li>
"                    <div>
"                      call/cc supports ucontext-API (swapcontext)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      call/cc supports Windows-Fiber-API
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      call/cc supports on demand growing (segmented/split) stacks
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12719">#12719</a>: context test cases and examples segmentation fault
"                      when built with mingw-w64 toolchain
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      #52: Failing to build callcc test with g++-4.9
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                important:
"                <ul>
"                  <li>
"                    <div>
"                      required bug fix <a href="https://github.com/boostorg/context/commit/420554fe9ac01482990e8ae314f4f7ba81010c9a">420554fe9ac01482990e8ae314f4f7ba81010c9a</a>
"                      not included in 1.65
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/config/">Config</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">BOOST_NO_CXX11_POINTER_TRAITS</span></code>,
"                <code><span class="identifier">BOOST_NO_CXX17_FOLD_EXPRESSIONS</span></code>,
"                <code><span class="identifier">BOOST_NO_CXX17_INLINE_VARIABLES</span></code>,
"                <code><span class="identifier">BOOST_NO_CXX17_STRUCTURED_BINDINGS</span></code>
"                defect detection.
"              </div>
"            </li>
"            <li>
"              <div>
"                BOOST_FALLTHROUGH support for GCC 7 and above. (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented <code><span class="identifier">pointer_traits</span></code>
"                for C++03 and higher, that implements <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0653r0.html">P0653r0</a>
"                (Glen Fernandes). This implementation is now used by Align, Circular
"                Buffer, Fiber, Geometry, among other libraries.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">BOOST_TEST_GT</span></code>
"                and <code><span class="identifier">BOOST_TEST_GE</span></code>
"                to Lightweight Test.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/coroutine2/">Coroutine2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                supports ucontext-API (swapcontext)
"              </div>
"            </li>
"            <li>
"              <div>
"                supports Windows-Fiber-API
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://svn.boost.org/trac/boost/ticket/13064">#13064</a>: different behavior coroutine and coroutine2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix PE parsing on non Windows platforms.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements:
"                <ul>
"                  <li>
"                    <div>
"                      hardware transactional memory (Intel TSX) supported
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      NUMA supported
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      ucontext-API (swapcontext) supported
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Windows-Fiber-API supported
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      on demand growing stacks
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes:
"                <ul>
"                  <li>
"                    <div>
"                      #121: failing to build static lib with GCC 4.8 and C++11
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      #123: assertion failure in schedule_from_remote
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      #125: erratic crashes in testsuite
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      #126: incorrect std::memory_order value in compare_exchange_strong?
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                important:
"                <ul>
"                  <li>
"                    <div>
"                      required bug fix <a href="https://github.com/boostorg/fiber/commit/63f1041f0e484e64dec437a0fa780ea2463abda2">63f1041f0e484e64dec437a0fa780ea2463abda2</a>
"                      not included in 1.65
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fusion/">Fusion</a>:</span>
"          <ul>
"            <li>
"              <div>
"                MSVC 14.1 supports variadic containers, such as <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">vector</span></code>,
"                <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">deque</span></code>, <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">map</span></code>,
"                <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">set</span></code>, and <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">tuple</span></code>.
"                (<a href="https://svn.boost.org/trac/boost/ticket/12986">#12986</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements:
"                <ul>
"                  <li>
"                    <div>
"                      Add correct() overload taking area strategy
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add is_convex() overload taking side strategy
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add missing relational operations (covered_by, crosses, equals,
"                      etc.) for MultiPoint/AnyGeometry
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Solved issues:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/12410">12410</a>
"                      Lack of support of geographic coordinate system in correct()
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/13035">13035</a>
"                      Wrong result of non-cartesian intersection strategies for segments
"                      near poles.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac/boost/ticket/13057">13057</a>
"                      Wrong result of intersects() for linestrings caused by numerical
"                      issue in disjoint() for boxes.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes:
"                <ul>
"                  <li>
"                    <div>
"                      Fix is_valid which could return false for multipolygons where
"                      an interior ring touches another interior ring
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix is_valid which could return false for multipolygons where
"                      a polygon was located in an interior ring, all touching each
"                      other
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix union which could produce invalid results (for some cases,
"                      this needs to define BOOST_GEOMETRY_INCLUDE_SELF_TURNS)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix intersection (idem), but some cases are still not yet valid
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix difference (idem), but some cases are still not yet valid
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix propagation of area strategy into the internals of various
"                      algorithms from intersection strategy
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix uninitialized variable in relate and reference to temporary
"                      in overlay
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix error in disjoint for geographic Segment/Box
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fix handling of non-cartesian geometries in various algorithms
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/functional/hash/">Hash</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for <code><span class="keyword">char16_t</span></code>,
"                <code><span class="keyword">char32_t</span></code>, <code><span class="identifier">u16string</span></code>, <code><span class="identifier">u32string</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                General changes:
"                <ul>
"                  <li>
"                    <div>
"                      Improved compatibility with Solaris.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/phoenix/">Phoenix</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Corrected some documentation. (<a href="https://github.com/boostorg/phoenix/pull/50">PR#50</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">phoenix</span><span class="special">::</span><span class="identifier">erase</span></code> with associative container
"                returns iterator in C++11 mode. (<a href="https://svn.boost.org/trac/boost/ticket/7423">#7423</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">set</span></code> and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">multiset</span></code>
"                should be worked with predefined lazy functions. (<a href="https://github.com/boostorg/phoenix/pull/52">PR#52</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Disable <code><span class="identifier">phoenix</span><span class="special">::</span><span class="identifier">random_shuffle</span></code> in C++17. (<a href="https://github.com/boostorg/phoenix/pull/53">PR#53</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Don't forward declare, include instead. (<a href="https://svn.boost.org/trac/boost/ticket/11875">#11875</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/predef/">Predef</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix Intel C/C++ version 9999 detection to be 12.1.0.
"              </div>
"            </li>
"            <li>
"              <div>
"                Addition of <code><span class="identifier">BOOST_PREDEF_WORKAROUND</span></code>
"                and <code><span class="identifier">BOOST_PREDEF_TESTED_AT</span></code>
"                macros for defect workarounds and detection.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add ARM64 MSVC SIMD detection. (from Minmin Gong)
"              </div>
"            </li>
"            <li>
"              <div>
"                Add detection of iOS simulator vs device as a platform choice. (from
"                Ruslan Baratov)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix MinGW incorrect header guard. (from Ruslan Baratov)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/program_options/">Program Options</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for storing values into <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">optional</span></code>,
"                thanks to Ed Catmur (<a href="https://svn.boost.org/trac/boost/ticket/7495">#7495</a>,
"                <a href="https://github.com/boostorg/program_options/pull/18">PR#18</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Parsing of implicit options can now use the value from the next token.
"                Since 1.59, unless the value of implicit option was specified in
"                the same token as the option itself, the implicit value was used.
"                That proved inconvenient, and now we again check the next token and
"                use it as value if it's not an option itself. (<a href="https://github.com/boostorg/program_options/issues/25">#25</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/python/">Python</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">eval</span><span class="special">()</span></code>,
"                <code><span class="identifier">exec</span><span class="special">()</span></code>,
"                and <code><span class="identifier">exec_statement</span><span class="special">()</span></code> now allow <code><span class="keyword">char</span>
"                <span class="keyword">const</span> <span class="special">*</span></code>
"                arguments, in addition to <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">python</span><span class="special">::</span><span class="identifier">str</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                The <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">python</span><span class="special">::</span><span class="identifier">numeric</span></code> API has been removed, as
"                it is being obsoleted by <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">python</span><span class="special">::</span><span class="identifier">numpy</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix some build issues when using Python3 with MSVC.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/smart_ptr/">Smart Pointers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New class template<code><span class="identifier">atomic_shared_ptr</span></code>,
"                that provides thread-safe atomic pointer operations over <code><span class="identifier">shared_ptr</span></code>. (Peter Dimov)
"              </div>
"            </li>
"            <li>
"              <div>
"                New class template <code><span class="identifier">local_shared_ptr</span></code>,
"                where the reference count is updated with non-atomic operations.
"                (Peter Dimov)
"              </div>
"            </li>
"            <li>
"              <div>
"                More optimizations in <code><span class="identifier">allocate_shared</span></code>
"                and <code><span class="identifier">make_shared</span></code> for
"                arrays. (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Documentation has been completely rewritten in Asciidoc format.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/test/">Test</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.test v3.6 see the <a href="/doc/libs/1_65_0/libs/test/doc/html/boost_test/change_log.html">Change
"                log</a> section for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                New feature:
"                <ul>
"                  <li>
"                    <div>
"                      C++17 compatibility (tested on VS2017), thanks to <a href="https://github.com/DanielaE">Daniela
"                      Engert</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Direct comparison of C-arrays in <code><span class="identifier">BOOST_TEST</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Better global fixtures mechanism, and spitting of responsibilities
"                      with <a href="/doc/libs/1_65_0/libs/test/doc/html/boost_test/utf_reference/test_org_reference/test_org_boost_test_global_fixture.html"><code><span class="identifier">BOOST_TEST_GLOBAL_FIXTURE</span></code></a>
"                      for global fixtures and <a href="/doc/libs/1_65_0/libs/test/doc/html/boost_test/utf_reference/link_references/link_boost_test_global_configuration.html"><code><span class="identifier">BOOST_TEST_GLOBAL_CONFIGURATION</span></code></a>
"                      for global initialization (compile time configuration).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Improved support for fixtures (<code><span class="identifier">setup</span></code>
"                      / <code><span class="identifier">teardown</span></code>
"                      member function) which enables better teardown time checks
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Breaking changes
"                <ul>
"                  <li>
"                    <div>
"                      Some API changes for the loggers
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Deprecating <code><span class="identifier">BOOST_GLOBAL_FIXTURE</span></code>
"                      in favor of <code><span class="identifier">BOOST_TEST_GLOBAL_FIXTURE</span></code>
"                      and <code><span class="identifier">BOOST_TEST_GLOBAL_CONFIGURATION</span></code>
"                      (see above)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes
"                <ul>
"                  <li>
"                    <div>
"                      Trac tickets <a href="https://svn.boost.org/trac/boost/ticket/5282">#5282</a>, <a href="https://svn.boost.org/trac/boost/ticket/5563">#5563</a>, <a href="https://svn.boost.org/trac/boost/ticket/11471">#11471</a>, <a href="https://svn.boost.org/trac/boost/ticket/11962">#11962</a>,
"                      <a href="https://svn.boost.org/trac/boost/ticket/12228">#12228</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Trac tickets <a href="https://svn.boost.org/trac/boost/ticket/12631">#12631</a>, <a href="https://svn.boost.org/trac/boost/ticket/13011">#13011</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Pull request <a href="https://github.com/boostorg/test/pull/106">PR106</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/thread/">Thread</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Important Regression on Windows:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/130">#130</a>
"                      windows: Bug in boost::condition_variable on Windows Please,
"                      merge these two patches
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/commit/fdc0cbcd8ce8f34a19c7cdaf6f1fa679f0a49657">https://github.com/boostorg/thread/commit/fdc0cbcd8ce8f34a19c7cdaf6f1fa679f0a49657</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/commit/395e3d786bc1dce9c60eb84da85f5845a2c1fb3d">https://github.com/boostorg/thread/commit/395e3d786bc1dce9c60eb84da85f5845a2c1fb3d</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes
"                <ul>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/6787">#6787</a>
"                      boost::thread::sleep() hangs if system time is rolled back
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12519">#12519</a>
"                      boost::thread::try_join_for does not return after timeout
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12874">#12874</a>
"                      future&lt;&gt; extension constructor must be under BOOST_THREAD_PROVIDES_FUTURE_UNWRAP
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12888">#12888</a>
"                      Linking with boost thread does not work on mingw/gcc 4.4
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12958">#12958</a>
"                      sync_bounded_queue::wait_pull_front( lve ) might throw
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/13077">#13077</a>
"                      Linking to static 64bit libboost_thread fails DLL initialization
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/13155">#13155</a>
"                      log doesn't build on a system with pthreads
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/121">#121</a>
"                      on_tls_prepare is broken under VS2017
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_index/">TypeIndex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Include &lt;boost/functional/hash.hpp&gt; if required, thanks to
"                Ed Catmur <a href="https://svn.boost.org/trac/boost/ticket/13009">#13009</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Use native <code><span class="identifier">hash_code</span><span class="special">()</span></code> when possible on GCC-like compilers
"                <a href="https://svn.boost.org/trac/boost/ticket/13027">#13027</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <code><span class="identifier">ctti_type_index</span></code>
"                for GCC 7 and later, thanks to Benjamin Buch <a href="https://github.com/boostorg/type_index/pull/16">PR16</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/typeof/">Typeof</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix compilation error with clang-cl <a href="https://svn.boost.org/trac10/ticket/11821">ticket
"                11821</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/unordered/">Unordered</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Use the same data structure for <code><span class="identifier">unordered_set</span></code>
"                and <code><span class="identifier">unordered_multiset</span></code>,
"                and for<code><span class="identifier">unordered_map</span></code>
"                and <code><span class="identifier">unordered_multimap</span></code>.
"                This is required for C++17, so that nodes can be merged and extracted
"                between compatible containers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add deprecated attributes to long deprecated functions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved use of <code><span class="identifier">allocator_traits</span></code>
"                <code><span class="identifier">construct</span></code> and <code><span class="identifier">destroy</span></code> on C++11 compilers, using
"                piecewise pair construction when appropriate.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fewer workarounds on newer Oracle compilers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Avoid dereferencing pointers to uninitialized memory (<a href="https://github.com/boostorg/unordered/pull/5">PR
"                #5</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/utility/">Utility</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved compatibility of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">next</span></code>/<code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">prior</span></code> with SFINAE-unfriendly iterators.
"                <a href="https://svn.boost.org/trac/boost/ticket/10847">#10847</a>, <a href="https://svn.boost.org/trac/boost/ticket/13002">#13002</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                r-value overload for <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">get</span></code>
"                was added by Albert Sverdlov <a href="https://svn.boost.org/trac/boost/ticket/13018">#13018</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Missing include fro <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">variant</span><span class="special">/</span><span class="identifier">polymorphic_get</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code>
"                header was added by Adam Badura <a href="https://svn.boost.org/trac/boost/ticket/13037">#13037</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">make_variant_over</span></code> was fixed and
"                now works with views and other Forward Sequences (thanks to Mikhail
"                Maksimov for the fix) <a href="https://svn.boost.org/trac/boost/ticket/8554">#8554</a>, <a href="https://svn.boost.org/trac/boost/ticket/10041">#10041</a>, <a href="https://github.com/boostorg/variant/pull/35">PR#35</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"
-hash
"72df3d2b536664edec583cb63cea32ab76f7970c8524eb359272cb2bb184bde4
-id
"version_1_65_1
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      Bug fixes: Config, Context, Fiber, Smart Pointers, Stacktrace, Thread
"
-title_xml
"Version 1.65.1
)
(feed/history/boost_1_66_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_66_0.note_about_the_new_visual_studio">
"    <h3><span class="link">Note about
"    the new Visual Studio release</span></h3>
"    <p>
"      Visual Studio 15.5 was released too late for us to test this release with it.
"    </p>
"  </div>
"  <div id="version_1_66_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"  Portable HTTP, WebSocket,
"          and network operations using only C++11 and Boost.Asio, from Vinnie Falco.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/callable_traits/">CallableTraits</a>:</span>
"  A spiritual
"          successor to Boost.FunctionTypes, Boost.CallableTraits is a header-only
"          C++11 library for the compile-time inspection and manipulation of all 'callable'
"          types. Additional support for C++17 features, from Barrett Adair.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/mp11/">Mp11</a>:</span>
"  A C++11 metaprogramming library,
"          from Peter Dimov.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_66_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented interface changes to reflect the Networking TS (<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4656.pdf">N4656</a>).
"                <ul>
"                  <li>
"                    <div>
"                      See the <a href="/doc/libs/1_66_0/doc/html/boost_asio/net_ts.html">list</a>
"                      of new interfaces and, where applicable, the corresponding
"                      old interfaces that have been superseded.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      The service template parameters, and the corresponding classes,
"                      are disabled by default. For example, instead of <code><span class="identifier">basic_socket</span><span class="special">&lt;</span><span class="identifier">Protocol</span><span class="special">,</span>
"                      <span class="identifier">SocketService</span><span class="special">&gt;</span></code>
"                      we now have simply <code><span class="identifier">basic_socket</span><span class="special">&lt;</span><span class="identifier">Protocol</span><span class="special">&gt;</span></code>. The old interface can
"                      be enabled by defining the <code><span class="identifier">BOOST_ASIO_ENABLE_OLD_SERVICES</span></code>
"                      macro.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed previously deprecated functions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for customised handler tracking.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added reactor-related (i.e. descriptor readiness) events to handler
"                tracking.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added special "concurrency hint" values that may be used
"                to disable locking on a per <code><span class="identifier">io_context</span></code>
"                basis.
"              </div>
"            </li>
"            <li>
"              <div>
"                Enabled perfect forwarding for the first <code><span class="identifier">ssl</span><span class="special">::</span><span class="identifier">stream</span><span class="special">&lt;&gt;</span></code> constructor argument.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added ability to release ownership of the underlying native socket.
"                (Requires Windows 8.1 or later when using the I/O completion port
"                backend.)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented a set of experimental extended atomic operations for
"                integral types:
"                <ul>
"                  <li>
"                    <div>
"                      <code><span class="identifier">fetch_negate</span></code>,
"                      <code><span class="identifier">fetch_complement</span></code>
"                      - atomically replaces the value with a negated or binary complemented
"                      value and returns the original value
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">opaque_</span><span class="special">&lt;</span><span class="identifier">op</span><span class="special">&gt;</span></code>
"                      - equivalent to <code><span class="identifier">fetch_</span><span class="special">&lt;</span><span class="identifier">op</span><span class="special">&gt;</span></code> except that it doesn't
"                      return the original value
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="special">&lt;</span><span class="identifier">op</span><span class="special">&gt;</span><span class="identifier">_and_test</span></code>
"                      - atomically applies <code><span class="special">&lt;</span><span class="identifier">op</span><span class="special">&gt;</span></code>
"                      and returns <code><span class="keyword">true</span></code>
"                      if the result is zero. <strong>Note:</strong>
"                      The result of these operations will change to the opposite
"                      in Boost 1.67. The code that uses these functions will need
"                      to be updated.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">bit_test_and_set</span></code>,
"                      <code><span class="identifier">bit_test_and_reset</span></code>,
"                      <code><span class="identifier">bit_test_and_complement</span></code>
"                      - atomically sets, resets or complements the specified bit
"                      and returns the original value of the bit
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Following C++17 (<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf">P0558R1</a>),
"                arithmetic operations for pointers to non-object types are no longer
"                provided.
"              </div>
"            </li>
"            <li>
"              <div>
"                Also following C++17 exposed <code><span class="identifier">atomic</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">value_type</span></code>
"                and <code><span class="identifier">atomic</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">difference_type</span></code> member typedefs,
"                where applicable, to the user's code.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved compatibility with gcc 7. In particular, using 128-bit operations
"                on x86-64 should no longer require linking with libatomic (the compiler-supplied
"                library).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/date_time/">DateTime</a>:</span>
"          <ul>
"            <li>
"              <div>
"                The library has been converted to use Boost.WinAPI as the abstraction
"                layer for Windows SDK.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed an integral overflow that could cause incorrect results when
"                adding or subtracting many years from a date (see <a href="https://stackoverflow.com/questions/45537280/boost-datetime-issue-with-adding-long-year-durations">here</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                synchronization with CUDA streams
"              </div>
"            </li>
"            <li>
"              <div>
"                synchronization with ROCm/HIP streams
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/format/">Format</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements:
"                <ul>
"                  <li>
"                    <div>
"                      Accept new conversion specifiers:
"                      <ul>
"                        <li>
"                          <div>
"                            <a href="https://github.com/boostorg/format/pull/41"><code><span class="identifier">a</span></code></a>: sets flags
"                            <code><span class="identifier">fixed</span> <span class="special">|</span> <span class="identifier">scientific</span></code>
"                            (i.e. <code><span class="identifier">hexfloat</span></code>)
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            <a href="https://github.com/boostorg/format/pull/43"><code><span class="identifier">b</span></code></a>: sets flag
"                            <code><span class="identifier">boolalpha</span></code>
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            <a href="https://github.com/boostorg/format/pull/41"><code><span class="identifier">A</span></code></a>: same as
"                            <code><span class="identifier">a</span></code> plus
"                            flag <code><span class="identifier">uppercase</span></code>
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            <a href="https://github.com/boostorg/format/pull/41"><code><span class="identifier">F</span></code></a>: same as
"                            <code><span class="identifier">f</span></code> plus
"                            flag <code><span class="identifier">uppercase</span></code>
"                          </div>
"                        </li>
"                      </ul>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/format/pull/42">42</a>
"                      Accept new argument types <code><span class="identifier">j</span></code>
"                      and <code><span class="identifier">z</span></code> from
"                      ISO C99 (parsed and ignored like all others).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/format/pull/44">44</a>
"                      Accept new argument types <code><span class="identifier">I</span></code>,
"                      <code><span class="identifier">I32</span></code>, <code><span class="identifier">I64</span></code>, and <code><span class="identifier">w</span></code>
"                      from Microsoft (parsed and ignored like all others).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/format/issues/33">33</a>
"                      Added a development tool called <code><span class="identifier">format_matrix</span></code>
"                      that exercises as many different combinations of format strings
"                      as possible and logs them to a file:
"                      <ul>
"                        <li>
"                          <div>
"                            helps prevent regressions in between boost releases
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            allows for comparison against <code><span class="identifier">snprintf</span></code>
"                          </div>
"                        </li>
"                      </ul>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/format/issues/36">36</a>
"                      Safely allow volatile arguments to be used with operator%
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac10/ticket/4636">4636</a>
"                      Explicit clamping provided to allow MSVC /RTCc to succeed
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac10/ticket/7477">7477</a>
"                      Fix compatibility with MSVC /Za
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac10/ticket/10324">10324</a>
"                      Const-correct cast issue resolved
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac10/ticket/11632">11632</a>
"                      Fix <code><span class="special">-</span><span class="identifier">fsanitize</span><span class="special">=</span><span class="identifier">undefined</span></code>
"                      issue in <code><span class="identifier">alt_sstream</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fusion/">Fusion</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fusion/pull/149">PR#149</a>
"                <code><span class="identifier">isspace</span><span class="special">(</span><span class="identifier">c</span><span class="special">)</span></code>
"                is not a macro in Dinkum clib for VxWorks, thanks to Brian Kuhl(@kuhlenough).
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fusion/pull/150">PR#150</a>
"                Remove circular preprocessor include, thanks to Gregor Jasny(@gjasny).
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fusion/pull/151">PR#151</a>
"                Change base of <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">tuple</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fusion/pull/153">PR#153</a>
"                Fixed compile error with <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">array</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fusion/pull/154">PR#154</a>
"                Fixed bugs nesting and copying on c++03.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements:
"                <ul>
"                  <li>
"                    <div>
"                      Add distance for geographic PointLike/AnyGeometry.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes:
"                <ul>
"                  <li>
"                    <div>
"                      Fixes in results of union/intersection/difference which could
"                      be incorrect in very complex cases
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixes in validity of union/intersection/difference/buffer
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixes in set and relational operations for non-cartesian coordinate
"                      systems.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/iterator/">Iterator</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">next</span><span class="special">()</span></code>/<code><span class="identifier">prior</span><span class="special">()</span></code>
"                functions now support user's iterators that don't specify nested
"                types such as <code><span class="identifier">iterator_category</span></code>,
"                <code><span class="identifier">difference_type</span></code>,
"                etc. and instead specialize <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iterator_traits</span></code>
"                to define those types. The compiler must support C++17-compatible
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iterator_traits</span></code> for this to work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed a bug in <code><span class="identifier">file_collector</span><span class="special">::</span><span class="identifier">scan_for_files</span></code>
"                      that could cause incorrectly named log files in the target
"                      directory after the user's application restart.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New Features:
"                <ul>
"                  <li>
"                    <div>
"                      Add Gauss and Gauss-Kronrod quadrature routines.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add double-exponential (tanh-sinh, exp-sinh and sinh-sinh)
"                      quadrature routines.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add Chebyshev polynomial evaluation, roots, integration, differentiation,
"                      and interpolation routines.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/index.html">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Made <code><span class="identifier">modify</span></code> and
"                <code><span class="identifier">modify_key</span></code> more robust
"                so that the modified element is erased if the modifier throws or
"                the rollback functor does not properly restore the element (full
"                discussion at ticket <a href="https://svn.boost.org/trac/boost/ticket/12542">#12542</a>). This is technically backwards
"                incompatible; for instance, the following code:
"              </div>
"<pre><span class="identifier">c</span><span class="special">.</span><span class="identifier">modify</span><span class="special">(</span><span class="identifier">c</span><span class="special">.</span><span class="identifier">begin</span><span class="special">(),[](</span><span class="keyword">auto</span><span class="special">&amp;){</span><span class="keyword">throw</span> <span class="number">0</span><span class="special">;});</span>
"</pre>
"              <div>
"                keeps the container <code><span class="identifier">c</span></code>
"                untouched in former versions of Boost whereas now <code><span class="identifier">c</span><span class="special">.</span><span class="identifier">begin</span><span class="special">()</span></code> is erased. Thanks to Jon Kalb for
"                raising the issue.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/optional/index.html">Optional</a>:</span>
"          <ul>
"            <li>
"              <div>
"                On newer compilers <code><span class="identifier">optional</span></code>
"                is now trivially-copyable for scalar <code><span class="identifier">T</span></code>s.
"                This uses a different storage (just <code><span class="identifier">T</span></code>
"                rather than <code><span class="identifier">aligned_storage</span></code>).
"                We require the compiler to support defaulted functions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed the implementation of <code><span class="keyword">operator</span><span class="special">==</span></code> to get rid of the <code><span class="special">-</span><span class="identifier">Wmaybe</span><span class="special">-</span><span class="identifier">uninitialized</span></code>
"                false-positive warning from GCC.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/poly_collection/">PolyCollection</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.PolyCollection has been backported to GCC 4.8 to 4.9 and Clang
"                3.3 to 3.6. The version of libstdc++-v3 shipped with GCC 4.8 (which
"                can also be used by Clang) has deficiencies that result in the following
"                limitations when using Boost.PolyCollection:
"                <ul>
"                  <li>
"                    <div>
"                      Stateful allocators are not properly supported.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Allocator-extended move construction decays to allocator-extended
"                      copy construction.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Copy construction crashes if an exception is thrown during
"                      element copying.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/predef/">Predef</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved Windows Universal Platform detection. (from James E. King,
"                III)
"              </div>
"            </li>
"            <li>
"              <div>
"                Add detection for CloudABI with cloudlibc. (from James E. King, III)
"              </div>
"            </li>
"            <li>
"              <div>
"                Various other bug fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/regex/">Regex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Numerous small fixes for security issues discovered by de-fuzzing.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Now works out-of-the-box on MinGW-w64.
"              </div>
"            </li>
"            <li>
"              <div>
"                Now works on MinGW (without <code><span class="special">-</span><span class="identifier">w64</span></code>) if <code><span class="identifier">libbacktrace</span></code>
"                is properly installed. See "MinGW specific notes" section
"                in documentation for more info.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/thread/">Thread</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Bugs Fixes
"                <ul>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12323">#12323</a>
"                      windows - boost/thread/win32/mfc_thread_init.hpp has wrong
"                      signature for _pRawDllMainOrig
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12730">#12730</a>
"                      windows - static threads library is incompatible with MSVC
"                      2017 RC
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12976">#12976</a>
"                      Boost Thread Executors documentation mistakes
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/12949">#12949</a>
"                      using sleep_for in a thread context without including boost/thread/thread.hpp
"                      yields incorrect behaviour when BOOST_THREAD_HAS_CONDATTR_SET_CLOCK_MONOTONIC
"                      is defined
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/13019">#13019</a>
"                      ABI compatibility for BOOST_THREAD_PROVIDES_INTERRUPTIONS incomplete
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/13069">#13069</a>
"                      Boost unit test "sync_pq_multi_thread_p_lib.exe"
"                      hung in thread library
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/13163">#13163</a>
"                      boost::detail::heap_new does not have a variadic variant
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="http://svn.boost.org/trac/boost/ticket/13226">#13226</a>
"                      getpagesize() is deprecated since 199506L
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/132">#132</a>
"                      VS 2017.4 Preview deadlocks on Test 10964
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/133">#133</a>
"                      windows - Spurious timing test failures on windows
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/134">#134</a>
"                      VS 2017.4 Preview deadlock in sync_pq_multi_thread_p_lib.exe
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/135">#135</a>
"                      VS 2017.4 Preview test_scheduled_tp_p.exe deadlock
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/136">#136</a>
"                      VS 2017.4 Preview test_scheduler_p.exe deadlock
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/137">#137</a>
"                      VS 2017.4 Preview executor_ex.exe deadlock
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/143">#143</a>
"                      Failures on msvc-12.0
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/145">#145</a>
"                      Clang build error with BOOST_THREAD_ATTRIBUTE_MAY_ALIAS
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                New Experimental Feature
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/thread/issues/116">#116</a>
"                      [Proposal] Add APIs for deferred set_value/exception
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/utility/">Utility</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">next_prior</span><span class="special">.</span><span class="identifier">hpp</span></code> has been moved to Boost.Iterator.
"                No changes needed to the user's code.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/uuid/">Uuid</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/uuid/issues/26">26</a>
"                      Refactored <code><span class="identifier">name_generator</span></code>
"                      to support a configurable hash provider concept and provide
"                      an optional MD5 hash implementation per RFC-4122. This will
"                      make it easier to support whatever becomes the next standard
"                      hash algorithm.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/uuid/issues/34">34</a>
"                      Added RFC-4122 namespaces in <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">uuids</span><span class="special">::</span><span class="identifier">ns</span></code>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac10/ticket/8630">8630</a>
"                      <a href="https://svn.boost.org/trac10/ticket/11482">11482</a>
"                      <a href="https://svn.boost.org/trac10/ticket/12253">12253</a>
"                      Various deficiencies in <code><span class="identifier">string_generator</span></code>
"                      were resolved.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac10/ticket/10665">10665</a>
"                      <code><span class="identifier">name_generator</span><span class="special">::</span><span class="keyword">operator</span><span class="special">()</span></code> is now const, matching docs.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Detail headers were moved into the detail subdirectory. No
"                      changes needed to user's code, however you may get build warnings
"                      if you use the old header location.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">apply_visitor</span></code> now does perfect
"                forwarding of visitables <a href="https://svn.boost.org/trac/boost/ticket/6971">#6971</a>. Great thanks to Levon Tarakchyan
"                for implementing this feature.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_66_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.2, 4.7.3, 4.8.5, 4.9.4, 6.4.0, 7.1.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.2.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 9.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC, C++0x: 4.4.2
"              </div>
"            </li>
"            <li>
"              <div>
"                QCC, C++11: 4.7.3
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.2.1, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 9.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Android:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.6, 3.7, 3.8
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.9, 5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 6.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          QNX:
"          <ul>
"            <li>
"              <div>
"                QCC, C++0x: 4.4.2
"              </div>
"            </li>
"            <li>
"              <div>
"                QCC, C++11: 4.7.3
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_66_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/beman_dawes.html">Beman Dawes</a>, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    </p>
"  </div>
"
-hash
"f47928997a331ace106f0c6734dcc6d49aa845f616ea3c90509b03bd68f064c5
-id
"version_1_66_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: Beast, CallableTraits, Mp11. Updated Libraries: Asio, Atomic,
"      DateTime, Fiber, Format, Fusion, Geometry, Iterator, Log, Multi-index Containers,
"      Optional, PolyCollection, Predef, Stacktrace, Thread, Utility, Uuid, Variant.
"
-title_xml
"Version 1.66.0
)
(feed/history/boost_1_67_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_67_0.known_issues">
"    <h3><span class="link">Known Issues</span></h3>
"    <p>
"      These are patches from library authors which were found too late to be fixed
"      in the release. Be careful as they have not been through the normal testing
"      process.
"    </p>
"    <ul>
"      <li>
"        <div>
"          Fix compiling with FreeBSD:
"          <ul>
"            <li>
"              <div>
"                <a href="/patches/1_67_0/0001-Fiber-Use-pthread_setaffinity_np-on-FreeBSD-as-well.patch">/patches/1_67_0/0001-Fiber-Use-pthread_setaffinity_np-on-FreeBSD-as-well.patch</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/patches/1_67_0/0002-Wave-Avoid-using-wrong-T_DIVIDE-on-BSDs.patch">/patches/1_67_0/0002-Wave-Avoid-using-wrong-T_DIVIDE-on-BSDs.patch</a>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Fix Python auto-linking:
"          <ul>
"            <li>
"              <div>
"                <a href="/patches/1_67_0/0003-Python-Fix-auto-linking-logic-Windows-only.patch">/patches/1_67_0/0003-Python-Fix-auto-linking-logic-Windows-only.patch</a>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_67_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/contract/">Contract</a>:</span>
"  Contract programming
"          for C++. All contract programming features are supported: Subcontracting,
"          class invariants, postconditions (with old and return values), preconditions,
"          customizable actions on assertion failure (e.g., terminate or throw), optional
"          compilation and checking of assertions, etc, from Lorenzo Caminiti.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/hof/">HOF</a>:</span>
"  Higher-order functions for C++,
"          from Paul Fultz II.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_67_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added missing const qualifier to <code><span class="identifier">basic_socket_acceptor</span><span class="special">::</span><span class="identifier">get_option</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Worked around a parsing error that occurs with some versions of gcc.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed broken code samples in tutorial.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added new experimental features. (Note that "experimental"
"                features may be changed without notice in subsequent releases.)
"                <ul>
"                  <li>
"                    <div>
"                      Added <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">detached</span></code>
"                      completion token.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">redirect_error</span></code>
"                      completion token.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">co_spawn</span></code>
"                      facility for integration with the coroutines technical specification.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Updated timeout examples to use latest features.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Used <code><span class="identifier">asio</span><span class="special">::</span><span class="identifier">steady_timer</span></code> rather than
"                      <code><span class="identifier">asio</span><span class="special">::</span><span class="identifier">deadline_timer</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Used <code><span class="identifier">asio</span><span class="special">::</span><span class="identifier">dynamic_buffer</span></code> rather than
"                      <code><span class="identifier">asio</span><span class="special">::</span><span class="identifier">streambuf</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Used timed <code><span class="identifier">asio</span><span class="special">::</span><span class="identifier">io_context</span><span class="special">::</span><span class="identifier">run_for</span><span class="special">()</span></code> function for blocking clients.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added example showing a custom completion token for blocking
"                      with timeouts.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed unit tests to compile when <code><span class="identifier">BOOST_ASIO_NO_DEPRECATED</span></code>
"                is defined.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed socket iostreams to use chrono by default, to fix compatibility
"                with the Networking TS. Define <code><span class="identifier">BOOST_ASIO_USE_BOOST_DATE_TIME_FOR_SOCKET_IOSTREAM</span></code>
"                to enable the old Boost.Date_Time interface in <code><span class="identifier">basic_socket_streambuf</span></code>
"                and <code><span class="identifier">basic_socket_iostream</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Updated examples to use chrono rather than Boost.Date_Time.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed an incorrect member function detector in the <code><span class="identifier">is_dynamic_buffer</span></code> trait.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed an <code><span class="identifier">async_result</span></code>
"                incompatibility with deprecated <code><span class="identifier">handler_type</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a missing move optimisation in the SSL stream implementation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed incorrect <code><span class="identifier">basic_resolver_results</span><span class="special">::</span><span class="identifier">value_type</span></code>
"                typedef.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a compile error with some OpenSSL versions when <code><span class="identifier">SSL_OP_NO_COMPRESSION</span></code> is defined.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed <code><span class="identifier">add_certificate_authority</span></code>
"                to process multiple certificates in a bundle.
"              </div>
"            </li>
"            <li>
"              <div>
"                Eliminated deprecation warning with MSVC by using <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">invoke_result</span></code>
"                rather than <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">result_of</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed to use <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">string_view</span></code>
"                for C++17 or later, and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">string_view</span></code>
"                for C++14. Define the preprocessor macro <code><span class="identifier">BOOST_ASIO_DISABLE_STD_STRING_VIEW</span></code>
"                to force the use of std::experimental::string_view (assuming it is
"                available) when compiling in C++17 mode.
"              </div>
"            </li>
"            <li>
"              <div>
"                Ensured <code><span class="identifier">DynamicBuffer</span></code>
"                template arguments are decayed before using in <code><span class="identifier">enable_if</span></code>
"                tests.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed documentation to distinguish legacy completion handlers (which
"                are still required to be CopyConstructible) from new MoveConstructible
"                handlers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Suppressed a discarded return value warning in the buffer debugging
"                support.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">basic_yield_context</span></code>
"                to work with completion signatures containing reference parameters.
"              </div>
"            </li>
"            <li>
"              <div>
"                Ensured that stackful coroutines launched using <code><span class="identifier">spawn</span><span class="special">()</span></code> correctly store decayed copies
"                of their function and handler arguments.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed some compatibility issues with Android.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added cross-compilation support to Jamfiles.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed some minor portability issues in examples.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Breaking change:</strong> Changed the result
"                of the <code><span class="special">(</span><span class="identifier">op</span><span class="special">)</span><span class="identifier">_and_test</span></code>
"                operations added in Boost 1.66 to the opposite - the functions now
"                return <code><span class="keyword">true</span></code> if the operation
"                result is non-zero. This is consistent with other <code><span class="identifier">test</span></code>
"                methods in Boost.Atomic and the C++ standard library. Users can define
"                <code><span class="identifier">BOOST_ATOMIC_DETAIL_HIGHLIGHT_OP_AND_TEST</span></code>
"                when compiling their code to emit warnings on every use of the changed
"                functions. This way users can locate the code that needs to be updated.
"                (<a href="https://github.com/boostorg/atomic/issues/11">#11</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Update for C++2a. On C++11 compilers that support scoped enums, the
"                <code><span class="identifier">memory_order</span></code> enumeration
"                is now scoped and contains constants with shorter names like <code><span class="identifier">acquire</span></code>, <code><span class="identifier">release</span></code>
"                or <code><span class="identifier">seq_cst</span></code> (i.e.
"                users can use <code><span class="identifier">memory_order</span><span class="special">::</span><span class="identifier">acquire</span></code>
"                instead of <code><span class="identifier">memory_order_acquire</span></code>).
"                The old constants are also provided for backward compatibility. (<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0439r0.html">P0439R0</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Update for C++2a. Added experimental support for atomic operations
"                on floating point types. In addition to general operations, <code><span class="identifier">add</span></code>, <code><span class="identifier">sub</span></code>,
"                <code><span class="identifier">negate</span></code> operations
"                and their <code><span class="identifier">fetch_</span><span class="special">(</span><span class="identifier">op</span><span class="special">)</span></code> and <code><span class="identifier">opaque_</span><span class="special">(</span><span class="identifier">op</span><span class="special">)</span></code> versions are supported. Lock-free
"                property can be tested with the new macros <code><span class="identifier">BOOST_ATOMIC_FLOAT</span><span class="special">/</span><span class="identifier">DOUBLE</span><span class="special">/</span><span class="identifier">LONG_DOUBLE_LOCK_FREE</span></code>.
"                The support for floating point types is optional and can be disabled
"                by defining <code><span class="identifier">BOOST_ATOMIC_NO_FLOATING_POINT</span></code>.
"                (<a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0020r6.html">P0020R6</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added new experimental operations:
"                <ul>
"                  <li>
"                    <div>
"                      <code><span class="identifier">negate_and_test</span></code>
"                      and <code><span class="identifier">complement_and_test</span></code>
"                      which perform negation or bitwise complement and return <code><span class="keyword">true</span></code> if the result is not zero.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">add</span></code>, <code><span class="identifier">sub</span></code>, <code><span class="identifier">negate</span></code>,
"                      <code><span class="identifier">bitwise_and</span></code>,
"                      <code><span class="identifier">bitwise_or</span></code>,
"                      <code><span class="identifier">bitwise_xor</span></code>,
"                      <code><span class="identifier">bitwise_complement</span></code>
"                      operations which perform the operation and return its result.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                For generic <code><span class="identifier">atomic</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code> specialization, the default constructor
"                is now trivial if <code><span class="identifier">T</span></code>'s
"                default constructor is.
"              </div>
"            </li>
"            <li>
"              <div>
"                The internal implementation of <code><span class="identifier">atomic</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code> has been updated to avoid undefined
"                behavior that stems from signed integer overflows. As required by
"                the C++ standard, the library uses two's complement representation
"                of signed integers internally and accroding rules of overflow. Currently,
"                the library requires the native signed integer types to also use
"                two's complement representation (but no defined overflow semantics).
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved Clang support. In particular, fixed DCAS not being lock-free
"                and fixed possible incorrect code generated on 32-bit x86.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved MinGW support. For gcc versions up to 4.6, fixed compilation
"                of DCAS on x86.
"              </div>
"            </li>
"            <li>
"              <div>
"                In x86 PIE code, asm blocks now preserve <code><span class="identifier">ebx</span></code>
"                value.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This version fixes significant defects in <code><span class="identifier">websocket</span><span class="special">::</span><span class="identifier">stream</span></code>
"                which can lead to asserts or undefined behavior. Users are encouraged
"                to update to the latest Boost release.
"              </div>
"            </li>
"            <li>
"              <div>
"                For a complete list of changes, please view the official <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/container_hash/">ContainerHash</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Extracted from the functional module to break a dependency cycle.
"              </div>
"            </li>
"            <li>
"              <div>
"                Moved headers to new location to reflect name change, the old include
"                paths will still work.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">string_view</span></code>,
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">error_code</span></code>, <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">error_condition</span></code>,
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">optional</span></code>, <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">variant</span></code>,
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">monostate</span></code> where available.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added explicit support for <code><span class="identifier">vector</span><span class="special">&lt;</span><span class="keyword">bool</span><span class="special">&gt;</span></code>, so that it will work with libc++
"                (<a href="https://svn.boost.org/trac/boost/ticket/13501">#13501</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                More detail in the <a href="/doc/html/hash/changes.html#hash.changes.boost_1_67_0">library
"                change log</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/62">#62</a>/<a href="https://github.com/boostorg/context/pull/64">PR#64</a>: fix i386/macho routines to correctly
"                return transfer_t in EAX/EDX
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/65">#65</a>: <code><span class="identifier">__sanitizer_finish_switch_fiber</span></code>
"                should be called directly after context switch
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/66">#66</a>: Clang on Windows : error: No best alternative for libs/context/build/asm_sources
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/73">#73</a>: fixing C2492 for execution_context (v1)
"              </div>
"            </li>
"            <li>
"              <div>
"                known bug: including all.hpp + &lt;context-impl&gt;ucontext/winfib
"                causes error 'forced_unwind: is not a member of boost::context::detail'
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Updated <code><span class="identifier">to_address</span></code>
"                and <code><span class="identifier">pointer_traits</span></code>
"                to reflect the design adopted for C++2a in <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0653r2.html">P0653R2</a>
"                (Glen Fernandes).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/coroutine2/">Coroutine2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/coroutine2/issues/13">#13</a>: Pull coroutine does not rethrow an exception if
"                it is thrown on the first entry
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/date_time/">DateTime</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed various year 2038 (32-bit) issues (<a href="https://svn.boost.org/trac/boost/ticket/2818">#2818</a>) (<a href="https://svn.boost.org/trac/boost/ticket/2819">#2819</a>) (<a href="https://svn.boost.org/trac/boost/ticket/3487">#3487</a>)
"                (<a href="https://svn.boost.org/trac/boost/ticket/4543">#4543</a>) (<a href="https://svn.boost.org/trac/boost/ticket/8450">#8450</a>) (<a href="https://svn.boost.org/trac/boost/ticket/9158">#9158</a>) (<a href="https://svn.boost.org/trac/boost/ticket/9489">#9489</a>) (<a href="https://svn.boost.org/trac/boost/ticket/10570">#10570</a>) (<a href="https://svn.boost.org/trac/boost/ticket/12609">#12609</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a binary serialization regression introduced in 1.66.0 (<a href="https://github.com/boostorg/date_time/issues/56">#56</a>)
"                (<a href="https://github.com/boostorg/date_time/pull/58">PR#58</a>) (<a href="https://github.com/boostorg/date_time/pull/70">PR#70</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Updated the timezone database file (<a href="https://svn.boost.org/trac/boost/ticket/4430">#4430</a>) (<a href="https://svn.boost.org/trac/boost/ticket/10087">#10087</a>) (<a href="https://github.com/boostorg/date_time/pull/68">PR#68</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Enhanced <code><span class="identifier">from_iso_string</span></code>
"                so it can read output of <code><span class="identifier">to_iso_string</span></code>
"                for special values (<a href="https://svn.boost.org/trac/boost/ticket/1078">#1078</a>) (<a href="https://github.com/boostorg/date_time/pull/69">PR#69</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed maximum supported year from 10000 to 9999 to resolve various
"                issues (<a href="https://svn.boost.org/trac/boost/ticket/13159">#13159</a>) (<a href="https://svn.boost.org/trac/boost/ticket/12630">#12630</a>) (<a href="https://github.com/boostorg/date_time/pull/71">PR#71</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">date_time</span><span class="special">::</span><span class="identifier">period_parser</span><span class="special">::</span><span class="identifier">delimiter_strings</span></code> did nothing (<a href="https://svn.boost.org/trac/boost/ticket/11142">#11142</a>)
"                (<a href="https://github.com/boostorg/date_time/pull/63">PR#63</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Ensure special values are not automatically translated to integral
"                types (<a href="https://svn.boost.org/trac/boost/ticket/11168">#11168</a>) (<a href="https://github.com/boostorg/date_time/pull/64">PR#64</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">int_adapter</span><span class="special">::</span><span class="identifier">is_signed</span></code> should be const (<a href="https://svn.boost.org/trac/boost/ticket/12363">#12363</a>)
"                (<a href="https://github.com/boostorg/date_time/pull/60">PR#60</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">date_time</span><span class="special">::</span><span class="identifier">time_input_facet</span></code> throws when using
"                <code><span class="special">%</span><span class="identifier">j</span></code>
"                alone (<a href="https://svn.boost.org/trac/boost/ticket/12910">#12910</a>) (<a href="https://github.com/boostorg/date_time/pull/59">PR#59</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Time input facet is not able to parse <code><span class="special">%</span><span class="identifier">e</span></code> day (<a href="https://svn.boost.org/trac/boost/ticket/13194">#13194</a>) (<a href="https://github.com/boostorg/date_time/pull/54">PR#54</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved Github CI build environment for better project metrics and
"                quality (<a href="https://github.com/boostorg/date_time/pull/52">PR#52</a>) (<a href="https://github.com/boostorg/date_time/pull/72">PR#72</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed various compiler warnings (<a href="https://svn.boost.org/trac/boost/ticket/3606">#3606</a>) (<a href="https://svn.boost.org/trac/boost/ticket/9882">#9882</a>) (<a href="https://github.com/boostorg/date_time/pull/62">PR#62</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixes for calling functions on dirty <code><span class="identifier">GetLastError</span><span class="special">()</span></code> <a href="https://github.com/boostorg/dll/issues/16">#16</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/128">#128</a>: Assertion "! ctx-&gt;ready_is_linked()" when
"                using condition_variable::wait_for
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/132">#132</a>: fatal error: 'stdexception' file not found
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/141">#141</a>: boost::fibers::async problem
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/146">#146</a>: remove unecessary lock of remote-ready-queue spinlock
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/153">#153</a>: docu: replace set_ready() by schedule()
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/154">#154</a>: Document iterators on channels
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/155">#155</a>: this_fiber is wrongly documented as being a member
"                of boost::fibers
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/156">#156</a>: Many examples are using their own barrier.hpp
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/158">#158</a>: add BOOST_FIBERS_DECL to work_stealing class
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/162">#162</a>: remove use-coutner increment for timed wait ops
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/166">#166</a>: remove assertion for wait_is_linked() in schedule()
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/167">#167</a>: call shared_state::owner_destroyed() only if future
"                was created from
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/168">#168</a>: fiber/doc/installing.qbk not not up to date
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix static initialization issue that caused a crash if path operations
"                were used before main() (<a href="https://github.com/boostorg/filesystem/pull/62">PR#62</a>, <a href="https://github.com/boostorg/filesystem/pull/43">PR#43</a>, <a href="https://github.com/boostorg/filesystem/pull/50">PR#50</a>,
"                <a href="https://github.com/boostorg/filesystem/pull/59">PR#59</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fusion/">Fusion</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Switch to SFINAE in template parameters on <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">map</span></code>
"                to fix compile error on newer MSVC 2017. (<a href="https://github.com/boostorg/fusion/pull/164">PR#164</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix for compilers not compatible with CWG defect 945 on <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">vector</span></code>. (<a href="https://github.com/boostorg/fusion/pull/166">PR#166</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added limits precheck on sequence converter to make error message
"                clearer. (<a href="https://github.com/boostorg/fusion/pull/168">PR#168</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Allow incomplete types in <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">tag_of</span></code>
"                and <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">is_native_fusion_sequence</span></code>. Note
"                that this changes no behaviour from previous release, but compliant
"                to TypeTraits's change. (<a href="https://github.com/boostorg/fusion/pull/171">PR#171</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements:
"                <ul>
"                  <li>
"                    <div>
"                      New map projection and SRS transformation representations (undocumented
"                      for now due to potential interface changes).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      New densify() algorithm.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      No longer using std::iterator (thanks to Daniela Engert).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      No longer using allocator directly in the rtree. Replaced with
"                      boost::container::allocator_traits (thanks to Daniela Engert).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Default rtree allocator changed to boost::container::new_allocator
"                      to still support move semantics emulation in C++03 with boost::container::allocator_traits.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Area strategies interface changed. This is potentially a breaking
"                      change.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Radius or Sphere can be passed into spherical strategies.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added Point-Box and Box-Box spherical and geographic distance()
"                      strategies.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Simplify (multi)polygons will discard output rings of 2 points
"                      or (for closed polygons) 3 points, but it tries to avoid creating
"                      those
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Simplify (multi)polygons will omit empty interior rings or
"                      polygons from output
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Solved issues:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac10/ticket/13386">13386</a>
"                      Workaround for some gcc compilers
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac10/ticket/13381">13381</a>
"                      Compile error with matrix_transformer in Visual C++ 2015
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://svn.boost.org/trac10/ticket/13436">13436</a>
"                      Incorrectness in boost::geometry::model::polygon documentation
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes:
"                <ul>
"                  <li>
"                    <div>
"                      Add missing strategy resolving in length() algorithm, affecting
"                      Variant support.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Simplify (multi)polygons now simplifies closing point
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Changes in behavior
"                <ul>
"                  <li>
"                    <div>
"                      Simplify (multi)polygons now usually rotates input rings before
"                      simplifying to select a non collinear point on its convex hull.
"                      This improves output.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/locale/">Locale</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support of <code><span class="identifier">unique_ptr</span></code>
"                interface in addition to C++2003 <code><span class="identifier">auto_ptr</span></code>
"                - in order to support C++2017, now you can use <code><span class="identifier">BOOST_LOCALE_HIDE_AUTO_PTR</span></code>
"                definiton to remove <code><span class="identifier">auto_ptr</span></code>
"                from the interfaces and prevent deprecated watnings.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed test problem with ICU &gt;60.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix of solaris build
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed wired FreeBSD/clang issue on optimized build. Probably compiler
"                workaround
"              </div>
"            </li>
"            <li>
"              <div>
"                Added workaround for failing MSVC tests due to 932 codepage codecvt
"                issue
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bugs 6851, 12572, 12453
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed missing throw in case of failure in <code><span class="identifier">icu</span><span class="special">/</span><span class="identifier">date_time</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed build agains Boost.Thread v4
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed Year of week instead of year ICU backend formatting
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed formatting test for ICU 56.1 and above
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved compatibility with C++17: use <code><span class="identifier">allocator_traits</span></code>
"                to work with allocators instead of directly accessing its members.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved compatibility with gcc 7 and later by updating library ABI
"                namespace definition.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added documentation for the "Append" config file parameter
"                for "TextFile" sinks. The parameter was supported previously,
"                only the documentation was missing.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/index.html">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Add naive Monte Carlo integration support.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add Chebyshev interpolation routines.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/index.html">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Elements with overloaded <code><span class="keyword">operator</span><span class="special">&amp;</span></code> are now fully accepted (ticket
"                <a href="https://svn.boost.org/trac/boost/ticket/13307">#13307</a>). Thanks to Daniel Frey for his updating <a href="/libs/utility/operators.htm#deref">Boost.Operators</a>
"                to help fix this issue.
"              </div>
"            </li>
"            <li>
"              <div>
"                Avoided usage of <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">allocator</span></code>
"                members deprecated in C++17. Contributed by Daniela Engert.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multiprecision/index.html">Multiprecision</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Breaking Change:</strong> When converting
"                a multiprecision integer to a narrower type, if the value is too
"                large (or negative) to fit in the smaller type, then the result is
"                either the maximum (or minimum) value of the target type. This was
"                always the intended behaviour, but was somewhat haphazardly enforced
"                before. If you really do want just the low order N bits of a value,
"                then you will need to mask these out prior to the case, for example:
"                <code><span class="keyword">static_cast</span><span class="special">&lt;</span><span class="keyword">unsigned</span><span class="special">&gt;(~</span><span class="keyword">static_cast</span><span class="special">&lt;</span><span class="keyword">unsigned</span><span class="special">&gt;(</span><span class="number">0</span><span class="special">)</span> <span class="special">&amp;</span> <span class="identifier">my_value</span><span class="special">)</span></code>. Note that technically (to avoid
"                undefined behaviour) you should do the same thing with built in integer
"                types too. See <a href="https://svn.boost.org/trac/boost/ticket/13109">#13109</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in conversion of decimal to rational types (zero needs special
"                handling), see <a href="https://svn.boost.org/trac/boost/ticket/13148">#13148</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix conversion from cpp_bin_float to a wider built in integer type,
"                see <a href="https://svn.boost.org/trac/boost/ticket/13301">#13301</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve performance heurists used in cpp_bin_float exp function.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in floor/ceil and cpp_bin_float when the exponent type is
"                wider than an int, see <a href="https://svn.boost.org/trac/boost/ticket/13264">#13264</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Disable explicit conversion operator when the target type is already
"                constructible from this type, see <a href="https://github.com/boostorg/multiprecision/issues/30">#30</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix support for changes new to MPIR-3.0, see <a href="https://svn.boost.org/trac/boost/ticket/13124">#13124</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/optional/index.html">Optional</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed issue <a href="https://github.com/boostorg/optional/issues/46">#46</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="special">-</span><span class="identifier">Wzero</span><span class="special">-</span><span class="identifier">as</span><span class="special">-</span><span class="identifier">null</span><span class="special">-</span><span class="identifier">pointer</span><span class="special">-</span><span class="identifier">constant</span></code>
"                warnings.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/phoenix/">Phoenix</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Correct documentation and example code. (<a href="https://svn.boost.org/trac/boost/ticket/8187">#8187</a>, <a href="https://github.com/boostorg/phoenix/pull/56">PR#56</a>,
"                <a href="https://github.com/boostorg/phoenix/pull/57">PR#57</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bug with initializing phoenix lazy from array types in C++11.
"                (<a href="https://svn.boost.org/trac/boost/ticket/12733">#12733</a>, <a href="https://github.com/boostorg/phoenix/pull/58">PR#58</a>, <a href="https://github.com/boostorg/phoenix/pull/61">PR#61</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Use proto subscript and assignment overload operators buildins to
"                fix compile error with some lambda experssions on recent MSVC. (<a href="https://github.com/boostorg/phoenix/issues/62">#62</a>,
"                <a href="https://github.com/boostorg/phoenix/pull/64">PR#64</a>, <a href="https://github.com/boostorg/phoenix/pull/66">PR#66</a>, <a href="https://github.com/boostorg/phoenix/pull/67">PR#67</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Remove use of deprecated <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iteratror</span></code>.
"                Thanks to Daniela Engert. (<a href="https://github.com/boostorg/phoenix/pull/59">PR#59</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/poly_collection/">PolyCollection</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Maintenance fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/python/">Python</a>:</span>
"          <ul>
"            <li>
"              <div>
"                The library name now includes the version suffix of the Python version
"                used to compile it. For example, a variant compiled with Python 2.7
"                will produce library names <code><span class="identifier">boost_python27</span></code>
"                and <code><span class="identifier">boost_numpy27</span></code>,
"                etc.. Combined with a related fix in Boost.Build, this means that
"                it is now possible to build variants for multiple Python versions
"                in a single build process.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/spirit/">Spirit</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Spirit.X3:
"                <ul>
"                  <li>
"                    <div>
"                      <strong>Breaking change:</strong> Removed
"                      <code><span class="identifier">with_context</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/239">#239</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added noexcept to <code><span class="identifier">x3</span><span class="special">::</span><span class="identifier">variant</span></code>
"                      and <code><span class="identifier">forward_ast</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/241">#241</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      CR+LF lines wrongly counted in <code><span class="identifier">error_handler</span><span class="special">::</span><span class="identifier">position</span><span class="special">()</span></code> (<a href="https://github.com/boostorg/spirit/issues/248">#248</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">unused_type</span></code>
"                      attribute case in <code><span class="identifier">parse_into_container</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/266">#266</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed parsing into associative containers (<a href="https://github.com/boostorg/spirit/issues/289">#289</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed overflow problem in <code><span class="identifier">uint_parser</span><span class="special">&lt;</span><span class="keyword">signed</span>
"                      <span class="identifier">T</span><span class="special">&gt;</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/297">#297</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added VS2015 Update 3 support by using workarounds (<a href="https://github.com/boostorg/spirit/issues/308">#308</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed include guard names collision with Qi (<a href="https://github.com/boostorg/spirit/issues/313">#313</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added parsing into range (<a href="https://github.com/boostorg/spirit/issues/316">#316</a>) (<a href="https://svn.boost.org/trac/boost/ticket/12928">#12928</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Changed iterator concept static assert from <code><span class="identifier">ForwardIterator</span></code>
"                      to <code><span class="identifier">ReadableIteratorConcept</span></code>
"                      &amp;&amp; <code><span class="identifier">ForwardTraversalConcept</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/320">#320</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Reenabled <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">map</span></code>
"                      support (<a href="https://github.com/boostorg/spirit/issues/330">#330</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">string</span><span class="special">(</span><span class="string">"..."</span><span class="special">)</span></code> and <code><span class="identifier">attr</span><span class="special">(</span><span class="string">"..."</span><span class="special">)</span></code> to single item sequence (<a href="https://github.com/boostorg/spirit/issues/337">#337</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Dereference a single item view instead of unwrapping sequence
"                      (<a href="https://github.com/boostorg/spirit/issues/340">#340</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Prevent <code><span class="identifier">parse_nan</span></code>
"                      from dereferencing out of range iterator (<a href="https://github.com/boostorg/spirit/issues/351">#351</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Use traits to test if container is empty (<a href="https://github.com/boostorg/spirit/issues/355">#355</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit V2
"                <ul>
"                  <li>
"                    <div>
"                      Fixed keyword directives compilation on C++11 (<a href="https://github.com/boostorg/spirit/issues/256">#256</a>)
"                      (<a href="https://svn.boost.org/trac/boost/ticket/11493">#11493</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed subrules compilation (<a href="https://github.com/boostorg/spirit/issues/279">#279</a>) (<a href="https://github.com/boostorg/spirit/issues/259">#259</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed subrules use after scope bug (<a href="https://github.com/boostorg/spirit/issues/284">#284</a>) (<a href="https://svn.boost.org/trac/boost/ticket/5270">#5270</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed undefined behavior in sequential or operator. Underlying
"                      parsers order of execution was dependent on compiler (<a href="https://github.com/boostorg/spirit/issues/310">#310</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Spirit was accidentally relaying on <code><span class="identifier">types</span></code>
"                      typedef of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">optional</span></code>.
"                      The typedef was removed in the new optional implementation
"                      (<a href="https://github.com/boostorg/spirit/issues/271">#271</a>) (<a href="https://svn.boost.org/trac/boost/ticket/12349">#12349</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed problems with <code><span class="identifier">BOOST_SPIRIT_NO_PREDEFINED_TERMINALS</span></code>
"                      (<code><span class="identifier">attr_cast</span></code>,
"                      <code><span class="identifier">confix</span></code>, <code><span class="identifier">distinct</span></code>, <code><span class="identifier">keywords</span></code>,
"                      and <code><span class="identifier">flush_multi_pass</span></code>)
"                      (<a href="https://github.com/boostorg/spirit/issues/314">#314</a>) (<a href="https://svn.boost.org/trac/boost/ticket/13311">#13311</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added missing copy assignment operator to <code><span class="identifier">hold_any</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/361">#361</a>) (<a href="https://svn.boost.org/trac/boost/ticket/8268">#8268</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit.Qi:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed alternate operator (<a href="https://github.com/boostorg/spirit/issues/201">#201</a>) (<a href="https://github.com/boostorg/spirit/issues/271">#271</a>) (<a href="https://svn.boost.org/trac/boost/ticket/12349">#12349</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed signed integer overflow in real parser (<a href="https://github.com/boostorg/spirit/issues/245">#245</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed overflow problem in <code><span class="identifier">uint_parser</span><span class="special">&lt;</span><span class="keyword">signed</span>
"                      <span class="identifier">T</span><span class="special">&gt;</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/297">#297</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">get_current_line</span></code>,
"                      <code><span class="identifier">get_line_start</span></code>,
"                      and added <code><span class="identifier">get_line_end</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/304">#304</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Permutations parser were always initializing optionals (<a href="https://github.com/boostorg/spirit/issues/319">#319</a>)
"                      (<a href="https://svn.boost.org/trac/boost/ticket/12473">#12473</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Changed iterator concept static assert from <code><span class="identifier">ForwardIterator</span></code>
"                      to <code><span class="identifier">ReadableIteratorConcept</span></code>
"                      &amp;&amp; <code><span class="identifier">ForwardTraversalConcept</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/320">#320</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added assertations to real parsers to ensure that the <code><span class="identifier">parse_frac_n</span></code> from user defined
"                      real policy does not return negative values and also to prevent
"                      static analyzers false-positives (<a href="https://github.com/boostorg/spirit/issues/358">#358</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit.Karma:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed alternate operator (<a href="https://github.com/boostorg/spirit/issues/271">#271</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">no_buffering_policy</span></code>
"                      missing copy constructor (<a href="https://github.com/boostorg/spirit/issues/261">#261</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      The <code><span class="identifier">ostream_iterator</span></code>
"                      was inheriting <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iterator</span></code>
"                      which is deprecated in C++17 (<a href="https://github.com/boostorg/spirit/issues/345">#345</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit.Lex:
"                <ul>
"                  <li>
"                    <div>
"                      Store id as promoted type to allow out-of-enum values (<a href="https://github.com/boostorg/spirit/issues/247">#247</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed C2001 'newline in constant' warning in generated lexers
"                      (<a href="https://github.com/boostorg/spirit/issues/324">#324</a>) (<a href="https://svn.boost.org/trac/boost/ticket/11540">#11540</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit.Classic:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">remove_reference</span></code>
"                      usage without a namespace in Phoenix (<a href="https://github.com/boostorg/spirit/issues/274">#274</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">complex</span></code> usage without the
"                      include (<a href="https://github.com/boostorg/spirit/issues/273">#273</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed compilation of <code><span class="identifier">match</span><span class="special">&lt;</span><span class="identifier">T</span>
"                      <span class="special">&amp;&gt;</span></code> (<a href="https://github.com/boostorg/spirit/issues/275">#275</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed compilation with <code><span class="identifier">BOOST_DISABLE_THREADS</span></code>
"                      defined (<a href="https://github.com/boostorg/spirit/issues/323">#323</a>) (<a href="https://svn.boost.org/trac/boost/ticket/12639">#12639</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Increment scanner through iterator policy (<a href="https://github.com/boostorg/spirit/issues/336">#336</a>) (<a href="https://svn.boost.org/trac/boost/ticket/7371">#7371</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Removed deprecated in C++17 <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iterator</span></code>
"                      usage (<a href="https://github.com/boostorg/spirit/issues/345">#345</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Async safe dumping into files on Windows OS was causing hangs on
"                some platforms and now is disabled <a href="https://github.com/boostorg/stacktrace/issues/33">#33</a>. Users are encouraged
"                to update to the latest Boost release.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/libs/container_hash/">ContainerHash</a> library
"                is now used to reduce dependencies.
"              </div>
"            </li>
"            <li>
"              <div>
"                Minor fixes (including <a href="https://github.com/boostorg/stacktrace/issues/31">#31</a>, <a href="https://github.com/boostorg/stacktrace/issues/38">#38</a>, <a href="https://github.com/boostorg/stacktrace/issues/39">#39</a>,
"                <a href="https://github.com/boostorg/stacktrace/issues/40">#40</a>, <a href="https://github.com/boostorg/stacktrace/issues/42">#42</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/test/">Test</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.test v3.7 see the <a href="/doc/libs/1_67_0/libs/test/doc/html/boost_test/change_log.html">Changes
"                log</a> for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                Breaking changes
"                <ul>
"                  <li>
"                    <div>
"                      Adding test cases with the same name to the same test suite
"                      is now reported as an error. See the changes log for more details.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                New feature:
"                <ul>
"                  <li>
"                    <div>
"                      Colour output on by default and available on Windows,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Improved and clearer command line help
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">BOOST_AUTO_TEST_CASE_TEMPLATE</span></code>
"                      now accepts a sequence of types in an <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">tuple</span></code>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes and pull requests:
"                <ul>
"                  <li>
"                    <div>
"                      Trac tickets: <a href="https://svn.boost.org/trac/boost/ticket/12092">#12092</a>, <a href="https://svn.boost.org/trac/boost/ticket/12596">#12596</a>, <a href="https://svn.boost.org/trac/boost/ticket/12597">#12597</a>, <a href="https://svn.boost.org/trac/boost/ticket/12969">#12969</a>,
"                      <a href="https://svn.boost.org/trac/boost/ticket/13058">#13058</a>, <a href="https://svn.boost.org/trac/boost/ticket/13149">#13149</a>, <a href="https://svn.boost.org/trac/boost/ticket/13170">#13170</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Trac tickets: <a href="https://svn.boost.org/trac/boost/ticket/13181">#13181</a>, <a href="https://svn.boost.org/trac/boost/ticket/13371">#13371</a>, <a href="https://svn.boost.org/trac/boost/ticket/13387">#13387</a>, <a href="https://svn.boost.org/trac/boost/ticket/13398">#13398</a>,
"                      <a href="https://svn.boost.org/trac/boost/ticket/13407">#13407</a>, <a href="https://svn.boost.org/trac/boost/ticket/13435">#13435</a>, <a href="https://svn.boost.org/trac/boost/ticket/13443">#13443</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Pull requests: <a href="https://github.com/boostorg/test/issues/112">#112</a>, <a href="https://github.com/boostorg/test/issues/118">#118</a>, <a href="https://github.com/boostorg/test/issues/118">#118</a>, <a href="https://github.com/boostorg/test/issues/121">#121</a>,
"                      <a href="https://github.com/boostorg/test/issues/122">#122</a>, <a href="https://github.com/boostorg/test/issues/125">#125</a>, <a href="https://github.com/boostorg/test/issues/127">#127</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_index/">TypeIndex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="/libs/container_hash/">ContainerHash</a> library
"                is now used to reduce dependencies.
"              </div>
"            </li>
"            <li>
"              <div>
"                Minor fixes (including <a href="https://github.com/boostorg/type_index/issues/17">#17</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_traits/">TypeTraits</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added new traits <code><span class="identifier">detected</span></code>,
"                <code><span class="identifier">detected_or</span></code>, <code><span class="identifier">is_detected</span></code>, <code><span class="identifier">is_detected_convertible</span></code>,
"                <code><span class="identifier">is_detected_exact</span></code>,
"                <code><span class="identifier">is_complete</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added greatly improved code for detecting binary operators.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add assertions for completeness to traits which require complete
"                types as arguments: this prevents various traits from giving eroneous
"                results from incomplete types.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix minor issue with mpl compatibility, see <a href="https://svn.boost.org/trac/boost/ticket/12212">#12212</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add macro to indicate when <code><span class="identifier">is_constructible</span></code>
"                is fully implemented, see <a href="https://svn.boost.org/trac/boost/ticket/12003">#12003</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Update <code><span class="identifier">is_function</span></code>
"                and <code><span class="identifier">is_member_function_pointer</span></code>
"                to work correctly with C++17 noexcept specifications.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add workaround for <code><span class="identifier">is_default_constructible</span></code>
"                and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">pair</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added fallback for <code><span class="identifier">is_nothrow_swappable</span></code>
"                on pre-C++11 compilers.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/utility/">Utility</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Breaking change:</strong> <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">utility</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code>
"                header no longer includes <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">next</span></code>
"                and <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">prior</span></code> as they have been moved to
"                the iterator module. Instead include <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">next_prior</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code>.
"                Other uses of <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">utility</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code> are discouraged, it's better
"                to use the header for the specific functionality instead.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/unordered/">Unordered</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Template deduction guides.
"              </div>
"            </li>
"            <li>
"              <div>
"                Standard conforming <code><span class="keyword">noexcept</span></code>
"                specifications for <code><span class="identifier">swap</span></code>,
"                <code><span class="keyword">operator</span><span class="special">=</span></code>
"                and node handles.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add <code><span class="identifier">element_type</span></code>
"                to iterators, so that <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">pointer_traits</span></code>
"                will work.
"              </div>
"            </li>
"            <li>
"              <div>
"                Support <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">piecewise_construct</span></code> on recent Visual
"                C++ and Dinkumware libraries.
"              </div>
"            </li>
"            <li>
"              <div>
"                Use <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iterator_traits</span></code> rather than the
"                boost iterator traits in order to remove dependency on Boost.Iterator.
"              </div>
"            </li>
"            <li>
"              <div>
"                Iterators no longer inherit from <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iterator</span></code>,
"                as it's deprecated (<a href="https://github.com/boostorg/unordered/pull/7">PR#7</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                More detail in the <a href="/doc/html/unordered/changes.html#unordered.changes.boost_1_67_0">library
"                change log</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/units/">Units</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix sqrt for scaled units <a href="https://svn.boost.org/trac/boost/ticket/10270">#10270</a> <a href="https://github.com/boostorg/units/issues/27">#27</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Add constexpr support <a href="https://github.com/boostorg/units/issues/22">#22</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                minor documentation fixes
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/uuid/">Uuid</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Breaking change:</strong> random_generator
"                is no longer copyable (<a href="https://github.com/boostorg/uuid/issues/61">#61</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Optimized random_generator to use OS-provided entropy directly (<a href="https://github.com/boostorg/uuid/pull/53">PR#53</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Provide <code><span class="identifier">random_generator_mt19937</span></code>
"                for bulk UUID generation
"              </div>
"            </li>
"            <li>
"              <div>
"                Handle entropy acquisition errors instead of ignoring them
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for Windows UWP (<a href="https://github.com/boostorg/uuid/issues/24">#24</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for CloudABI
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Substitute function arguments on compilers with variadic templates
"                support and do not generate substitution metafunctions using preprocessor
"                <a href="https://github.com/boostorg/variant/issues/42">#42</a>, <a href="https://github.com/boostorg/variant/issues/46">#46</a>. Many thanks to Nikita Kniazev for providing
"                an initial fix.
"              </div>
"            </li>
"            <li>
"              <div>
"                Perfect forwarding for passing visitor in apply_visitor <a href="https://github.com/boostorg/variant/issues/40">#40</a>,
"                <a href="https://svn.boost.org/trac/boost/ticket/13288">#13288</a>. Many thanks to Paweł Dac!
"              </div>
"            </li>
"            <li>
"              <div>
"                Minor fixes (including <a href="https://github.com/boostorg/variant/issues/41">#41</a>, <a href="https://github.com/boostorg/variant/issues/44">#44</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_67_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 9.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.9.2, 5.4.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.2.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Clang: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 9.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 7.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_67_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <a href="/users/people/beman_dawes.html">Beman Dawes</a>, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    </p>
"  </div>
"
-hash
"3fbc80a15f875a1f5ded9163e10a4f44b80da9e0a1e1d9cba96798af2a973244
-id
"version_1_67_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: Contract, HOF. Updated Libraries: Asio, Atomic, Beast, Container
"      Hash, Context, Core, Coroutine2, DateTime, DLL, Fiber, Filesystem, Fusion,
"      Locale, Log, Math, Multi-index Containers, Multiprecision, Optional, Phoenix,
"      PolyCollection, Python, Spirit, Stacktrace, Test, TypeIndex, TypeTraits, Unordered,
"      Units, Uuid, Utility, Variant.
"
-title_xml
"Version 1.67.0
)
(feed/history/boost_1_68_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_68_0.notes_for_windows_users">
"    <h3><span class="link">Notes for Windows
"    users</span></h3>
"    <p>
"      Boost.WinAPI has been updated to target Windows 7 by default, where possible.
"      In previous releases Windows Vista was the default.
"    </p>
"    <p>
"      Boost.WinAPI is used internally as the Windows SDK abstraction layer in a number
"      of Boost libraries, including Boost.Beast, Boost.Chrono, Boost.DateTime, Boost.Dll,
"      Boost.Log, Boost.Process, Boost.Stacktrace, Boost.System, Boost.Thread and
"      Boost.UUID. To select the target Windows version define <code><span class="identifier">BOOST_USE_WINAPI_VERSION</span></code>
"      to the numeric version similar to <code><span class="identifier">_WIN32_WINNT</span></code>
"      while compiling Boost and user's code. For example:
"    </p>
"<pre>    b2 release define=BOOST_USE_WINAPI_VERSION=0x0501 stage
"</pre>
"    <p>
"      The list of Windows API version numbers can be seen on <a href="https://msdn.microsoft.com/en-us/library/6sehtctf.aspx">this</a>
"      page.
"    </p>
"  </div>
"  <div id="version_1_68_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/yap/">YAP</a>:</span> An expression template library
"          for C++14 and later, from Zach Laine.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_68_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This version fixes a missing executor work guard in all composed
"                operations used in the implementation. Users who are experiencing
"                crashes related to asynchronous completion handlers are encouraged
"                to upgrade.
"              </div>
"            </li>
"            <li>
"              <div>
"                For a complete list of changes, please view the official <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/78">#78</a>: Linker error with <code><span class="identifier">context</span><span class="special">-</span><span class="identifier">impl</span><span class="special">=</span><span class="identifier">ucontext</span></code>:
"                multiple definition of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">context</span><span class="special">::</span><span class="identifier">detail</span><span class="special">::</span><span class="identifier">current_rec</span></code>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/coroutine2/">Coroutine2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/coroutine2/issues/14">#14</a>: crash while stack unwinding
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/coroutine2/issues/18">#18</a>: some guidance on why to use coroutine2
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/coroutine2/issues/20">#20</a>: failes to compile test in due to the error C2039
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/coroutine2/issues/22">#22</a>: undefined behaviour documentation
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/170">#170</a>: buffered_channel::try_push has incorrect documentation
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/172: WIN64">#172: WIN64</a>: 'invalid conversion from 'HANDLE' to
"                'std::thread::native_handle_type' errors for builds using mingw-w64
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/175">#175</a>: throw exception "Operation not permitted"
"              </div>
"            </li>
"            <li>
"              <div>
"                NUMA support moved to extra library (fiber-numa); enabled via property
"                numa (numa=on)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fusion/">Fusion</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added a workaround for ambiguous call of <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">deque</span></code>
"                constructor on GCC 4.4/c++0x (<a href="https://github.com/boostorg/fusion/pull/178">PR#178</a>, <a href="https://github.com/boostorg/fusion/pull/178/commits/9de32721749b635ff3e04e690da89cf06602c122">commit</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a bug with C-style array (<a href="https://github.com/boostorg/fusion/pull/177">PR#177</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">for_each</span></code> signature to take functor
"                by value (<a href="https://svn.boost.org/trac/boost/ticket/4427">#4427</a>).
"                <ul>
"                  <li>
"                    <div>
"                      This may break existing code with non-copyable (non-movable)
"                      functor, but the implementation wasn't correct for a long time;
"                      the documantation was correct from the first. So, please make
"                      sure your usage.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed unintentional MPL placeholder substitution bug on <code><span class="identifier">fusion</span><span class="special">::</span><span class="identifier">transform</span></code> (<a href="https://svn.boost.org/trac/boost/ticket/5490">#5490</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Moved description, how to conform Fusion sequence as MPL sequence,
"                to mpl section (<a href="https://svn.boost.org/trac/boost/ticket/4029">#4029</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added notes regarding IO facility for adapted type (<a href="https://svn.boost.org/trac/boost/ticket/6091">#6091</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/469">469</a>
"                      Horizontal grid shift (nadgrids) in SRS transformations (undocumented
"                      for now due to potential interface changes).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/478">478</a>
"                      Box-Segment distance for spherical and geographic coordinate
"                      systems.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/487">487</a>
"                      Missing combinations of geometries in distance for spherical
"                      and geographic cs
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/489">489</a>
"                      Additional direct geodesic problem formulas for internal use
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Solved issues
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/470">470</a>
"                      Assertion failure with short spherical and geographic segments.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/471">471</a>
"                      Invalid envelope of spherical polygon
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/498">498</a>
"                      Unexpected results with expand() and make_inverse() for spherical
"                      and geographic CS
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/504">504</a>
"                      Unused parameter warnings.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/488">488</a>
"                      Handle non-true-references in closing_iterator and ever_circling_range_iterator
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/495">495</a>
"                      VxWorks 7 cross-compilation issue.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/gil/">GIL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added
"                <ul>
"                  <li>
"                    <div>
"                      The library now requires a C++11-compliant compiler.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      New top-level all-in-one <code><span class="identifier">include</span><span class="special">/</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">gil</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                      header (<a href="https://github.com/boostorg/gil/pull/70">PR#70</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      New Toolbox extension, <a href="https://lists.boost.org/boost-announce/2011/01/0281.php">reviewed
"                      and accepted into Boost</a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed
"                <ul>
"                  <li>
"                    <div>
"                      IO extensions have been entirely rewritten as IO v2, <a href="https://lists.boost.org/boost-announce/2011/01/0281.php">reviewed
"                      and accepted into Boost</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Documentation has been reformatted and updated.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed
"                <ul>
"                  <li>
"                    <div>
"                      IO v1 extension has been replaced with IO v2.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/graph/">Graph</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Conditionally replace deprecated/removed C++98 <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">bind1st</span></code>
"                by <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">bind</span></code>, <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">auto_ptr</span></code>
"                by <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">unique_ptr</span></code>, and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">random_shuffle</span></code>
"                by <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">shuffle</span></code>. (<a href="https://github.com/boostorg/graph/pull/89">PR#89</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix compiler error with release builds on VS2015 (<a href="https://github.com/boostorg/graph/pull/84">PR#84</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix the Stanford GraphBase examples (<a href="https://github.com/boostorg/graph/pull/87">PR#87</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix friend declarations for iterator_core_access (<a href="https://github.com/boostorg/graph/pull/103">PR#103</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Add missing <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">iterator</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code> include (<a href="https://github.com/boostorg/graph/pull/104">PR#104</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Avoid an unused variable warning (<a href="https://github.com/boostorg/graph/pull/90">PR#90</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix some typos in documentation (<a href="https://github.com/boostorg/graph/pull/88">PR#88</a>, <a href="https://github.com/boostorg/graph/pull/98">PR#98</a>, <a href="https://github.com/boostorg/graph/pull/102">PR#102</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix some issues in tests and examples (<a href="https://github.com/boostorg/graph/pull/85">PR#85</a>, <a href="https://github.com/boostorg/graph/pull/105">PR#105</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/lexical_cast/">Lexical Cast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixes for clang-tidy warnings <a href="https://svn.boost.org/trac/boost/ticket/12092">#12092</a>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved support for VxWorks. (<a href="https://github.com/boostorg/log/pull/39">PR#39</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Save and restore <code><span class="identifier">ebx</span></code>
"                register on x86 PIE targets in the <code><span class="identifier">dump</span></code>
"                stream manipulator implementation.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for arbitrary precision complex valued quadrature and hence
"                contour integration
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve performance of polynomial addition
"              </div>
"            </li>
"            <li>
"              <div>
"                Continue to improve numerical integration routines, and in particular
"                add support for contour integrals.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve accuracy of erfc function's rational approximations.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/index.html">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Containers of moveable but non-copyable elements can now be serialized
"                (ticket <a href="https://svn.boost.org/trac/boost/ticket/13478">#13478</a>). Thanks to Sébastien Paris for the report.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">multi_index_container</span></code>'s
"                default constructor is no longer <code><span class="keyword">explicit</span></code>
"                (ticket <a href="https://svn.boost.org/trac/boost/ticket/13518">#13518</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multiprecision">Multiprecision</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support added for complex multiprecision numbers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed conversion to unsigned integer types to be truncating to
"                match standard defined behaviour.
"              </div>
"            </li>
"            <li>
"              <div>
"                Correct bug in MPFR string formatting.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix undefined behaviour in cpp_dec_float conversion from long long.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add support for Eigen interoperability.
"              </div>
"            </li>
"            <li>
"              <div>
"                float128.hpp: Fix Intel on Windows build.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix type used in temporaries when expanding expression templates
"                containing mixed expressions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix infinite loop in gmp_float to fixed-point string conversion.
"              </div>
"            </li>
"            <li>
"              <div>
"                Update the expression templates to issue static_asserts with better
"                error messages when you try and do something unsupported.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in cpp_int where incrementing to zero doesn't set the sign
"                correctly.
"              </div>
"            </li>
"            <li>
"              <div>
"                Remove erroneous use of std::move, and rely on NVRO instead.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix up support for changes to MPIR-3.0.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix various conversion errors in cpp_bin_float when the exponent
"                type is a <code><span class="keyword">long</span> <span class="keyword">long</span></code>,
"                or else we're converting to an integer that is wider than we are.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix compatibility issue with GCC-8 caused by the introduction of
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">byte</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/optional/">Optional</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added member function <code><span class="identifier">has_value</span><span class="special">()</span></code> for compatibility with <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">optional</span></code> (<a href="https://github.com/boostorg/optional/issues/52">issue
"                #52</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added member function <code><span class="identifier">map</span><span class="special">()</span></code> for transforming <code><span class="identifier">optional</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code>
"                into <code><span class="identifier">optional</span><span class="special">&lt;</span><span class="identifier">U</span><span class="special">&gt;</span></code>
"                using a function of type <code><span class="identifier">T</span>
"                <span class="special">-&gt;</span> <span class="identifier">U</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added member function <code><span class="identifier">flat_map</span><span class="special">()</span></code> for transforming <code><span class="identifier">optional</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code>
"                into <code><span class="identifier">optional</span><span class="special">&lt;</span><span class="identifier">U</span><span class="special">&gt;</span></code>
"                using a function of type <code><span class="identifier">T</span>
"                <span class="special">-&gt;</span> <span class="identifier">optonal</span><span class="special">&lt;</span><span class="identifier">U</span><span class="special">&gt;</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/predef/">Predef</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Add support for __ARM_ARCH macro. (from Tim Blechmann)
"              </div>
"            </li>
"            <li>
"              <div>
"                Add detection for PTX architecture. (from Benjamin Worpitz)
"              </div>
"            </li>
"            <li>
"              <div>
"                Add nvcc compiler detection. (from Benjamin Worpitz)
"              </div>
"            </li>
"            <li>
"              <div>
"                Add support for detecting CUDA. (from Benjamin Worpitz)
"              </div>
"            </li>
"            <li>
"              <div>
"                Remove reference to obsolete BOOST_ARCH_AMD64. (from Peter Kolbus)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/program_options/">Program Options</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for multiple long names for an option, thanks to Eyal Rozenberg
"                (<a href="https://github.com/boostorg/program_options/pull/53">PR#53</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/python/">Python</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Bug fixes to correct autolink support (Windows) (<a href="https://github.com/boostorg/python/issues/193">#193</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/rational/">Rational</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed undefined behavior in normalize() (<a href="https://github.com/boostorg/rational/pull/19">PR#19</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/system/">System</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Add constexpr to error_code and error_condition members under C++14
"                and above (<a href="https://github.com/boostorg/system/pull/23">PR#23</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/signals/">Signals</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Removal Notice:</strong> Boost.Signals will
"                be removed in the next release. Boost.Signals was deprecated in version
"                1.54.0. Transition to Boost.Signals2 now to avoid disruption.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/spirit/">Spirit</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Spirit.X3:
"                <ul>
"                  <li>
"                    <div>
"                      Small list parser optimization (<a href="https://github.com/boostorg/spirit/pull/368">PR#368</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Pass container attributes through sequence parser or unary
"                      ending down to a sequence parser (<a href="https://github.com/boostorg/spirit/pull/370">PR#370</a> <a href="https://svn.boost.org/trac/boost/ticket/12085">#12085</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      More fine grained sequence attribute check message (<a href="https://github.com/boostorg/spirit/pull/371">PR#371</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Removed redundant check in <code><span class="identifier">skip_over</span></code>
"                      (<a href="https://github.com/boostorg/spirit/pull/373">PR#373</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Workaround constexpr in noexcept VS2015 bug in entire <code><span class="identifier">x3</span><span class="special">::</span><span class="identifier">variant</span></code> (<a href="https://github.com/boostorg/spirit/pull/379">PR#379</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed calc4b example compilation (<a href="https://github.com/boostorg/spirit/pull/384">PR#384</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Minor code improvements (<a href="https://github.com/boostorg/spirit/pull/374">PR#374</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit.Qi:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed ADT support by permutation and sequence_or operator (<a href="https://github.com/boostorg/spirit/pull/376">PR#376</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Specialize iterator_source for random access (<a href="https://github.com/boostorg/spirit/pull/383">PR#383</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Removed redundant check in <code><span class="identifier">skip_over</span></code>
"                      (<a href="https://github.com/boostorg/spirit/pull/373">PR#373</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit.Karma:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed UB in <code><span class="identifier">get_absolute_value</span></code>
"                      function (<a href="https://github.com/boostorg/spirit/pull/246">PR#246</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed use after scope bug if ADT getter returns by value (<a href="https://github.com/boostorg/spirit/pull/375">PR#375</a> <a href="https://svn.boost.org/trac/boost/ticket/6126">#6126</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit.Classic:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed a regression introduced in <a href="https://github.com/boostorg/spirit/pull/336">PR#336</a> (<a href="https://github.com/boostorg/spirit/pull/386">PR#386</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Minor code improvements (<a href="https://github.com/boostorg/spirit/pull/367">PR#367</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed compilation on Solaris and other platforms that do qualify
"                address as const in <code><span class="identifier">dladdr</span></code>
"                function (github 54).
"              </div>
"            </li>
"            <li>
"              <div>
"                Dropped dependency on Boost.LexicalCast.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/test/">Test</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.test v3.8 see the <a href="libs/test/doc/html/boost_test/change_log.html">Changes
"                log</a> for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                Breaking changes
"                <ul>
"                  <li>
"                    <div>
"                      The <code><span class="identifier">master_test_suite_t</span></code>
"                      object is no more copyable
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                New feature:
"                <ul>
"                  <li>
"                    <div>
"                      Dataset test case can now use command line parameters
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes and pull requests:
"                <ul>
"                  <li>
"                    <div>
"                      Trac tickets: <a href="https://svn.boost.org/trac/boost/ticket/12095">#12095</a>, <a href="https://svn.boost.org/trac/boost/ticket/12953">#12953</a>, <a href="https://svn.boost.org/trac/boost/ticket/13504">#13504</a>, <a href="https://svn.boost.org/trac/boost/ticket/13525">#13525</a>,
"                      <a href="https://svn.boost.org/trac/boost/ticket/13528">#13528</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Pull requests: <a href="https://github.com/boostorg/test/pull/143">PR#143</a>, <a href="https://github.com/boostorg/test/pull/145">PR#145</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_index/">TypeIndex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Dropped dependency on Boost.MPL.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/uuid/">Uuid</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Breaking change:</strong> sha1 detail namespace
"                header redirection for backwards compatibility was removed (<a href="https://github.com/boostorg/uuid/pull/69">PR#69</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for std::hash (<a href="https://github.com/boostorg/uuid/pull/67">PR#67</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for move semantics on random generators (<a href="https://github.com/boostorg/uuid/pull/74">PR#74</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Properly handle EINTR when acquiring entropy (<a href="https://github.com/boostorg/uuid/pull/74">PR#74</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Use getrandom(2) instead of getentropy(3) on linux (<a href="https://github.com/boostorg/uuid/pull/75">PR#75</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_68_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_68_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      Daniel James, Vladimir Prus, and Marshall Clow managed this release.
"    </p>
"  </div>
"
-hash
"3fc5cfce449fcc7f8a8dc9c8af3710b8e988c676dff01dbec76e6b2d5da846db
-id
"version_1_68_0
-notice_url
-notice_xml
-pub_date
@Wed, 15 Aug 2018 03:46:00 -0700
-purpose_xml
"
"      New Libraries: YAP. Updated Libraries: Beast, Context, Coroutine2, Fiber, Fusion,
"      Geometry, GIL, Graph, Lexical Cast, Log, Math, Multiprecision, Optional, Predef,
"      Program Options, Python, Rational, System, Signals, Spirit, Stacktrace, Test,
"      TypeIndex, Uuid.
"
-title_xml
"Version 1.68.0
)
(feed/history/boost_1_69_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_69_0.notes_for_non_windows_users">
"    <h3><span class="link">Notes for non-Windows
"    users</span></h3>
"    <p>
"      The Boost build system now supports visibilities. If you are building shared
"      libraries, they will use hidden visibility by default. As a result Boost shared
"      libraries become smaller, load faster and have less chances to get a symbol
"      collision.
"    </p>
"    <p>
"      See <a href="/build/manual/develop/index.html#bbv2.builtin.features.visibility">Boost.Build
"      visibility and local-visibility</a> for more info.
"    </p>
"    <p>
"      To disable that feature you can use use a command line <code><span class="special">./</span><span class="identifier">b2</span> <span class="identifier">visibility</span><span class="special">=</span><span class="identifier">global</span></code> to
"      build.
"    </p>
"  </div>
"  <div id="version_1_69_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/safe_numerics/">Safe Numerics</a>:</span> A library
"          for guaranteed correct integer arithmetic for C++14 and later, from Robert
"          Ramey.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_69_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/any/">Any</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed issue with visibility. Now <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">any</span></code>
"                variables constructed in one shared library with hidden visibility
"                could be used and destroyed in other shared library with hidden visibility.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance: dropped some dependencies on other Boost libraries,
"                fixes for docs.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed a problem with the detection of <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">future</span></code>
"                availability with libstdc++.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compile error in regex overload of <code><span class="identifier">read_until</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a timer heap corruption issue that can occur when moving a
"                cancelled timer.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed detection of <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">string_view</span></code>
"                and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">string_view</span></code> with newer clang/libc++.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed MSVC version detection for availability of <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">invoke_result</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed the buffer sequence traits to test the new requirements, if
"                <code><span class="keyword">decltype</span></code> is available.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed an MSVC issue when building with exceptions disabled.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added SSL context options for TLS v1.3.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a compile-time test for TLS v1 support.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed the macro used to test for TLS v1.2 support.
"              </div>
"            </li>
"            <li>
"              <div>
"                Prevented global objects from being created once per thread on Windows.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a crash when using <code><span class="identifier">size</span><span class="special">()</span></code>, <code><span class="identifier">max_size</span><span class="special">()</span></code> or <code><span class="identifier">empty</span><span class="special">()</span></code> on default-constructed resolver
"                results.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed to move the return value in <code><span class="identifier">basic_resolver_results</span><span class="special">::</span><span class="identifier">begin</span><span class="special">()</span></code> to avoid copying.
"              </div>
"            </li>
"            <li>
"              <div>
"                Enabled move support for the Intel Compiler.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">string_view</span></code> detection issue when
"                using clang-cl.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed the handler tracking operation name for <code><span class="identifier">io_context</span><span class="special">::</span><span class="identifier">executor_type</span><span class="special">::</span><span class="identifier">dispatch</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a buffer overflow that could occur when parsing an address
"                string with a 64-bit scope id.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added examples showing how to write composed operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added C++11 versions of the Timeouts, Timers, SOCKS4 and SSL examples.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed minor issues in documentation and examples.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/assign/">Assign</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Add rvalue reference, perfect forwarding, and variadic template support
"                (<a href="https://github.com/boostorg/assign/pull/6">PR#6</a>) (<a href="https://svn.boost.org/trac/boost/ticket/10477">#10477</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Avoid conversion to container's allocator (<a href="https://github.com/boostorg/assign/pull/29">PR#29</a>) (<a href="https://svn.boost.org/trac/boost/ticket/5419">#5419</a>)
"                (<a href="https://svn.boost.org/trac/boost/ticket/7364">#7364</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This version fixes some issues in the examples, and provides a new
"                experimental socket which supports built-in timeouts on asynchronous
"                operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                New CppCon 2018 <a href="https://www.boost.org/doc/libs/master/libs/beast/doc/html/beast/examples.html#beast.examples.cppcon_2018">websocket
"                chat example</a> and <a href="https://www.youtube.com/watch?v=7FQwAjELMek">presentation
"                video</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                For a complete list of changes, please view the official <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/circular_buffer/">CircularBuffer</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Use the empty base optimization for storing allocators that are empty
"                and not final (Glen Fernandes).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/concept_check/">Concept Check</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Removed dependency on mpl. (<a href="https://github.com/boostorg/concept_check/pull/14">PR#14</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/85">#85</a>: duplicate alias should be missing GCC alias
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/87">#87</a>: the clang-win toolset (clang-cl.exe) uses masm from
"                the underlying msvc
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/90">#90</a>: remove useless lines in Jamfile.v2
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/91">#91</a>: add .file section for *_elf_gas.S files
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">empty_value</span></code>,
"                for library authors to conveniently leverage the Empty Base Optimization
"                to store objects of potentially empty types (Glen Fernandes). This
"                facility is now used in Boost.Beast, Boost.CircularBuffer, Boost.MultiArray,
"                and more.
"              </div>
"            </li>
"            <li>
"              <div>
"                Implemented <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">quick_exit</span></code>
"                to provide the C++11 standard library facility <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">quick_exit</span></code>
"                functionality (Peter Dimov).
"              </div>
"            </li>
"            <li>
"              <div>
"                Reduced the number of statics in Lightweight Test, and employ lighter
"                abort behavior for MSVC compilers upon failure to call <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">report_errors</span></code> (Glen Fernandes).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Resolved link issues with the smart library <a href="https://github.com/boostorg/dll/issues/20">#20</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance: fixes for docs and tests.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dynamic_bitset/">Dynamic Bitset</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Performance improvements (over 2x in some cases). (<a href="https://github.com/boostorg/dynamic_bitset/pull/26">PR#26</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added range-based set, reset, flip methods (<a href="https://github.com/boostorg/dynamic_bitset/pull/27">PR#27</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/181">#181</a>: unbuffered_channel push not return
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/182">#182</a>: Remove UTF-8 BOM at begining of the file
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/183">#183</a>: Fix boost-install use; should only be issued once
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Don't use <code><span class="identifier">readdir_r</span></code>
"                on Linux and Android since the <code><span class="identifier">readdir</span></code>
"                function is already thread-safe. (<a href="https://github.com/boostorg/filesystem/pull/68">PR#68</a>, <a href="https://github.com/boostorg/filesystem/issues/72">#72</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed crashes in <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">filesystem</span><span class="special">::</span><span class="identifier">copy</span></code>
"                due to undefined behavior in the implementation. (<a href="https://github.com/boostorg/filesystem/pull/71">PR#71</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed undefined behavior in <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">filesystem</span><span class="special">::</span><span class="identifier">directory_iterator</span></code>
"                implementation. (<a href="https://github.com/boostorg/filesystem/pull/77">PR#77</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compilation errors when using directory iterators with <code><span class="identifier">BOOST_FOREACH</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed workarounds for older PGI C++ compiler versions to fix compilation
"                on the newer ones. (<a href="https://github.com/boostorg/filesystem/pull/49">PR#49</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed MSVC warnings about narrowing conversions. (<a href="https://github.com/boostorg/filesystem/pull/44">PR#44</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/flyweight/index.html">Flyweight</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed some issues in GCC related to Boost.MPL placeholder expression
"                handling.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/function/">Function</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Removed dependencies on mpl, test (<a href="https://github.com/boostorg/function/pull/20">PR#20</a>) (<a href="https://github.com/boostorg/function/pull/22">PR#22</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/486">PR#486</a> Karney's solution of direct geodesic problem
"                      for internal use (thanks to Adeel Ahmad).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/490">PR#490</a> Discrete Frechet and Hausdorff distance algorithms
"                      (thanks to Yaghyavardhan Singh Khangarot).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/496">PR#496</a> New run-time and upgraded compile-time SRS
"                      transformation interfaces (undocumented for now due to potential
"                      interface changes).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Solved issues
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/520">#520</a> Missing documentation for dsv().
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/521">#521</a> Wrong documentation description for distance().
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/524">#524</a> Fixed 'enumeration values not handled in switch'
"                      warnings.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/527">#527</a> Workaround for VS 2017 (msvc-15).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/505">PR#505</a> Fixed overflow in overlay algorithms (thanks
"                      to Dane Springmeyer).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/518">PR#518</a> Fixed passing of temporaries in append() (thanks
"                      to xventura81).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/522">PR#522</a> Support python3 in building documentation.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/gil/">GIL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Changed
"                <ul>
"                  <li>
"                    <div>
"                      Refactored library includes to <code><span class="preprocessor">#include</span>
"                      <span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">gil</span><span class="special">/...&gt;</span></code> structure (<a href="https://github.com/boostorg/gil/pull/145">PR#145</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed
"                <ul>
"                  <li>
"                    <div>
"                      Header <code><span class="identifier">include</span><span class="special">/</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">gil_all</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                      file as deprecated (<a href="https://github.com/boostorg/gil/pull/145">PR#145</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Header <code><span class="identifier">include</span><span class="special">/</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">gil_concepts</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                      file as deprecated (<a href="https://github.com/boostorg/gil/pull/145">PR#145</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Header <code><span class="identifier">include</span><span class="special">/</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">gil_config</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                      file as unnecessary (<a href="https://github.com/boostorg/gil/pull/144">PR#144</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed
"                <ul>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">point</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code> divide and multiply to
"                      not to hardcode result as <code><span class="identifier">point</span><span class="special">&lt;</span><span class="keyword">double</span><span class="special">&gt;</span></code> (<a href="https://github.com/boostorg/gil/pull/157">PR#157</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed conflict between <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">fill_n</span></code>
"                      and <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">range</span><span class="special">::</span><span class="identifier">fill_n</span></code> (<a href="https://github.com/boostorg/gil/pull/152">PR#152</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed issue with re-assignment of functor from <code><span class="identifier">for_each_pixel</span></code> (<a href="https://github.com/boostorg/gil/pull/139">PR#139</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed missing template keyword prior to dependent name <code><span class="identifier">axis_iterator</span></code> (<a href="https://github.com/boostorg/gil/pull/129">PR#129</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/integer/">Integer</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">pending</span><span class="special">/</span><span class="identifier">integer_log2</span><span class="special">.</span><span class="identifier">hpp</span></code> header is deprecated and will
"                be removed in future releases. Use <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">integer</span><span class="special">/</span><span class="identifier">integer_log2</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                instead.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/iostreams/">Iostreams</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Remove call to nonexistent member seekpos() of std::fpos (<a href="https://github.com/boostorg/iostreams/pull/58">PR#58</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/iterator/">Iterator</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed compilation problems with ambiguous unqualified calls to <code><span class="identifier">advance</span></code> and <code><span class="identifier">distance</span></code>
"                on iterators whose types involve types in the namespace <code><span class="identifier">boost</span></code>. (<a href="https://github.com/boostorg/iterator/issues/43">#43</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/lexical_cast/">LexicalCast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed sign-conversion warnings <a href="https://svn.boost.org/trac/boost/ticket/8991">#8991</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance: dropped some dependencies on other Boost libraries,
"                fixed build system warnings.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                General changes:
"                <ul>
"                  <li>
"                    <div>
"                      Updated syslog sink backend to avoid using deprecated Boost.ASIO
"                      interfaces. (<a href="https://github.com/boostorg/log/issues/59">#59</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed a possible incorrect estimation of the total size of
"                      rotated files in the target directory of a text file sink in
"                      some cases.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/logic/">Logic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Breaking change:</strong> Use explicit operator
"                bool when available (<a href="https://github.com/boostorg/logic/pull/5">PR#5</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Add LambertW functions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Update integration routines to support complex valued integrands
"                and contour integrals.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the derivative of the Barycentric rational approximation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Minor fixes to better support variable precision floating point types.
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed use of deprecated Boost.Endian in favour of Predef.
"              </div>
"            </li>
"            <li>
"              <div>
"                Updated continued fraction and series evaluation code to support
"                complex types.
"              </div>
"            </li>
"            <li>
"              <div>
"                Prevent logic error leading to infinite loop in toms748_solve. See
"                <a href="https://github.com/boostorg/math/issues/138">#138</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix mean and standard_deviation for extreme_value_distribution. See
"                <a href="https://github.com/boostorg/math/issues/139">#139</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve heuristics used in newton_raphson_iterate. See <a href="https://github.com/boostorg/math/issues/145">#145</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix result of <code><span class="identifier">erf</span><span class="special">(</span><span class="identifier">NaN</span><span class="special">)</span></code>. See <a href="https://github.com/boostorg/math/issues/141 #141">#141 #141</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Big push to reduce GCC warnings. See <a href="https://github.com/boostorg/math/issues/136 #136">#136 #136</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Refactor polynomial addition. See <a href="https://github.com/boostorg/math/pull/132">PR#132</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix for vxWorks having a <code><span class="identifier">real</span></code>
"                function in the global namespace. See <a href="https://github.com/boostorg/math/pull/131">PR#131</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve <code><span class="identifier">sinc</span></code> approximations
"                and add better tests.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix typo in Student's T hypothesis testing documentation, see <a href="https://github.com/boostorg/math/issues/143">#143</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/mp11/">Mp11</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented the <code><span class="identifier">mp_starts_with</span></code>
"                facility (Glen Fernandes).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_array/">MultiArray</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improve C++11 allocator model support including: Support for C++11
"                minimal allocators, support for stateful allocators, using the allocator
"                for construction and destruction of the value type, and using the
"                empty base optimization for storing empty or stateless allocators
"                (Glen Fernandes).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Introduced an alternative <a href="/libs/multi_index/doc/tutorial/key_extraction.html#key">terse
"                key specification syntax</a> for C++17 compliant environments.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multiprecision/">Multiprecision</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Big update to better support variable precision types so that the
"                precision of the result is always the largest of all the arguments.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add support for allocators that are <code><span class="identifier">final</span></code>
"                in __cpp_int (Glen Fernandes).
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed use of deprecated Boost.Endian in favour of Predef.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add support for <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">string_view</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed minor bug in constant initialization. See <a href="https://github.com/boostorg/multiprecision/issues/67">#67</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Make assignment of non-finite value to <code><span class="identifier">cpp_int</span></code>
"                a runtime errors. See <a href="https://github.com/boostorg/multiprecision/issues/58">#58</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added typedefs for <code><span class="identifier">cpp_bin_float_oct</span></code>
"                and <code><span class="identifier">cpp_complex_oct</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/poly_collection/">PolyCollection</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added Boost.PolyCollection-specific versions of algorithms <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">for_each_n</span></code> and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">sample</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/pool/">Pool</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Replace boost::mutex use to avoid a dependency on Boost.Thread (<a href="https://github.com/boostorg/pool/pull/23">PR#23</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/preprocessor/">Preprocessor</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Supports the new C++ standard conforming preprocessor in VC++ 14.1,
"                which is currently enabled by using the /experimental:preprocessor
"                switch, in Visual Studio 2017 15.8 on up.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/rational/">Rational</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Add constexpr support (<a href="https://github.com/boostorg/rational/pull/28">PR#28</a>) (<a href="https://github.com/boostorg/rational/pull/32">PR#32</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/spirit/">Spirit</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Spirit.X3:
"                <ul>
"                  <li>
"                    <div>
"                      Drop own FP routines in favor of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">math</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/392">#392</a>) (<a href="https://svn.boost.org/trac/boost/ticket/13531">#13531</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Missing visibility mark on exception types (<a href="https://github.com/boostorg/spirit/issues/409">#409</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      to_utf8: Fixed wchar_t handling on Windows (<a href="https://github.com/boostorg/spirit/issues/413">#413</a>)
"                      (<a href="https://github.com/boostorg/spirit/issues/395">#395</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit V2
"                <ul>
"                  <li>
"                    <div>
"                      Drop own FP routines in favor of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">math</span></code>
"                      (<a href="https://github.com/boostorg/spirit/issues/392">#392</a>) (<a href="https://svn.boost.org/trac/boost/ticket/13531">#13531</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Missing visibility mark on exception types (<a href="https://github.com/boostorg/spirit/issues/409">#409</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed transform_attribute ambiguity (<a href="https://github.com/boostorg/spirit/issues/407">#407</a>) (<a href="https://github.com/boostorg/spirit/issues/396">#396</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      to_utf8: Fixed wchar_t handling on Windows (<a href="https://github.com/boostorg/spirit/issues/413">#413</a>)
"                      (<a href="https://github.com/boostorg/spirit/issues/395">#395</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Spirit.Classic:
"                <ul>
"                  <li>
"                    <div>
"                      Missing visibility mark on exception types (<a href="https://github.com/boostorg/spirit/issues/409">#409</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">libbacktrace</span></code> usage
"                was significantly improved. <code><span class="identifier">BOOST_STACKTRACE_USE_BACKTRACE</span></code>
"                or <code><span class="identifier">boost_stacktrace_backtrace</span></code>
"                users are encouraged to update:
"                <ul>
"                  <li>
"                    <div>
"                      Memory consumprion dropped down.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Stack capturing became faster by an order of magnitude.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">syminfo</span></code> fallback
"                      enabled to provide information for visible symbols even without
"                      debug information (thanks to github user driesdeschout!)<a href="https://github.com/boostorg/stacktrace/issues/60">#60</a>,
"                      <a href="https://github.com/boostorg/stacktrace/issues/61">#61</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Exact location of the <code><span class="identifier">backtrace</span><span class="special">.</span><span class="identifier">h</span></code>
"                      header now can be specified via <code><span class="identifier">BOOST_STACKTRACE_BACKTRACE_INCLUDE_FILE</span></code>,
"                      to allow <code><span class="identifier">backtrace</span><span class="special">.</span><span class="identifier">h</span></code>
"                      header usage on platforms and compilers where that header is
"                      unreachable otherwise (for example Ubuntu Xenial + Clang) <a href="https://github.com/boostorg/stacktrace/issues/59">#59</a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Optimized stack capturing if <code><span class="identifier">max_depth</span></code>
"                is set (thanks to Jan Eisenhauer for the PR!) <a href="https://github.com/boostorg/stacktrace/issues/67">#67</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">to_string</span><span class="special">(</span><span class="keyword">const</span> <span class="identifier">stacktrace</span><span class="special">&amp;</span> <span class="special">)</span></code>
"                functions for fast conversion of stacktraces to <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">string</span></code>
"                <a href="https://github.com/boostorg/stacktrace/issues/57">#57</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance: updated docs <a href="https://github.com/boostorg/stacktrace/issues/62">#62</a>, tests updated.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/system/">System</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.System is now header-only. A stub library is still built for
"                compatibility, but linking to it is no longer necessary.
"              </div>
"            </li>
"            <li>
"              <div>
"                Even more functions have been marked <code><span class="keyword">constexpr</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                The destructor of <code><span class="identifier">error_category</span></code>
"                is now <code><span class="keyword">protected</span></code> and
"                no longer <code><span class="keyword">virtual</span></code>. This
"                is a potentially breaking change, but its impact is expected to be
"                limited.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">error_category</span></code> now
"                has a constructor that accepts a 64 bit identifier, enabling distinct
"                category objects to compare equal.
"              </div>
"            </li>
"            <li>
"              <div>
"                The constructors of <code><span class="identifier">error_category</span></code>
"                are now <code><span class="keyword">protected</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                A non-allocating, nonthrowing overload of <code><span class="identifier">message</span></code>
"                has been added.
"              </div>
"            </li>
"            <li>
"              <div>
"                A virtual function <code><span class="identifier">failed</span></code>
"                has been added, allowing categories for which success is not synonymous
"                with 0.
"              </div>
"            </li>
"            <li>
"              <div>
"                The deprecated <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">system</span><span class="special">::</span><span class="identifier">throws</span></code>
"                object has been removed.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">throws</span><span class="special">()</span></code>
"                is now deprecated and its use is discouraged.
"              </div>
"            </li>
"            <li>
"              <div>
"                The constructor of <code><span class="identifier">system_error</span></code>
"                taking a single <code><span class="identifier">error_code</span></code>
"                argument is now <code><span class="keyword">explicit</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">system_error</span><span class="special">::</span><span class="identifier">code</span><span class="special">()</span></code>
"                now returns by value.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/test/">Test</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.test v3.9 see the <a href="libs/test/doc/html/boost_test/change_log.html">Changes
"                log</a> for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                New feature:
"                <ul>
"                  <li>
"                    <div>
"                      Official support of header-only variant of Boost.Test with
"                      multiple translation units.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Now possible to manually add a test case by specifying its
"                      name, with <code><span class="identifier">BOOST_TEST_CASE_NAME</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Better support of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">exception</span></code>
"                      in the logs
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes and pull requests:
"                <ul>
"                  <li>
"                    <div>
"                      Trac tickets: <a href="https://svn.boost.org/trac/boost/ticket/13380">#13380</a>, <a href="https://svn.boost.org/trac/boost/ticket/13625">#13625</a>, <a href="https://svn.boost.org/trac/boost/ticket/13637">#13637</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GitHub Issues: <a href="https://github.com/boostorg/test/issues/149">#149</a>, <a href="https://github.com/boostorg/test/issues/150">#150</a>, <a href="https://github.com/boostorg/test/issues/156">#156</a>, <a href="https://github.com/boostorg/test/issues/158">#158</a>,
"                      <a href="https://github.com/boostorg/test/issues/163">#163</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GitHub Pull Requests: <a href="https://github.com/boostorg/test/pull/147">PR#147</a>, <a href="https://github.com/boostorg/test/pull/148">PR#148</a>, <a href="https://github.com/boostorg/test/pull/151">PR#151</a>,
"                      <a href="https://github.com/boostorg/test/pull/154">PR#154</a>, <a href="https://github.com/boostorg/test/pull/161">PR#161</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_index/">TypeIndex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix the regression and speed up parsing of the <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">type_traits</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                header by 30% (thanks to Nikita Kniazev for the PR!) <a href="https://github.com/boostorg/type_index/issues/21">#21</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/utility/">Utility</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support for non-inheritable empty types to <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">compressed_pair</span></code>
"                by avoiding the empty base optimization for types which are declared
"                as final (Glen Fernandes).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed issue with visibility. Now <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">bad_visit</span></code>
"                exception could cross the boundaries of shared library with hidden
"                visibility and could be catched in other shared library with hidden
"                visibility.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/yap/">YAP</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Minor changes to support MSVC++ version 14.15 (Visual Studio 2017
"                version 15.8).
"              </div>
"            </li>
"            <li>
"              <div>
"                Doc fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_69_0.discontinued_libraries">
"    <h3><span class="link">Discontinued Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          Signals (v1) is now removed. Its removal was announced in 1.68 and its
"          deprecation was announced in 1.54. Boost 1.68 is the last release that
"          provides this library. Users are encouraged to use Signals2 instead. The
"          Boost community thanks Douglas Gregor for his work on Signals which served
"          its users well and which also inspired Signals2.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_69_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_69_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      Daniel James, Vladimir Prus, Marshall Clow and Michael Caisse managed this
"      release.
"    </p>
"  </div>
"
-hash
"1c5e2144ac7b5d64d496bf67bae34cd0a0e209b108ff4a1258036c066cc40621
-id
"version_1_69_0
-notice_url
-notice_xml
-pub_date
@Wed, 12 Dec 2018 02:58:00 -0700
-purpose_xml
"
"      New Libraries: Safe Numerics. Updated Libraries: Any, Asio, Assign, Beast,
"      CircularBuffer, Concept Check, Core, DLL, Dynamic Bitset, Fiber, Filesystem,
"      Flyweight, Geometry, Integer, Iostreams, Iterator, LexicalCast, Log, Logic,
"      Math, Mp11, MultiArray, Multi-index Containers, Multiprecision, PolyCollection,
"      Pool, Preprocessor, Rational, Spirit, Stacktrace, System, Test, TypeIndex,
"      Utility, Variant, YAP. Discontinued Libraries: Signals.
"
-title_xml
"Version 1.69.0
)
(feed/history/boost_1_70_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_70_0.known_issues">
"    <h3><span class="link">Known Issues</span></h3>
"    <p>
"      These are patches from library authors which were found too late to be fixed
"      in the release. Be careful as they have not been through the normal testing
"      process.
"    </p>
"    <ul>
"      <li>
"        <div>
"          Fix moved-from executor in idle ping timeout (<a href="https://github.com/boostorg/beast/issues/1599">#1599</a>)
"          <ul>
"            <li>
"              <div>
"                <a href="/patches/1_70_0/0001-beast-fix-moved-from-executor.patch">Beast
"                patch</a>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_70_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/outcome/">Outcome</a>:</span> A set of tools for reporting
"          and handling function failures in contexts where <em>directly</em>
"          using C++ exception handling is unsuitable, from Niall Douglas.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/histogram/">Histogram</a>:</span> Fast and extensible
"          multi-dimensional histograms with convenient interface for C++14, from
"          Hans Dembinski.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_70_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This release includes a number of new features, bug fixes, performance
"                enhancements, and documentation improvements. Notable changes include:
"                <ul>
"                  <li>
"                    <div>
"                      Added the ability to use custom I/O executors with I/O objects
"                      (such as sockets).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added a new <code><span class="identifier">async_result</span></code>
"                      form with an <code><span class="identifier">initiate</span></code>
"                      static member function.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Updated the Coroutines TS support and promoted it to the <code><span class="identifier">asio</span></code> namespace.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added a new <code><span class="identifier">DynamicBuffer_v2</span></code>
"                      concept which is CopyConstructible.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added a new <code><span class="identifier">async_compose</span></code>
"                      function that simplifies the implementation of user-defined
"                      asynchronous operations.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added a <code><span class="identifier">make_strand</span></code>
"                      helper function.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Relaxed the completion condition type requirements to only
"                      require move-constructibility rather than copy-constructibility.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added a constructor for <code><span class="identifier">local</span><span class="special">::</span><span class="identifier">basic_endpoint</span></code>
"                      that takes a <code><span class="identifier">string_view</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added the noexcept qualifier to various functions.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added a new <code><span class="identifier">BOOST_ASIO_DISABLE_VISIBILITY</span></code>
"                      configuration <code><span class="preprocessor">#define</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Enabled recycling of the memory used to type-erase a function
"                      object with the polymorphic executor.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Changed receive operations to return the correct number of
"                      bytes transferred when truncation (<code><span class="identifier">error</span><span class="special">::</span><span class="identifier">message_size</span></code>)
"                      occurs on a datagram-oriented socket.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed calculation of absolute timeout when the backend uses
"                      <code><span class="identifier">pthread_cond_timedwait</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Changed the range-based asynchronous connect operation to deduce
"                      the <code><span class="identifier">EndpointSequence</span></code>
"                      iterator type.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">buffer_sequence_begin</span></code>
"                      and <code><span class="identifier">buffer_sequence_end</span></code>
"                      to prevent implicit conversion.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Ensured SSL handshake errors are propagated to the peer before
"                      the local operation completes.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Suppressed the <code><span class="identifier">eof</span></code>
"                      error on SSL shutdown as it actually indicates success.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added a fallback error code for when we OpenSSL produces an
"                      <code><span class="identifier">SSL_ERROR_SYSCALL</span></code>
"                      result without an associated error.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Changed composed asynchronous read and write operations to
"                      move buffer sequence objects.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed a macOS-specific warning about the deprecation of <code><span class="identifier">OSMemoryBarrier</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed compile errors that occur when using the composed read
"                      and write operations with MSVC 11.0.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Improved <code><span class="identifier">dispatch</span></code>,
"                      <code><span class="identifier">post</span></code> and <code><span class="identifier">defer</span></code> documentation.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed a Windows-specific memory leak that may occur when <code><span class="identifier">system_executor</span></code> is used.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Consult the <a href="/doc/libs/1_70_0/doc/html/boost_asio/history.html">Revision
"                History</a> for further details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"  <strong>BIG
"          Update!!!</strong>
"          <ul>
"            <li>
"              <div>
"                Some APIs have changed.
"              </div>
"            </li>
"            <li>
"              <div>
"                The <a href="/libs/beast/doc/html/beast/quickref.html">reference</a>
"                shows a star ★ next to each new item.
"              </div>
"            </li>
"            <li>
"              <div>
"                Beast needs your help!
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast">Tell
"                      Us</a> how you or your company use Beast
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Please <a href="https://github.com/boostorg/beast/issues/new">report</a>
"                      any bugs, feature requests, or general feedback
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Join the <a href="https://cppalliance.org/slack/"><strong>C++ Slack Workspace</strong></a> for free
"                      and chat with us in the #beast and #boost channels
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Don't forget to <a href="https://github.com/boostorg/beast">star
"                      the repository</a> ⭐!
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                More tutorials, code like the pros!
"                <ul>
"                  <li>
"                    <div>
"                      <a href="/libs/beast/doc/html/beast/using_io/asio_refresher.html">Networking
"                      Refresher</a> teaches you from the ground up.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Updated <a href="/libs/beast/doc/html/beast/using_io/writing_composed_operations/echo.html">Asynchronous
"                      Echo</a> example
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Updated <a href="/libs/beast/doc/html/beast/using_io/writing_composed_operations/detect_ssl.html"><strong>Detect SSL</strong></a> composed operation
"                      tutorial
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="/libs/beast/example/websocket/server/chat-multi">websocket-chat-multi</a>
"                      threaded chat server with a JavaScript <a href="/libs/beast/example/websocket/server/chat-multi/chat_client.html">browser
"                      client</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/libs/beast/doc/html/beast/ref/boost__beast__basic_stream.html"><code><span class="identifier">basic_stream</span></code></a> and <a href="/libs/beast/doc/html/beast/ref/boost__beast__tcp_stream.html"><code><span class="identifier">tcp_stream</span></code></a> offer:
"                <ul>
"                  <li>
"                    <div>
"                      Timeouts: <code><span class="identifier">async_read_some</span></code>,
"                      <code><span class="identifier">async_write_some</span></code>
"                      complete with <a href="/libs/beast/doc/html/beast/ref/boost__beast__error.html"><code><span class="identifier">error</span><span class="special">::</span><span class="identifier">timeout</span></code></a> on expiration!
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Traffic-shaping policies <a href="/libs/beast/doc/html/beast/ref/boost__beast__simple_rate_policy.html"><code><span class="identifier">simple</span></code></a> and <a href="/libs/beast/doc/html/beast/ref/boost__beast__unlimited_rate_policy.html"><code><span class="identifier">unlimited</span></code></a>, or a user-defined
"                      <a href="/libs/beast/doc/html/beast/concepts/RatePolicy.html"><em>RatePolicy</em></a>!
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Put the strand directly on the socket using <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1322r0.html">P1322R0</a>,
"                      no more <code><span class="identifier">bind_executor</span></code>
"                      at call sites!
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Base classes <a href="/libs/beast/doc/html/beast/ref/boost__beast__async_base.html"><code><span class="identifier">async_base</span></code></a> and <a href="/libs/beast/doc/html/beast/ref/boost__beast__stable_async_base.html"><code><span class="identifier">stable_async_base</span></code></a> and handle
"                all composed operation boilerplate for you.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="/libs/beast/doc/html/beast/ref/boost__beast__ssl_stream.html"><code><span class="identifier">ssl_stream</span></code></a> provides a movable,
"                assignable SSL stream with a flat write optimization.
"              </div>
"            </li>
"            <li>
"              <div>
"                All asynchronous operations use Asio's <code><span class="identifier">async_initiate</span></code>
"                for efficient integration with Coroutines TS.
"              </div>
"            </li>
"            <li>
"              <div>
"                ⚡ <strong><em>faster compilation</em></strong>,
"                define <code><span class="identifier">BOOST_BEAST_SEPARATE_COMPILATION</span></code>
"                and <code><span class="preprocessor">#include</span> <span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">beast</span><span class="special">/</span><span class="identifier">src</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code>
"                in one of your .cpp files!
"              </div>
"            </li>
"            <li>
"              <div>
"                See the full <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a> for a complete list of changes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/91">#91</a>: cleanup of stack if creating ucontext fails
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/97">#97</a>: add missing BOST_CONTEXT_DECL in stack_context
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/98">#98</a>: fix jump_i386_sysv_macho writing garbage to the x87
"                control word
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/coroutine2/">Coroutine2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/coroutine2/issues/28">#28</a>: don't crash on pthread_cancel
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New macro <a href="/libs/dll/BOOST_DLL_USE_STD_FS.html">BOOST_DLL_USE_STD_FS</a>.
"                Define it to <code><span class="number">1</span></code> to make
"                the Boost.DLL use C++17's <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">filesystem</span><span class="special">::</span><span class="identifier">path</span></code>,
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">system_error</span></code> and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">error_code</span></code> (<a href="https://github.com/boostorg/dll/issues/21">#21</a>). Note that
"                exception types change from <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">system</span><span class="special">::</span><span class="identifier">system_error</span></code>
"                to <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">system_error</span></code>, so make sure to update
"                <code><span class="keyword">catch</span></code>es.
"              </div>
"            </li>
"            <li>
"              <div>
"                Significant rewrite of the dynamic loadable detection and decoration
"                logic. More precise errors are now reported in case of loading failures.
"                Added <code><span class="identifier">shared_library</span><span class="special">::</span><span class="identifier">decorate</span><span class="special">()</span></code> function that returns a decorated
"                path to the library without doing any platform related queries and
"                detections. Prefer using <code><span class="identifier">shared_library</span><span class="special">::</span><span class="identifier">load</span></code>
"                and <code><span class="identifier">shared_library</span></code>
"                constructors for better results (many thanks to Loïc Touraine for
"                the work <a href="https://github.com/boostorg/dll/pull/23">PR#23</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                CI hardening, docs updates, typos fixes, cleanups and many portability
"                fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dynamic_bitset/">Dynamic Bitset</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Disabled hardware-assisted popcount (added in 1.69.0) on MSVC due
"                to undefined behavior on older CPUs. (<a href="https://github.com/boostorg/dynamic_bitset/issues/33">#33</a> <a href="https://github.com/boostorg/dynamic_bitset/pull/35">PR#35</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/191">#191</a>: ignore unused argument warning
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/fiber/issues/196">#196</a>: fix high contention on remote_ready_splk_
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed a few instances of dereferencing <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">string</span><span class="special">::</span><span class="identifier">end</span><span class="special">()</span></code> in <code><span class="identifier">path</span></code>
"                implementation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed program termination in case of out of memory condition in directory
"                iterators constructors and operations accepting a reference to <code><span class="identifier">error_code</span></code>. (<a href="https://github.com/boostorg/filesystem/issues/58">#58</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed possible linking errors caused by missing definitions of static
"                members of <code><span class="identifier">path</span></code>.
"                (<a href="https://svn.boost.org/trac/boost/ticket/12759">#12759</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed possible use of uninitialized data in directory iterator increment
"                operation on Linux.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for movability to directory iterators.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added file status query overloads for <code><span class="identifier">directory_entry</span></code>.
"                This avoids a relatively expensive OS query when file status is requested
"                for a result of dereferencing a directory iterator. (<a href="https://github.com/boostorg/filesystem/pull/55">PR#55</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Reworked <code><span class="identifier">current_path</span></code>
"                and <code><span class="identifier">read_symlink</span></code>
"                implementation to avoid possible memory exhaustion on broken or tampered
"                with filesystems. The functions now have an internal limit of the
"                path size they will accept from the OS, which is currently 16 MiB.
"              </div>
"            </li>
"            <li>
"              <div>
"                Increased the size of the internal buffer used by <code><span class="identifier">copy_file</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/integer/">Integer</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added Extended Euclidean Algorithm and Modular Multiplicative Inverse
"                function. (Nick Thompson, <a href="https://github.com/boostorg/integer/pull/11">PR#11</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New features:
"                <ul>
"                  <li>
"                    <div>
"                      Added support for generating another log file name before collecting
"                      the file in the text file sink backend. This allows to combine
"                      appending to an existing log file with timestamps and file
"                      counters in log filenames, and, consequently, file collection
"                      in general.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New features:
"                <ul>
"                  <li>
"                    <div>
"                      Add Lanczos smoothing derivatives
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Move <code><span class="identifier">numerical_differentiation</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                      from <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">math</span><span class="special">/</span><span class="identifier">tools</span><span class="special">/</span></code> to <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">math</span><span class="special">/</span><span class="identifier">differentiation</span><span class="special">/</span><span class="identifier">finite_difference</span><span class="special">.</span><span class="identifier">hpp</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add mean, variance, skewness, kurtosis, median, Gini coefficient,
"                      and median absolute deviation to <code><span class="identifier">tools</span><span class="special">/</span><span class="identifier">univariate_statistics</span><span class="special">.</span><span class="identifier">hpp</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add correlation coefficients and covariance to <code><span class="identifier">tools</span><span class="special">/</span><span class="identifier">bivariate_statistics</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add absolute Gini coefficient, Hoyer sparsity, oracle SNR,
"                      and the <em>M</em>[sub 2]<em>M</em>[sub
"                      4] SNR estimator to <code><span class="identifier">tools</span><span class="special">/</span><span class="identifier">signal_statistics</span><span class="special">.</span><span class="identifier">hpp</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add total variation, l0, l1, l2, and sup norms, as well as
"                      corresponding distance functions to <code><span class="identifier">tools</span><span class="special">/</span><span class="identifier">norms</span><span class="special">.</span><span class="identifier">hpp</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add move constructors for polynomials, support complex coefficients,
"                      add <code><span class="special">.</span><span class="identifier">prime</span><span class="special">()</span></code> and <code><span class="special">.</span><span class="identifier">integrate</span><span class="special">()</span></code>
"                      methods.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add <code><span class="identifier">quadratic_roots</span></code>
"                      to <code><span class="identifier">tools</span><span class="special">/</span><span class="identifier">roots</span><span class="special">.</span><span class="identifier">hpp</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add support for complex-valued functions to Newton's method
"                      in <code><span class="identifier">roots</span><span class="special">.</span><span class="identifier">hpp</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add Catmull-Rom interpolator.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/mp11/">Mp11</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Renamed <code><span class="identifier">mp_invoke</span></code>
"                to <code><span class="identifier">mp_invoke_q</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_similar</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_set_union</span></code>,
"                <code><span class="identifier">mp_set_intersection</span></code>,
"                <code><span class="identifier">mp_set_difference</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_not_fn</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_transform_first</span></code>,
"                <code><span class="identifier">mp_transform_second</span></code>,
"                <code><span class="identifier">mp_transform_third</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_filter</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_eval_if_not</span></code>,
"                <code><span class="identifier">mp_eval_or</span></code>, <code><span class="identifier">mp_valid_q</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_back</span></code>, <code><span class="identifier">mp_pop_back</span></code>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">size_type</span></code> and <code><span class="identifier">difference_type</span></code> are now defined
"                as the allocator's same-named types. This will not make any difference
"                in the vast majority of cases, but allows for some degree of control
"                of resulting internal structures via user-defined allocator types
"                (see issue <a href="https://github.com/boostorg/multi_index/issues/17">#17</a> for motivation). For the moment being,
"                this change is not documented in the reference section (i.e., it
"                has semi-official status).
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multiprecision/">Multiprecision</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix various conversion issues in the traits classes, check for compatibility
"                with Boost.Optional.
"              </div>
"            </li>
"            <li>
"              <div>
"                Prevent instantiation of <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">numeric_limits</span></code>
"                on any old type when checking for convertibility. See <a href="https://github.com/boostorg/multiprecision/issues/98">#98</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Update variable precision code to account for arbitrary precision
"                integers. See <a href="https://github.com/boostorg/multiprecision/issues/103">#103</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add support for XML serialization archives.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in fixed precision iostream formatting in <code><span class="identifier">mpf_float</span></code>
"                and <code><span class="identifier">mpfr_float</span></code>. See
"                <a href="https://github.com/boostorg/multiprecision/issues/113">#113</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add more overloads for special functions which are better handled
"                natively by MPFR.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bug in generic <code><span class="identifier">exp</span></code>
"                implementation which could cause invariant failure.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed generic conversion from float to integer to avoid undefined
"                behaviour. See <a href="https://github.com/boostorg/multiprecision/issues/110">#110</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/poly_collection/">PolyCollection</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved handling of stateful allocators and allocator propagation
"                traits, after an error reported by Billy O'Neal (<a href="https://github.com/boostorg/poly_collection/pull/9">PR#9</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a potentially serious bug with an internal cache structure.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/spirit/">Spirit</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Removed use of deprecated <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">detail</span><span class="special">/</span><span class="identifier">iterator</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                header. <a href="https://github.com/boostorg/spirit/pull/432">PR#432</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                X3
"                <ul>
"                  <li>
"                    <div>
"                      Integer parsers should now handle user defined types. <a href="https://github.com/boostorg/spirit/pull/429">PR#429</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <strong>Note:</strong> The <code><span class="identifier">check_overflow</span></code>
"                      trait default implementation now relies on <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">numeric_limits</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">is_bounded</span></code>
"                      instead of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">integer_traits</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">is_integral</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Removed sequence into plain parsing. Now it triggers a compile
"                      time error instead of silently parsing the the sequence and
"                      taking the last value as a result. <a href="https://github.com/boostorg/spirit/pull/439">PR#439</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">parse_rule</span></code>
"                      instantiation with <code><span class="identifier">BOOST_SPIRIT_INSTANTIATE</span></code>
"                      when:
"                      <ul>
"                        <li>
"                          <div>
"                            A rule has no attribute. <a href="https://github.com/boostorg/spirit/pull/455">PR#455</a>
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            An actual attribute is not of type a rule was declared
"                            with. <a href="https://github.com/boostorg/spirit/pull/456">PR#456</a> <a href="https://github.com/boostorg/spirit/issues/457">#457</a>
"                          </div>
"                        </li>
"                      </ul>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      A <strong>huge</strong> thanks goes out to
"                      <a href="https://github.com/Xeverous">Xeverous</a> for
"                      reporting a regression in <a href="https://github.com/boostorg/spirit/issues/453">#453</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed unneded attribute synthesization and no-transformation
"                      attribute reference pass-through in rules. <a href="https://github.com/boostorg/spirit/issues/444">#444</a> <a href="https://github.com/boostorg/spirit/pull/449">PR#449</a> <a href="https://github.com/boostorg/spirit/pull/452">PR#452</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Removed broken 1.0#INF parser. It was poorly documented and
"                      never worked. <a href="https://github.com/boostorg/spirit/issues/415">#415</a> <a href="https://github.com/boostorg/spirit/pull/458">PR#458</a> <a href="https://svn.boost.org/trac/boost/ticket/8699">#8699</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      The undocumented <code><span class="identifier">make_attribute</span></code>
"                      trait was removed due to bugs <a href="https://github.com/boostorg/spirit/pull/449">PR#449</a>
"      and to simplify
"                      attribute transformation. <a href="https://github.com/boostorg/spirit/pull/460">PR#460</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      If you were using it to workaround bugs in attribute transformation
"                      - they should not be needed anymore as of this release.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      The integer value parser now respects <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">numeric_limits</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">digits10</span></code>
"                      value. <a href="https://github.com/boostorg/spirit/pull/469">PR#469</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed underflow check for a <code><span class="special">(</span><span class="identifier">Min</span> <span class="special">%</span>
"                      <span class="identifier">Base</span><span class="special">)</span>
"                      <span class="special">==</span> <span class="number">0</span></code>
"                      corner case. <a href="https://github.com/boostorg/spirit/pull/469">PR#469</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed an output value on overflow of IgnoreOverflowDigits=true
"                      integer parser. <a href="https://github.com/boostorg/spirit/pull/470">PR#470</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Container attribute elements were copyied, but not moved. <a href="https://github.com/boostorg/spirit/pull/472">PR#472</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Special handling of references in <code><span class="identifier">transform_attribute</span></code>
"                      was removed. <a href="https://github.com/boostorg/spirit/pull/480">PR#480</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                V2
"                <ul>
"                  <li>
"                    <div>
"                      Macro name collisions and namespace conflicts with Boost.Endian
"                      were fixed. <a href="https://github.com/boostorg/spirit/pull/349">PR#349</a> <a href="https://github.com/boostorg/spirit/pull/482">PR#482</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      utree
"                      <ul>
"                        <li>
"                          <div>
"                            Fixed UB in tag getter due to left shift of negative
"                            value. <a href="https://github.com/boostorg/spirit/pull/423">PR#423</a>
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            Fixed double-conversion (<code><span class="identifier">spirit</span><span class="special">::</span><span class="identifier">string</span>
"                            <span class="special">-&gt;</span> <span class="identifier">std</span><span class="special">::</span><span class="identifier">string</span>
"                            <span class="special">-&gt;</span> <span class="identifier">spirit</span><span class="special">::</span><span class="identifier">string</span></code>).
"                            <a href="https://github.com/boostorg/spirit/pull/462">PR#462</a>
"                          </div>
"                        </li>
"                      </ul>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Qi
"                      <ul>
"                        <li>
"                          <div>
"                            Added static asserts for rule skipper type problems.
"                            <a href="https://github.com/boostorg/spirit/pull/427">PR#427</a>
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            The <code><span class="identifier">check_overflow</span></code>
"                            trait default implementation now relies on <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">numeric_limits</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">is_bounded</span></code> instead
"                            of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">integer_traits</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">is_integral</span></code>
"                            <a href="https://github.com/boostorg/spirit/pull/429">PR#429</a>
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            Integer parsers should now handle user defined types.
"                            <a href="https://github.com/boostorg/spirit/pull/429">PR#429</a>
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            <strong>Note:</strong> The <code><span class="identifier">check_overflow</span></code> trait
"                            default implementation now relies on <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">numeric_limits</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">is_bounded</span></code>
"                            instead of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">integer_traits</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">is_integral</span></code>.
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            Removed broken 1.0#INF parser. It was poorly documented
"                            and never worked. <a href="https://github.com/boostorg/spirit/issues/415">#415</a> <a href="https://github.com/boostorg/spirit/pull/458">PR#458</a> <a href="https://svn.boost.org/trac/boost/ticket/8699">#8699</a>
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            The undocumented <code><span class="identifier">make_attribute</span></code>
"                            trait was merged into <code><span class="identifier">transform_attribute</span></code>
"                            trait. <a href="https://github.com/boostorg/spirit/pull/471">PR#471</a>
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            The <code><span class="identifier">pre_transform</span></code>,
"                            <code><span class="identifier">post_transform</span></code>,
"                            and <code><span class="identifier">fail_transform</span></code>
"                            utility functions were removed in favor of directly using
"                            <code><span class="identifier">pre</span></code>/<code><span class="identifier">post</span></code>/<code><span class="identifier">fail</span></code> of the transform
"                            trait. <a href="https://github.com/boostorg/spirit/pull/467">PR#467</a>
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            The integer value parser now respects <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">numeric_limits</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">digits10</span></code>
"                            value. <a href="https://github.com/boostorg/spirit/pull/469">PR#469</a>
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            Fixed underflow check for a <code><span class="special">(</span><span class="identifier">Min</span> <span class="special">%</span>
"                            <span class="identifier">Base</span><span class="special">)</span>
"                            <span class="special">==</span> <span class="number">0</span></code>
"                            corner case. <a href="https://github.com/boostorg/spirit/pull/469">PR#469</a>
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            Fixed an output value on overflow of IgnoreOverflowDigits=true
"                            integer parser. <a href="https://github.com/boostorg/spirit/pull/470">PR#470</a>
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            Special handling of references in <code><span class="identifier">transform_attribute</span></code>
"                            was removed. <a href="https://github.com/boostorg/spirit/pull/480">PR#480</a>
"                          </div>
"                        </li>
"                      </ul>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Lex
"                      <ul>
"                        <li>
"                          <div>
"                            Fixed UB in default constructor of lexer with user specified
"                            token type. <a href="https://github.com/boostorg/spirit/pull/420">PR#420</a>
"                          </div>
"                        </li>
"                      </ul>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Classic:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">position_iterator</span></code>
"                      forming reference to local when the underlying iterator dereference
"                      operator returns a non-reference type. <a href="https://github.com/boostorg/spirit/pull/422">PR#422</a> <a href="https://svn.boost.org/trac/boost/ticket/9737">#9737</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Build fix for iOS 32-bit ARM (many thanks to Ivan Ponomarev for providing
"                the fix <a href="https://github.com/boostorg/stacktrace/pull/70">PR#70</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed multiple typos, warnings and updated the docs.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/test/">Test</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.test v3.10 see the <a href="/libs/test/doc/html/boost_test/change_log.html">Changes
"                log</a> for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                Breaking changes:
"                <ul>
"                  <li>
"                    <div>
"                      Boost.Test <code><span class="identifier">minimal</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                      is now showing a deprecation warning,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Change in floating point comparison may fail tests that were
"                      silently not using the floating point comparison logic prior
"                      to this release,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Internal API change to <code><span class="identifier">unit_test_log_formatter</span></code>,
"                      see detailed change log,
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                New feature:
"                <ul>
"                  <li>
"                    <div>
"                      Floating point comparison has been extended to capture non-floating
"                      point and arithmetic operands: expressions like <code><span class="identifier">BOOST_TEST</span><span class="special">(</span><span class="number">3.0001</span> <span class="special">==</span>
"                      <span class="number">3</span><span class="special">)</span></code>
"                      now use floating point support of Boost.Test,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Custom datasets are not required to declare the <code><span class="identifier">sample</span></code> type field anymore,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Extending template test cases from <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">tuple</span></code>
"                      to any variadic definition,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Windows support for timed tests,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Timed test on test-suites,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Removed dependency to Boost.Timer,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      New macro <code><span class="identifier">BOOST_TEST_INFO_SCOPE</span></code>
"                      for scoped context declaration,
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Improved <code><span class="identifier">BOOST_TEST_CONTEXT</span></code>
"                      syntax
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes and pull requests:
"                <ul>
"                  <li>
"                    <div>
"                      Trac tickets: <a href="https://svn.boost.org/trac/boost/ticket/7397">#7397</a>, <a href="https://svn.boost.org/trac/boost/ticket/9434">#9434</a>, <a href="https://svn.boost.org/trac/boost/ticket/13106">#13106</a>, <a href="https://svn.boost.org/trac/boost/ticket/13418">#13418</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GitHub Issues: <a href="https://github.com/boostorg/test/issues/133">#133</a>, <a href="https://github.com/boostorg/test/issues/138">#138</a>, <a href="https://github.com/boostorg/test/issues/141">#141</a>, <a href="https://github.com/boostorg/test/issues/157">#157</a>,
"                      <a href="https://github.com/boostorg/test/issues/160">#160</a>, <a href="https://github.com/boostorg/test/issues/174">#174</a>, <a href="https://github.com/boostorg/test/issues/176">#176</a>, <a href="https://github.com/boostorg/test/issues/177">#177</a>, <a href="https://github.com/boostorg/test/issues/180">#180</a>,
"                      <a href="https://github.com/boostorg/test/issues/181">#181</a>, <a href="https://github.com/boostorg/test/issues/194">#194</a>, <a href="https://github.com/boostorg/test/issues/196">#196</a>, <a href="https://github.com/boostorg/test/issues/198">#198</a>, <a href="https://github.com/boostorg/test/issues/199">#199</a>,
"                      <a href="https://github.com/boostorg/test/issues/202">#202</a>, <a href="https://github.com/boostorg/test/issues/203">#203</a>, <a href="https://github.com/boostorg/test/issues/204">#204</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GitHub Pull Requests: <a href="https://github.com/boostorg/test/pull/171">PR#171</a>, <a href="https://github.com/boostorg/test/pull/172">PR#172</a>, <a href="https://github.com/boostorg/test/pull/182">PR#182</a>,
"                      <a href="https://github.com/boostorg/test/pull/183">PR#183</a>, <a href="https://github.com/boostorg/test/pull/184">PR#184</a>, <a href="https://github.com/boostorg/test/pull/190">PR#190</a>, <a href="https://github.com/boostorg/test/pull/195">PR#195</a>,
"                      <a href="https://github.com/boostorg/test/pull/195">PR#195</a>, <a href="https://github.com/boostorg/test/pull/197">PR#197</a>, <a href="https://github.com/boostorg/test/pull/205">PR#205</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_index/">TypeIndex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for the GHS C++ compiler added (many thanks to Brandon Castellano
"                for providing the patch <a href="https://github.com/boostorg/type_index/pull/28">PR#28</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Optimized string and type comparisons (many thanks to Andrey Semashev
"                for providing the patch <a href="https://github.com/boostorg/type_index/pull/23">PR#23</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed clang-win compilation (many thanks to Peter Dimov for providing
"                the patch <a href="https://github.com/boostorg/type_index/pull/25">PR#25</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                CI hardening.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_traits/">TypeTraits</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added is_bounded_array and is_unbounded_array (Glen Fernandes).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added copy_reference and copy_cv_ref (Glen Fernandes).
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved support for msvc with /clr option.
"              </div>
"            </li>
"            <li>
"              <div>
"                Misc compiler compatibility fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Many cleanups and internal improvements, many thanks to Nikita Kniazev
"                (<a href="https://github.com/boostorg/variant/pull/55">PR#55</a>, <a href="https://github.com/boostorg/variant/pull/56">PR#56</a>, <a href="https://github.com/boostorg/variant/pull/57">PR#57</a>) and Louis Dionne
"                (<a href="https://github.com/boostorg/variant/pull/51">PR#51</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                CI hardening.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/numeric/ublas/">uBlas</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Addition of tensor framework (many thanks to Cem Bassoy <a href="https://github.com/boostorg/ublas/pull/65">PR#65</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Addition of basic OpenCL support (many thanks to Fady Essam <a href="https://github.com/boostorg/ublas/pull/59">PR#59</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Integration of basic benchmark suite (many thanks to Stefan Seefeld
"                <a href="https://github.com/boostorg/ublas/pull/57">PR#57</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                CI integration and hardening
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_70_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_70_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      Daniel James, Vladimir Prus, Marshall Clow and Michael Caisse managed this
"      release.
"    </p>
"  </div>
"
-hash
"b0d19271881bb3deff7cdd1a1b8a0e3f2c3bcecf62a11ee6986339e8268c6d1c
-id
"version_1_70_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: Outcome, Histogram. Updated Libraries: Asio, Beast, Context,
"      Coroutine2, Dll, DynamicBitset, Fiber, Filesystem, Integer, Log, Math, Mp11,
"      MultiIndex, Multiprecision, Polycollection, Spirit, Stacktrace, Test, TypeIndex,
"      TypeTraits, Variant, Ublas.
"
-title_xml
"Version 1.70.0
)
(feed/history/boost_1_71_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_71_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant2/">Variant2</a>:</span> A never-valueless,
"          strong guarantee implementation of <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">variant</span></code>,
"          from Peter Dimov.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_71_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/align/">Align</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for any integral type in the integral versions of <code><span class="identifier">align_up</span></code> and <code><span class="identifier">align_down</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Revised the implementation of <code><span class="identifier">aligned_allocator</span></code>
"                to no longer require a specialization for <code><span class="keyword">void</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Define <code><span class="identifier">propagate_on_container_move_assignment</span></code>
"                and <code><span class="identifier">is_always_equal</span></code>
"                in <code><span class="identifier">aligned_allocator</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved performance slightly by eliminating a redundant move construction
"                when completed handlers are dispatched.
"              </div>
"            </li>
"            <li>
"              <div>
"                Eliminated a compiler warning by annotating a <code><span class="keyword">case</span></code>
"                fall-through in the free function <code><span class="identifier">connect</span><span class="special">()</span></code> implementation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed the <code><span class="identifier">is_</span><span class="special">*</span><span class="identifier">_buffer_sequence</span></code> detection traits
"                for user-defined sequence types.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed some Windows-specific warnings about an incompatible pointer
"                cast when obtaining the <code><span class="identifier">CancelIoEx</span></code>
"                entry point.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed to automatically set the defaults when opening a serial port
"                on Windows.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed the serial port <code><span class="identifier">get_option</span><span class="special">()</span></code> member function to be const.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a name hiding issue with the WinRT stream-oriented socket backend's
"                <code><span class="identifier">shutdown</span></code> function.
"              </div>
"            </li>
"            <li>
"              <div>
"                Applied a minor fix to the documentation for <code><span class="identifier">is_dynamic_buffer</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added some support for Haiku OS.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added wolfSSL compatability.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed to require C++17 or later for coroutines TS support with
"                clang.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a doxygen generation problem in the tutorial.
"              </div>
"            </li>
"            <li>
"              <div>
"                Ensured example programs are correctly incorporated into the documentation.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/any/">Any</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Static initialization of the default constructed <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">any</span></code>
"                is now possible.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed performance regression in assignment on a compilers without
"                move-semantics.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This version consists mostly of bug fixes and performance improvements.
"              </div>
"            </li>
"            <li>
"              <div>
"                Substantial work included for the split compilation mode, to reduce
"                compile time when defining <code><span class="identifier">BOOST_BEAST_SEPARATE_COMPILATION</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                We'd love to know how you or your company use Beast, consider adding
"                an item to the <a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast">Companies
"                and Individuals Using Beast</a> list.
"              </div>
"            </li>
"            <li>
"              <div>
"                See the full <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a> for a complete list of changes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/circular_buffer/">Circular Buffer</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Correct doxygen generated reference to no longer show internal members.
"                (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Eliminate ubsan warning on <code><span class="identifier">add</span></code>
"                and <code><span class="identifier">sub</span></code>. (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix incorrect check in <code><span class="identifier">is_uninitialized</span></code>.
"                (Niklas Fejes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/container/">Container</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/pull/47">GitHub
"                      #47: <em>"added alignment specification for small_vector"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/88">GitHub
"                      #88: <em>"Implement C++17 MoveAssignable requirements
"                      for self-move assignments"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/107">GitHub
"                      #107: <em>"Alignment ignored in resource_adaptor"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/pull/109">GitHub
"                      #109: <em>"Get rid of integer overflow in copy_move_algo.hpp
"                      (-fsanitize=integer)"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/pull/110">GitHub
"                      #110: <em>"Avoid gcc 9 deprecated copy warnings
"                      in new_allocator.hpp"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/112">GitHub
"                      #112: <em>"vector::resize() compilation error with
"                      msvc-10..12: data is not a member of boost::detail::aligned_storage"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/114">GitHub
"                      #114: <em>"Fix small_vector noexcept specification"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/116">GitHub
"                      #116: <em>"MSVC + boost 1.70 compilation error when
"                      windows.h is already included (detail/thread_mutex.hpp)"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/117">GitHub
"                      #117: <em>"flat_map/map::insert_or_assign with hint
"                      has wrong return types"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/118">GitHub
"                      #118: <em>"Non-unique inplace_set_difference used
"                      in in flat_tree_merge_unique and iterator invalidation in insert_unique"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/122">GitHub
"                      #122: <em>"Fix has_trivial_destructor_after_move"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/123">GitHub
"                      #123: <em>"With heterogeneous lookup, <code><span class="identifier">equal_range</span></code> can result in
"                      a range with length greater than 1"</em></a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                <code>deque</code> can now
"                have options, using <code>deque_options</code>.
"                The block size/bytes can be be specified.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code>static_vector</code>
"                can now have options, using <code>static_vector_options</code>.
"                Alignment and throwing behaviour can be be specified.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code>small_vector</code>
"                can now have options, using <code>small_vector_options</code>.
"                Alignment and growth factor can be be specified.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Add support for RISC-V LP64D
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/72">#72</a>: Fix ABI violation on ppc64 ELFv2
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/99">#99</a>: cleanup of stack if creating ucontext fails
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/conversion/">Conversion</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Maintenance work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added functions <code><span class="identifier">alloc_construct</span></code>,
"                <code><span class="identifier">alloc_construct_n</span></code>,
"                <code><span class="identifier">alloc_destroy</span></code>, and
"                <code><span class="identifier">alloc_destroy_n</span></code> in
"                <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">core</span><span class="special">/</span><span class="identifier">alloc_construct</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code> for allocator aware and exception
"                safe construction and destruction of objects and arrays. (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added constexpr functions <code><span class="identifier">first_scalar</span></code>
"                in <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">core</span><span class="special">/</span><span class="identifier">first_scalar</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code> for obtaining a pointer to the
"                first scalar element of an array. Given a pointer of type <code><span class="identifier">T</span><span class="special">*</span></code>
"                they return a pointer of type <code><span class="identifier">remove_all_extents_t</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;*</span></code>. (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added class template <code><span class="identifier">noinit_adaptor</span></code>
"                in <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">core</span><span class="special">/</span><span class="identifier">noinit_adaptor</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code> which is an allocator adaptor
"                that converts any allocator into one whose <code><span class="identifier">construct</span><span class="special">(</span><span class="identifier">ptr</span><span class="special">)</span></code> performs default initialization
"                via placement new, and whose <code><span class="identifier">destroy</span><span class="special">(</span><span class="identifier">ptr</span><span class="special">)</span></code> invokes the <code><span class="identifier">value_type</span></code>
"                destructor directly. (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added class template <code><span class="identifier">default_allocator</span></code>
"                in <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">core</span><span class="special">/</span><span class="identifier">default_allocator</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code>, which can serve as a minimal
"                default allocator that has interface similar to C++20 <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">allocator</span></code>, supports configurations
"                with disabled exceptions and does not have <code><span class="identifier">std</span></code>
"                as an associated namespace. The allocator uses <code><span class="keyword">operator</span>
"                <span class="keyword">new</span></code> and <code><span class="keyword">operator</span>
"                <span class="keyword">delete</span></code> for allocation. (Glen
"                Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                In <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">core</span><span class="special">/</span><span class="identifier">uncaught_exceptions</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code> header, added workarounds for
"                better compatibility with QNX SDP 7.0 when libc++/libc++abi libraries
"                are used. (Andrey Semashev, <a href="https://github.com/boostorg/core/issues/59">#59</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                The <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">detail</span><span class="special">/</span><span class="identifier">sp_typeinfo</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code> header is now marked as deprecated
"                and will be removed in a future release. <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">core</span><span class="special">/</span><span class="identifier">typeinfo</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code>
"                should be used instead. (Peter Dimov)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dynamic_bitset/">Dynamic Bitset</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Enabled hardware-assisted popcount on MSVC (<a href="https://github.com/boostorg/dynamic_bitset/pull/38">PR#38</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for boost::hash and std::hash (<a href="https://github.com/boostorg/dynamic_bitset/pull/45">PR#45</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Support copy-initialization with default constructor (<a href="https://github.com/boostorg/dynamic_bitset/pull/48">PR#48</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/endian/">Endian</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Clarified requirements on the value type template parameter
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for <code><span class="keyword">float</span></code>
"                and <code><span class="keyword">double</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">endian_load</span></code>,
"                <code><span class="identifier">endian_store</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Updated <code><span class="identifier">endian_reverse</span></code>
"                to correctly support all non-<code><span class="keyword">bool</span></code>
"                integral types
"              </div>
"            </li>
"            <li>
"              <div>
"                Moved deprecated names to the deprecated header <code><span class="identifier">endian</span><span class="special">.</span><span class="identifier">hpp</span></code>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/fiber/">Fiber</a>:</span>
"          <ul>
"            <li>
"              <div>
"                documentation for shared_work updated
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed incorrect <code><span class="identifier">error_code</span></code>
"                returned from directory iterator increment when <code><span class="identifier">readdir_r</span></code>
"                is used.
"              </div>
"            </li>
"            <li>
"              <div>
"                For <code><span class="identifier">path</span></code>, fixed rvalue-aware
"                <code><span class="keyword">operator</span><span class="special">/</span></code>
"                return type to return an rvalue instead of rvalue reference. This
"                fixes leaving a dangling reference in the user's code if the result
"                of <code><span class="keyword">operator</span><span class="special">/</span></code>
"                is bound to a const reference. (<a href="https://github.com/boostorg/filesystem/issues/110">#110</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixes for better compatibility with Windows CE. (<a href="https://github.com/boostorg/filesystem/pull/24">PR#24</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added minimal support for CMake. (<a href="https://github.com/boostorg/filesystem/pull/106">PR#106</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/flyweight/index.html">Flyweight</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Maintenance work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/histogram/index.html">Histogram</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New features:
"                <ul>
"                  <li>
"                    <div>
"                      Support for thread-safe storages and new thread-safe accumulators
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Support for compiling without exceptions/RTTI (increases performance
"                      by 10-20 %) (with Glen Fernandes)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Performance improvements for 1D and 2D histograms
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      boost::histogram::indexed now returns forward iterator range
"                      instead of input iterator range
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      boost::histogram::indexed_range::accessor is now non-copyable
"                      and acts like reference to cell value, making more algorithms
"                      from the C++ stdlib work
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      boost::histogram::algorithm::reduce with new slice option and
"                      option fusion
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      boost::histogram::algorithm::project accepts runtime indices
"                      for static histograms
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug Fixes:
"                <ul>
"                  <li>
"                    <div>
"                      boost::histogram::algorithm::reduce also works on histograms
"                      that have some axis types without reduction support
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      boost::histogram::axis::traits::update now works correctly
"                      for boost::histogram::axis::variant
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Other:
"                <ul>
"                  <li>
"                    <div>
"                      100 % test coverage
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Reduced internal Boost dependencies
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Improved documentation and examples
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Guaranteed no-throw moves for all builtin axis types
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Compile cleanly at higher warning levels
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/histogram/doc/html/histogram/history.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/iostreams/">IoStreams</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed processing of multi-stream files (<a href="https://github.com/boostorg/iostreams/pull/87">PR#87</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for multi-threaded LZMA (<a href="https://github.com/boostorg/iostreams/pull/95">PR#95</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/interprocess/">Interprocess</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/interprocess/pull/85">GitHub
"                #85 (<em>"warning: Implicit conversion loses integer precision"</em>)</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/interprocess/pull/86">GitHub
"                #86 (<em>"warning: Possible misuse of comma operator"</em>)</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/intrusive/">Intrusive</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/intrusive/pull/42">GitHub
"                #42: <em>Documentation does not describe treap priority_of_value
"                changes</em></a>
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/intrusive/pull/43">GitHub
"                #43: <em>Fix tests with BOOST_INTRUSIVE_VARIADIC_TEMPLATES
"                enabled</em></a>
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/intrusive/pull/45">GitHub
"                #45: <em>Disable variadic templates for MSVC-12 to avoid ICEs</em></a>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/lexical_cast/">LexicalCast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added tests for <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">filesystem</span><span class="special">::</span><span class="identifier">path</span></code>
"                conversions <a href="https://github.com/boostorg/lexical_cast/issues/25">#25</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance work, including <a href="https://github.com/boostorg/lexical_cast/issues/28">#28</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New features:
"                <ul>
"                  <li>
"                    <div>
"                      Improved support for C++17 <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">string_view</span></code>
"                      in <code><span class="identifier">basic_formatting_ostream</span></code>.
"                      The string view can now participate in character code conversion
"                      on output.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added <code><span class="identifier">auto_newline</span></code>
"                      formatter and stream manipulator. It can be used to ensure
"                      that formatted output always ends with a newline while avoiding
"                      duplicate newlines.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      In the output stream, text file and text multi-file sink backends
"                      added support for configuring behavior with regard to appending
"                      a trailing newline to every formatted log record. Use <code><span class="identifier">auto_newline_mode</span></code> named parameter
"                      of the backend constructor or call the <code><span class="identifier">set_auto_newline_mode</span></code>
"                      method on the sink backend.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <strong>Note:</strong> The default behavior
"                      with regard to trailing newlines added by sink backends has
"                      changed slightly compared to the previous Boost.Log releases.
"                      The backends will now only add a trailing newline if there
"                      isn't one in the formatted log message string already. In previous
"                      releases a newline was added unconditionally.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added support for passing arbitrary function objects in the
"                      <code><span class="identifier">filter</span></code> and
"                      <code><span class="identifier">format</span></code> named
"                      parameters to sink constructors and convenience functions for
"                      initializing sinks. For example, it is now possible to specify
"                      C++11 lambda functions directly in these parameters. (<a href="https://github.com/boostorg/log/issues/63">#63</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      In the default filter and formatter factories used in filter
"                      and formatter parsers, added support for severity level attribute
"                      values of type <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">log</span><span class="special">::</span><span class="identifier">trivial</span><span class="special">::</span><span class="identifier">severity_level</span></code>.
"                      For filters, the support is limited to attributes with "Severity"
"                      name.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed incorrect parsing of components of the rotated file names
"                      while scanning for files in the text file sink backend. If
"                      the file name pattern ended with a placeholder (for example,
"                      a file counter), the <code><span class="identifier">scan_for_files</span></code>
"                      method would not find files matching that pattern in the target
"                      storage, leaving them unmanaged. In particular, such files
"                      would not be deleted to free target storage. (<a href="https://github.com/boostorg/log/issues/78">#78</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Updated <code><span class="identifier">basic_formatting_ostream</span></code>
"                      and <code><span class="identifier">basic_record_ostream</span></code>
"                      to make it possible to overload stream output operators for
"                      pointers to user-defined types. User-defined <code><span class="keyword">operator</span><span class="special">&lt;&lt;</span></code>
"                      overloads taking <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">basic_ostream</span></code>
"                      and a pointer argument should now be picked up by the compiler
"                      when the pointer is being written to one of Boost.Log streams.
"                      (<a href="https://github.com/boostorg/log/issues/84">#84</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New features:
"                <ul>
"                  <li>
"                    <div>
"                      Catmull-Rom interpolator now works in C++11
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Cardinal quadratic B-spline interpolation
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Domain of elliptic integrals extended
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      sin_pi and cos_pi performance improvements
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Forward-mode automatic differentiation
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Vector valued barycentric rational interpolation
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Ooura's method for evaluation of Fourier integrals
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Multiple compatibility issues with Multiprecision fixed
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Lambert-W fixed on a rare architecture
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/metaparse/">Metaparse</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New features:
"                <ul>
"                  <li>
"                    <div>
"                      In C++11 variadic template support for the following: <code><span class="identifier">sequence</span></code>, <code><span class="identifier">one_of_c</span></code>,
"                      <code><span class="identifier">one_of</span></code>, <code><span class="identifier">repeated_one_of</span></code>, <code><span class="identifier">repeated_one_of1</span></code>, <code><span class="identifier">one_char_except_c</span></code>, <code><span class="identifier">one_char_except</span></code>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      <code><span class="identifier">BOOST_METAPARSE_STRING</span></code>
"                      does not use out of range character values as template arguments.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">any_of_c</span><span class="special">&lt;&gt;</span></code>
"                      does not create empty array in C++14.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/move/">Move</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/move/issues/26">Git Issue
"                #26: <em>"Invalid iterator increment/decrement in the
"                last iteration of adaptive_sort_combine_blocks"</em></a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_array/">Multi Array</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Simplify allocator support by using new <code><span class="identifier">alloc_construct_n</span></code>
"                and <code><span class="identifier">alloc_destroy_n</span></code>
"                facilities from Core. (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <a href="/libs/multi_index/doc/tutorial/key_extraction.html#x_mem_fun">variants
"                of <code><span class="identifier">const_mem_fun</span></code>
"                and <code><span class="identifier">mem_fun</span></code></a>
"                for differently qualified member functions (issue <a href="https://github.com/boostorg/multi_index/issues/24">#24</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Terse <a href="/libs/multi_index/doc/reference/key_extraction.html#key"><code><span class="identifier">key</span></code></a> specification syntax
"                now correctly handles <code><span class="keyword">noexcept</span></code>-specified
"                member functions (issue <a href="https://github.com/boostorg/multi_index/issues/24">#24</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/outcome/">Outcome</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Enhancements:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/ned14/outcome/issues/184">#184</a>
"                      As per request from Boost release managers, relocated <code><span class="identifier">version</span><span class="special">.</span><span class="identifier">hpp</span></code> and <code><span class="identifier">revision</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                      into detail, and added the Boost licence boilerplate to the
"                      top of every source file which was missing one (I think). Also
"                      took the opportunity to run the licence restamping script over
"                      all Outcome, so copyright dates are now up to date.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/ned14/outcome/issues/185">#185</a>
"                      Add FAQ item explaining issue #185, and why we will do nothing
"                      to fix it right now.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/ned14/outcome/issues/189">#189</a>
"                      Refactored the <code><span class="identifier">OUTCOME_TRY</span></code>
"                      implementation to use more clarified customisation points capable
"                      of accepting very foreign inputs. Removed the <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">expected</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">,</span>
"                      <span class="identifier">E</span><span class="special">&gt;</span></code>
"                      specialisations, as those are no longer necessary. Fixed the
"                      documentation for the customisation points which previously
"                      claimed that they are ADL discovered, which they are not. Added
"                      a recipe describing how to add in support for foreign input
"                      types.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/ned14/outcome/issues/183">#183</a>
"                      Added a separate <code><span class="identifier">motivation</span><span class="special">/</span><span class="identifier">plug_error_code</span></code>
"                      specifically for Boost.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      <code><span class="identifier">OUTCOME_VERSION_MINOR</span></code>
"                      hadn't been updated to 1.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/ned14/outcome/issues/181">#181</a>
"                      Fix issue #181 where Outcome didn't actually implement the
"                      strong swap guarantee, despite being documented as doing so.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/ned14/outcome/issues/190">#190</a>
"                      Fix issue #190 in Boost edition where unit test suite was not
"                      runnable from the Boost release distro.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/ned14/outcome/issues/182">#182</a>
"                      Fix issue #182 where <code><span class="identifier">trait</span><span class="special">::</span><span class="identifier">is_exception_ptr_available</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code> was always true, thus causing
"                      much weirdness, like not printing diagnostics and trying to
"                      feed everything to <code><span class="identifier">make_exception_ptr</span><span class="special">()</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/ned14/outcome/issues/192">#192</a>
"                      Fix issue #192 where the <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">basic_outcome_failure_exception_from_error</span><span class="special">()</span></code> was being defined twice for
"                      translation units which combine standalone and Boost Outcome's.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/parameter/doc/html/index.html">Parameter</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Upgraded keyword generation macro <code><span class="identifier">BOOST_PARAMETER_TEMPLATE_KEYWORD</span></code>
"                (<a href="https://github.com/boostorg/parameter/pull/15">PR#15</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Moved keyword generation macro <code><span class="identifier">BOOST_PARAMETER_NESTED_KEYWORD</span></code>
"                from <a href="/libs/accumulators/doc/html/index.html">Accumulators</a>
"                to this library (<a href="https://github.com/boostorg/parameter/pull/28">PR#28</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">reference_wrapper</span></code>
"                and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">ref</span><span class="special">()</span></code>
"                (<a href="https://github.com/boostorg/parameter/pull/16">PR#16</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Moved <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">parameter</span><span class="special">::</span><span class="identifier">required</span></code>, <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">parameter</span><span class="special">::</span><span class="identifier">optional</span></code>,
"                and <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">parameter</span><span class="special">::</span><span class="identifier">deduced</span></code> metafunction definitions
"                to their own header files in directory boost/parameter (<a href="https://github.com/boostorg/parameter/pull/18">PR#18</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for Boost.<a href="/libs/parameter/doc/html/index.html">Parameter</a>-enabled
"                function call operators (<a href="https://github.com/boostorg/parameter/pull/20">PR#20</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for parameter category qualifiers "forward",
"                "consume", and "move_from" (current qualifiers
"                are "in", "out", and "in_out") (<a href="https://github.com/boostorg/parameter/pull/21">PR#21</a>)
"                (<a href="https://github.com/boostorg/parameter/pull/23">PR#23</a>) based on <a href="http://www.modernescpp.com/index.php/c-core-guidelines-how-to-pass-function-parameters">http://www.modernescpp.com/index.php/c-core-guidelines-how-to-pass-function-parameters</a>.
"                Added new usage syntax <code><span class="identifier">BOOST_PARAMETER_NAME</span><span class="special">((</span><span class="identifier">object</span><span class="special">-</span><span class="identifier">name</span><span class="special">),</span> <span class="keyword">namespace</span><span class="special">-</span><span class="identifier">name</span><span class="special">)</span> <span class="identifier">qualifier</span><span class="special">(</span><span class="identifier">tag</span><span class="special">-</span><span class="identifier">name</span><span class="special">))</span></code> and <code><span class="identifier">BOOST_PARAMETER_NAME</span><span class="special">(</span><span class="identifier">qualifier</span><span class="special">(</span><span class="identifier">name</span><span class="special">))</span></code>. (Existing code that uses qualifiers
"                directly and correctly with <code><span class="identifier">BOOST_PARAMETER_FUNCTION</span></code>
"                and other code generation macros should remain unaffected for now,
"                so no breaking changes.) The reason for the change in usage is to
"                enable applying of parameter category constraints to Boost.<a href="/libs/parameter/doc/html/index.html">Parameter</a>-enabled
"                functions and constructors invoked through argument composition.
"                (Otherwise, it is currently possible to use argument composition
"                to bypass parameter category constraints applied in <code><span class="identifier">BOOST_PARAMETER_FUNCTION</span></code> et. al.)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for perfect forwarding (<a href="https://github.com/boostorg/parameter/pull/23">PR#23</a>) (<a href="https://github.com/boostorg/parameter/pull/26">PR#26</a>),
"                so that <code><span class="identifier">parameter</span><span class="special">::</span><span class="identifier">parameters</span><span class="special">::</span><span class="keyword">operator</span><span class="special">()</span></code> can accept non-<code><span class="keyword">const</span></code>
"                rvalues. As a positive side effect, Boost.<a href="/libs/parameter/doc/html/index.html">Parameter</a>-enabled
"                functions and constructors are no longer bound by <code><span class="identifier">BOOST_PARAMETER_MAX_ARITY</span></code>
"                on compilers that support perfect forwarding. User code can now check
"                for this support by detecting the configuration macro <code><span class="identifier">BOOST_PARAMETER_HAS_PERFECT_FORWARDING</span></code>,
"                or manually turn off this support by defining the configuration macro
"                <code><span class="identifier">BOOST_PARAMETER_DISABLE_PERFECT_FORWARDING</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added metafunctions <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">parameter</span><span class="special">::</span><span class="identifier">is_argument_pack</span></code>
"                (<a href="https://github.com/boostorg/parameter/pull/27">PR#27</a>), <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">parameter</span><span class="special">::</span><span class="identifier">are_tagged_arguments</span></code>
"                (<a href="https://github.com/boostorg/parameter/pull/52">PR#52</a>), and <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">parameter</span><span class="special">::</span><span class="identifier">result_of</span><span class="special">::</span><span class="identifier">compose</span></code>
"                (<a href="https://github.com/boostorg/parameter/pull/75">PR#75</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added variadic function template <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">parameter</span><span class="special">::</span><span class="identifier">compose</span><span class="special">()</span></code> which takes in named arguments
"                and returns them in an argument pack (<a href="https://github.com/boostorg/parameter/pull/52">PR#52</a>). For compilers
"                that do not support perfect forwarding, the configuration macro
"                <code><span class="identifier">BOOST_PARAMETER_COMPOSE_MAX_ARITY</span></code>
"                determines the maximum number of arguments that <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">parameter</span><span class="special">::</span><span class="identifier">compose</span><span class="special">()</span></code> can take in (<a href="https://github.com/boostorg/parameter/pull/61">PR#61</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added code generation macros <code><span class="identifier">BOOST_PARAMETER_BASIC_FUNCTION_CALL_OPERATOR</span></code>,
"                <code><span class="identifier">BOOST_PARAMETER_BASIC_CONST_FUNCTION_CALL_OPERATOR</span></code>,
"                <code><span class="identifier">BOOST_PARAMETER_NO_SPEC_FUNCTION</span></code>,
"                <code><span class="identifier">BOOST_PARAMETER_NO_SPEC_MEMBER_FUNCTION</span></code>,
"                <code><span class="identifier">BOOST_PARAMETER_NO_SPEC_CONST_MEMBER_FUNCTION</span></code>,
"                <code><span class="identifier">BOOST_PARAMETER_NO_SPEC_FUNCTION_CALL_OPERATOR</span></code>,
"                <code><span class="identifier">BOOST_PARAMETER_NO_SPEC_CONST_FUNCTION_CALL_OPERATOR</span></code>,
"                <code><span class="identifier">BOOST_PARAMETER_NO_SPEC_CONSTRUCTOR</span></code>,
"                and <code><span class="identifier">BOOST_PARAMETER_NO_SPEC_NO_BASE_CONSTRUCTOR</span></code>
"                (<a href="https://github.com/boostorg/parameter/pull/52">PR#52</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for Boost.<a href="/libs/mp11/doc/html/mp11.html">MP11</a>
"                (<a href="https://github.com/boostorg/parameter/pull/47">PR#47</a>) (<a href="https://github.com/boostorg/parameter/pull/66">PR#66</a>) (<a href="https://github.com/boostorg/parameter/pull/70">PR#70</a>). User code
"                can now check for this support by detecting the configuration macro
"                <code><span class="identifier">BOOST_PARAMETER_CAN_USE_MP11</span></code>,
"                or manually turn off this support by defining the configuration macro
"                <code><span class="identifier">BOOST_PARAMETER_DISABLE_MP11_USAGE</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved support for parameter-dependent return types via SFINAE
"                (<a href="https://github.com/boostorg/parameter/pull/73">PR#73</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/ptr_container/">PtrContainer</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix a ptr_vector regression introduced in 1.66.0 (<a href="https://github.com/boostorg/ptr_container/pull/24">PR#24</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/poly_collection/">PolyCollection</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Maintenance work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/smart_ptr/">SmartPtr</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added aliasing constructors to <code><span class="identifier">weak_ptr</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">weak_ptr</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">empty</span><span class="special">()</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">enable_shared_from</span></code>,
"                <code><span class="identifier">shared_from</span></code>, and
"                <code><span class="identifier">weak_from</span></code>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed output of <code><span class="identifier">name</span><span class="special">()</span></code>, <code><span class="identifier">source_location</span><span class="special">()</span></code> and <code><span class="identifier">source_line</span><span class="special">()</span></code> for the default constructed <code><span class="identifier">frame</span></code> with thread sanitizer builds
"                in C++98 mode.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed output of long strings from <code><span class="identifier">name</span><span class="special">()</span></code> and <code><span class="identifier">source_location</span><span class="special">()</span></code> on MSVC <a href="https://github.com/boostorg/stacktrace/issues/78">#78</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/test/">Test</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.test v3.11 see the <a href="libs/test/doc/html/boost_test/change_log.html">Changes
"                log</a> for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                Breaking changes:
"                <ul>
"                  <li>
"                    <div>
"                      Boost.Test shows deprecation warnings if some very old headers
"                      as deprecated. If you encounter such warnings, please follow
"                      the indications: those headers will be removed in a future
"                      release.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                New feature:
"                <ul>
"                  <li>
"                    <div>
"                      Now <code><span class="identifier">BOOST_TEST</span></code>
"                      can be used to compare abstract types
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes and pull requests:
"                <ul>
"                  <li>
"                    <div>
"                      GitHub Issues: <a href="https://github.com/boostorg/test/issues/209">#209</a>, <a href="https://github.com/boostorg/test/issues/218">#218</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GitHub Pull Requests: <a href="https://github.com/boostorg/test/pull/219">PR#219</a>, <a href="https://github.com/boostorg/test/pull/224">PR#224</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/utility/">Utility</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented function template <code><span class="identifier">ostream_string</span></code>
"                in <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">utility</span><span class="special">/</span><span class="identifier">ostream_string</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code> to optimally write any kind of
"                string content to an output stream. It satisfies the requirements
"                of [ostream.formatted.reqmts]. (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Optimized the stream output operators of <code><span class="identifier">basic_string_view</span></code>
"                and <code><span class="identifier">basic_string_ref</span></code>
"                to write directly to the <code><span class="identifier">rdbuf</span></code>
"                stream buffer. (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/uuid/">Uuid</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Breaking change:</strong> MD5 name-based
"                uuid generation was corrected to be identical on all endian systems.
"                Define <code><span class="identifier">BOOST_UUID_COMPAT_PRE_1_71_MD5</span></code>
"                to keep the result in a format compatible with 1.66 through 1.70.
"                This does not affect the default name-based uuid generation which
"                is based on SHA1. (<a href="https://github.com/boostorg/uuid/pull/109">PR#109</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed compilation of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">apply_visitor</span></code>
"                with variants passed by non const reference in <a href="https://github.com/boostorg/variant/pull/68">PR#68</a>. Many
"                thanks to Ed Catmur for providing the fix.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for std::hash (<a href="https://github.com/boostorg/variant/pull/49">PR#49</a>). Macro <code><span class="identifier">BOOST_VARIANT_DO_NOT_SPECIALIZE_STD_HASH</span></code>
"                could be defined to avoid those specializations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added micro optimizations for binary size and performance by Nikita
"                Kniazev in <a href="https://github.com/boostorg/variant/pull/63">PR#63</a> and <a href="https://github.com/boostorg/variant/pull/66">PR#66</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance work, including <a href="https://github.com/boostorg/variant/pull/64">PR#64</a> by Nikita Kniazev and <a href="https://github.com/boostorg/variant/pull/67">PR#67</a> by
"                Hans Dembinski.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/yap/">YAP</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added an example showing how to make self-evaluating YAP expressions
"                (that is, expressions that don't need an explicit call to <code><span class="identifier">evaluate</span><span class="special">()</span></code>
"                or <code><span class="identifier">transform</span><span class="special">()</span></code>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_71_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_71_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      Marshall Clow and Michael Caisse managed this release.
"    </p>
"  </div>
"
-hash
"af9d7519eae8533957e8c3ebd467afdaf4310fa00bedc42af05eee56762ca98d
-id
"version_1_71_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: Variant2. Updated Libraries: Align, Any, Asio, Beast, CircularBuffer,
"      Container, Context, Conversion, Core, DynamicBitset, Endian, Fiber, Filesystem,
"      Flyweight, Histogram, Iostreams, Interprocess, Intrusive, LexicalCast, Log,
"      Math, Metaparse, Move, MultiArray, MultiIndex, Outcome, Parameter, PtrContainer,
"      PolyCollection, SmartPtr, Stacktrace, Test, Utility, Uuid, Variant, Yap.
"
-title_xml
"Version 1.71.0
)
(feed/history/boost_1_72_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_72_0.known_issues">
"    <h3><span class="link">Known Issues</span></h3>
"    <p>
"      These are patches from library authors which were found too late to be fixed
"      in the release. Be careful as they have not been through the normal testing
"      process.
"    </p>
"    <ul>
"      <li>
"        <div>
"          Revert cease dependence on range
"          <ul>
"            <li>
"              <div>
"                <a href="/patches/1_72_0/0001-revert-cease-dependence-on-range.patch">Coroutine
"                patch</a>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_72_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Changed the <code><span class="identifier">async_initiate</span></code>
"                helper function to automatically deduce its return type, for C++11
"                or later.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed all asynchronous operations to use automatically deduced
"                return types, for C++14 or later.
"              </div>
"            </li>
"            <li>
"              <div>
"                Introduced concepts to support <code><span class="identifier">async_initiate</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the nested template type <code><span class="identifier">rebind_executor</span></code>
"                to all I/O object types.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed the initiation function objects to report their associated
"                I/O executor via the nested type <code><span class="identifier">executor_type</span></code>
"                and member function <code><span class="identifier">get_executor</span><span class="special">()</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <code><span class="identifier">default_completion_token</span></code>
"                trait, giving I/O executor types an associated default completion
"                token type for use with asynchronous operations. This trait is specialised
"                for the <code><span class="identifier">use_awaitable</span></code>
"                completion token, for example, to allow asynchronous operations to
"                be used as follows: <code><span class="identifier">co_await</span>
"                <span class="identifier">socket</span><span class="special">.</span><span class="identifier">async_connect</span><span class="special">(</span><span class="identifier">my_endpoint</span><span class="special">)</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added missing <code><span class="identifier">async_initiate</span></code>
"                to the Windows-specific I/O objects' asynchronous operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Ensured that the executor type is propagated to newly accepted sockets.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed to require that <code><span class="identifier">Protocol</span></code>
"                copy and move operations never throw.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed to require that <code><span class="identifier">Endpoint</span></code>
"                default constructor and move operations never throw.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <code><span class="keyword">noexcept</span></code> qualifier
"                to protocol accessors.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <code><span class="keyword">noexcept</span></code> qualifier
"                to socket move constructors.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed issues associated with opening serial ports on Windows:
"                <ul>
"                  <li>
"                    <div>
"                      Use the correct constant to initialise the RTS control flag.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Specify a default baud rate (9600).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a lost "outstanding work count" that can occur when
"                an asynchronous accept operation is automatically restarted.
"              </div>
"            </li>
"            <li>
"              <div>
"                Consult the <a href="/doc/libs/1_72_0/doc/html/boost_asio/history.html">Revision
"                History</a> for further details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added a workaround for <code><span class="identifier">__float128</span></code>
"                not being considered as a floating point type by some versions of
"                libstdc++.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved compatibility with clang-win compiler.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This is a maintenance update containing bug fixes, and updates to
"                use the new features delivered in Boost.Asio.
"              </div>
"            </li>
"            <li>
"              <div>
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the <a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast">Companies
"                and Individuals Using Beast</a> list.
"              </div>
"            </li>
"            <li>
"              <div>
"                See the full <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a> for a complete list of changes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/circular_buffer/">Circular Buffer</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix issue <a href="https://github.com/boostorg/circular_buffer/issues/29">#29</a>: <code><span class="identifier">max_size</span><span class="special">()</span></code> now takes the allocator's <code><span class="identifier">max_size</span><span class="special">()</span></code>
"                into account. (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                architecture s390x supported
"              </div>
"            </li>
"            <li>
"              <div>
"                execution_context removed
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/endian/">Endian</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Made <code><span class="identifier">endian_reverse</span></code>,
"                <code><span class="identifier">conditional_reverse</span></code>
"                and <code><span class="special">*</span><span class="identifier">_to_</span><span class="special">*</span></code> <code><span class="keyword">constexpr</span></code>
"                on GCC and Clang
"              </div>
"            </li>
"            <li>
"              <div>
"                Added convenience load and store functions
"              </div>
"            </li>
"            <li>
"              <div>
"                Added floating point convenience typedefs
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a non-const overload of <code><span class="identifier">data</span><span class="special">()</span></code>; changed its return type to <code><span class="keyword">unsigned</span> <span class="keyword">char</span><span class="special">*</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">__int128</span></code> support
"                to <code><span class="identifier">endian_reverse</span></code>
"                when available
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a convenience header <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">endian</span><span class="special">.</span><span class="identifier">hpp</span></code>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Extracted <code><span class="identifier">filesystem_error</span></code>
"                to <code><span class="identifier">exception</span><span class="special">.</span><span class="identifier">hpp</span></code>; <code><span class="identifier">file_status</span></code>
"                and associated enums and functions to <code><span class="identifier">file_status</span><span class="special">.</span><span class="identifier">hpp</span></code>;
"                <code><span class="identifier">directory_entry</span></code>,
"                <code><span class="identifier">directory_iterator</span></code>
"                and <code><span class="identifier">recursive_directory_iterator</span></code>
"                to <code><span class="identifier">directory</span><span class="special">.</span><span class="identifier">hpp</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>Deprecated:</strong> For backward compatibility
"                <code><span class="identifier">operations</span><span class="special">.</span><span class="identifier">hpp</span></code> still includes the new headers
"                <code><span class="identifier">exception</span><span class="special">.</span><span class="identifier">hpp</span></code>, <code><span class="identifier">file_status</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                and <code><span class="identifier">directory</span><span class="special">.</span><span class="identifier">hpp</span></code>, unless <code><span class="identifier">BOOST_FILESYSTEM_NO_DEPRECATED</span></code>
"                macro is defined. These implicit includes are considered deprecated
"                and will be removed in a future release. Users are encouraged to
"                include the new headers directly or include <code><span class="identifier">filesystem</span><span class="special">.</span><span class="identifier">hpp</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                The <code><span class="identifier">filesystem_error</span></code>
"                exception is now implemented in the compiled library of Boost.Filesystem.
"                Users may need to add linking with Boost.Filesystem library in their
"                projects.
"              </div>
"            </li>
"            <li>
"              <div>
"                On POSIX.1-2008 platforms, use <code><span class="identifier">utimensat</span></code>
"                instead of <code><span class="identifier">utime</span></code>.
"                <code><span class="identifier">utime</span></code> is declared
"                obsolete in POSIX.1-2008 and can be disabled e.g. in uClibc-ng. (<a href="https://github.com/boostorg/filesystem/pull/115">PR#115</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">directory_iterator</span></code>
"                is now left in the end state on memory allocation errors.
"              </div>
"            </li>
"            <li>
"              <div>
"                In <code><span class="identifier">directory_iterator</span></code>
"                on POSIX systems, support for <code><span class="identifier">readdir</span></code>/<code><span class="identifier">readdir_r</span></code> has been reworked to
"                avoid memory allocations for <code><span class="identifier">dirent</span></code>
"                structures when <code><span class="identifier">readdir</span></code>
"                is used. This reduces memory consumption and eliminates the possibility
"                of buffer overruns in case if <code><span class="identifier">readdir</span></code>
"                produces a very long directory name.
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows, use Boost.WinAPI to select the target Windows version.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Added <code><span class="identifier">directory_options</span></code>
"                enum, which reflects the same named enum from C++20. The enum is
"                supported in <code><span class="identifier">directory_iterator</span></code>
"                and <code><span class="identifier">recursive_directory_iterator</span></code>
"                to customize iteration behavior. In particular, the iterators now
"                support skipping directories that can't be opened due to insufficient
"                permissions. The <code><span class="identifier">symlink_option</span></code>
"                enum is now deprecated and should be replaced with <code><span class="identifier">directory_options</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                By default, <code><span class="identifier">recursive_directory_iterator</span></code>
"                is now reset to the end state in case of errors, as required by C++20.
"                (<a href="https://github.com/boostorg/filesystem/issues/112">#112</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Added <code><span class="identifier">directory_options</span><span class="special">::</span><span class="identifier">pop_on_error</span></code>
"                option, which configures <code><span class="identifier">recursive_directory_iterator</span></code>
"                so that it attempts to recover from iteration errors by repeatedly
"                invoking <code><span class="identifier">pop</span><span class="special">()</span></code>
"                until it succeeds or the end state is reached. (<a href="https://github.com/boostorg/filesystem/issues/113">#113</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Added <code><span class="identifier">directory_options</span><span class="special">::</span><span class="identifier">skip_dangling_symlinks</span></code>
"                option, which configures <code><span class="identifier">recursive_directory_iterator</span></code>
"                so that it doesn't follow dangling directory symlinks and continues
"                iteration instead of reporting an error.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>Deprecated:</strong> The following members
"                of <code><span class="identifier">recursive_directory_iterator</span></code>
"                are now marked as deprecated: <code><span class="identifier">level</span><span class="special">()</span></code>, <code><span class="identifier">no_push_pending</span><span class="special">()</span></code>, <code><span class="identifier">no_push_request</span><span class="special">()</span></code>, <code><span class="identifier">no_push</span><span class="special">()</span></code>. Users are advised to replace their
"                use with the standard counterparts: <code><span class="identifier">depth</span><span class="special">()</span></code>, <code><span class="identifier">recursion_pending</span><span class="special">()</span></code>, <code><span class="identifier">disable_recursion_pending</span><span class="special">()</span></code>. Note that <code><span class="identifier">recursion_pending</span><span class="special">()</span></code> has the opposite meaning compared
"                to <code><span class="identifier">no_push_pending</span><span class="special">()</span></code> and <code><span class="identifier">no_push_request</span><span class="special">()</span></code>. Deprecated methods will be removed
"                in a future release.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">lexically_relative</span></code> (and any dependent
"                algorithms) to correctly handle empty, dot and dot-dot path elements
"                in its argument. The behavior is made closer to C++17 <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">path</span><span class="special">::</span><span class="identifier">lexically_relative</span></code> in that empty
"                and dot path elements are ignored and dot-dot path elements are accounted
"                by decreasing the number of dot-dot path elements to generate in
"                the resulting relative path. (<a href="https://github.com/boostorg/filesystem/issues/76">#76</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/functional/factory/">Functional/Factory</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Glen Fernandes rewrote the implementations of <code><span class="identifier">factory</span></code>
"                and <code><span class="identifier">value_factory</span></code>
"                to provide the following features:
"                <ul>
"                  <li>
"                    <div>
"                      Support r-value arguments when possible
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Support arbitrary number of arguments via variadic templates
"                      when possible
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Support allocators that are final
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Support allocators that use fancy pointers
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Support for disabled exceptions (<code><span class="identifier">BOOST_NO_EXCEPTIONS</span></code>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Improved compilation times
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                The following features have been removed:
"                <ul>
"                  <li>
"                    <div>
"                      Increasing limits for C++03 compilers through <code><span class="identifier">BOOST_FUNCTIONAL_VALUE_FACTORY_MAX_ARITY</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Using <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">none_t</span></code>
"                      in place of <code><span class="keyword">void</span></code>
"                      through <code><span class="identifier">BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T</span></code>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/gil/">GIL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added
"                <ul>
"                  <li>
"                    <div>
"                      GSoC 2019: Lanczos resampling for image down scaling (<a href="https://github.com/boostorg/gil/pull/309">PR#309</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GSoC 2019: Methods for binary thresholding, inverted binary
"                      thresholding and truncation thresholding (<a href="https://github.com/boostorg/gil/pull/313">PR#313</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GSoC 2019: Otsu thresholding method (<a href="https://github.com/boostorg/gil/pull/314">PR#314</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GSoC 2019: Adaptive thresholding using mean or gaussian-weighted
"                      sum of the neighbourhood area (<a href="https://github.com/boostorg/gil/pull/315">PR#315</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GSoC 2019: Harris response calculation (corner detector without
"                      non-maximum filtering) (<a href="https://github.com/boostorg/gil/pull/350">PR#350</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GSoC 2019: Hessian corner detector (<a href="https://github.com/boostorg/gil/pull/364">PR#364</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GSoC 2019: Types for defining 2D kernel, <code><span class="identifier">kernel_2d</span></code>
"                      and <code><span class="identifier">kernel_2d_fixed</span></code>,
"                      in Numeric extension (<a href="https://github.com/boostorg/gil/pull/361">PR#361</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GSoC 2019: Implementation of 2D convolution as new function
"                      <code><span class="identifier">convolve_2d</span></code>
"                      (<a href="https://github.com/boostorg/gil/pull/367">PR#367</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GSoC 2019: Box filtering using the average filter (<a href="https://github.com/boostorg/gil/pull/383">PR#383</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GSoC 2019: Blur function based on normalized mean filter (<a href="https://github.com/boostorg/gil/pull/383">PR#383</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GSoC 2019: Sobel and Scharr operators (<a href="https://github.com/boostorg/gil/pull/392">PR#392</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GSoC 2019: Median filter to remove noise from image (<a href="https://github.com/boostorg/gil/pull/393">PR#393</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Continued adding new test cases and significantly improved
"                      overall test coverage.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Documented purpose of <code><span class="identifier">cached_location_t</span></code>
"                      (<a href="https://github.com/boostorg/gil/pull/287">PR#287</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Function <code><span class="identifier">convolve_1d</span></code>
"                      in Numeric extension for convenient use of <code><span class="identifier">convolve_rows</span></code>
"                      and <code><span class="identifier">convolve_cols</span></code>
"                      (<a href="https://github.com/boostorg/gil/pull/347">PR#347</a>) and <a href="https://github.com/boostorg/gil/pull/367">PR#367</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Function <code><span class="identifier">extend_boundary</span></code>
"                      in Numeric extension to perform image boundary extension (<a href="https://github.com/boostorg/gil/pull/386">PR#386</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Project release notes maintained in Markdown file <code><span class="identifier">RELEASES</span><span class="special">.</span><span class="identifier">md</span></code> (<a href="https://github.com/boostorg/gil/pull/404">PR#404</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed
"                <ul>
"                  <li>
"                    <div>
"                      Move all tests, core features and extensions, inside <code><span class="identifier">test</span><span class="special">/</span></code>
"                      directory (<a href="https://github.com/boostorg/gil/pull/302">PR#302</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed
"                <ul>
"                  <li>
"                    <div>
"                      Replace Boost.MPL with Boost.MP11 (<a href="https://github.com/boostorg/gil/pull/274">PR#274</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Removed use of Boost.TypeTraits (<a href="https://github.com/boostorg/gil/pull/274">PR#274</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Dropped support for GCC &lt;= 4.8 (<a href="https://github.com/boostorg/gil/pull/296">PR#296</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Remove <code><span class="identifier">include</span><span class="special">/</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">gil</span><span class="special">/</span><span class="identifier">version</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                      file as unused (<a href="https://github.com/boostorg/gil/pull/403">PR#403</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed
"                <ul>
"                  <li>
"                    <div>
"                      Undetermined value of default-initialized channel and pixel
"                      objects (<a href="https://github.com/boostorg/gil/pull/273">PR#273</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Undefined behaviour due to <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">is_trivially_default_constructible</span></code>
"                      specializations (<a href="https://github.com/boostorg/gil/pull/284">PR#284</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Crash when reading PNG files with an invalid header (<a href="https://github.com/boostorg/gil/pull/385">PR#385</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Applied the Rule of Three for numerous types.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Removed uses of deprecated implicit definition of defaulted
"                      copy assignment operator or copy constructor.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/histogram/">Histogram</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Several new features and performance improvements, some bug-fixes
"              </div>
"            </li>
"            <li>
"              <div>
"                See the full <a href="/libs/histogram/doc/html/histogram/history.html">Release
"                Notes</a> for a complete list of changes
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved compatibility with clang-win compiler.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/mpi/">MPI</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Documentation clarifications.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed scatterv bug when using explicit input buffer offsets.
"              </div>
"            </li>
"            <li>
"              <div>
"                Enable usage of MPI_Probe and friend with Intel MPI &gt;= 2019.4
"              </div>
"            </li>
"            <li>
"              <div>
"                Symbol visibility on Windows
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added Hypergeometric functions 1F0, 0F1, 2F0, 1F1 and pFq.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added Jacobi polynomial (and derivatives) evaluation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added Gegenbauer polynomial (and derivatives) evaluation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added Cardinal B-Splines (and derivatives) as polynomial functions
"                in their own right.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added Cardinal Trigonometric Interpolation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added new statistics sub-section.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added One Sample Student's T Test.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added Anderson Darling test for normality.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added Ljung Box test for auto-correlation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added Runs test for random sequences.
"              </div>
"            </li>
"            <li>
"              <div>
"                The headers <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">math</span><span class="special">/</span><span class="identifier">tools</span><span class="special">/</span><span class="identifier">univariate_statistics</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                and <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">math</span><span class="special">/</span><span class="identifier">tools</span><span class="special">/</span><span class="identifier">bivariate_statistics</span><span class="special">.</span><span class="identifier">hpp</span></code>, have been deprecated in favor
"                of <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">math</span><span class="special">/</span><span class="identifier">statistics</span><span class="special">/</span><span class="identifier">univariate_statistics</span><span class="special">.</span><span class="identifier">hpp</span></code> and <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">math</span><span class="special">/</span><span class="identifier">statistics</span><span class="special">/</span><span class="identifier">bivariate_statistics</span><span class="special">.</span><span class="identifier">hpp</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added The Empirical CDF distribution.
"              </div>
"            </li>
"            <li>
"              <div>
"                Reworked the Sterling approximation used by multiprecision gamma
"                functions to be applicable to all the function that use the Lanczos
"                approximation at regular precision. Also extended Lanczos approximations
"                up to 100 decimal digit precision.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multiprecision/">Multiprecision</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Big <code><span class="keyword">constexpr</span></code> update
"                allows cpp_int and float128 arithmetic to be fully <code><span class="keyword">constexpr</span></code> with gcc and clang 9 or
"                later, or any compiler supporting <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">is_constant_evaluated</span><span class="special">()</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix bug in variable precision mpf_float which causes it to go into
"                a tailspin trying to select the correct precision - see https://github.com/boostorg/multiprecision/issues/164.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/outcome/">Outcome</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Enhancements:
"                <ul>
"                  <li>
"                    <div>
"                      Standalone outcome is now <code><span class="identifier">make</span>
"                      <span class="identifier">install</span></code>-able, and
"                      cmake <code><span class="identifier">find_package</span><span class="special">()</span></code> can find it. Note that you
"                      must separately install and <code><span class="identifier">find_package</span><span class="special">()</span></code> Outcome's dependency, quickcpplib,
"                      else <code><span class="identifier">find_package</span><span class="special">()</span></code> of Outcome will fail.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      The git submodule mechanism used by standalone Outcome of specifying
"                      dependent libraries has been replaced with a cmake superbuild
"                      of dependencies mechanism instead. Upon cmake configure, an
"                      internal copy of quickcpplib will be git cloned, built and
"                      installed into the build directory from where an internal
"                      <code><span class="identifier">find_package</span><span class="special">()</span></code> uses it. This breaks the
"                      use of the unconfigured Outcome repo as an implementation of
"                      Outcome, one must now do one of: 1. Add Outcome as subdirectory
"                      to cmake build. 2. Use cmake superbuild (i.e. <code><span class="identifier">ExternalProject_Add</span><span class="special">()</span></code>)
"                      to build and install Outcome into a local installation. 3.
"                      Use one of the single header editions.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      For standalone Outcome, the current compiler is now checked
"                      for whether it will compile code containing C++ Concepts, and
"                      if it does, all cmake consumers of Outcome will enable C++
"                      Concepts. Set the cmake variable <code><span class="identifier">CXX_CONCEPTS_FLAGS</span></code>
"                      to an empty string to prevent auto detection and enabling of
"                      C++ Concepts support occurring.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">OUTCOME_TRY</span></code>
"                      operation now hints to the compiler that operation will be
"                      successful. <a href="https://wg21.link/P1886">P1886 <strong>Error speed benchmarking</strong></a> showed
"                      that there is considerable gain in very small functions by
"                      hinting to the compiler whether the expression is expected
"                      to be successful or not. <code><span class="identifier">OUTCOME_TRY</span></code>
"                      previously did not hint to the compiler at all, but now it
"                      does. A new suite of macros <code><span class="identifier">OUTCOME_TRY_FAILURE_LIKELY</span></code>
"                      hint to the compiler that failure is expected. If you wish
"                      to return to the previously unhinted behaviour, define <code><span class="identifier">OUTCOME_TRY_LIKELY</span><span class="special">(</span><span class="identifier">expr</span><span class="special">)</span></code>
"                      to <code><span class="special">(!!</span><span class="identifier">expr</span><span class="special">)</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/ned14/outcome/issues/199">#199</a>
"                      Support for C++ Coroutines has been added. This comes in two
"                      parts, firstly there is now an <code><span class="identifier">OUTCOME_CO_TRY</span><span class="special">()</span></code> operation suitable for performing
"                      the <code><span class="identifier">TRY</span></code> operation
"                      from within a C++ Coroutine. Secondly, in the header <code><span class="identifier">outcome</span><span class="special">/</span><span class="identifier">coroutine_support</span><span class="special">.</span><span class="identifier">hpp</span></code> there are implementations
"                      of <code><span class="identifier">eager</span><span class="special">&lt;</span><span class="identifier">OutcomeType</span><span class="special">&gt;</span></code>
"                      and <code><span class="identifier">lazy</span><span class="special">&lt;</span><span class="identifier">OutcomeType</span><span class="special">&gt;</span></code>
"                      which let you more naturally and efficiently use <code><span class="identifier">basic_result</span></code> or <code><span class="identifier">basic_outcome</span></code> from within
"                      C++ Coroutines -- specifically, if the result or outcome will
"                      construct from an exception pointer, exceptions thrown in the
"                      coroutine return an errored or excepted result with the thrown
"                      exception instead of throwing the exception through the coroutine
"                      machinery (which in current compilers, has a high likelihood
"                      of blowing up the program). Both <code><span class="identifier">eager</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code> and <code><span class="identifier">lazy</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code> can accept any <code><span class="identifier">T</span></code> as well. Both have been
"                      tested and found working on VS2019 and clang 9.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/ned14/outcome/issues/210">#210</a>
"                      <code><span class="identifier">make_error_code</span><span class="special">()</span></code> and <code><span class="identifier">make_exception_ptr</span><span class="special">()</span></code> are now additionally considered
"                      for compatible copy and move conversions for <code><span class="identifier">basic_result</span><span class="special">&lt;&gt;</span></code>.
"                      This lets you construct a <code><span class="identifier">basic_result</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">,</span> <span class="identifier">E</span><span class="special">&gt;</span></code> into a <code><span class="identifier">basic_result</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">,</span> <span class="identifier">error_code</span><span class="special">&gt;</span></code>, where <code><span class="identifier">E</span></code>
"                      is a custom type which has implemented the ADL discovered free
"                      function <code><span class="identifier">error_code</span>
"                      <span class="identifier">make_error_code</span><span class="special">(</span><span class="identifier">E</span><span class="special">)</span></code>,
"                      but is otherwise unrelated to <code><span class="identifier">error_code</span></code>.
"                      The same availability applies for <code><span class="identifier">exception_ptr</span></code>
"                      with <code><span class="identifier">make_exception_ptr</span><span class="special">()</span></code> being the ADL discovered
"                      free function. <code><span class="identifier">basic_outcome</span><span class="special">&lt;&gt;</span></code> has less support for
"                      this than <code><span class="identifier">basic_result</span><span class="special">&lt;&gt;</span></code> in order to keep constructor
"                      count down, but it will accept via this mechanism conversions
"                      from <code><span class="identifier">basic_result</span><span class="special">&lt;&gt;</span></code> and <code><span class="identifier">failure_type</span><span class="special">&lt;&gt;</span></code>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/ned14/outcome/issues/184">#184</a>
"                      The detection of <code><span class="special">[[</span><span class="identifier">nodiscard</span><span class="special">]]</span></code>
"                      support in the compiler was very mildly broken.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/poly_collection/">PolyCollection</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Maintenance work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/preprocessor/">Preprocessor</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Topic added which discusses emptiness
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for the C++20 <code><span class="identifier">__VA_OPT__</span></code>
"                construct
"                <ul>
"                  <li>
"                    <div>
"                      <code><span class="identifier">BOOST_PP_VARIADIC_HAS_OPT</span></code>
"                      whether <code><span class="identifier">__VA_OPT__</span></code>
"                      is supported at the C++20 level
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">BOOST_PP_CHECK_EMPTY</span></code>
"                      test for emptiness using <code><span class="identifier">__VA_OPT__</span></code>
"                      at the C++20 level
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">BOOST_PP_VA_OPT</span></code>
"                      more flexible alternative to <code><span class="identifier">__VA_OPT__</span></code>
"                      at the C++20 level
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/smart_ptr/">Smart Pointers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented <code><span class="identifier">allocate_unique</span></code>
"                for scalars and arrays. (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/test/">Test</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.test v3.12 see the <a href="/libs/test/doc/html/boost_test/change_log.html">Changes
"                log</a> for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                New feature:
"                <ul>
"                  <li>
"                    <div>
"                      Support for C++17 <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">string_view</span></code>
"                      has been added.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Better diagnostic on <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">exception</span></code>
"                      and no rtti mode (thanks to Mikhail Pilin / [pull_request 234])
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes and pull requests:
"                <ul>
"                  <li>
"                    <div>
"                      GitHub Issues: <a href="https://github.com/boostorg/test/issues/206">#206</a>, <a href="https://github.com/boostorg/test/issues/217">#217</a>, <a href="https://github.com/boostorg/test/issues/223">#223</a>, <a href="https://github.com/boostorg/test/issues/229">#229</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GitHub Pull Requests: <a href="https://github.com/boostorg/test/pull/227">PR#227</a>, <a href="https://github.com/boostorg/test/pull/231">PR#231</a>, <a href="https://github.com/boostorg/test/pull/232">PR#232</a>,
"                      <a href="https://github.com/boostorg/test/pull/234">PR#234</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/vmd/">VMD</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">BOOST_VMD_IS_EMPTY</span></code>
"                updated to use <code><span class="identifier">__VA_OPT__</span></code>
"                at the C++20 level has 100% reliability
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_72_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_72_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      Marshall Clow and Michael Caisse managed this release.
"    </p>
"  </div>
"
-hash
"92b2e98f0b5a58bff6fee5ef9b8f4d89df0cba75a1ca260bbc04370e0d3d3d30
-id
"version_1_72_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      Updated Libraries: Asio, Atomic, Beast, Circular Buffer, Context, Endian, Filesystem,
"      Functional/Factory, GIL, Histogram, Log, MPI, Math, Multiprecision, Outcome,
"      PolyCollection, Preprocessor, Smart Pointers, Test, VMD.
"
-title_xml
"Version 1.72.0
)
(feed/history/boost_1_73_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_73_0.known_issues">
"    <h3><span class="link">Known Issues</span></h3>
"    <p>
"      These are patches from library authors which were found too late to be fixed
"      in the release. Be careful as they have not been through the normal testing
"      process.
"    </p>
"    <ul>
"      <li>
"        <div>
"          Outcome <code><span class="identifier">status_code_domain</span></code>
"          assertion removal
"          <ul>
"            <li>
"              <div>
"                <a href="/patches/1_73_0/0001-outcome-assert.patch">Outcome patch</a>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Beast and coroutines
"          <ul>
"            <li>
"              <div>
"                <a href="/patches/1_73_0/0002-beast-coroutines.patch">Beast patch</a>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_73_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/nowide/">Nowide</a>:</span> Standard library functions
"          with UTF-8 API on Windows, from Artyom Beilis.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/static_string/">StaticString</a>:</span> A dynamically
"          resizable string of characters with compile-time fixed capacity and contiguous
"          embedded storage, from Vinnie Falco and Krystian Stasiowski
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_73_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/align/">Align</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Update <code><span class="identifier">aligned_alloc</span></code>
"                to support older mingw32.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/any/">Any</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Speedup compilation by not including <code><span class="special">&lt;</span><span class="identifier">algorithm</span><span class="special">&gt;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance work, including CI hardening.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed compatibility with C++20 concept syntax.
"              </div>
"            </li>
"            <li>
"              <div>
"                Marked the POSIX descriptor classes' move constructors as <code><span class="keyword">noexcept</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <code><span class="identifier">ssl</span><span class="special">::</span><span class="identifier">host_name_verification</span></code> class, which
"                is a drop-in replacement for <code><span class="identifier">ssl</span><span class="special">::</span><span class="identifier">rfc2818_verification</span></code>.
"                The <code><span class="identifier">ssl</span><span class="special">::</span><span class="identifier">rfc2818_verification</span></code> class has
"                been marked as deprecated. As a consequence of this change, SSL support
"                now depends on functions that were introduced in OpenSSL 1.0.2.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added an <code><span class="identifier">ssl</span><span class="special">::</span><span class="identifier">context</span></code> constructor to take ownership
"                of a native handle.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed C++ language version detection with <tt>gcc</tt>
"                to use <code><span class="identifier">__cplusplus</span></code>
"                macro.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a work counting issue in the asynchronous resolve operation
"                for endpoints.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed the <code><span class="identifier">strand</span><span class="special">&lt;&gt;</span></code> converting constructors and
"                assignment operators.
"              </div>
"            </li>
"            <li>
"              <div>
"                Ensured that resolvers are restarted correctly after a fork.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compatibility with the current NetBSD release.
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed spurious handler requirement checks in some <code><span class="identifier">async_read</span></code> overloads.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed the <code><span class="identifier">ssl</span><span class="special">::</span><span class="identifier">context</span></code> class to propagate non-EOF
"                errors from the <code><span class="identifier">add_certificate_authority</span></code>
"                function.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a Windows-specific <code><span class="identifier">thread_pool</span></code>
"                destructor hang that occurred when the pool had an associated I/O
"                object.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed the <tt>select</tt> reactor to recreate the "self
"                pipe trick" sockets on error. This addresses an issue on some
"                versions of Windows, where these sockets are discconected after a
"                system sleep.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a compile error in the buffered streams due to the lack of
"                reference collapsing in C++98.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed the <code><span class="identifier">priority_scheduler</span></code>
"                example to demonstrate calls to <code><span class="identifier">shutdown</span><span class="special">()</span></code> and <code><span class="identifier">destroy</span><span class="special">()</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed some unnecessary null pointer checks.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed Windows platform detection to recognise TV titles as Windows
"                apps.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added some emscripten compatibility patches.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a compile error in the <code><span class="identifier">use_awaitable_t</span><span class="special">::</span><span class="identifier">as_default_on</span></code>
"                function.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed all uses of the boost.bind placeholders to use the <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">placeholders</span></code> namespace.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a potential compile error in the <code><span class="identifier">async_compose</span></code>
"                implementation due to incorrect overload selection.
"              </div>
"            </li>
"            <li>
"              <div>
"                Suppressed some non-virtual destructor warnings.
"              </div>
"            </li>
"            <li>
"              <div>
"                Various documentation fixes and improvements.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/assert/">Assert</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">source_location</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented C++20 <code><span class="identifier">atomic_ref</span></code>.
"                See <a href="/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref">docs</a>
"                and especially the <a href="/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref.caveats">caveats</a>
"                section.
"              </div>
"            </li>
"            <li>
"              <div>
"                Implemented <code><span class="identifier">atomic_flag</span><span class="special">::</span><span class="identifier">test</span></code>
"                operation, which was introduced in C++20.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">atomic</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code>
"                should now take into account alignment requirements of <code><span class="identifier">T</span></code>, which makes a difference if
"                those requirements are higher than that of the internal storage of
"                <code><span class="identifier">atomic</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added static asserts enforcing the requirements on the value type
"                <code><span class="identifier">T</span></code> used with <code><span class="identifier">atomic</span></code> and <code><span class="identifier">atomic_ref</span></code>.
"                This should prohibit invalid types from being used as atomics.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved internal lock pool implementation. The pool is larger, and
"                lock selection accounts for atomic object alignment, which should
"                reduce the potential of thread contention.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed incorrect x86 code generated for <code><span class="identifier">bit_test_and_</span><span class="special">*</span></code> operations on 8 and 16-bit arguments.
"                Other architectures are not affected.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a possible unaligned memory access in <code><span class="identifier">compare_exchange_</span><span class="special">*</span></code> operations, if alignment requirements
"                of <code><span class="identifier">value_type</span></code> are
"                less than that of the internal storage of <code><span class="identifier">atomic</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">atomic</span><span class="special">/</span><span class="identifier">atomic</span><span class="special">.</span><span class="identifier">hpp</span></code> no longer includes <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">atomic</span><span class="special">/</span><span class="identifier">atomic_flag</span><span class="special">.</span><span class="identifier">hpp</span></code> and <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">atomic</span><span class="special">/</span><span class="identifier">fences</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                and only defines the <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">atomic</span></code>
"                class template and related typedefs. Include the other headers explicitly
"                or use <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">atomic</span><span class="special">.</span><span class="identifier">hpp</span></code> to include all parts of Boost.Atomic.
"              </div>
"            </li>
"            <li>
"              <div>
"                The <code><span class="identifier">atomic</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">storage</span><span class="special">()</span></code>
"                accessor and associated <code><span class="identifier">atomic</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">storage_type</span></code>
"                type are deprecated. Instead, users are advised to use <code><span class="identifier">atomic</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">value</span><span class="special">()</span></code>
"                and <code><span class="identifier">atomic</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">value_type</span></code>, respectively. Users
"                can define <code><span class="identifier">BOOST_ATOMIC_SILENCE_STORAGE_DEPRECATION</span></code>
"                to disable deprecation warnings for the time of transition. The deprecated
"                pieces will be removed in a future release.
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed support for <code><span class="identifier">BOOST_ATOMIC_DETAIL_HIGHLIGHT_OP_AND_TEST</span></code>.
"                This macro was used as a helper for transition to the updated returned
"                values of <code><span class="special">*</span><span class="identifier">_and_test</span></code>
"                operations in Boost.Atomic 1.67, which was released 2 years before
"                1.73.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This is a maintenance update.
"              </div>
"            </li>
"            <li>
"              <div>
"                Nested <code><span class="identifier">mutable_data_type</span></code>
"                in Beast dynamic buffers is deprecated.
"              </div>
"            </li>
"            <li>
"              <div>
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the <a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast">Companies
"                and Individuals Using Beast</a> list.
"              </div>
"            </li>
"            <li>
"              <div>
"                See the full <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a> for a complete list of changes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/context/">Context</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/133">#133</a>: IBM Z: Fix fcontext routines
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/132">#132</a>: mips64/n64: .align 3
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/131">#131</a>: Use OSPLAT MIPS32/MIPS64 to set different ABI
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/context/issues/129">#129</a>: Fix non-PIC in RISC-V assembly
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/conversion/">Conversion</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">polymorphic_downcast</span></code> for references
"                (thanks to Julien Delacroix for the patch).
"              </div>
"            </li>
"            <li>
"              <div>
"                Significant docs update.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/date_time/">date_time</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/date_time/issues/123">#123</a>: Support constexpr in c++14 and above
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/date_time/issues/134">#134</a>: Make date_time all inline. Users no longer need
"                to link the library for any functions. Library remains for build
"                compatibility.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/date_time/issues/132">#132</a>: Deprecate support for legacy io and <code><span class="identifier">USE_DATE_TIME_PRE_1_33_FACET_IO</span></code>
"                macro
"              </div>
"            </li>
"            <li>
"              <div>
"                Misc documentation updates and bugfixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixes and tests for demangling in <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">dll</span><span class="special">::</span><span class="identifier">smart_library</span></code>
"                (thanks to Ramil Gauss for <a href="https://github.com/boostorg/dll/issues/35">#35</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Make UB sanitizers happy with <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">dll</span><span class="special">::</span><span class="identifier">load_mode</span><span class="special">::</span><span class="identifier">type</span></code>
"                <a href="https://github.com/boostorg/dll/issues/30">#30</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Ceased dependence on MPL improving compile times (thanks to Nikita
"                Kniazev for <a href="https://github.com/boostorg/dll/issues/34">#34</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang and ICC on Windows fixes and CI support for those platforms
"                (thanks to Nikita Kniazev <a href="https://github.com/boostorg/dll/issues/33">#33</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance work, including CI hardening and tests improving.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dynamic_bitset/">Dynamic Bitset</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed a portability issue in the definition of the maximum block
"                limit.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/flyweight/index.html">Flyweight</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Maintenance work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/650">PR#650</a> Missing input combinations in <code><span class="identifier">intersection</span><span class="special">()</span></code>
"                      and introduction of tupled-output.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/671">PR#671</a> Added <code><span class="identifier">d3</span><span class="special">::</span><span class="identifier">point_xyz</span></code>
"                      geometry model (thanks to Digvijay Janartha).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Solved issues
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/657">#657</a> Incorrect definition of <code><span class="identifier">EPSG</span><span class="special">:</span><span class="number">3785</span></code>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/639">PR#639</a> R-tree exception-safety improvement.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/668">PR#668</a> Andoyer inverse formula fixed for close points.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/687">PR#687</a> Fixed dangling reference in distance algorithm.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Deprecation
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/590">#590</a> Support for C++03 has been deprecated and Geometry
"                      will require C++14 from Boost 1.75 onwards.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/gil/">GIL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added
"                <ul>
"                  <li>
"                    <div>
"                      Added move constructor and move assignment operator to <code><span class="identifier">image</span></code> class (<a href="https://github.com/boostorg/gil/pull/457">PR#457</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      New member function <code><span class="identifier">size</span><span class="special">()</span></code> in <code><span class="identifier">any_image_view</span></code>
"                      class (<a href="https://github.com/boostorg/gil/pull/456">PR#456</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed
"                <ul>
"                  <li>
"                    <div>
"                      Replace Boost.Test with Boost.LightweightTest as the only test
"                      framework used in GIL (<a href="https://github.com/boostorg/gil/pull/459">PR#459</a>) and (<a href="https://github.com/boostorg/gil/pull/464">PR#464</a>). This
"                      also restructured the <code><span class="identifier">test</span><span class="special">/</span><span class="identifier">extension</span><span class="special">/</span><span class="identifier">io</span><span class="special">/</span></code> sub-tree and targets in related
"                      <code><span class="identifier">Jamfile</span></code>-s.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Removed remaining uses of Boost.MPL (<a href="https://github.com/boostorg/gil/pull/459">PR#459</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Renamed all macros using <code><span class="identifier">BOOST_GIL_</span></code>
"                      prefix (<a href="https://github.com/boostorg/gil/pull/411">PR#411</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Renamed all CMake configuration options using <code><span class="identifier">BOOST_GIL_</span></code> prefix (<a href="https://github.com/boostorg/gil/pull/419">PR#419</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed
"                <ul>
"                  <li>
"                    <div>
"                      Removed <code><span class="identifier">extension</span><span class="special">/</span><span class="identifier">dynamic_image</span><span class="special">/</span><span class="identifier">reduce</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                      as unused and possibly unfinished (<a href="https://github.com/boostorg/gil/pull/466">PR#466</a>). An implementation
"                      attempt of techniques described in the paper <a href="http://lubomir.org/academic/MinimizingCodeBloat.pdf">Efficient
"                      Run-Time Dispatching in Generic Programming with Minimal Code
"                      Bloat</a> by Lubomir Bourdev, Jaakko Jarvi.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Removed direct dependency on Boost.MPL, Boost.System and Boost.Test.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Started removing public macros for compile-time configuration
"                      of I/O extension tests, i.e. <code><span class="identifier">BOOST_GIL_IO_TEST_ALLOW_READING_IMAGES</span></code>
"                      and <code><span class="identifier">BOOST_GIL_IO_TEST_ALLOW_WRITING_IMAGES</span></code>.
"                      Instead, if a test target is built, it builds all its test
"                      cases unconditionally.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed
"                <ul>
"                  <li>
"                    <div>
"                      Avoid <code><span class="identifier">longjmp</span></code>
"                      interaction during destruction of I/O extension objects (<a href="https://github.com/boostorg/gil/pull/433">PR#433</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed missing alignment default value in constructor of <code><span class="identifier">image</span></code> class (<a href="https://github.com/boostorg/gil/pull/429">PR#429</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed segmentation fault when reading corrupted PNG file (<a href="https://github.com/boostorg/gil/pull/414">PR#414</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed illegal initialization of return values in the old IOv1
"                      interface of I/O extension (<a href="https://github.com/boostorg/gil/pull/409">PR#409</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Acknowledgements
"                <ul>
"                  <li>
"                    <div>
"                      Samuel Debionne, Thiago Henrique Hüpner, Pranam Lashkari,
"                      Mateusz Loskot, Debabrata Mandal, Olzhas Zhumabek
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/histogram/">Histogram</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New features
"                <ul>
"                  <li>
"                    <div>
"                      Added <code><span class="identifier">crop</span></code>
"                      command to <code><span class="identifier">reduce</span></code>
"                      algorithm
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">slice</span></code> command
"                      in <code><span class="identifier">reduce</span></code> now
"                      works on <code><span class="identifier">category</span></code>
"                      axis
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added <code><span class="identifier">count</span></code>
"                      accumulator, can be used to add arbitrary metadata to each
"                      cell
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">sum</span></code> algorithm
"                      gained a new argument to optionally sum only over inner bins
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Several fixes for bugs in corner cases
"              </div>
"            </li>
"            <li>
"              <div>
"                Enhanced documentation
"                <ul>
"                  <li>
"                    <div>
"                      How to use Boost.Histogram as a backend in an external API
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      More on how to use Boost.Histogram with custom accumulators
"                      and Boost.Accumulators
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      More on how to use <code><span class="identifier">reduce</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Updated benchmarks
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See the <a href="/libs/histogram/doc/html/histogram/history.html">full
"                changelog here</a>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/icl/">icl</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/icl/pull/23">PR#23</a>: Remove references to date_time compiled library.
"              </div>
"            </li>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/icl/pull/17">PR#17</a>: Fix forward decl lower and upper less equal.
"              </div>
"            </li>
"            <li>
"              <div>
"                Misc bugfixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/io/">IO</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Made all the IOS state saver classes non-copyable. (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Correctly handle error upon first read from the input stream when
"                reading a quoted string. (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Implemented <code><span class="identifier">ostream_joiner</span></code>
"                for delimiter based joining. (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Relocated <code><span class="identifier">ostream_string</span></code>
"                from the Utility library to the IO library as <code><span class="identifier">ostream_put</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Correctly handle stream width and fill in quoted output. (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Optimize quoted output to write directly to the stream buffer. (Glen
"                Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Glen Fernandes became the maintainer of the IO library.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/lexical_cast/">LexicalCast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Maintenance work, including CI hardening and better workarounds for
"                broken standard libraries (thanks to Nikita Kniazev <a href="https://github.com/boostorg/lexical_cast/issues/31">#31</a>,
"                <a href="https://github.com/boostorg/lexical_cast/issues/32">#32</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New Features:
"                <ul>
"                  <li>
"                    <div>
"                      Default sink used in trivial logging, when no sinks are registered
"                      in the logging core, now automatically flushes output after
"                      each log record. (<a href="https://github.com/boostorg/log/issues/103">#103</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">core</span><span class="special">::</span><span class="identifier">flush</span></code> now performs a flush
"                      on the default sink used for trivial logging, when no sinks
"                      are registered.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Added a workaround for some syslog API implementations (e.g.
"                      glibc), which do not save the application identification string
"                      in <code><span class="identifier">openlog</span></code>
"                      call. Such implementations could access already freed memory
"                      on each <code><span class="identifier">syslog</span></code>
"                      call, resulting in undefined behavior. (<a href="https://github.com/boostorg/log/issues/97">#97</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed that log file rotation on a specific day of month (e.g.
"                      <code><span class="identifier">rotation_at_time_point</span><span class="special">(</span><span class="identifier">boost</span><span class="special">::</span><span class="identifier">gregorian</span><span class="special">::</span><span class="identifier">greg_day</span><span class="special">(</span><span class="number">1</span><span class="special">))</span></code>) could be silently ignored
"                      and not happen. (<a href="https://github.com/boostorg/log/issues/98">#98</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed that <code><span class="identifier">text_file_backend</span><span class="special">::</span><span class="identifier">rotate_file</span></code>
"                      could throw if there were no log records written yet and target
"                      file name pattern was set.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Ported various components of the library to <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">allocator_traits</span></code>
"                      to improve compatibility with C++20 allocators.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed compilation errors when building in MSYS2 Cygwin environment.
"                      (<a href="https://github.com/boostorg/log/issues/102">#102</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                IMPORTANT: C++03 support is now deprecated and will be removed from
"                March 2021.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added Cubic Hermite Interpolation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added Modified Akima Interpolation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added PCHIP Interpolation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added Quintic Hermite Interpolation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added entropy to numerous distributions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Allow trivial quadrature case where the two end points are equal,
"                and in addition allow bounds to be interchanged.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix exp_sinh quadrature to work with complex types over a non-native
"                range.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix miscellaneous compiler warnings in factorial.hpp.
"              </div>
"            </li>
"            <li>
"              <div>
"                Use std::chrono rather than boost::chrono in timed pFq calculations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Remove much of the old boost::mpl dependencies to improve constexpr
"                support.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/mp11/">Mp11</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_unique_if</span></code>
"                (contributed by Kris Jusiak)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_flatten</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_rotate_left</span></code>,
"                <code><span class="identifier">mp_rotate_right</span></code> (contributed
"                by Duncan Barber)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_compose</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_power_set</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_partial_sum</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_iterate</span></code>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">multi_index_container</span></code>
"                is now <a href="https://en.cppreference.com/w/cpp/named_req/AllocatorAwareContainer"><code><span class="identifier">AllocatorAware</span></code></a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Swapping of internal <code><span class="identifier">KeyFromValue</span></code>,
"                <code><span class="identifier">Compare</span></code>, <code><span class="identifier">Hash</span></code> and <code><span class="identifier">Pred</span></code>
"                objects now selects the appropriate <code><span class="identifier">swap</span></code>
"                function between <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">swap</span></code>
"                and ADL candidates, in accordance with standard specifications in
"                <strong>[swappable.requirements]</strong> (issue
"                <a href="https://github.com/boostorg/multi_index/issues/29">#29</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Provided some internal copy constructors and assignment operators
"                whose default implicit definition is deprecated in C++11 onwards
"                (<strong>[depr.impldec]</strong>), which was warned
"                about on some compilers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multiprecision/">Multiprecision</a>:</span>
"          <ul>
"            <li>
"              <div>
"                IMPORTANT: Mark C++03 support as deprecated and due for removal in
"                2021.
"              </div>
"            </li>
"            <li>
"              <div>
"                Big update to cpp_int adds faster Karatsuba and Coomba multiplication
"                routines.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix conversion of gmp_rational to <code><span class="keyword">long</span>
"                <span class="keyword">double</span></code> and <code><span class="identifier">__float128</span></code>,
"                fixes #178.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix up libtommath support to function with the latest libtom releases.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix up some incompatibilities with the latest Intel C++ compiler.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix up <code><span class="keyword">constexpr</span></code> arithmetic
"                support for latest MSVC release.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/outcome/">Outcome</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Enhancements:
"                <ul>
"                  <li>
"                    <div>
"                      Performance of Outcome-based code compiled by clang has been
"                      greatly improved. The previous implementation of Outcome's
"                      status bitfield confused clang's optimiser, which caused low
"                      quality codegen. Unlike most codegen issues, this was noticeably
"                      in empirical benchmarks of real world code, as was shown by
"                      <a href="https://wg21.link/P1886">P1886 <strong>Error
"                      speed benchmarking</strong></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      The safe part of the <a href="https://github.com/ned14/outcome/tree/better_optimisation"><code><span class="identifier">better_optimisation</span></code></a>
"                      Outcome v2.2.0 future branch was merged to Outcome v2.1.3 which
"                      includes a new status bitfield implementation. This appears
"                      to not confuse clang's optimiser, and clang 9 produces code
"                      which routinely beats GCC 9's code for various canned use cases.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Installability is now CI tested per commit. Due to installability
"                      of standalone Outcome (e.g. <code><span class="identifier">make</span>
"                      <span class="identifier">install</span></code>) breaking
"                      itself rather more frequently than is ideal, installability
"                      is now tested on CI per commit.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/ned14/outcome/issues/214">#214</a>
"                      Newer Concepts implementing compilers were unhappy with the
"                      early check for destructibility of <code><span class="identifier">T</span></code>
"                      and <code><span class="identifier">E</span></code>, so removed
"                      template constraints, falling back to static assert which runs
"                      later in the type instantiation sequence.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/ned14/outcome/issues/220">#220</a>
"                      A false positive undefined behaviour sanitiser failure in some
"                      use cases of Experimental Outcome was worked around to avoid
"                      the failure message.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/poly_collection/">PolyCollection</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Suppressed a potential redundant move warning in <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">poly_collection</span><span class="special">::</span><span class="identifier">for_each</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a bug by which elements were copied rather than moved in allocator-extended
"                move construction and move assigment between collections with non-propagating,
"                unequal allocators.
"              </div>
"            </li>
"            <li>
"              <div>
"                Allocator-extended move construction no longer decays to allocator-extended
"                copy construction for the legacy version of libstdc++-v3 shipped
"                with GCC 4.8 (which can also be used by Clang).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added documentation on distribution of PDBs <a href="https://github.com/boostorg/stacktrace/issues/55">#55</a>, <a href="https://github.com/boostorg/stacktrace/issues/47">#47</a> (thanks
"                to emptyVoid and Roger Orr for information and to zlojvavan for testing).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed msvc-9 build
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance work, including test fixes <a href="https://github.com/boostorg/stacktrace/issues/86">#86</a>, fixing typos
"                <a href="https://github.com/boostorg/stacktrace/issues/84">#84</a>, CI improvements and hardening, inspect tool fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/test/">Test</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Boost.test v3.13 see the <a href="/libs/test/doc/html/boost_test/change_log.html">Changes
"                log</a> for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                New feature: It is now possible to combine tolerance indication,
"                user message and collection comparison modifier in a single <code><span class="identifier">BOOST_TEST</span></code> expression. See change
"                logs for more details.
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes and pull requests:
"                <ul>
"                  <li>
"                    <div>
"                      GitHub Issues: <a href="https://github.com/boostorg/test/issues/173">#173</a>, <a href="https://github.com/boostorg/test/issues/179">#179</a>, <a href="https://github.com/boostorg/test/issues/220">#220</a>, <a href="https://github.com/boostorg/test/issues/221">#221</a>,
"                      <a href="https://github.com/boostorg/test/issues/235">#235</a>
"      <a href="https://github.com/boostorg/test/issues/237">#237</a>, <a href="https://github.com/boostorg/test/issues/241">#241</a>, <a href="https://github.com/boostorg/test/issues/245">#245</a>, <a href="https://github.com/boostorg/test/issues/246">#246</a>,
"                      <a href="https://github.com/boostorg/test/issues/251">#251</a>, <a href="https://github.com/boostorg/test/issues/253">#253</a>
"      <a href="https://github.com/boostorg/test/issues/254">#254</a>, <a href="https://github.com/boostorg/test/issues/263">#263</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Trac tickets: <a href="https://svn.boost.org/trac/boost/ticket/11107">#11107</a>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      GitHub Pull Requests: <a href="https://github.com/boostorg/test/pull/41">PR#41</a>, <a href="https://github.com/boostorg/test/pull/114">PR#114</a>, <a href="https://github.com/boostorg/test/pull/187">PR#187</a>,
"                      <a href="https://github.com/boostorg/test/pull/239">PR#239</a>, <a href="https://github.com/boostorg/test/pull/247">PR#247</a>
"      <a href="https://github.com/boostorg/test/pull/252">PR#252</a>, <a href="https://github.com/boostorg/test/pull/259">PR#259</a>, <a href="https://github.com/boostorg/test/pull/265">PR#265</a>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/throw_exception/">ThrowException</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added an overload of <code><span class="identifier">throw_exception</span></code>
"                that takes a <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">source_location</span></code>
"                object.
"              </div>
"            </li>
"            <li>
"              <div>
"                NOTE: Projects using <code><span class="identifier">BOOST_THROW_EXCEPTION</span></code>
"                with exceptions disabled will need to add a definition of this new
"                overload.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/tti/">TTI</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added introspection of function templates for more recent C++ compilers
"                versions from gcc and vc++. as well as all versions of clang. Older
"                versions of vc++ before 14.0 and gcc prior to 4.8 may fail.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added specific introspection for elements of struct/class, enum,
"                and union types, which can be used for more fine-grained introspection
"                than the general 'type' introspection.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_index/">TypeIndex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Maintenance work, including CI integration with inspect tool.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/utility/">Utility</a>:</span>
"          <ul>
"            <li>
"              <div>
"                The <code><span class="identifier">ostream_string</span></code>
"                facility has moved from the Utility library to the IO library as
"                <code><span class="identifier">ostream_put</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Removed unused includes (thanks to Nikita Kniazev <a href="https://github.com/boostorg/variant/issues/74">#74</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed zero-as-null-pointer-constat warnings (thanks to Bart Siwek
"                <a href="https://github.com/boostorg/variant/issues/77">#77</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance work, including typo fixes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant2/">Variant2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support for <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">hash</span></code>,
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">hash</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">variant</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">...&gt;</span></code>
"                is now trivial when all types in <code><span class="identifier">T</span><span class="special">...</span></code> are trivial. This improves performance
"                by enabling it to be passed to, and returned from, functions in registers.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/winapi/">WinAPI</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Headers in <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">detail</span><span class="special">/</span><span class="identifier">winapi</span></code>
"                are deprecated and will be removed in a future release.
"              </div>
"            </li>
"            <li>
"              <div>
"                Boost.WinAPI headers no longer include <code><span class="identifier">winerror</span><span class="special">.</span><span class="identifier">h</span></code>.
"                Include <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">winapi</span><span class="special">/</span><span class="identifier">error_codes</span><span class="special">.</span><span class="identifier">hpp</span></code> to get Windows error codes.
"                (<a href="https://github.com/boostorg/winapi/issues/81">#81</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_73_0.updated_tools">
"    <h3><span class="link">Updated Tools</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/tools/build/">Build</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Includes release <a href="https://github.com/boostorg/build/releases/tag/4.2.0">4.2.0</a>
"                of B2.
"              </div>
"            </li>
"            <li>
"              <div>
"                WARNING: Since version 4.0.0 B2 requires a capable C++11 compiler
"                to bootstrap. This is only needed to build B2 itself not to build
"                Boost for your use.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_73_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_73_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
"    </p>
"  </div>
"
-hash
"491c36f505fc55c91e845582d0ac4715d4ce48aad7bfd3b58b2e57503ae91b46
-id
"version_1_73_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: Nowide, StaticString. Updated Libraries: Align, Any, Asio, Assert,
"      Atomic, Beast, Context, Conversion, DateTime, DLL, DynamicBitset, Flyweight,
"      Geometry, GIL, Histogram, ICL, IO, LexicalCast, Log, Math, Mp11, MultiIndex,
"      Multiprecision, Outcome, PolyCollection, Stacktrace, Test, ThrowException,
"      TTI, TypeIndex, Utility, Variant, Variant2, WinAPI.
"
-title_xml
"Version 1.73.0
)
(feed/history/boost_1_74_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_74_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stl_interfaces/">STLInterfaces</a>:</span> A library
"          of CRTP bases to ease the writing of STL views, iterators, and sequence
"          containers, from Zach Laine.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_74_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added an implementation of the proposed standard executors (<a href="http://wg21.link/P0443r13">P0443r13</a>, <a href="http://wg21.link/P1348r0">P1348r0</a>,
"                and <a href="http://wg21.link/P1393r0">P1393r0</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for the proposed standard executors to Asio's I/O facilities.
"                <ul>
"                  <li>
"                    <div>
"                      The supplied executors now meet the requirements for the proposed
"                      standard executors. These classes also continue to meet the
"                      existing requirements for the Networking TS model of executors.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      All I/O objects, asynchronous operations, and utilities will
"                      interoperate with both new proposed standard executors, and
"                      with existing Networking TS executors.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      The <code><span class="identifier">any_io_executor</span></code>
"                      type alias has been introduced as the default runtime-polymorphic
"                      executor for all I/O objects. This defaults to the <code><span class="identifier">execution</span><span class="special">::</span><span class="identifier">any_executor</span><span class="special">&lt;&gt;</span></code>
"                      template. If required for backward compatibility, <code><span class="identifier">BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT</span></code>
"                      can be defined to use the old <code><span class="identifier">asio</span><span class="special">::</span><span class="identifier">executor</span></code>
"                      polymorphic wrapper instead.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Support for the existing Networking TS model of executors can
"                      be disabled by defining <code><span class="identifier">BOOST_ASIO_NO_TS_EXECUTORS</span></code>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added converting move construction and assignment to <code><span class="identifier">basic_waitable_timer</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Enabled C++20 coroutine support when using <tt>gcc</tt>
"                10.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added overloads of <code><span class="identifier">co_spawn</span></code>
"                that launch an awaitable.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a new constructor overload to <code><span class="identifier">use_awaitable_t</span></code>'s
"                default executor adapter, to enable conversion between executor types.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for using <code><span class="identifier">detached_t</span></code>
"                as a default completion token, by adding members <code><span class="identifier">as_default_on</span><span class="special">()</span></code> and <code><span class="identifier">as_default_on_t</span><span class="special">&lt;&gt;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a move constructor to <code><span class="identifier">ssl</span><span class="special">::</span><span class="identifier">stream</span><span class="special">&lt;&gt;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed <code><span class="identifier">ssl</span><span class="special">::</span><span class="identifier">stream</span><span class="special">&lt;&gt;</span></code>
"                write operations to linearise gather-write buffer sequences.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added compile-time detection of the deprecated <code><span class="identifier">asio_handler_invoke</span></code>,
"                <code><span class="identifier">asio_handler_allocate</span></code>,
"                and <code><span class="identifier">asio_handler_deallocate</span></code>
"                hooks, when <code><span class="identifier">BOOST_ASIO_NO_DEPRECATED</span></code>
"                is defined.
"              </div>
"            </li>
"            <li>
"              <div>
"                Implemented a number of performance optimisations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added source location support to handler tracking.
"              </div>
"            </li>
"            <li>
"              <div>
"                Implemented various improvements to the <tt>handlerviz.pl</tt>
"                tool.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <tt>handlerlive.pl</tt> tool, which processes
"                handler tracking output to produce a list of "live" handlers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <tt>handlertree.pl</tt> tool, which filters handler
"                tracking output to include only those events in the tree that produced
"                the nominated handlers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added changes for clang-based Embarcadero C++ compilers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a deadlock that can occur when multiple threads concurrently
"                initialise the Windows I/O completion port backend.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">async_compose</span></code>
"                to work with copyable handlers when passed by lvalue.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed completion signature deduction in <code><span class="identifier">co_spawn</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed a spurious <code><span class="identifier">Executor</span></code>
"                base class from the <code><span class="identifier">executor_binder</span></code>
"                implementation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Various fixes and improvements in the documentation and examples.
"              </div>
"            </li>
"            <li>
"              <div>
"                Consult the <a href="/doc/libs/1_74_0/doc/html/boost_asio/history.html">Revision
"                History</a> for further details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added missing <code><span class="keyword">const</span></code>
"                qualifiers to some operations in <code><span class="identifier">atomic_ref</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for <code><span class="identifier">yield</span></code>
"                instruction on ARMv8-A. The instruction is used internally in spin
"                loops to reduce CPU power consumption.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for C++20 <a href="/doc/html/atomic/interface.html#atomic.interface.interface_wait_notify_ops">waiting
"                and notifying operations</a>. The implementation includes generic
"                backend that involves the internal lock pool, as well as specialized
"                backends for Windows, Linux, FreeBSD, DragonFly BSD and NetBSD. Atomic
"                types provide a new method <code><span class="identifier">has_native_wait_notify</span></code>,
"                a static boolean constant <code><span class="identifier">always_has_native_wait_notify</span></code>
"                and a set of capability macros that allow to detect if the implementation
"                supports native waiting and notifying operations for a given type.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed internal representation of <code><span class="identifier">atomic_flag</span></code>
"                to use 32-bit storage. This allows for more efficient waiting and
"                notifying operations on <code><span class="identifier">atomic_flag</span></code>
"                on some platforms.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for build-time configuration of the internal lock pool
"                size. The user can define the <code><span class="identifier">BOOST_ATOMIC_LOCK_POOL_SIZE_LOG2</span></code>
"                macro to specify binary logarithm of the size of the lock pool. The
"                default value is 8, meaning that the size of the lock pool is 256,
"                up from 64 used in the previous release.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for a new set of atomic types dedicated for <a href="/doc/html/atomic/interface.html#atomic.interface.interface_ipc">inter-process
"                communication</a>: <code><span class="identifier">ipc_atomic_flag</span></code>,
"                <code><span class="identifier">ipc_atomic</span></code> and <code><span class="identifier">ipc_atomic_ref</span></code>. Users are recommended
"                to port their code using non-IPC types for inter-process communication
"                to the new types. The new types provide the same set of operations
"                as their non-IPC counterparts, with the following differences:
"                <ul>
"                  <li>
"                    <div>
"                      Most operations have an added precondition that <code><span class="identifier">is_lock_free</span></code> returns <code><span class="keyword">true</span></code> for the given atomic object.
"                      The library will issue a compile time error if this precondition
"                      is known to be not satisfied at compile time.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      All provided operations are address-free, meaning that the
"                      atomic object (in case of <code><span class="identifier">ipc_atomic_ref</span></code>
"                      - the referenced object) may be located in process-shared memory
"                      or mapped into the same process at multiple different addresses.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      The new <code><span class="identifier">has_native_wait_notify</span></code>
"                      operation and <code><span class="identifier">always_has_native_wait_notify</span></code>
"                      constant indicate support for native inter-process waiting
"                      and notifying operations. When that support is not present,
"                      the operations are implemented with a busy loop, which is less
"                      efficient, but still is address-free. A separate set of capability
"                      macros is also provided to indicate this support.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added new <code><span class="identifier">atomic_unsigned_lock_free</span></code>
"                and <code><span class="identifier">atomic_signed_lock_free</span></code>
"                types introduced in C++20. The types indicate the atomic object type
"                for an unsigned or signed integer, respectively, that is lock-free
"                and preferably has native support for waiting and notifying operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added new gcc assembler backends for ARMv8-A (for both AArch32 and
"                AArch64). The new backends are used to implement operations not supported
"                by compiler intrinsics (including 128-bit operations on AArch64)
"                and can also be used when compiler intrinsics are not available.
"                Both little and big endian targets are supported. AArch64 backend
"                supports extensions defined in ARMv8.1 and ARMv8.3.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for big endian targets in the legacy ARM backend based
"                on gcc assembler blocks (this backend is used on ARMv7 and older
"                targets). Previously, the backend assumed little endian memory layout,
"                which is significant for 64-bit operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved performance of seq_cst stores and thread fences on x86 by
"                using <code><span class="identifier">lock</span></code>-prefixed
"                instructions instead of <code><span class="identifier">mfence</span></code>.
"                This means that the operations no longer affect non-temporal stores,
"                which was also not guaranteed before. Use specialized instructions
"                and intrinsics to order non-temporal memory accesses.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed capability macros for 80-bit <code><span class="keyword">long</span>
"                <span class="keyword">double</span></code> on x86 targets not
"                indicating lock-free operations even if 128-bit atomic operations
"                were available.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compilation of gcc asm blocks on Alpha targets.
"              </div>
"            </li>
"            <li>
"              <div>
"                In the gcc <code><span class="identifier">__sync</span><span class="special">*</span></code> intrinsics backend, fixed that store
"                and load operations of large objects (larger than a pointer size)
"                could be non-atomic. The implementation currently assumes that small
"                objects can be stored with a single instruction atomically on all
"                modern architectures.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This update brings bug fixes and support for the following changes
"                changes in Boost.Asio:
"              </div>
"            </li>
"            <li>
"              <div>
"                Beast supports <code><span class="identifier">BOOST_ASIO_NO_DEPRECATED</span></code>.
"                Define this to help identify areas of your Beast and Asio code which
"                use deprecated Asio interfaces.
"              </div>
"            </li>
"            <li>
"              <div>
"                Beast also supports <code><span class="identifier">BOOST_ASIO_NO_TS_EXECUTORS</span></code>.
"                Define this to identify uses of executors from the now potentially
"                outdated <a href="https://cplusplus.github.io/networking-ts/draft.pdf">Networking
"                TS</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Asio will use the <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0443r11.html">Standard
"                Executors</a> model by default. You can prevent this behaviour
"                by defining <code><span class="identifier">BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT</span></code>
"                in which the Networking TS model will be used by default. Setting
"                this flag does not prevent a program from using executors from the
"                Standard Executors model explicitly.
"              </div>
"            </li>
"            <li>
"              <div>
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the <a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast">Companies
"                and Individuals Using Beast</a> list.
"              </div>
"            </li>
"            <li>
"              <div>
"                See the full <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a> for a complete list of changes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/bimap/">Bimap</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Correct allocator usage (fixes C++20 compilation). (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/config/">Config</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implement <code><span class="identifier">BOOST_NO_CXX11_OVERRIDE</span></code>
"                and <code><span class="identifier">BOOST_OVERRIDE</span></code>.
"                (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented the allocator access utilities which provide a replacement
"                for <code><span class="identifier">allocator_traits</span></code>
"                with individual traits and functions for each facility. They support
"                the C++11 allocator model when possible and provide a fallback for
"                C++98 compatibility. These are now used in Circular_Buffer, Wave,
"                Lockfree, Heap, Smart_Ptr, Dynamic_Bitset, Format, Bimap and more.
"                (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Multiple fixes for the <code><span class="identifier">library_info</span></code>
"                work on empty shared objects.
"              </div>
"            </li>
"            <li>
"              <div>
"                Compilation fixes for C++98 and C++11 modes (<a href="https://github.com/boostorg/dll/issues/28">#28</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixes for <code><span class="identifier">smart_library</span></code>
"                manglings (thanks to XiaLiChao82 <a href="https://github.com/boostorg/dll/issues/37">#37</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/endian/">Endian</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Enabled scoped enumeration types in <code><span class="identifier">endian_reverse</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Enabled <code><span class="keyword">bool</span></code>, <code><span class="keyword">enum</span></code>, <code><span class="keyword">float</span></code>,
"                <code><span class="keyword">double</span></code> in <code><span class="identifier">endian_reverse_inplace</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added an overload of <code><span class="identifier">endian_reverse_inplace</span></code>
"                for arrays.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Removed compile-time checks for support for symlinks and hardlink
"                on Windows. Instead, a runtime check is used. (<a href="https://github.com/boostorg/filesystem/pull/142">PR#142</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed handling of reparse points in <code><span class="identifier">canonical</span></code>
"                and <code><span class="identifier">read_symlink</span></code>
"                on Windows. This also affects other algorithms that involve <code><span class="identifier">canonical</span></code> and <code><span class="identifier">read_symlink</span></code>
"                in their implementation. (<a href="https://github.com/boostorg/filesystem/pull/100">PR#100</a>, <a href="https://github.com/boostorg/filesystem/issues/85">#85</a>, <a href="https://github.com/boostorg/filesystem/issues/99">#99</a>,
"                <a href="https://github.com/boostorg/filesystem/issues/123">#123</a>, <a href="https://github.com/boostorg/filesystem/issues/125">#125</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed that <code><span class="identifier">read_symlink</span></code>
"                on Windows could potentially fail or cause failures elsewhere with
"                a sharing violation error, if the same symlink was opened concurrently.
"                (<a href="https://github.com/boostorg/filesystem/issues/138">#138</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed that <code><span class="identifier">is_symlink</span><span class="special">(</span><span class="identifier">directory_entry</span><span class="special">)</span></code> would always return <code><span class="keyword">false</span></code>, even if the directory entry
"                actually referred to a symlink. (<a href="https://github.com/boostorg/filesystem/pull/148">PR#148</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added missing status inspection operation overloads for <code><span class="identifier">directory_entry</span></code> and <code><span class="identifier">error_code</span></code> (e.g. <code><span class="identifier">is_directory</span><span class="special">(</span><span class="identifier">directory_entry</span><span class="special">,</span>
"                <span class="identifier">error_code</span><span class="special">&amp;)</span></code>).
"                Removed incorrect <code><span class="keyword">noexcept</span></code>
"                specifications for the overloads not taking the <code><span class="identifier">error_code</span></code>
"                arguments.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">copy_file</span></code> implementation
"                has been updated to perform checks on the source and target files,
"                as required by C++20 ([fs.op.copy.file]/4.1). In particular, the
"                operation will fail if the source or target file is not a regular
"                file or the source and target paths identify the same file.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">copy_file</span></code> on POSIX
"                systems will now also copy the source file permissions to the target
"                file, if the target file is overwritten.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Added <code><span class="identifier">copy_file</span></code>
"                implementations based on <code><span class="identifier">sendfile</span></code>
"                and <code><span class="identifier">copy_file_range</span></code>
"                system calls on Linux, which may improve file copying performance,
"                especially on network filesystems.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>Deprecated:</strong> The <code><span class="identifier">copy_option</span></code>
"                enumeration that is used with the <code><span class="identifier">copy_file</span></code>
"                operation is deprecated. As a replacement, the new enum <code><span class="identifier">copy_options</span></code> (note the trailing
"                's') has been added. The new enum contains values similar to the
"                <code><span class="identifier">copy_options</span></code> enum
"                from C++20. The old enum values are mapped onto the new enum. The
"                old enum will be removed in a future release.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Added <code><span class="identifier">copy_options</span><span class="special">::</span><span class="identifier">skip_existing</span></code>
"                option, which allows <code><span class="identifier">copy_file</span></code>
"                operation to succeed without overwriting the target file, if it exists.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Added <code><span class="identifier">copy_options</span><span class="special">::</span><span class="identifier">update_existing</span></code>
"                option, which allows <code><span class="identifier">copy_file</span></code>
"                operation to conditionally overwrite the target file, if it exists,
"                if its last write time is older than that of the replacement file.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> <code><span class="identifier">copy_file</span></code>
"                now returns <code><span class="keyword">bool</span></code>, which
"                indicates whether the file was copied.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New, breaking change:</strong> <code><span class="identifier">copy</span></code> operation has been extended
"                and reworked to implement behavior specified in C++20 [fs.op.copy].
"                This includes support for <code><span class="identifier">copy_options</span><span class="special">::</span><span class="identifier">recursive</span></code>,
"                <code><span class="identifier">copy_options</span><span class="special">::</span><span class="identifier">copy_symlinks</span></code>, <code><span class="identifier">copy_options</span><span class="special">::</span><span class="identifier">skip_symlinks</span></code>,
"                <code><span class="identifier">copy_options</span><span class="special">::</span><span class="identifier">directories_only</span></code>, <code><span class="identifier">copy_options</span><span class="special">::</span><span class="identifier">create_symlinks</span></code> and <code><span class="identifier">copy_options</span><span class="special">::</span><span class="identifier">create_hard_links</span></code> options. The
"                operation performs additional checks based on the specified options.
"                Applying <code><span class="identifier">copy</span></code> to
"                a directory with default <code><span class="identifier">copy_options</span></code>
"                will now also copy files residing in that directory (but not nested
"                directories or files in those directories).
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Added <code><span class="identifier">create_directory</span></code>
"                overload taking two paths. The second path is a path to an existing
"                directory, which is used as a source of permission attributes to
"                use in the directory to create.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>Deprecated:</strong> <code><span class="identifier">copy_directory</span></code>
"                operation has been deprecated in favor of the new <code><span class="identifier">create_directory</span></code>
"                overload. Note that the two operations have reversed order of the
"                path arguments.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">equivalent</span></code> on POSIX
"                systems now returns the actual error code from the OS if one of the
"                paths does not resolve to a file. Previously the function would return
"                an error code of 1. (<a href="https://github.com/boostorg/filesystem/issues/141">#141</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">equivalent</span></code> no longer
"                considers file size and last modification time in order to test whether
"                the two paths refer to the same file. These checks could result in
"                a false negative if the file was modified during the <code><span class="identifier">equivalent</span></code> call.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Added <code><span class="identifier">absolute</span></code>
"                overloads taking <code><span class="identifier">error_code</span></code>
"                argument.
"              </div>
"            </li>
"            <li>
"              <div>
"                Operations that have <code><span class="identifier">current_path</span><span class="special">()</span></code> as the default value of their arguments
"                and also have an <code><span class="identifier">error_code</span></code>
"                argument will use the <code><span class="identifier">current_path</span><span class="special">(</span><span class="identifier">error_code</span><span class="special">&amp;</span> <span class="identifier">ec</span><span class="special">)</span></code> overload to obtain the current path,
"                so that its failure is reported via the <code><span class="identifier">error_code</span></code>
"                argument instead of an exception.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">space</span></code> now initializes
"                the <code><span class="identifier">space_info</span></code> structure
"                members to -1 values on error, as required by C++20 ([fs.op.space]/1).
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">space</span></code> on Windows
"                now accepts paths referring to arbitrary files, not only directories.
"                This is similar to POSIX systems and corresponds to the operation
"                description in C++20. (<a href="https://github.com/boostorg/filesystem/issues/73">#73</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Added implementation of <code><span class="identifier">temp_directory_path</span></code> for Windows
"                CE. (<a href="https://github.com/boostorg/filesystem/pull/25">PR#25</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Improved compatibility with
"                <a href="https://wasi.dev/">WASI</a> platform. (<a href="https://github.com/boostorg/filesystem/pull/144">PR#144</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Improved support for Embarcadero
"                compilers. (<a href="https://github.com/boostorg/filesystem/pull/130">PR#130</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Added implementations of <code><span class="identifier">unique_path</span></code> operation based on
"                <code><span class="identifier">getrandom</span></code> (Linux),
"                <code><span class="identifier">arc4random_buf</span></code> (OpenBSD/FreeBSD/CloudABI)
"                and BCrypt (Windows) system APIs.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>Deprecated:</strong> Auto-linking against
"                system libraries on Windows with MSVC-compatible compilers is deprecated
"                and will be removed in a future release. This affects users linking
"                against static library of Boost.Filesystem. Users are advised to
"                update their project build systems to either use a shared library
"                of Boost.Filesystem, or explicitly specify the dependencies of Boost.Filesystem
"                in the linker command line. Users of shared library of Boost.Filesystem
"                are not affected.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/flyweight/index.html">Flyweight</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Maintenance work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/format/">Format</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Correct allocator usage (fixes C++20 compilation). (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/720">PR#720</a> Additional R-tree constructors (thanks to
"                      Caian Benedicto).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Various improvements in buffer, set and relational operations.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Solved issues
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/709">#709</a> memcpy called for object with no trivial copy-assignment.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/721">#721</a> Compilation error in bgi::detail::rtree::visitors::insert.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/727">#727</a> MSVC warning: conditional expression is constant.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/700">PR#700</a> Missing cases for default strategies in distance
"                      algorithm.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/738">PR#738</a> Longitudes out of range in direct geodesic
"                      formulas.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/gil/">GIL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added
"                <ul>
"                  <li>
"                    <div>
"                      Added new constructor initializing <code><span class="identifier">any_image</span></code>
"                      from r-value reference to any image (<a href="https://github.com/boostorg/gil/pull/486">PR#486</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Implemented mechanism to reverse <code><span class="identifier">kernel_2d</span></code>
"                      (<a href="https://github.com/boostorg/gil/pull/489">PR#489</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed
"                <ul>
"                  <li>
"                    <div>
"                      BREAKING: Replace Boost.Variant with Boost.Variant2 (<a href="https://github.com/boostorg/gil/pull/474">PR#474</a>)
"                      which completes removal on uses of Boost.MPL (missing from
"                      Boost 1.72.0 change added <a href="https://github.com/boostorg/gil/pull/274">PR#274</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Use perfect forwarding from apply_operation to visit (<a href="https://github.com/boostorg/gil/pull/491">PR#491</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed
"                <ul>
"                  <li>
"                    <div>
"                      BREAKING: Removed dependency on Boost.Variant
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed
"                <ul>
"                  <li>
"                    <div>
"                      Fixed invalid conversion from RGB8 to CMYK32 due to overflow
"                      (<a href="https://github.com/boostorg/gil/pull/470">PR#470</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">image</span></code>
"                      constructor from other image (<a href="https://github.com/boostorg/gil/pull/477">PR#477</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed error <code><span class="identifier">plane_view_t</span></code>
"                      is not a class or namespace name (<a href="https://github.com/boostorg/gil/pull/481">PR#481</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed <code><span class="identifier">interleaved_view</span></code>
"                      factory using <code><span class="identifier">point</span><span class="special">&lt;</span><span class="identifier">std</span><span class="special">::</span><span class="identifier">ptrdiff_t</span><span class="special">&gt;</span></code> for dimension (<a href="https://github.com/boostorg/gil/pull/487">PR#487</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed documentation replacing uses MPL with MP11 in tutorial
"                      (<a href="https://github.com/boostorg/gil/pull/494">PR#494</a>).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixed missing header in <code><span class="identifier">numeric</span><span class="special">/</span><span class="identifier">kernel</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                      to make it self-contained (<a href="https://github.com/boostorg/gil/pull/502">PR#502</a>).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Acknowledgements
"                <ul>
"                  <li>
"                    <div>
"                      Samuel Debionne, Pranam Lashkari, Mateusz Loskot, Debabrata
"                      Mandal
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/heap/">Heap</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Correct destruction of top node in <code><span class="identifier">skew_heap</span></code>.
"                (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Correct and simplify allocator use. (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/integer/">Integer</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed compilation of <code><span class="identifier">gcd</span></code>
"                in C++20 mode with clang 10.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved support for Embarcadero compilers. (<a href="https://github.com/boostorg/integer/pull/21">PR#21</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/iterator/">Iterator</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">function_output_iterator</span><span class="special">.</span><span class="identifier">hpp</span></code> header is now deprecated. Users
"                should replace its inclusion with <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">iterator</span><span class="special">/</span><span class="identifier">function_output_iterator</span><span class="special">.</span><span class="identifier">hpp</span></code>.
"                (<a href="https://github.com/boostorg/iterator/pull/51">PR#51</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved support for Embarcadero compilers. (<a href="https://github.com/boostorg/iterator/pull/55">PR#55</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/lexical_cast/">LexicalCast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed warnings on missing <code><span class="identifier">override</span></code>
"                (thanks to EugeneZelenko <a href="https://github.com/boostorg/lexical_cast/issues/35">#35</a>, <a href="https://github.com/boostorg/lexical_cast/issues/34">#34</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixes for the the Embarcadero compilers (thanks to Edward Diener).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      The syslog sink backend now verifies the IP version of the
"                      local and target addresses set by user. The addresses must
"                      have the same IP version as was specified in the <code><span class="identifier">ip_version</span></code> named parameter
"                      on the sink backend construction (by default, IPv4 is assumed).
"                      When an address is obtained as a result of host name resolution,
"                      only addresses with matching IP version are considered. (<a href="https://github.com/boostorg/log/issues/119">#119</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                New Features:
"                <ul>
"                  <li>
"                    <div>
"                      Move constructors and assignment operators of various components
"                      were marked <code><span class="keyword">noexcept</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added a new <code><span class="identifier">range_manip</span></code>
"                      stream manipulator that can be used for outputting elements
"                      of a range, optionally separated by a delimiter.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added a new <code><span class="identifier">tuple_manip</span></code>
"                      stream manipulator that can be used for outputting elements
"                      of a tuple or any other heterogeneous sequence, optionally
"                      separated by a delimiter.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added a new <code><span class="identifier">optional_manip</span></code>
"                      stream manipulator that can be used for outputting optionally
"                      present values.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/mp11/">Mp11</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved compilation performance of <code><span class="identifier">mp_with_index</span><span class="special">&lt;</span><span class="identifier">N</span><span class="special">&gt;</span></code> for large <code><span class="identifier">N</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">tuple_transform</span></code>
"                (contributed by Hans Dembinski.)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <a href="/libs/multi_index/doc/tutorial/basics.html#node_handling">node
"                extraction and insertion</a> following the analogous interface
"                of associative containers as introduced in C++17. This feature has
"                also been extended to non key-based indices, in contrast to C++ standard
"                library sequence containers, which do not provide such functionality.
"              </div>
"            </li>
"            <li>
"              <div>
"                Clarified documentation on read/write key extractors (issue <a href="https://github.com/boostorg/multi_index/issues/32">#32</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/nowide/">Nowide</a>:</span>
"          <ul>
"            <li>
"              <div>
"                The library now requires a C++11-compliant compiler and stdlib
"              </div>
"            </li>
"            <li>
"              <div>
"                LFS: Add support for files &gt; 2 GB where the underlying system
"                supports it
"              </div>
"            </li>
"            <li>
"              <div>
"                Generic UTF conversion functions are now available in the <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">nowide</span><span class="special">::</span><span class="identifier">utf</span> <span class="keyword">namespace</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Add support for <code><span class="identifier">stat</span></code>
"                with UTF-8 paths
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/outcome/">Outcome</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Announcements:
"                <ul>
"                  <li>
"                    <div>
"                      The v2.1 branch is expected to be retired end of 2020, with
"                      the v2.2 branch becoming the default. You can use the future
"                      v2.2 branch now using <a href="https://github.com/ned14/outcome/tree/better_optimisation"><code><span class="identifier">better_optimisation</span></code></a>.
"                      This branch has a number of major breaking changes to Outcome
"                      v2.1, see the front page for details.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Enhancements:
"                <ul>
"                  <li>
"                    <div>
"                      BREAKING CHANGE <code><span class="keyword">void</span></code>
"                      results and outcomes no longer default construct types during
"                      explicit construction. Previously if you explicitly constructed
"                      a <code><span class="identifier">result</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code>
"                      from a non-errored <code><span class="identifier">result</span><span class="special">&lt;</span><span class="keyword">void</span><span class="special">&gt;</span></code>, it default constructed
"                      <code><span class="identifier">T</span></code>. This was
"                      found to cause unhelpful surprise, so it has been disabled.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      New macro <code><span class="identifier">OUTCOME_ENABLE_LEGACY_SUPPORT_FOR</span></code>.
"                      The macro <code><span class="identifier">OUTCOME_ENABLE_LEGACY_SUPPORT_FOR</span></code>
"                      can be used to enable aliasing of older naming and features
"                      to newer naming and features when using a newer version of
"                      Outcome.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Concepts now have snake case style naming instead of camel
"                      case style. When Outcome was first implemented, it was thought
"                      that C++ 20 concepts were going to have camel case style. This
"                      was changed before the C++ 20 release, and Outcome's concepts
"                      have been renamed similarly. This won't break any code in Outcome
"                      v2.1, as compatibility aliases are provided. However code compiled
"                      against Outcome v2.2 will need to be upgraded, unless <code><span class="identifier">OUTCOME_ENABLE_LEGACY_SUPPORT_FOR</span></code>
"                      is set to <code><span class="number">210</span></code> or
"                      lower.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Concepts now live in <code><span class="identifier">OUTCOME_V2_NAMESPACE</span><span class="special">::</span><span class="identifier">concepts</span></code>
"                      namespace. Previously concepts lived in the <code><span class="identifier">convert</span></code>
"                      namespace, now they live in their own namespace.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      New concepts <code><span class="identifier">basic_result</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code> and <code><span class="identifier">basic_outcome</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code> added. End users were finding
"                      an unhelpful gap in between <code><span class="identifier">is_basic_result</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code> and <code><span class="identifier">value_or_error</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code> where they wanted a concept
"                      that matched types which were <code><span class="identifier">basic_result</span></code>,
"                      but not exactly one of those. Concepts filling that gap were
"                      added.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Operation <code><span class="identifier">TRY</span></code>
"                      works differently from Outcome v2.2 onwards. This is a severely
"                      code breaking change which change the syntax of how one uses
"                      <code><span class="identifier">OUTCOME_TRY</span><span class="special">()</span></code>. A regular expression suitable
"                      for upgrading code can be found in the list of changes between
"                      Outcome v2.1 and v2.2.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/ned14/outcome/issues/224">#224</a>
"                      The clang Apple ships in Xcode 11.4 (currently the latest)
"                      has not been patched with the fixes to LLVM clang that fix
"                      <code><span class="keyword">noexcept</span><span class="special">(</span><span class="identifier">std</span><span class="special">::</span><span class="identifier">is_constructible</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">,</span>
"                      <span class="keyword">void</span><span class="special">&gt;)</span></code>
"                      failing to compile which I originally submitted years ago.
"                      So give up waiting on Apple to fix their clang, add a workaround
"                      to Outcome.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Spare storage could not be used from within no-value policy
"                      classes. Due to an obvious brain fart when writing the code
"                      at the time, the spare storage APIs had the wrong prototype
"                      which prevented them working from within policy classes. Sorry.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/poly_collection/">PolyCollection</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed internal ambiguity problem between <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">type_erasure</span><span class="special">::</span><span class="identifier">any</span></code>
"                and <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">any</span></code> (issue <a href="https://github.com/boostorg/poly_collection/issues/17">#17</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/smart_ptr/">SmartPtr</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">owner_equals</span></code>
"                to <code><span class="identifier">shared_ptr</span></code>, <code><span class="identifier">weak_ptr</span></code>, <code><span class="identifier">local_shared_ptr</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">owner_hash_value</span></code>
"                to <code><span class="identifier">shared_ptr</span></code>, <code><span class="identifier">weak_ptr</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">owner_equal_to</span></code>,
"                <code><span class="identifier">owner_hash</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">hash</span></code> specializations for <code><span class="identifier">shared_ptr</span></code>, <code><span class="identifier">local_shared_ptr</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">hash</span></code> support to, and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">hash</span></code>, <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">equal_to</span></code>
"                specializations for, <code><span class="identifier">weak_ptr</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed a build error when compiled with <code><span class="special">-</span><span class="identifier">fno</span><span class="special">-</span><span class="identifier">exceptions</span></code> (thanks to Jeremiah
"                Rodriguez <a href="https://github.com/boostorg/stacktrace/issues/91">#91</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/system/">System</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="keyword">operator</span> <span class="keyword">bool</span><span class="special">()</span></code> now returns <code><span class="identifier">failed</span><span class="special">()</span></code> instead of <code><span class="identifier">value</span><span class="special">()</span> <span class="special">!=</span> <span class="number">0</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_traits/">Type_Traits</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented <code><span class="identifier">conjunction</span></code>,
"                <code><span class="identifier">disjunction</span></code>, <code><span class="identifier">negation</span></code>, <code><span class="identifier">is_trivially_copyable</span></code>,
"                <code><span class="identifier">is_scoped_enum</span></code>, and
"                <code><span class="identifier">is_unscoped_enum</span></code>.
"                (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant/">Variant</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed warnings on missing <code><span class="identifier">override</span></code>
"                (thanks to EugeneZelenko <a href="https://github.com/boostorg/variant/issues/78">#78</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixes for the the Embarcadero compilers (thanks to Edward Diener
"                <a href="https://github.com/boostorg/variant/issues/79">#79</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Updated header locations to avoid warnings about using deprecated
"                headers (thanks to Andrey Semashev <a href="https://github.com/boostorg/variant/issues/80">#80</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant2/">Variant2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support for derived types in <code><span class="identifier">visit</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved compilation performance for many (hundreds of) alternatives.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for <code><span class="identifier">visit</span><span class="special">&lt;</span><span class="identifier">R</span><span class="special">&gt;</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/wave/">Wave</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implement C++20 features for variadics, including <code><span class="identifier">__VA_OPT__</span></code>
"                (<a href="https://github.com/boostorg/wave/pull/75">PR#75</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Implement <code><span class="identifier">__has_include</span></code>
"                (<a href="https://github.com/boostorg/wave/pull/102">PR#102</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Introduce new sample: <code><span class="identifier">check_macro_naming</span></code>,
"                useful with Boost itself (<a href="https://github.com/boostorg/wave/pull/97">PR#97</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix compilation issue caused by <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">allocator</span></code>
"                member removal in C++20 (<a href="https://github.com/boostorg/wave/pull/72">PR#72</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Repair Xpressive lexer and <code><span class="identifier">token_statistics</span></code>
"                sample (<a href="https://github.com/boostorg/wave/pull/79">PR#79</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Repair lexertl lexer (<a href="https://github.com/boostorg/wave/pull/78">PR#78</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Ensure hooks are run on predefined macros as well (<a href="https://github.com/boostorg/wave/pull/87">PR#87</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Various minor bug fixes
"              </div>
"            </li>
"            <li>
"              <div>
"                C++98/03 support is now deprecated and will be removed in 1.77
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/yap/">YAP</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed compilation errors for placeholders; they now work in the general
"                case, and in particular work with yap::print().
"              </div>
"            </li>
"            <li>
"              <div>
"                constexpr all the YAP.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix printing of correct value category in yap::print().
"              </div>
"            </li>
"            <li>
"              <div>
"                Doc clarification.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_74_0.updated_tools">
"    <h3><span class="link">Updated Tools</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/tools/boostbook/">Boostbook</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Change encoding of generated documentation from US-ASCII to UTF-8.
"                (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_74_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_74_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
"    </p>
"  </div>
"
-hash
"ea90c42fffb1a775f1efea4494252d71d8aabee1ce639d4d0e5f84b6bf4242d9
-id
"version_1_74_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: STLInterfaces. Updated Libraries: Asio, Atomic, Beast, Bimap,
"      Config, Core, DLL, Endian, Filesystem, Flyweight, Format, Geometry, GIL, Heap,
"      Integer, Iterator, LexicalCast, Log, Mp11, MultiIndex, Nowide, Outcome, PolyCollection,
"      Polygon, SmartPtr, Stacktrace, System, TypeTraits, Variant, Variant2, Wave,
"      YAP.
"
-title_xml
"Version 1.74.0
)
(feed/history/boost_1_75_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_75_0.known_issues">
"    <h3><span class="link">Known Issues</span></h3>
"    <p>
"      Boost.Operators is currently <strong>incompatible with C++20</strong>
"      compilers, which in some cases may manifest as an infinite recursion or infinite
"      loop in runtime when a comparison operator is called. The problem is caused
"      by the new operator rewriting behavior introduced in C++20. As a workaround,
"      users are advised to target C++17 or older C++ standard. More details can be
"      found in <a href="https://github.com/boostorg/utility/issues/65">#65</a>.
"    </p>
"  </div>
"  <div id="version_1_75_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/json/">JSON</a>:</span> JSON parsing, serialization,
"          and DOM in C++11, from Vinnie Falco and Krystian Stasiowski.
"          <ul>
"            <li>
"              <div>
"                Fast compilation requiring only C++11
"              </div>
"            </li>
"            <li>
"              <div>
"                Easy and safe modern API with allocator support
"              </div>
"            </li>
"            <li>
"              <div>
"                Compile without Boost, define <code><span class="identifier">BOOST_JSON_STANDALONE</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Optional header-only, without linking to a library
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/leaf/">LEAF</a>:</span> A lightweight error-handling
"          library for C++11, from Emil Dotchevski.
"          <ul>
"            <li>
"              <div>
"                Small single-header format, no dependencies.
"              </div>
"            </li>
"            <li>
"              <div>
"                Designed for maximum efficiency ("happy" path and "sad"
"                path).
"              </div>
"            </li>
"            <li>
"              <div>
"                No dynamic memory allocations, even with heavy payloads.
"              </div>
"            </li>
"            <li>
"              <div>
"                O(1) transport of arbitrary error types (independent of call stack
"                depth).
"              </div>
"            </li>
"            <li>
"              <div>
"                Can be used with or without exception handling.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/pfr/">PFR</a>:</span> Basic reflection without macro
"          or boilerplate code for user defined types, from Antony Polukhin.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_75_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Enabled support for UNIX domain sockets on Windows.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added executor-converting construction and assignment to <code><span class="identifier">ip</span><span class="special">::</span><span class="identifier">basic_resolver</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added compatibility between polymorphic executors and the (deprecated)
"                handler invocation hook.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">as_single</span></code>
"                completion token adapter.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for <code><span class="identifier">MSG_NOSIGNAL</span></code>
"                on more platforms by using <code><span class="identifier">_POSIX_VERSION</span></code>
"                to detect whether it is supported.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the ability to compile using libpthread on Windows.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added workarounds for the Intel C++ compiler.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added more support for detecting and optimising for handlers that
"                have no custom executor.
"              </div>
"            </li>
"            <li>
"              <div>
"                Reduced lock contention for timer cancellation on Windows.
"              </div>
"            </li>
"            <li>
"              <div>
"                Reinstated a previously removed null-pointer check, as it had a measurable
"                impact on performance.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed the <code><span class="identifier">executor</span></code>
"                concept to test for a const-qualified <code><span class="identifier">execute</span><span class="special">()</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">any_executor</span></code>
"                support for builds without RTTI support.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed the <code><span class="identifier">thread_pool</span></code>
"                unit test to work without RTTI support.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed C++20 coroutines compatibility with clang on Windows.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed some compatibility issues with Windows Runtime.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed shadow name warnings caused by addition of <code><span class="identifier">asio</span><span class="special">::</span><span class="identifier">query</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a "logical ‘or’ of equal expressions" warning
"                on linux.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a benign switch fallthrough warning.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added missing <code><span class="identifier">push</span><span class="special">/</span><span class="identifier">pop_options</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                includes.
"              </div>
"            </li>
"            <li>
"              <div>
"                Suppressed zero-as-null-pointer-constant warnings.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a comma-operator warning.
"              </div>
"            </li>
"            <li>
"              <div>
"                Updated the documentation to clarify when the <tt>select</tt>
"                reactor is used on Windows.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed potential ambiguity caused by <code><span class="identifier">any_executor</span></code>
"                comparisons and conversion.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added detection of non-experimental C++20 coroutines on MSVC 19.8.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compatibility with uClibc.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">strand</span><span class="special">&lt;&gt;</span></code>
"                adaptation of Networking TS executors when targeting older C++ versions
"                or less conformant compilers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Consult the <a href="/doc/libs/1_75_0/doc/html/boost_asio/history.html">Revision
"                History</a> for further details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Implemented SSE2 and SSE4.1 versions of address lookup algorithm,
"                which is used in the internal lock pool implementation. This may
"                improve performance of waiting and notifying operations in heavily
"                contended cases.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a possible compilation error on AArch64 targets caused by incorrect
"                instructions generated for bitwise (logical) operations with immediate
"                constants. (<a href="https://github.com/boostorg/atomic/issues/41">#41</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This update brings bug fixes and support for the <code><span class="identifier">BOOST_ASIO_ENBALE_HANDLER_TRACKING</span></code>
"                compile flag from Boost.Asio:
"              </div>
"            </li>
"            <li>
"              <div>
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the <a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast">Companies
"                and Individuals Using Beast</a> list.
"              </div>
"            </li>
"            <li>
"              <div>
"                See the full <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a> for a complete list of changes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/container/">Container</a>:</span>
"          <ul>
"            <li>
"              <div>
"                New <code>devector</code>
"                container.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bugs/issues:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/152">#152</a> Tree-based containers have troubles with move-only
"                      types.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/156">#156</a> Compile error with vector.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/pull/157">PR#157</a> Add missing include.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/159">#159</a>: pmr::monotonic_buffer_resource crashes on
"                      large single allocations.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/160">#160</a>: Usage of uses_allocator needs a remove_cvref_t.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/162">#162</a>: small_vector on MSVC x86 call-by-value crash.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/161">#161</a>: polymorphic_allocator(memory_resource*) non-standard
"                      extension causes headache.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/pull/163">PR#163</a>: container_rebind for small_vector with
"                      options.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/165">#165</a>: Link error with shared library and memory_resource
"                      inline members.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/pull/166">PR#166</a>: Fix encoding error in copyright headers.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/pull/167">PR#167</a>: error: the address of 'msg' will always
"                      evaluate as 'true' warning with GCC 4.4.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/169">#169</a>: flood of warnings building dlmalloc_ext_2_8_6.c
"                      on clang11.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/endian/">Endian</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">endian_arithmetic</span></code>
"                no longer inherits from <code><span class="identifier">endian_buffer</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                When <code><span class="identifier">BOOST_ENDIAN_NO_CTORS</span></code>
"                is defined, the unaligned <code><span class="identifier">endian_buffer</span></code>
"                and <code><span class="identifier">endian_arithmetic</span></code>
"                are C++03 PODs, to enable use of <code><span class="identifier">__attribute__</span><span class="special">((</span><span class="identifier">packed</span><span class="special">))</span></code>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>New:</strong> Added <code><span class="identifier">creation_time</span></code>
"                operation, which allows to obtain file creation time. (Inspired by
"                <a href="https://github.com/boostorg/filesystem/pull/134">PR#134</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                The returned value of <code><span class="identifier">last_write_time</span><span class="special">(</span><span class="identifier">p</span><span class="special">,</span> <span class="identifier">ec</span><span class="special">)</span></code> operation in case of failure has
"                been changed to a minimal value representable by <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">time_t</span></code>
"                instead of -1.
"              </div>
"            </li>
"            <li>
"              <div>
"                The returned value of <code><span class="identifier">hard_link_count</span><span class="special">(</span><span class="identifier">p</span><span class="special">,</span> <span class="identifier">ec</span><span class="special">)</span></code> operation in case of failure has
"                been changed to <code><span class="keyword">static_cast</span><span class="special">&lt;</span><span class="identifier">uintmax_t</span><span class="special">&gt;(-</span><span class="number">1</span><span class="special">)</span></code> instead of 0.
"              </div>
"            </li>
"            <li>
"              <div>
"                On POSIX systems, <code><span class="identifier">file_size</span></code>
"                will now indicate error code <code><span class="identifier">errc</span><span class="special">::</span><span class="identifier">function_not_supported</span></code>
"                if the path resolves to a non-regular file. Previously, <code><span class="identifier">errc</span><span class="special">::</span><span class="identifier">operation_not_permitted</span></code> was reported.
"              </div>
"            </li>
"            <li>
"              <div>
"                On Linux, many operations now use <code><span class="identifier">statx</span></code>
"                system call internally, when possible, which allows to reduce the
"                amount of information queried from the filesystem and potentially
"                improve performance. The <code><span class="identifier">statx</span></code>
"                system call was introduced in Linux kernel 4.11.
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed <code><span class="keyword">const</span></code>-qualification
"                from return types of some <code><span class="identifier">path</span></code>
"                methods. This could prevent move construction and move assignment
"                at the call site in some cases. (<a href="https://github.com/boostorg/filesystem/issues/160">#160</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                On OpenBSD 4.4 and newer, use <code><span class="identifier">statvfs</span></code>
"                system call to obtain filesystem space information. (Inspired by
"                <a href="https://github.com/boostorg/filesystem/pull/162">PR#162</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows, <code><span class="identifier">space</span></code>
"                now returns with an error if the provided path does not idendify
"                an existing file. (<a href="https://github.com/boostorg/filesystem/issues/167">#167</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                WARNING: Following the deprecation notice of C++03 issued with Boost
"                1.73, from now on the Boost.Geometry requires a capable C++14 compiler.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improvements
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/726">PR#726</a> Umbrella strategies for area, envelope, expand
"                      (undocumented for now).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/733">PR#733</a> Added example of adaptation of std::array&lt;&gt;
"                      to Point concept (thanks to Ben FrantzDale).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/745">PR#745</a> constexpr added in geometries and arithmetic.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/747">PR#747</a> Added optional traits::make (undocumented
"                      for now).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/748">PR#748</a> Modernized usage of type traits.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/759">PR#759</a> MPL_ASSERT replaced with standard static_assert.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/767">PR#767</a> Modernized usage of tuple.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Solved issues
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/716">#716</a> Dangling proxy references.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes
"                <ul>
"                  <li>
"                    <div>
"                      Various fixes in set operations and buffer.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/gil/">GIL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                BREAKING: In next release, we are going to drop support for GCC 5.
"                We may also change the required minimum C++ version from C++11 to
"                C++14.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/histogram/">Histogram</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This update brings
"                <ul>
"                  <li>
"                    <div>
"                      Bug-fixes for corner-cases
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Small documentation improvements
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Fixes for new warnings from latest compilers and when compiling
"                      against the C++20 standard
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See the full <a href="/libs/histogram/doc/html/histogram/history.html">Release
"                Notes</a> for a complete list of changes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/interprocess/">Interprocess</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/issues/127">#127</a>: static assertion failure with boost interprocess
"                      1.74 and basic_managed_shared_memory.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/intrusive/">Intrusive</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/intrusive/pull/48">PR#48</a>: MSVC "assignment within conditional"
"                      warning fix.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/intrusive/pull/49">PR#49</a>: Fix empty control statement warnings.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/intrusive/issues/52">#52</a>: Invalid casting in BOOST_INTRUSIVE_BSR_INTRINSIC.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Corrected the file counter that would be used in <code><span class="identifier">text_file_backend</span></code> when generating
"                      the target file name (based on the pattern set by <code><span class="identifier">set_target_file_name_pattern</span></code>
"                      method) when the log file is rotated. (<a href="https://github.com/boostorg/log/issues/125">#125</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Replaced a volatile version counter in <code><span class="identifier">basic_sink_frontend</span></code>
"                      with an atomic. (<a href="https://github.com/boostorg/log/issues/128">#128</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      In the <code><span class="identifier">asynchronous_sink</span></code>
"                      frontend, resolved a possible conflict between <code><span class="identifier">flush</span></code> and <code><span class="identifier">run</span></code>
"                      methods, if <code><span class="identifier">run</span></code>
"                      is called from a user's thread instead of the internal dedicated
"                      thread spawned by the frontend. (<a href="https://github.com/boostorg/log/issues/131">#131</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/move/">Move</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/move/issues/30">#30</a>: (void) C-cast is a non-portable way of suppressing
"                      compiler warnings.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/mp11/">Mp11</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_pairwise_fold</span></code>
"                (suggested by Barry Revzin)
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed <code><span class="identifier">mp_invoke</span></code>
"                (use <code><span class="identifier">mp_invoke_q</span></code>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/optional/">Optional</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">none</span></code> is <code><span class="keyword">constexpr</span></code>-declared.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <a href="https://github.com/boostorg/optional/issues/78">issue
"                #78</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/outcome/">Outcome</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Announcements:
"                <ul>
"                  <li>
"                    <div>
"                      After a year and three major Boost releases announcing this
"                      upcoming change, this is the FINAL RELEASE of the v2.1 branch.
"                      From Boost 1.76 onwards, the v2.2 branch becomes the default.
"                      This branch has a number of major breaking changes to Outcome
"                      v2.1, see the documentation for details.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Enhancements:
"                <ul>
"                  <li>
"                    <div>
"                      The ADL discovered event hooks have been replaced with policy-specified
"                      event hooks instead. This is due to brittleness (where hooks
"                      would quietly self-disable if somebody changed something),
"                      compiler bugs (a difference in compiler settings causes the
"                      wrong hooks, or some but not all hooks, to get discovered),
"                      and end user difficulty in using them at all. The policy-specified
"                      event hooks can be told to default to ADL discovered hooks
"                      for backwards compatibility: set <code><span class="identifier">OUTCOME_ENABLE_LEGACY_SUPPORT_FOR</span></code>
"                      to less than <code><span class="number">220</span></code>
"                      to enable emulation.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Improve configuring <code><span class="identifier">OUTCOME_GCC6_CONCEPT_BOOL</span></code>.
"                      Older GCCs had boolean based concepts syntax, whereas newer
"                      GCCs are standards conforming. However the precise logic of
"                      when to use legacy and conforming syntax was not well understood,
"                      which caused Outcome to fail to compile depending on what options
"                      you pass to GCC. The new logic always uses the legacy syntax
"                      if on GCC 8 or older, otherwise we use conforming syntax if
"                      and only if GCC is in C++ 20 mode or later. This hopefully
"                      will resolve the corner case build failures on GCC.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Boost.Outcome should now compile with <code><span class="identifier">BOOST_NO_EXCEPTIONS</span></code>
"                      defined. Thanks to Emil, maintainer of Boost.Exception, making
"                      a change for me, Boost.Outcome should now compile with C++
"                      exceptions globally disabled. You won't be able to use <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">exception_ptr</span></code> as it can't
"                      be included if C++ exceptions are globally disabled.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/ned14/outcome/issues/236">#236</a>
"                      In the Coroutine support the <code><span class="identifier">final_suspend</span><span class="special">()</span></code> was not <code><span class="keyword">noexcept</span></code>,
"                      despite being required to be so in the C++ 20 standard. This
"                      has been fixed, but only if your compiler implements <code><span class="identifier">noop_coroutine</span></code>. Additionally,
"                      if <code><span class="identifier">noop_coroutine</span></code>
"                      is available, we use the much more efficient coroutine handle
"                      returning variant of <code><span class="identifier">await_suspend</span><span class="special">()</span></code> which should significantly
"                      improve codegen and context switching performance.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/polygon/">Polygon</a>:</span>
"          <ul>
"            <li>
"              <div>
"                C++20 fixes for <code><span class="identifier">event_comparison_type</span></code>,
"                <code><span class="identifier">vertex_equality_predicate_type</span></code>,
"                and <code><span class="identifier">voronoi_predicates</span></code>.
"                (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/preprocessor/">Preprocessor</a>:</span>
"          <ul>
"            <li>
"              <div>
"                When variadic data is empty in C++20 mode with __VA_OPT__ support
"                the variadic size has been corrected to be 0. This also means that
"                in this C++20 mode it is now valid to convert to and from empty arrays
"                and lists and variadic data. The end-user can read the "C++20
"                Support For Variadic Macros" part of the "variadic macros"
"                topic for more information about empty variadic data in the library.
"              </div>
"            </li>
"            <li>
"              <div>
"                The macro BOOST_PP_IS_STANDARD() has been added for identifying if
"                the currently used preprocessor is a C++ standard conforming preprocessor.
"                A number of preprocessors which generally work correctly with the
"                library but need various internal workarounds, including the currently
"                default VC++ preprocessor, are not considered C++ standard conforming
"                preprocessors. However most preprocessors, including among others
"                gcc, clang, and the new but currently non-default VC++ preprocessor
"                in VS2019, are C++ standard conforming preprocessors.
"              </div>
"            </li>
"            <li>
"              <div>
"                For C++ standard conforming preprocessors a number of the limits
"                defined in the config/limits.hpp can now be changed to higher amounts
"                for a TU. The end-user should read the "limitations" topic
"                to understand how and which limits can be changed.
"              </div>
"            </li>
"            <li>
"              <div>
"                For C++ standard conforming preprocessors, in order to allow the
"                maximum number of FOR and WHILE iterations, the beginning 'r' and
"                'd' iteration numbers in the user-defined macros start at 1 and not
"                2, as it did in previous releases. This could be a breaking change
"                if these iteration numbers are used in the user-defined macros (
"                they probably would not be ), but the change was necessary to fix
"                some arcane bugs when dealing with numerical/logical operations with
"                maximum numbers as well to allow the user-defined macros to be called
"                the correct possible maximum number of times. For non-C++ conforming
"                preprocessors, this change was not made because those non-conforming
"                C++ preprocessors generally have limitations which disallow the maximum
"                number of looping constructs to be run, and it was felt not to introduce
"                a possible breaking change to those more fragile preprocessors would
"                be better. It was also felt that besides fixing some arcane preprocessor
"                bugs and providing the possible maximum number of user-defined macro
"                invocations, this change could be made because it has never been
"                documented what the starting 'r' and 'd' iteration numbers actually
"                are but only that these numbers are incremented for each iteration.
"              </div>
"            </li>
"            <li>
"              <div>
"                The library has been upgraded to assume variadic macro support for
"                any compiler working with the library. Ostensibly this means that
"                the library is now a C++11 on up library, yet most of the major compilers,
"                including gcc, clang, and VC++, also support variadic macros in C++98/C++03
"                mode as long as strict compliance to C++98/C++03 is not turned on
"                when using one of those compilers.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/rational/">Rational</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix Rational operators to not break under new C++20 <code><span class="keyword">operator</span><span class="special">==</span></code>
"                rewriting rules. (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/signals2/">Signals2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Correct C++ allocator model support to fix compilation in C++20 standards
"                mode. (Glen Fernandes)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/system/">System</a>:</span>
"          <ul>
"            <li>
"              <div>
"                The platform-specific headers <code><span class="identifier">windows_error</span><span class="special">.</span><span class="identifier">hpp</span></code>,
"                <code><span class="identifier">linux_error</span><span class="special">.</span><span class="identifier">hpp</span></code>, and <code><span class="identifier">cygwin_error</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                emit deprecation messages and are slated for removal.
"              </div>
"            </li>
"            <li>
"              <div>
"                The old names for <code><span class="identifier">generic_category</span><span class="special">()</span></code> and <code><span class="identifier">system_category</span><span class="special">()</span></code> emit deprecation messages and are
"                slated for removal.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">error_condition</span><span class="special">::</span><span class="identifier">failed</span></code> is deprecated and is slated
"                for removal. <code><span class="keyword">operator</span> <span class="keyword">bool</span><span class="special">()</span></code>
"                for <code><span class="identifier">error_condition</span></code>
"                has been reverted to its old meaning of <code><span class="identifier">value</span><span class="special">()</span> <span class="special">!=</span> <span class="number">0</span></code>. This is done for compatibility with
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">error_condition</span></code> as the next release
"                is expected to improve interoperability with <code><span class="special">&lt;</span><span class="identifier">system_error</span><span class="special">&gt;</span></code>
"                even further. <em>Note that this does not
"                affect</em> <code><span class="identifier">error_code</span><span class="special">::</span><span class="identifier">failed</span></code>,
"                which is still alive and well.
"              </div>
"            </li>
"            <li>
"              <div>
"                The overload of <code><span class="identifier">error_condition</span><span class="special">::</span><span class="identifier">message</span></code>
"                that takes a buffer is deprecated and is slated for removal, for
"                the same reasons. <em>Note that this does
"                not affect</em> <code><span class="identifier">error_code</span><span class="special">::</span><span class="identifier">message</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/numeric/ublas/">uBLAS</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Correct C++ allocator model support to fix compilation in C++20 standards
"                mode. (Glen Fernandes and Conrad Poelman)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/vmd/">VMD</a>:</span>
"          <ul>
"            <li>
"              <div>
"                The VMD number parsing has been upgraded to support the ability for
"                the end-user to change the number limits in the Preprocessor library.
"              </div>
"            </li>
"            <li>
"              <div>
"                The macro BOOST_VMD_IS_GENERAL_IDENTIFIER has been added to support
"                the parsing of input that represents a preprocessor token which matches
"                the VMD identifier syntax, without having to register the identifier
"                as a specific identifier.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/wave/">Wave</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added new C++20 tokens, including the spaceship operator &lt;=&gt;
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/wave/issues/94">#94</a>: fix incorrect behavior of __LINE__ and __FILE__
"                      under rescanning
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_75_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0,
"                9.0.0, 10.0.0, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0, 11.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_75_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
"    </p>
"  </div>
"
-hash
"0b39578575619e3a8bb773a4e1433b7b944921aeda428a6660d369d3ada77718
-id
"version_1_75_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: JSON, LEAF, PFR. Updated Libraries: Asio, Atomic, Beast, Container,
"      Endian, Filesystem, GIL, Histogram, Interprocess, Intrusive, Log, Move, Mp11,
"      Optional, Outcome, Polygon, Preprocessor, Rational, Signal2, System, uBLAS,
"      VMD, Wave.
"
-title_xml
"Version 1.75.0
)
(feed/history/boost_1_76_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_76_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          No new libraries
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_76_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">ip</span><span class="special">::</span><span class="identifier">scope_id_type</span></code> type alias.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">ip</span><span class="special">::</span><span class="identifier">port_type</span></code> type alias.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">hash</span></code> specialisations for IP addresses.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">hash</span></code> specialisations for <code><span class="identifier">ip</span><span class="special">::</span><span class="identifier">basic_endpoint</span><span class="special">&lt;&gt;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Refactored SFINAE usage to improve compile times.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added friendship support to customisation points, and made most customisations
"                private.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed <code><span class="identifier">any_io_executor</span></code>
"                to a "strong typedef"-style class.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">as_single</span></code>
"                to work with handler hook deprecation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Ensured pthread condition variable attributes are cleaned up on all
"                platforms.
"              </div>
"            </li>
"            <li>
"              <div>
"                Clarified thread safety notes on sockets and descriptors.
"              </div>
"            </li>
"            <li>
"              <div>
"                Ensured <code><span class="identifier">errno</span></code> is
"                not overwritten if <code><span class="identifier">socket</span><span class="special">()</span></code> fails on macOS/FreeBSD.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed work tracking for <code><span class="identifier">io_context</span></code>
"                and <code><span class="identifier">thread_pool</span></code> executors
"                when move-assigned.
"              </div>
"            </li>
"            <li>
"              <div>
"                Ensured internal <code><span class="identifier">call_stack</span></code>
"                objects are accessed only from implementation files.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed I/O object move-assignment to ensure the executor is left in
"                a valid state.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed detection of compiler support for defaulted template argument
"                on functions with MSVC.
"              </div>
"            </li>
"            <li>
"              <div>
"                Prevented the <code><span class="identifier">blocking</span><span class="special">.</span><span class="identifier">always</span></code>
"                property from being used with <code><span class="identifier">strand</span><span class="special">&lt;&gt;</span></code>, as it did not produce the
"                correct semantics.
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed deprecated file <tt>asio/impl/src.cpp</tt>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed compilation with MSVC for ARM. (<a href="https://github.com/boostorg/atomic/pull/49">PR#49</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This update brings minor bug fixes and revamped CI reporting.
"              </div>
"            </li>
"            <li>
"              <div>
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the <a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast">Companies
"                and Individuals Using Beast</a> list.
"              </div>
"            </li>
"            <li>
"              <div>
"                See the full <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a> for a complete list of changes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/bind/">Bind</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Add support for using the standard C++11 placeholders with <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">bind</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Update <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">apply</span></code> to use variadic templates
"                and perfect forwarding.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/continer/">Container</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added [[no-discard]] attribute in all containers to catch bugs related
"                to unused return values.
"              </div>
"            </li>
"            <li>
"              <div>
"                Replaced default standard exception classes with Boost.Container
"                own classes, reducing considerably the included files overhead. Example:
"                in MSVC 19 <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">container</span><span class="special">/</span><span class="identifier">vector</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                preprocessed file size reduces from 1,5MB to 930KB. If you still
"                want to use standard exception classes, you can define <code><span class="identifier">BOOST_CONTAINER_USE_STD_EXCEPTIONS</span></code>
"                before using any Boost.Container class.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bugs/issues:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/102">GitHub
"                      #102: <em>"flat_map::insert ambiguous with initializer
"                      list &amp; pairs that need to convert"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/139">GitHub
"                      #139: <em>"flat_map merge and iterators"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/141">GitHub
"                      #141: <em>"small_vector does not propagate no throw
"                      properties of move operation of contained type"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/164">GitHub
"                      #164: <em>"Compile error when using <code><span class="identifier">pmr</span><span class="special">::</span><span class="identifier">map</span></code> with a <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">pair</span></code>; works when using a
"                      <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">tuple</span></code>"</em></a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/container/issues/171">GitHub
"                      #171: <em>"deque::clear() uses undefined behaviour"</em></a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Add implicit conversion between compatible reference wrappers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">core</span><span class="special">/</span><span class="identifier">cmath</span><span class="special">.</span><span class="identifier">hpp</span></code>, a portable implementation
"                of the floating point classification functions from <code><span class="special">&lt;</span><span class="identifier">cmath</span><span class="special">&gt;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">core</span><span class="special">/</span><span class="identifier">bit</span><span class="special">.</span><span class="identifier">hpp</span></code>, a portable implementation
"                of the C++20 standard header <code><span class="special">&lt;</span><span class="identifier">bit</span><span class="special">&gt;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <code><span class="identifier">BOOST_TEST_EQ</span></code>,
"                <code><span class="identifier">BOOST_TEST_NE</span></code> for
"                character types under C++20.
"              </div>
"            </li>
"            <li>
"              <div>
"                Revise allocator access utilities (now support VS2013, and no workarounds
"                use <code><span class="identifier">allocator_traits</span></code>.)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>BREAKING CHANGE</strong>: <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">dll</span><span class="special">::</span><span class="identifier">import</span></code>
"                was renamed to <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">dll</span><span class="special">::</span><span class="identifier">import_symbol</span></code>
"                to avoid collision with C++20 <code><span class="identifier">import</span></code>
"                keyword.
"              </div>
"            </li>
"            <li>
"              <div>
"                Updated docs, including FAQ section.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Updated compatibility with WASI platform. (<a href="https://github.com/boostorg/filesystem/pull/169">PR#169</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed an exception being thrown by <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">remove_filename</span></code>
"                if the path is "////". (<a href="https://github.com/boostorg/filesystem/issues/176">#176</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">create_directories</span></code>
"                disregarding errors from file status query operations issued internally.
"                This could result in incorrect error codes returned by <code><span class="identifier">create_directories</span></code>. (<a href="https://github.com/boostorg/filesystem/issues/182">#182</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/670">PR#670</a> New IOs to_wkt() and from_wkt() (thanks to
"                      Baidyanath Kundu).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/756">PR#756</a> Non cartesian and robust convex hulls.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/768">PR#768</a> Umbrella strategies for relops, setops, index,
"                      buffer and more (undocumented for now).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/797">PR#797</a> New azimuth() algorithm.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/801">PR#801</a> Improved accuracy in geographic area computations.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/820">PR#820</a> Parameter scale added to svg_mapper.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/808">PR#808</a> Fixed compilation error with rtree serialization
"                      enabled (thanks to Tristan Carel).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/815">PR#815</a> Fixed issue in buffer().
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Various fixes in set operations and buffer.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Breaking changes
"                <ul>
"                  <li>
"                    <div>
"                      Removed strategy convex_hull::graham_andrew.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/gil/">GIL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                BREAKING: In next release, we are going to drop support for GCC 5.
"                We will also change the required minimum C++ version from C++11 to
"                C++14.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/histogram/">Histogram</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This release contains critical fixes, please check that your results
"                are not affected.
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/histogram/doc/html/histogram/history.html">Release
"                Notes</a> for details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/intrusive/">Intrusive</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Reduced compile-time dependencies:
"                <ul>
"                  <li>
"                    <div>
"                      <code><span class="identifier">linear_slist_algorithms</span></code>
"                      use a simple node_ptr instead of std::pair on return.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">list</span></code>/<code><span class="identifier">slist</span></code> use <code><span class="keyword">operator</span>
"                      <span class="special">&lt;</span></code>/<code><span class="keyword">operator</span>
"                      <span class="special">==</span></code> instead of <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">equal_to</span></code>/<code><span class="identifier">std</span><span class="special">::</span><span class="identifier">less</span></code>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <a href="https://github.com/boostorg/intrusive/issues/54">GitHub
"                #54: <em>set.rbegin() looks like O(log(N))</em></a>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/interprocess/">Interprocess</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="keyword">wchar_t</span></code> API support
"                for named resources in operating systems that offer native wide character
"                API (e.g. Windows). The following classes were updated with <code><span class="keyword">wchar_t</span></code> name support:
"                <ul>
"                  <li>
"                    <div>
"                      <code><span class="identifier">file_mapping</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">managed_mapped_file</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">managed_shared_memory</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">managed_windows_shared_memory</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">shared_memory_object</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">windows_shared_memory_object</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">file_lock</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">named_condition</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">named_condition_any</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">named_mutex</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">named_recursive_mutex</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">named_semaphore</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">named_sharable_mutex</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">named_upgradable_mutex</span></code>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <code><span class="identifier">message_queue</span></code>
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">BOOST_INTERPROCESS_FORCE_NATIVE_EMULATION</span></code>
"                macro option to disable the use of generic emulation code for process
"                shared synchronization primitives instead of native POSIX or Winapi
"                functions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/issues/76">GitHub
"                      #76 (<em>"Cygwin compilation errors"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/83">GitHub
"                      #83 (<em>"Add BOOST_INTERPROCESS_FORCE_NATIVE_EMULATION
"                      option"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/92">GitHub
"                      #92 (<em>"bufferstream: Correct MSVC compilation
"                      warning"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/pull/106">GitHub
"                      #106 (<em>"Use fallocate on truncate_file"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/issues/120">GitHub
"                      #120 (<em>"segment_manager customization"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/issues/122">GitHub
"                      #122 (<em>"Mark constructors/assignment/swap noexcept
"                      where possible"</em>)</a>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/interprocess/issues/126">GitHub
"                      #126 (<em>"_ReadWriteBarrier is deprecated warning
"                      when compiling with clang-cl.exe"</em>)</a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/json/">JSON</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://cppalliance.org/pdf/C%20Plus%20Plus%20Alliance%20-%20Boost%20JSON%20Security%20Assessment%202020%20-%20Assessment%20Report%20-%2020210317.pdf">Security
"                Report</a> from Bishop Fox.
"              </div>
"            </li>
"            <li>
"              <div>
"                (<a href="https://github.com/boostorg/json/issues/481">#481</a>) Refactored <code><span class="identifier">value_from</span></code>
"                implementation; user customizations are now always preferred over
"                library-provided overloads.
"              </div>
"            </li>
"            <li>
"              <div>
"                (<a href="https://github.com/boostorg/json/issues/484">#484</a>) Fix imprecise parsing for some floating point numbers.
"              </div>
"            </li>
"            <li>
"              <div>
"                (<a href="https://github.com/boostorg/json/issues/485">#485</a>) Fix link errors in standalone mode, when used alongside
"                Boost.
"              </div>
"            </li>
"            <li>
"              <div>
"                (<a href="https://github.com/boostorg/json/issues/497">#497</a>) Fix Boost.Build builds on GCC 4.8.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/lexical_cast/">LexicalCast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Dropped dependency on Boost.Math (thanks to Peter Dimov <a href="https://github.com/boostorg/lexical_cast/issues/37">#37</a>,
"                <a href="https://github.com/boostorg/lexical_cast/issues/39">#39</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixes for the CI and coverage (thanks to Sam Darwin from "The
"                C++ Alliance" <a href="https://github.com/boostorg/lexical_cast/issues/38">#38</a>, <a href="https://github.com/boostorg/lexical_cast/issues/42">#42</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Corrected a formal race condition in the thread-safe log record
"                      queue implementation used in the <code><span class="identifier">unbounded_fifo_queue</span></code>
"                      policy of the <code><span class="identifier">asynchronous_sink</span></code>
"                      frontend. The race could be detected by TSAN, but it was not
"                      a real problem on most current CPU architectures and compilers.
"                      (<a href="https://github.com/boostorg/log/issues/139">#139</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      When copying a logger with a channel attribute (e.g. <code><span class="identifier">channel_logger</span></code>), the channel
"                      attribute is now deep-copied from the original logger. This
"                      means that modifying the channel in the new logger will no
"                      longer affect the original logger.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Replaced the use of <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">allocator</span><span class="special">&lt;</span><span class="keyword">void</span><span class="special">&gt;</span></code> in template parameters
"                      with a new tag type <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">log</span><span class="special">::</span><span class="identifier">use_std_allocator</span></code>
"                      to silence libc++ warnings about the former being deprecated
"                      in C++17 and later. The tag indicates that the instantiated
"                      template should be using a specialization of <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">allocator</span></code> internally to allocate
"                      dynamic memory, so the change has no functional effect. (<a href="https://github.com/boostorg/log/issues/141">#141</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Boost.Log no longer defines <code><span class="identifier">__MSVCRT_VERSION__</span></code>
"                      macro on MinGW and MinGW-w64. Defining this macro caused incompatibility
"                      with UCRT, which is available as an option in recent MinGW-w64.
"                      (<a href="https://github.com/boostorg/log/pull/149">PR#149</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Breaking Change:</strong> C++03 support is
"                now removed, a C++11 or later conformant compiler is now required
"                to use this library.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <span class="link">Z-test</span>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added execution policy support to univariate and bivariate statistics:
"                enables parallel execution (requires C++17 and <code><span class="special">&lt;</span><span class="identifier">execution</span><span class="special">&gt;</span></code>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Big update/improvement on CI testing.
"              </div>
"            </li>
"            <li>
"              <div>
"                Bivariate statistics now have integer support.
"              </div>
"            </li>
"            <li>
"              <div>
"                T-Test now has integer support.
"              </div>
"            </li>
"            <li>
"              <div>
"                Linear regression now has integer support.
"              </div>
"            </li>
"            <li>
"              <div>
"                Correct PDF of the beta distribution at the endpoints.
"              </div>
"            </li>
"            <li>
"              <div>
"                Correct use of Stirling's approximation in certain multiprecision
"                cases, fixes <a href="https://github.com/boostorg/math/issues/396">#396</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Eliminate -Wimplicit-int-float-conversion on clang.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix some constexpr issues in quaternion/octonion.
"              </div>
"            </li>
"            <li>
"              <div>
"                Minor performance fix to tanh_sinh integration.
"              </div>
"            </li>
"            <li>
"              <div>
"                Update hypergeometric functions internal scaling to allow for 64-bit
"                (long long) exponents with multiprecision types.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/move/">Move</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <a href="https://github.com/boostorg/move/issues/35">Git Issue
"                #35: <em>"New nothrow move traits are incomplete"</em></a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multiprecision/">Multiprecision</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>BREAKING CHANGE</strong>: Massive refactoring
"                and code simplification makes C++11 an absolute requirement.
"              </div>
"            </li>
"            <li>
"              <div>
"                Use BOOST_TRY/CATCH in headers so code can be used in exception-free
"                environments.
"              </div>
"            </li>
"            <li>
"              <div>
"                Correct corner case in pow, fixes <a href="https://github.com/boostorg/multiprecision/issues/277">#277</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Correct exception type thrown to match docs in lsb/msb: fixes <a href="https://github.com/boostorg/multiprecision/issues/257">#257</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Allow moves and operators between related but different types (ie
"                types with the same allocator), fixes <a href="https://github.com/boostorg/multiprecision/issues/278">#278</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/nowide/">Nowide</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix discarding of characters for text file streams when seek or sync
"                functions are used and newlines were converted (e.g. on Windows)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix potential use-after-free bug when reusing (via <code><span class="identifier">open</span></code>) a file stream that has been
"                closed
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix potential invalid memory access when using a file stream that
"                has been moved or swapped to where the source had a put-back character
"                or was set to unbuffered mode
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix compatibility with ucrt runtime by not defining <code><span class="identifier">__MSVCRT_VERSION__</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Known issues: Read performance for text files is degraded. Binary
"                files and writing is unaffected.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/optional/">Optional</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed MSVC warning C4702.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/outcome/">Outcome</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Announcements:
"                <ul>
"                  <li>
"                    <div>
"                      BREAKING CHANGE: After a year and three major Boost releases
"                      announcing this upcoming change, this is the FIRST RELEASE
"                      of the v2.2 branch. This branch has a number of major breaking
"                      changes to the Outcome v2.1 which shipped in Boost 1.75 and
"                      earlier, see the documentation for details.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Enhancements:
"                <ul>
"                  <li>
"                    <div>
"                      VS2019.8 changed how to enable Coroutines, which caused Outcome
"                      to not compile on that compiler.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      If on C++ 20, we now use C++ 20 <code><span class="special">[[</span><span class="identifier">likely</span><span class="special">]]</span></code>
"                      instead of compiler-specific markup to indicate when TRY has
"                      likely success or failure.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      BREAKING CHANGE: Previously the value of <code><span class="identifier">spare_storage</span><span class="special">(</span><span class="keyword">const</span>
"                      <span class="identifier">basic_result</span><span class="special">|</span><span class="identifier">basic_outcome</span> <span class="special">*)</span>
"                      <span class="keyword">noexcept</span></code> was not propagated
"                      over <code><span class="identifier">BOOST_OUTCOME_TRY</span></code>,
"                      which causes things like stack backtraces captured at the point
"                      of construction of an errored result to get dropped at every
"                      <code><span class="identifier">TRY</span></code> point.
"                      This has been fixed by adding an optional <code><span class="identifier">spare_storage</span></code>
"                      to <code><span class="identifier">success_type</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code> and <code><span class="identifier">failure_type</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code>, as well as to <code><span class="keyword">auto</span> <span class="identifier">success</span><span class="special">(</span><span class="identifier">T</span>
"                      <span class="special">&amp;&amp;,</span> <span class="special">...)</span></code>
"                      and <code><span class="keyword">auto</span> <span class="identifier">failure</span><span class="special">(</span><span class="identifier">T</span>
"                      <span class="special">&amp;&amp;,</span> <span class="special">...)</span></code>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Boost.Outcome should now compile with <code><span class="identifier">BOOST_NO_EXCEPTIONS</span></code>
"                      defined. Thanks to Emil, maintainer of Boost.Exception, making
"                      a change for me, Boost.Outcome should now compile with C++
"                      exceptions globally disabled. You won't be able to use <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">exception_ptr</span></code> as it can't
"                      be included if C++ exceptions are globally disabled.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      BREAKING CHANGE <a href="https://github.com/ned14/outcome/issues/244">#244</a>
"                      It came as a shock to learn that <code><span class="identifier">BOOST_OUTCOME_TRY</span></code>
"                      had been broken since the inception of this library for certain
"                      corner case code, which required a breaking change in how TRY
"                      works. See <a href="https://boostorg.github.io/outcome/changelog.html">the
"                      changelog in the documentation for more detail</a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/parameter/">Parameter</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added a workaround for MSVC 2015 code miscompilation when an rvalue
"                was used as a default value of a named parameter of a function. (<a href="https://github.com/boostorg/parameter/pull/109">PR#109</a>,
"                <a href="https://github.com/boostorg/log/issues/132">#132</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/pfr/">PFR</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed reflection of types with missing <code><span class="keyword">const</span></code>
"                in SFINAE expressions in template constructor. Now reflection of
"                aggregates with <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">optional</span><span class="special">&lt;</span><span class="identifier">std</span><span class="special">::</span><span class="identifier">chrono</span><span class="special">::</span><span class="identifier">duration</span><span class="special">&lt;???&gt;&gt;</span></code> fields works on any
"                Standard Library implementation, even if LWG3050 is not fixed.
"              </div>
"            </li>
"            <li>
"              <div>
"                Comparison functions are now <code><span class="keyword">constexpr</span></code>
"                <a href="https://github.com/boostorg/pfr/issues/52">#52</a>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed numerous typos in docs (thanks to Phil Miller <a href="https://github.com/boostorg/pfr/issues/63">#63</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/poly_collection/">PolyCollection</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Worked around <a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95888">GCC
"                bug</a> affecting GCC versions 9.3-10.2 (issue <a href="https://github.com/boostorg/poly_collection/issues/20">#20</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/predef/">Predef</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Version 1.13
"              </div>
"            </li>
"            <li>
"              <div>
"                Add <code><span class="identifier">ARCH_PPC_64</span></code> predef.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <code><span class="identifier">ARCH_WORD_BITS</span><span class="special">*</span></code> redefinition warnings/errors.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add <code><span class="identifier">ARCH_E2K</span></code>, Elbrus
"                2000, architecture from Konstantin Ivlev.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix not handling recent C++ version that go above 10.x version.
"              </div>
"            </li>
"            <li>
"              <div>
"                Version 1.12
"              </div>
"            </li>
"            <li>
"              <div>
"                Switch to using the endian.h header on OpenBSD. (Brad Smith)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix not handling recent versions of stdcxx that go above version
"                9.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix including sub-BSD OS headers directly causing redef warnings.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add CI testing of direct inclusion of all headers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add CI testing on FreeBSD for clang and gcc.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add <code><span class="identifier">WORD_BITS</span></code> set
"                of predefs to detect the architecture word size. Initial implementation
"                inspired by submission from Mikhail Komarov.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add CI testing for Cygwin 32 and 64.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/property_tree/">PropertyTree</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Property Tree has a new maintainer.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix usage of deprecated Boost.Bind features.
"              </div>
"            </li>
"            <li>
"              <div>
"                Link to Wikipedia fixed.
"              </div>
"            </li>
"            <li>
"              <div>
"                Use BOOST_OVERRIDE to fix GCC warnings.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add extensive CI testing.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/regex/">Regex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Regex is now header only except in C++03 mode.
"              </div>
"            </li>
"            <li>
"              <div>
"                Support for C++03 is now deprecated.
"              </div>
"            </li>
"            <li>
"              <div>
"                The library can now be used "standalone" without the rest
"                of Boost being present.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stacktrace/">Stacktrace</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Better support for pre-C++11 builds on clang <a href="https://github.com/boostorg/stacktrace/issues/102">#102</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Bigger warning for <strong>do not use boost::stacktrace::stacktrace
"                in signal handlers</strong> <a href="https://github.com/boostorg/stacktrace/issues/71">#71</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/type_traits/">TypeTraits</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix for Visual Studio managed code projects.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant2/">Variant2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved generated code for the double buffered case.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_76_0.updated_tools">
"    <h3><span class="link">Updated Tools</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/tools/build/">Build</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Includes release of <a href="/tools/build/doc/html/#_version_4_4_1">B2
"                version 4.4.1</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_76_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 4.0.1, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0,
"                9.0.0, 10.0.0, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0, 11.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++0x: 3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.4.7
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Intel, C++14: 18.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++1z: 9.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++2a: 10.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++0x: 4.6.4
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          FreeBSD:
"          <ul>
"            <li>
"              <div>
"                Clang: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 4.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++1z: 4.0.0
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_76_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
"    </p>
"  </div>
"
-hash
"9aae6fca33ee0cfdb3e550eb3562cbbde556c3448d93a239f1f354c4070b3136
-id
"version_1_76_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      Updated Libraries: Asio, Atomic, Beast, Bind, Container, Core, DLL, Filesystem,
"      GIL, Intrusive, Interprocess, JSON, LexicalCast, Log, Math, Move, Multiprecision,
"      Nowide, Optional, Outcome, Parameter, PFR, PolyCollection, Predef, PropertyTree,
"      Regex, StackTrace, TypeTraits, Variant2.
"
-title_xml
"Version 1.76.0
)
(feed/history/boost_1_77_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_77_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/describe/">Describe</a>:</span> A C++14 reflection
"          library, from Peter Dimov. Provides macros for describing enumerators and
"          struct/class members, and primitives for querying this information.
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/lambda2/">Lambda2</a>:</span> A C++14, dependency-free,
"          single header lambda library, from Peter Dimov. Allows simple function
"          objects to be constructed via expressions such as <code><span class="identifier">_1</span>
"          <span class="special">+</span> <span class="number">5</span></code>,
"          <code><span class="identifier">_1</span> <span class="special">%</span>
"          <span class="number">2</span> <span class="special">==</span> <span class="number">0</span></code>, <code><span class="identifier">_1</span>
"          <span class="special">&gt;</span> <span class="identifier">_2</span></code>,
"          or <code><span class="identifier">_1</span> <span class="special">==</span>
"          <span class="char">' '</span> <span class="special">||</span> <span class="identifier">_1</span> <span class="special">==</span> <span class="char">'\t'</span></code>.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_77_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/any/">Any</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">anys</span><span class="special">::</span><span class="identifier">basic_any</span></code> - a data type with customizable
"                Small Object Optimization whose instances can hold instances of any
"                type that satisfies ValueType requirements (many thanks to Ruslan
"                Arutyunyan @rarutyun). If you are not sure that you really need it,
"                then use <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">any</span></code> instead.
"              </div>
"            </li>
"            <li>
"              <div>
"                Started using GithubActions CI for additional testing
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support for cancellation of individual asynchronous operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <code><span class="identifier">associator</span></code>
"                trait, used to generically forward associators.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed all asynchronous operations implemented in Asio to invoke
"                their completion handlers as rvalue references.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for asynchronous operations with multiple completion
"                signatures.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="keyword">operator</span><span class="special">&amp;&amp;</span></code>
"                and <code><span class="keyword">operator</span><span class="special">||</span></code>
"                for <code><span class="identifier">awaitable</span><span class="special">&lt;&gt;</span></code>,
"                to allow coroutines to be trivially awaited in parallel.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">as_tuple</span></code>
"                completion token adapter.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">append</span></code>
"                completion token adapter.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">prepend</span></code>
"                completion token adapter.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">deferred</span></code>
"                completion token, whicih allows deferred execution of asynchronous
"                operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">parallel_group</span></code>
"                class and <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">make_parallel_group</span></code>
"                function.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">promise</span></code>,
"                which allows eager execution and synchronisation of asynchronous
"                operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">coro</span></code>
"                class template, a C++20 coroutine primitive with the ability to combine
"                both asynchronous waiting (<code><span class="identifier">co_await</span></code>)
"                and yielding (<code><span class="identifier">co_yield</span></code>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added move assignment to <code><span class="identifier">ssl</span><span class="special">::</span><span class="identifier">stream</span><span class="special">&lt;&gt;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed <code><span class="identifier">co_spawn</span></code>
"                to <code><span class="identifier">dispatch</span></code> the coroutine's
"                initial step to the executor.
"              </div>
"            </li>
"            <li>
"              <div>
"                Enabled additional optimisations for <code><span class="identifier">any_executor</span></code>
"                and <code><span class="identifier">any_io_executor</span></code>
"                when used with asynchronous operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <code><span class="identifier">nodiscard</span></code>
"                attribute to <code><span class="identifier">awaitable</span><span class="special">&lt;&gt;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Increased the number of cached slots in the default recycling allocator.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed the default allocator behaviour to respect alignment requirements,
"                to support over-aligned types.
"              </div>
"            </li>
"            <li>
"              <div>
"                Ensured the result strings are always initialised in reverse name
"                resolution.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed recursive template instantiation issues in <code><span class="identifier">use_awaitable_t</span><span class="special">::</span><span class="identifier">executor_with_default</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed the <code><span class="identifier">any_io_executor</span></code>
"                equality operators to correctly return a result based on the target
"                executor.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">strand</span><span class="special">&lt;&gt;</span></code>
"                to avoid using a potentially moved-from executor.
"              </div>
"            </li>
"            <li>
"              <div>
"                Ensured <tt>gcc</tt> tests are not used for <tt>clang</tt>
"                when detecting compiler features.
"              </div>
"            </li>
"            <li>
"              <div>
"                Disabled coroutines support for the <tt>clang</tt> shipped
"                with MSVC.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compatibility with recent LibreSSL when <code><span class="identifier">OPENSSL_NO_SSL_INTERN</span></code>
"                is defined.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">posix</span><span class="special">::</span><span class="identifier">basic_stream_descriptor</span></code> move operations
"                to work with non-defaulted executors.
"              </div>
"            </li>
"            <li>
"              <div>
"                Consult the <a href="/doc/libs/1_77_0/doc/html/boost_asio/history.html">Revision
"                History</a> for further details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">make_atomic_ref</span></code>
"                and <code><span class="identifier">make_ipc_atomic_ref</span></code>
"                factory functions for constructing atomic reference objects.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added C++17 template argument deduction guides for <code><span class="identifier">atomic_ref</span></code> and <code><span class="identifier">ipc_atomic_ref</span></code>
"                to allow omitting template arguments when they can be deduced from
"                constructor arguments.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This maintenance update brings minor bug fixes and updated CI reporting.
"              </div>
"            </li>
"            <li>
"              <div>
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the <a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast">Companies
"                and Individuals Using Beast</a> list.
"              </div>
"            </li>
"            <li>
"              <div>
"                See the full <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a> for a complete list of changes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/conversion/">Conversion</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">implicit_cast</span></code> is now <code><span class="keyword">constexpr</span></code> (<a href="https://github.com/boostorg/conversion/issues/25">#25</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed broken links (<a href="https://github.com/boostorg/conversion/pull/23">PR#23</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Started using GithubActions CI for additional testing
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">core</span><span class="special">/</span><span class="identifier">uncaught_exceptions</span><span class="special">.</span><span class="identifier">hpp</span></code> has been modified for compatibility
"                with Mac OS 10.4 and older. (<a href="https://github.com/boostorg/core/pull/92">PR#92</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                More runtime checks for malformed ELFs in <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">dll</span><span class="special">::</span><span class="identifier">library_info</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                In <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">dll</span><span class="special">::</span><span class="identifier">library_info</span></code> use info from <code><span class="special">.</span><span class="identifier">dynsym</span></code>
"                ELF section if <code><span class="special">.</span><span class="identifier">symtab</span></code>
"                is empty or missing
"              </div>
"            </li>
"            <li>
"              <div>
"                List protected ELF symbols in <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">dll</span><span class="special">::</span><span class="identifier">library_info</span></code>
"                as they are available for import (<a href="https://github.com/boostorg/dll/issues/50">#50</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Remove unneeded convert from <code><span class="keyword">wchar_t</span></code>
"                to char on POSIX environment, thanks to Vladislav Shchapov (<a href="https://github.com/boostorg/dll/pull/49">PR#49</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Started using GithubAction CI for additional testing
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Introducing Boost.Filesystem v4.</strong>
"                This new version of the library removes all deprecated features of
"                v3 and also makes a number of breaking API changes intended to make
"                Boost.Filesystem more compatible with std::filesystem introduced
"                in C++17. The differences are described in the release notes and
"                documentation using <strong>v3</strong> and <strong>v4</strong> tags and are also summarised in a separate
"                section. Users can select Boost.Filesystem version by defining <code><span class="identifier">BOOST_FILESYSTEM_VERSION</span></code> macro
"                to either 3 or 4 when compiling their code. There is no need to separately
"                compile Boost.Filesystem for each library version - a single binary
"                supports both v3 and v4. Users should avoid using both v3 and v4
"                in the same application as this can lead to subtle bugs. Currently,
"                v3 is the default. In a future release v4 will become the default,
"                and eventually v3 will be removed. v4 is functional, but it is still
"                a work in progress and there may be breaking API changes in the future.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>v4:</strong> <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">filename</span></code>,
"                <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">stem</span></code> and <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">extension</span></code>
"                no longer consider root name or root directory of the path as a filename
"                if the path only consists of those components. For example, on Windows
"                <code><span class="identifier">path</span><span class="special">(</span><span class="string">"C:"</span><span class="special">).</span><span class="identifier">filename</span><span class="special">()</span></code>
"                used to return "C:" and <code><span class="identifier">path</span><span class="special">(</span><span class="string">"C:\\"</span><span class="special">).</span><span class="identifier">filename</span><span class="special">()</span></code> used to return "\" and
"                both will return an empty path now. (<a href="https://github.com/boostorg/filesystem/issues/88">#88</a>, <a href="https://github.com/boostorg/filesystem/issues/194">#194</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>v4:</strong> <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">stem</span></code>
"                and <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">extension</span></code> no longer treat a filename
"                that starts with a dot and has no other dots as an extension. Filenames
"                starting with a dot are commonly treated as filenames with an empty
"                extension. The leading dot is used to indicate a hidden file on most
"                UNIX-like systems. (<a href="https://github.com/boostorg/filesystem/issues/88">#88</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Improved support for various
"                path prefixes on Windows. Added support for local device prefix ("\\.\")
"                and experimental support for NT path prefix ("\??\"). The
"                prefixes will be included in the root name of a path. Note that using
"                the prefixes with Boost.Filesystem v3 can lead to surprising results
"                (e.g. <code><span class="identifier">path</span><span class="special">(</span><span class="string">"\\\\.\\"</span><span class="special">).</span><span class="identifier">stem</span><span class="special">()</span>
"                <span class="special">==</span> <span class="string">"\\\\"</span></code>).
"                It is recommended to use the prefixes only with Boost.Filesystem
"                v4.
"              </div>
"            </li>
"            <li>
"              <div>
"                Reworked <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">lexically_normal</span></code> implementation
"                to eliminate some cases of duplicate dot (".") elements
"                in the normalized paths.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Added runtime detection of
"                the <code><span class="identifier">statx</span></code> and <code><span class="identifier">getrandom</span></code> system calls on Linux.
"                This can be useful if the syscall is present at compile time but
"                fails with <code><span class="identifier">ENOSYS</span></code>
"                at run time (for example, in Docker containers that restrict the
"                syscall, even if available on the host). (<a href="https://github.com/boostorg/filesystem/issues/172">#172</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Added support for disabling
"                usage of various system APIs at library build time. This can be useful
"                when a certain API is detected as present by the library configuration
"                scripts but must not be used for some reason (for example, when runtime
"                detection does not work on the target system). See the description
"                of configuration macros in the library documentationfor for more
"                details.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Added <code><span class="identifier">copy_options</span><span class="special">::</span><span class="identifier">synchronize_data</span></code>
"                and <code><span class="identifier">copy_options</span><span class="special">::</span><span class="identifier">synchronize</span></code>
"                options for the <code><span class="identifier">copy_file</span></code>
"                operation. These options allow to synchronize the written data and
"                attributes with the permanent storage. These options are expensive
"                in terms of performance, but allow to ensure reliability of the copied
"                data. Note that <code><span class="identifier">copy_file</span></code>
"                performed implicit data synchronization on POSIX systems since Boost.Filesystem
"                1.74.0. This release adds support for more platforms and disables
"                data synchronization by default while allowing the caller to explicitly
"                request it. (<a href="https://github.com/boostorg/filesystem/issues/186">#186</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added handling of <code><span class="identifier">EINTR</span></code>
"                error code on POSIX systems for some system calls issued internally.
"                In particular, <code><span class="identifier">EINTR</span></code>
"                could have been ignored on <code><span class="identifier">close</span></code>,
"                which on HP-UX would result in a leaked file descriptor.
"              </div>
"            </li>
"            <li>
"              <div>
"                In the <code><span class="identifier">copy_file</span></code>
"                implementations based on Linux <code><span class="identifier">sendfile</span></code>
"                and <code><span class="identifier">copy_file_range</span></code>
"                system calls, added handling of error codes indicating that a particular
"                filesystem does not support the system call and fall back to the
"                generic <code><span class="identifier">read</span></code>/<code><span class="identifier">write</span></code> loop. This should fix <code><span class="identifier">copy_file</span></code> failing on <a href="https://www.ecryptfs.org/">eCryptFS</a>
"                and possibly other filesystems. (<a href="https://github.com/boostorg/filesystem/issues/184">#184</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                The <code><span class="identifier">copy_file_range</span></code>
"                system call is now used since Linux kernel 4.5, whereas previously
"                it was only enabled since 5.3. The <code><span class="identifier">copy_file</span></code>
"                implementation will fall back to <code><span class="identifier">sendfile</span></code>
"                or <code><span class="identifier">read</span></code>/<code><span class="identifier">write</span></code> loop if <code><span class="identifier">copy_file_range</span></code>
"                fails to copy a given file across filesystems.
"              </div>
"            </li>
"            <li>
"              <div>
"                The <code><span class="identifier">copy_file</span></code> implementations
"                based on Linux <code><span class="identifier">sendfile</span></code>
"                and <code><span class="identifier">copy_file_range</span></code>
"                system calls will not be used on filesystems that are known to contain
"                files with generated content. These system calls are incompatible
"                with such files, and copying them would result in zero-sized files.
"                The generic <code><span class="identifier">read</span></code>/<code><span class="identifier">write</span></code> loop will be used instead.
"                Currently, the blacklisted filesystems are: procfs, sysfs, tracefs
"                and debugfs.
"              </div>
"            </li>
"            <li>
"              <div>
"                In the <code><span class="identifier">copy_file</span></code>
"                implementation based on <code><span class="identifier">read</span></code>/<code><span class="identifier">write</span></code> loop, increased the maximum
"                size of the buffer used for temporary storage and take into account
"                the target filesystem block size for more optimal performance.
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows CE, calling <code><span class="identifier">current_path</span></code>
"                to obtain the current path for a process will now fail with an error
"                instead of returning successfully with a root path. This platform
"                does not support current directory. Changing the current path was
"                already failing similarly in previous releases of Boost.Filesystem.
"              </div>
"            </li>
"            <li>
"              <div>
"                In <code><span class="identifier">canonical</span></code>, fixed
"                the check for a symlink referencing a directory above root, if an
"                earlier symlink was resolved to an absolute path with a different
"                root from the original path.
"              </div>
"            </li>
"            <li>
"              <div>
"                In <code><span class="identifier">canonical</span></code>, added
"                a limit for the maximum number of symlinks that can be resolved during
"                the call. The limit is currently at least 40 symlinks.
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows, <code><span class="identifier">canonical</span></code>
"                and <code><span class="identifier">weakly_canonical</span></code>
"                will now use <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">preferred_separator</span></code>
"                for the root directory separator in the resulting paths. This fixes
"                "file not found" errors caused by Windows API not handling
"                generic separators in UNC paths and paths that start with the Win32
"                filesystem prefix ("\\?\"). (<a href="https://github.com/boostorg/filesystem/issues/87">#87</a>, <a href="https://github.com/boostorg/filesystem/issues/187">#187</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>New:</strong> Added <code><span class="identifier">weakly_canonical</span></code>
"                overloads taking <code><span class="identifier">base</span></code>
"                path as an argument.
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows, <code><span class="identifier">weakly_canonical</span></code>
"                no longer fails with an error if the input path contains elements
"                that do not exist in the filesystem but are cancelled by a subsequent
"                dot-dot ("..") element. For example, <code><span class="identifier">weakly_canonical</span><span class="special">(</span><span class="string">"C:\\a\\.."</span><span class="special">)</span></code> would previously fail if "C:\a"
"                directory did not exist. (<a href="https://github.com/boostorg/filesystem/issues/201">#201</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                In <code><span class="identifier">read_symlink</span></code> on
"                Windows, corrected reparse point handling. The operation would return
"                an empty path for some mount points (for example, created by <a href="https://www.box.com/">Box</a> cloud storage driver) and
"                directory junction points that had empty print names. The new implementation
"                now parses substitute name of the reparse point and attempts to reconstruct
"                a Win32 path from it. (<a href="https://github.com/boostorg/filesystem/issues/187">#187</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows, file streams provided in <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">filesystem</span><span class="special">/</span><span class="identifier">fstream</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                will use wide character paths on libc++ versions 7.0 and higher,
"                when the standard library supports opening files with wide character
"                paths. (<a href="https://github.com/boostorg/filesystem/issues/181">#181</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows, creating symlinks should no longer require elevated privileges,
"                if Windows is configured in <a href="https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development">Developer
"                mode</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                With some compilers, global objects used internally in Boost.Filesystem
"                are now destroyed after user's global destructors are called. This
"                allows to call Boost.Filesystem methods during the program termination
"                stage. In particular, this concerns the path locale that is used
"                for character code conversion and can be installed by calling <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">imbue</span></code>. The supported compilers
"                include MSVC, GCC and Clang, as well as other compilers that support
"                customizing program initialization order through <code><span class="preprocessor">#pragma</span>
"                <span class="identifier">section</span></code> (for MSVC-compatible
"                compilers) or <code><span class="identifier">__attribute__</span>
"                <span class="special">((</span><span class="identifier">init_priority</span><span class="special">))</span></code> (for GCC-compatible compilers).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/812">PR#812</a> Umbrella strategies for distance and comparable_distance
"                      (undocumented for now).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/840">PR#840</a> Umbrella strategies for various algorithms
"                      (undocumented for now).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/850">PR#850</a> Introduced DynamicGeometry and GeometryCollection
"                      concepts and support in some algorithms (undocumented for now).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/855">PR#855</a> Various improvements related to strategies.
"                      Default strategies are now included with algorithms.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Solved issues
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/865">#865</a> Exception thrown in rtree serialization.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/439">#439</a> Invalid box spherical area computation.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/838">#838</a> Invalid result of union_().
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/851">#851</a> Invalid geographic disjoint segment/box result.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/861">#861</a> Invalid result of intersection().
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/832">PR#832</a> Fixed box spherical and geographic area computation.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/853">PR#853</a> Fixed geographic disjoint segment/box.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/866">PR#866</a> Fixed serialization of rtree containing lesser
"                      number of elements in root node than minimum.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/886">PR#886</a> Fixed knn rtree query bug causing it to be
"                      slow for big k.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Various fixes in set operations and buffer.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/json/">JSON</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">value_to</span></code> supports
"                <code><span class="identifier">TupleLike</span></code> types.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">value_to</span></code> and <code><span class="identifier">value_from</span></code> support <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">array</span></code> and similar types.
"              </div>
"            </li>
"            <li>
"              <div>
"                Implicit conversion operator from <code><span class="identifier">string</span></code>
"                to <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">string_view</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">hash</span></code> specializations for json types.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed allocation errors in <code><span class="identifier">object</span></code>
"                and <code><span class="identifier">key_value_pair</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed crash when constructing <code><span class="identifier">array</span></code>
"                from a pair of iterators that form an empty range.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/lexical_cast/">LexicalCast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed assignment to an int of a floating point value that is out
"                of representable range for int.
"              </div>
"            </li>
"            <li>
"              <div>
"                Started using GithubActions CI for additional testing
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed compilation for riscv32 target. (<a href="https://github.com/boostorg/log/pull/150">PR#150</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/mp11/">Mp11</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">mp_intersperse</span></code>,
"                <code><span class="identifier">mp_split</span></code>, <code><span class="identifier">mp_join</span></code>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Maintenance work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/nowide/">Nowide</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Allow for usage of <code><span class="identifier">iostream</span></code>
"                classes before <code><span class="identifier">main</span></code>
"                (best effort, works for most environments)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix initialization of <code><span class="identifier">rdbuf</span></code>
"                in <code><span class="identifier">cin</span><span class="special">/</span><span class="identifier">cout</span><span class="special">/</span><span class="identifier">cerr</span></code> for redirected input/output
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix corner case in <code><span class="identifier">cin</span><span class="special">::</span><span class="identifier">unget</span><span class="special">()</span></code> after using <code><span class="identifier">putback</span><span class="special">()</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix possibly delayed <code><span class="identifier">close</span></code>
"                of <code><span class="identifier">filebuf</span></code> after
"                move assignment
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve performance of <code><span class="identifier">utf8_codecvt</span></code>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/pfr/">PFR</a>:</span>
"          <ul>
"            <li>
"              <div>
"                A MurMur Hash based implementation of hash_combine() is now used
"                to reduce collisions count and improve quality of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">pfr</span><span class="special">::</span><span class="identifier">hash_value</span><span class="special">()</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Visual Studio 2017 now supported in C++14 mode (thanks to Denis Mikhailov
"                aka @denzor200)
"              </div>
"            </li>
"            <li>
"              <div>
"                Issues found by inspect tool were fixed
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed some warnings, including removal of extra semicolons in include/boost/pfr/detail/fields_count.hpp
"                (<a href="https://github.com/boostorg/pfr/issues/72">#72</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a compile time assert for inherited types (thanks to Denis
"                Mikhailov aka @denzor200)
"              </div>
"            </li>
"            <li>
"              <div>
"                Reflection of aggregates with non movable fields is now possible
"                if guaranteed copy elision is on
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed spelling issues
"              </div>
"            </li>
"            <li>
"              <div>
"                Started using GithubActions CI for additional testing
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/property_tree/">PropertyTree</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This is a maintenance release.
"              </div>
"            </li>
"            <li>
"              <div>
"                Extend compiler coverage in CI.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix Boost compatibility for CMakeLists.txt.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/system/">System</a>:</span>
"          <ul>
"            <li>
"              <div>
"                The conversion operator from <code><span class="identifier">error_category</span></code>
"                to <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">error_category</span></code> has been improved
"                and no longer requires <code><span class="special">&lt;</span><span class="identifier">map</span><span class="special">&gt;</span></code>
"                or <code><span class="special">&lt;</span><span class="identifier">mutex</span><span class="special">&gt;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                The comparison operators of <code><span class="identifier">error_category</span></code>
"                are now inline friends instead of member functions (a side effect
"                of the previous change.)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">error_condition</span></code> now
"                defers calling <code><span class="identifier">generic_category</span><span class="special">()</span></code> to avoid instantiating the object
"                until it's actually needed.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">error_condition</span><span class="special">::</span><span class="identifier">failed</span></code> and <code><span class="identifier">error_condition</span><span class="special">::</span><span class="identifier">message</span></code>
"                have been undeprecated, and <code><span class="keyword">operator</span>
"                <span class="keyword">bool</span><span class="special">()</span></code>
"                now once again returns <code><span class="identifier">failed</span><span class="special">()</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                The system category now doesn't call <code><span class="identifier">generic_category</span><span class="special">()</span></code>, to avoid instantiating the object.
"              </div>
"            </li>
"            <li>
"              <div>
"                The return value of <code><span class="identifier">default_error_condition</span></code>
"                changes in some cases into an <code><span class="identifier">error_condition</span></code>
"                from the generic category, instead of from the system category. This
"                happens on POSIX when the input <code><span class="identifier">error_code</span></code>
"                is from the system category and does not correspond to any <code><span class="identifier">errc_t</span></code> value.
"              </div>
"            </li>
"            <li>
"              <div>
"                The interoperability of <code><span class="identifier">error_code</span></code>
"                and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">error_code</span></code> has been improved substantially.
"                It is now possible to construct <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">system</span><span class="special">::</span><span class="identifier">error_code</span></code>
"                from <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">error_code</span></code>, and it's possible to
"                pass <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">system</span><span class="special">::</span><span class="identifier">error_code</span></code> to functions taking
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">error_code</span><span class="special">&amp;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                A stream insertion operator for <code><span class="identifier">error_condition</span></code>
"                has been added.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/uuid/">Uuid</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">to_chars</span></code> for
"                writing uuid strings without allocating (<a href="https://github.com/boostorg/uuid/pull/116">PR#116</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_77_0.updated_tools">
"    <h3><span class="link">Updated Tools</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/tools/build/">Build</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Includes release of <a href="/tools/build/doc/html/#_version_4_6_1">B2
"                version 4.6.1</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_77_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.4, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++20: 11.0.0, 12.0.0, 13.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.6.3, 11
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 11
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++20: 8.0.1, 9.1.0, 10, 11
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 11.0.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 11.0.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 11.0.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 11.0.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++20: 11.0.3
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_77_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
"    </p>
"  </div>
"
-hash
"9fad5e8475ed049b4073b1c6f3579bab22c4bea06cc33cc0c28c5d39c5b1277d
-id
"version_1_77_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: Describe, Lambda2. Updated Libraries: Any, Asio, Atomic, Beast,
"      Conversion, Core, DLL, Filesystem, JSON, LexicalCast, Log, Mp11, MultiIndex,
"      Nowide, PFR, PropertyTree, System, UUID.
"
-title_xml
"Version 1.77.0
)
(feed/history/boost_1_78_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_78_0.known_issues">
"    <h3><span class="link">Known Issues</span></h3>
"    <p>
"      These are patches from library authors which were found too late to be fixed
"      in the release.
"    </p>
"    <ul>
"      <li>
"        <div>
"          Boost.Build silently skips installation of library headers and binaries
"          in some cases, see <a href="https://github.com/bfgroup/b2/issues/104">#104</a>.
"          <ul>
"            <li>
"              <div>
"                Fixed in <a href="https://github.com/bfgroup/b2/pull/113">PR#113</a>,
"                <a href="/patches/1_78_0/0001-b2-fix-install.patch">patch</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Boost.Atomic fails to build when targeting UWP, see <a href="https://github.com/boostorg/atomic/issues/54">#54</a>. <a href="/patches/1_78_0/0002-atomic-fix-uwp-build.patch">Patch</a>.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_78_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          No new libraries.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_78_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added an io_uring backend that may optionally be used for all I/O
"                objects, including sockets, timers, and posix descriptors.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for files, with new new classes for stream-oriented
"                and random-access files. This feature currently supports I/O completion
"                ports on Windows, and io_uring on Linux.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for portable pipes on POSIX and Windows (when I/O completion
"                ports are available).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for registered buffers, which are optimised when using
"                the io_uring backend.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added experimental support for channels, that may be used to send
"                and queue completions as messages.
"              </div>
"            </li>
"            <li>
"              <div>
"                Implemented improvements to <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">coro</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Disabled <code><span class="identifier">aligned_alloc</span></code>
"                on <tt>clang</tt> when using an MSVC runtime.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed to use a faster implementation for <code><span class="identifier">ip</span><span class="special">::</span><span class="identifier">network_v4</span><span class="special">::</span><span class="identifier">canonical</span><span class="special">()</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added template specialisations for common uses to improve compile
"                time.
"              </div>
"            </li>
"            <li>
"              <div>
"                Reduced the size of <code><span class="identifier">io_context</span></code>
"                executors to a single pointer.
"              </div>
"            </li>
"            <li>
"              <div>
"                Increased the small object buffer size for <code><span class="identifier">execution</span><span class="special">::</span><span class="identifier">any_executor</span></code>
"                and <code><span class="identifier">any_io_executor</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed multi-signature handling when variadic templates are disabled.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compatibility with new versions of <tt>gcc</tt> and
"                <tt>clang</tt>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compilation on Solaris.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed defence against Qt-defined macros when building with MSVC.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved error messages emitted by <code><span class="identifier">ssl</span></code>
"                facilities.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">bind_executor</span></code>
"                compatibility with completion tokens.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed build errors when <code><span class="identifier">BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT</span></code>
"                is defined.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added missing move assignment operator to <code><span class="identifier">awaitable</span><span class="special">&lt;&gt;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed an access violation when using coroutines with MSVC, due to
"                incorrect alignment of allocated memory.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a cleanup issue in <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">parallel_group</span></code>
"                that occured when the execution context was shut down with parallel
"                operations still pending.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added clarifications to the documentation on concurrency hints.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added documentation on error handling techniques for C++20 coroutines.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed various warnings.
"              </div>
"            </li>
"            <li>
"              <div>
"                Consult the <a href="/doc/libs/1_78_0/doc/html/boost_asio/history.html">Revision
"                History</a> for further details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/assert/">Assert</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">source_location</span><span class="special">::</span><span class="identifier">to_string</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Use process-local futex operations on Android for non-IPC waiting
"                and notifying operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for Linux targets that only define <code><span class="identifier">SYS_futex_time64</span></code>
"                syscall, such as riscv32.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a workaround for incorrect result of <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">alignment_of</span></code>
"                on clang 8 for 64-bit types on 32-bit x86 targets.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a ulock backend for waiting and notifying operations on Darwin
"                systems since Mac OS 10.12, iOS 10.0, tvOS 10.0 or watchOS 3.0.
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows, corrected discrepancy between <tt><em>atomic-type</em>::always_has_native_wait_notify</tt>
"                and the corresponding capability macros when targeting Windows 8
"                or later. The library will now directly use <code><span class="identifier">WaitOnAddress</span></code>
"                and related APIs from public headers and therefore require user to
"                link with <code><span class="identifier">synchronization</span><span class="special">.</span><span class="identifier">lib</span></code>
"                if the user requires Windows 8 or later by defining <code><span class="identifier">BOOST_USE_WINAPI_VERSION</span></code>, <code><span class="identifier">_WIN32_WINNT</span></code> or similar macros.
"                The library is linked automatically on compilers that support auto-linking
"                (e.g. MSVC).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for types with padding bits, except unions, on compilers
"                that provide a way to clear the padding bits. This feature is supported
"                by gcc 11 and MSVC 14.2 (compiler version 19.27) and newer, as well
"                as other compilers supporting similar intrinsics. On compilers that
"                don't allow to clear the padding bits, types with padding are still
"                generally not supported with the exception of 80-bit <code><span class="keyword">long</span> <span class="keyword">double</span></code>
"                on x86 targets. A new <code><span class="identifier">BOOST_ATOMIC_NO_CLEAR_PADDING</span></code>
"                capability macro is defined to indicate when clearing the padding
"                is not supported.
"              </div>
"            </li>
"            <li>
"              <div>
"                Initializing constructors of <code><span class="identifier">atomic_ref</span></code>
"                and <code><span class="identifier">ipc_atomic_ref</span></code>
"                no longer use atomic instructions to clear the padding bits in the
"                referenced object. This reduces the cost of the atomic reference
"                construction.
"              </div>
"            </li>
"            <li>
"              <div>
"                Initializing constructors of <code><span class="identifier">atomic</span></code>
"                and <code><span class="identifier">ipc_atomic</span></code> are
"                now <code><span class="keyword">constexpr</span></code> for enums,
"                classes and floating point types. For classes and floating point
"                types, the constructors are <code><span class="keyword">constexpr</span></code>
"                if the compiler supports <code><span class="keyword">constexpr</span></code>
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">bit_cast</span></code>, the type has no padding
"                bytes and no padding is required to implement native atomic operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                In accordance with C++20, default constructors of <code><span class="identifier">atomic</span></code>
"                and <code><span class="identifier">ipc_atomic</span></code> now
"                perform value initialization of the contained object. For types without
"                a user-defined default constructor, this means the default-constructed
"                atomic will be zero-initialized.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a workaround for compilation error on AIX caused by the assembler
"                tool not supporting numeric labels. (<a href="https://github.com/boostorg/atomic/pull/50">PR#50</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a workaround for compilation error with Visual Studio 2015
"                prior to Update 3. (<a href="https://github.com/boostorg/atomic/issues/52">#52</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/doc/html/atomic/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                This maintenance update brings minor bug fixes and updated CI reporting.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed security vulnerability CVE-2016-9840 in zlib implementation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed WebSocket permessage_deflate implementation. This should result
"                in an increase in compression performance when using Beast WebSockets.
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed the test stream and test framework's dependency on RTTI.
"                You can now use our handy test stream to check your embedded asynchronous
"                communications code!
"              </div>
"            </li>
"            <li>
"              <div>
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the <a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast">Companies
"                and Individuals Using Beast</a> list.
"              </div>
"            </li>
"            <li>
"              <div>
"                See the full <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a> for a complete list of changes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added a generic implementation to <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">core</span><span class="special">/</span><span class="identifier">cmath</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code>,
"                enabled when <code><span class="identifier">BOOST_CORE_USE_GENERIC_CMATH</span></code>
"                is defined or when the platform does not provide the necessary facilities
"                in <code><span class="special">&lt;</span><span class="identifier">cmath</span><span class="special">&gt;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">core</span><span class="special">::</span><span class="identifier">type_name</span></code>, a utility function that
"                returns the name of a type as a string.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">span</span></code>, a C++11 implementation of
"                C++20's <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">span</span></code> (Glen Fernandes).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/describe/">Describe</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">has_describe_enumerators</span></code>,
"                <code><span class="identifier">has_describe_bases</span></code>,
"                <code><span class="identifier">has_describe_members</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">enum_to_string</span></code>,
"                <code><span class="identifier">enum_from_string</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added relational and stream insertion operators.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">descriptor_by_name</span></code>,
"                <code><span class="identifier">descriptor_by_pointer</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/dll/">DLL</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed missing #include, thanks to Denis Blank (<a href="https://github.com/boostorg/dll/pull/54">PR#54</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Dropped TravisCI in favor of GithubAction CI
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>v4:</strong> <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">filename</span></code>
"                and <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">iterator</span></code> no longer return an implicit
"                trailing dot (".") element if the path ends with a directory
"                separator. Instead, an empty path is returned, similar to C++17 std::filesystem.
"                This also affects other methods that are defined in terms of iterators
"                or filename, such as <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">stem</span></code>,
"                <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">compare</span></code> or <code><span class="identifier">lexicographical_compare</span></code>.
"                For example, <code><span class="identifier">path</span><span class="special">(</span><span class="string">"a/b/"</span><span class="special">)</span> <span class="special">==</span> <span class="identifier">path</span><span class="special">(</span><span class="string">"a/b/."</span><span class="special">)</span></code>
"                no longer holds true. (<a href="https://github.com/boostorg/filesystem/issues/193">#193</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>v4:</strong> <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">lexically_normal</span></code>
"                no longer produce a trailing dot (".") element and omits
"                a directory separator after a trailing dot-dot ("..") element
"                in the normalized paths.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>v4:</strong> <code><span class="identifier">path</span></code>
"                append operations now consider root name and root directory in the
"                appended path. If the appended path is absolute, or root name is
"                present and differs from the source path, the resulting path is equivalent
"                to the appended path. If root directory is present, the result is
"                the root directory and relative path rebased on top of the root name
"                of the source path. Otherwise, the behavior is similar to v3. (<a href="https://github.com/boostorg/filesystem/issues/214">#214</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">lexically_normal</span></code> now converts directory
"                separators to preferred separators in the root name of the normalized
"                paths.
"              </div>
"            </li>
"            <li>
"              <div>
"                Optimized overloads of <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">assign</span></code>,
"                <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">append</span></code>, <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">concat</span></code>
"                and the corresponding operators to avoid unnecessary path copying
"                and reduce the amount of code redundancy.
"              </div>
"            </li>
"            <li>
"              <div>
"                On POSIX systems, fixed <code><span class="identifier">absolute</span><span class="special">(</span><span class="identifier">p</span><span class="special">,</span> <span class="identifier">base</span><span class="special">)</span></code> returning a path with root name
"                <code><span class="identifier">base</span><span class="special">.</span><span class="identifier">root_name</span><span class="special">()</span></code>
"                if <code><span class="identifier">p</span></code> starts with
"                a root directory. In such a case <code><span class="identifier">p</span></code>
"                is already an absolute path and should be returned as is.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">create_directories</span></code>
"                no longer reports an error if the input path consists entirely of
"                dot (".") and dot-dot ("..") elements. The implementation
"                is no longer using recursion internally and therefore is better protected
"                from stack overflow on extremely long paths.
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows, <code><span class="identifier">remove</span></code>
"                now supports deleting read-only files. The operation will attempt
"                to reset the read-only attribute prior to removal. Note that this
"                introduces a possibility of the read-only attribute being left unset,
"                if the operation fails and the original value of the attribute fails
"                to be restored. This also affects <code><span class="identifier">remove_all</span></code>.
"                (<a href="https://github.com/boostorg/filesystem/issues/216">#216</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">remove_all</span></code> now returns
"                <code><span class="keyword">static_cast</span><span class="special">&lt;</span>
"                <span class="identifier">uintmax_t</span> <span class="special">&gt;(-</span><span class="number">1</span><span class="special">)</span></code>
"                in case of error, similar to C++17 std::filesystem.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a linking error about unresolved references to Boost.ContainerHash
"                functions when user's code includes <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">filesystem</span><span class="special">/</span><span class="identifier">path</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                but not <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">container_hash</span><span class="special">/</span><span class="identifier">hash</span><span class="special">.</span><span class="identifier">hpp</span></code> and the compiler is set to
"                preserve unused inline functions. (<a href="https://github.com/boostorg/filesystem/issues/215">#215</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a workaround for MSVC and compatible compilers eliminating
"                path globals cleanup in release builds. This could lead to a memory
"                leak if Boost.Filesystem shared library was repeatedly loaded and
"                unloaded in the process. (<a href="https://github.com/boostorg/filesystem/issues/217">#217</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improvements
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/894">PR#894</a> Optimization and refactoring of rtree queries.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/913">PR#913</a> DynamicGeometry and GeometryCollection support
"                      in various algorithms (undocumented for now).
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/922">PR#922</a> DynamicGeometry and GeometryCollection support
"                      in distance (undocumented for now).
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Solved issues
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/867">#867</a> Poor performance of rtree query iterator with
"                      nearest predicate for big k.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/870">#870</a> Compilation error in boost::geometry::self_turns.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/896">#896</a> Assertion failure in get_turns with BOOST_GEOMETRY_NO_ROBUSTNESS.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/906">PR#906</a> Invalid result of buffer on macos-11 with
"                      clang-12.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/921">PR#921</a> Compilation errors with c++20 (various compilers)
"                      and gcc-5.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Various fixes in set operations and buffer.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/json/">JSON</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Standalone mode of the library is deprecated.
"              </div>
"            </li>
"            <li>
"              <div>
"                Allow external libraries to forward declare <code><span class="identifier">value_to</span></code>
"                and <code><span class="identifier">value_from</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed signed integer overflow in number parsing.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add support for <code><span class="special">/</span><span class="identifier">Zc</span><span class="special">:</span><span class="identifier">implicitNoexcept</span><span class="special">-</span></code> on MSVC.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/lambda2/">Lambda2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added special cases in <code><span class="keyword">operator</span><span class="special">&lt;&lt;</span></code> and <code><span class="keyword">operator</span><span class="special">&gt;&gt;</span></code> when the first argument is
"                a stream, to allow <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">cout</span>
"                <span class="special">&lt;&lt;</span> <span class="identifier">_1</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="keyword">operator</span><span class="special">-&gt;*</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">first</span></code>, <code><span class="identifier">second</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                General changes:
"                <ul>
"                  <li>
"                    <div>
"                      Updated detection of <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">codecvt</span></code>
"                      specializations for <code><span class="keyword">char16_t</span></code>
"                      and <code><span class="keyword">char32_t</span></code> for
"                      compatibility with C++17 and later. (<a href="https://github.com/boostorg/log/pull/159">PR#159</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added support for C++17 <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">byte</span></code>
"                      type to receive methods of the inter-process message queue.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      On Windows, when building the library for Windows 8 or later,
"                      the library will use <code><span class="identifier">nt62</span></code>
"                      tag in the version namespace to denote the target OS ABI. For
"                      example, the version namespace could be named as <code><span class="identifier">v2_mt_nt62</span></code>. This name will
"                      be part of all symbols exported by the library. Use the <code><span class="identifier">BOOST_USE_WINAPI_VERSION</span></code>
"                      macro consistenly when building Boost and your code to request
"                      the minimum target Windows version.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Improved performance of SSSE3 and AVX2 implementations of the
"                      <code><span class="identifier">dump</span></code> stream
"                      manipulator.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added support for CMake build system. Only library build is
"                      supported at this moment, Boost.Build is still used for running
"                      tests.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed a race condition on POSIX systems in <code><span class="identifier">reliable_message_queue</span><span class="special">::</span><span class="identifier">open_or_create</span></code>
"                      or the equivalent constructor. Multiple threads or processes
"                      calling <code><span class="identifier">open_or_create</span></code>
"                      concurrently with sending or receiving messages from the same
"                      queue could end up corrupting the queue contents and potentially
"                      crashing the process. (<a href="https://github.com/boostorg/log/issues/162">#162</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added a workaround for <code><span class="identifier">b2</span>
"                      <span class="identifier">install</span></code> failing on
"                      Windows because of missing <code><span class="identifier">boost_log_setup</span></code>
"                      library if <code><span class="identifier">BOOST_LOG_WITHOUT_SETTINGS_PARSERS</span></code>
"                      is defined. (<a href="https://github.com/boostorg/log/issues/164">#164</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/math/">Math</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Add support for cubic roots.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add support for <code><span class="keyword">constexpr</span></code>
"                versions of various standard library math routines.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add support for Bezier polynomials.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve worst-case tanh-sinh integration performance.
"              </div>
"            </li>
"            <li>
"              <div>
"                Disable inadvertant use of integral types in integration routines.
"              </div>
"            </li>
"            <li>
"              <div>
"                Minor update for erf approximations when the result is with 2ulp
"                of 1.
"              </div>
"            </li>
"            <li>
"              <div>
"                Allow Bernoulli code to be used on platforms with no atomic integers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve the mode of the non-central Chi Squared distribution.
"              </div>
"            </li>
"            <li>
"              <div>
"                Improve certain edge cases for &lt;cstdfloat&gt; complex-valued elementary
"                functions, see <a href="https://github.com/boostorg/math/issues/507">#507</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">contains</span></code> to
"                key-based indices (issue <a href="https://github.com/boostorg/multi_index/issues/35">#35</a>).
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">merge</span></code> operations
"                to key-based indices. The functionality goes beyond the standard
"                specification for (unordered) associative containers in a number
"                of ways, most notably:
"              </div>
"              <ul>
"                <li>
"                  <div>
"                    The source index can be of any type, including non key-based
"                    indices.
"                  </div>
"                </li>
"                <li>
"                  <div>
"                    Partial merge is provided: for instance, <code><span class="identifier">x</span><span class="special">.</span><span class="identifier">merge</span><span class="special">(</span><span class="identifier">y</span><span class="special">,</span><span class="identifier">first</span><span class="special">,</span><span class="identifier">last</span><span class="special">)</span></code> merges only the elements of
"                    <code><span class="identifier">y</span></code> within [<code><span class="identifier">first</span></code>,<code><span class="identifier">last</span></code>).
"                  </div>
"                </li>
"              </ul>
"            </li>
"            <li>
"              <div>
"                Previous versions of <code><span class="identifier">splice</span></code>
"                for sequenced and random access indices were destructive, i.e. elements
"                were copy-inserted into the destination and then erased from the
"                source. Now, <code><span class="identifier">splice</span></code>
"                is based on node transfer much as <code><span class="identifier">merge</span></code>
"                in key-based indices, and has been similarly extended to accept source
"                indices of any type: in fact, <code><span class="identifier">splice</span></code>
"                can be regarded as a frontend to the same functionality provided
"                by <code><span class="identifier">merge</span></code> in key-based
"                indices. For reasons of backwards compatibility, the destructive
"                behavior of <code><span class="identifier">splice</span></code>
"                has been retained in the case that the source and destination containers
"                have unequal allocators.
"              </div>
"            </li>
"            <li>
"              <div>
"                The fact has been documented that index iterator types do only depend
"                on <code><span class="identifier">node_type</span></code> and
"                the position of the index in its <code><span class="identifier">multi_index_container</span></code>,
"                (except for hashed indices, where uniqueness/non-uniqueness is also
"                a dependency). This has implications on the validity of iterators
"                to elements transferred by <code><span class="identifier">merge</span></code>
"                or <code><span class="identifier">splice</span></code>. This property
"                is a variant of what has been called <a href="https://wg21.link/n2980">SCARY
"                iterators</a> in the C++ standard mailing lists. SCARYness is
"                currently (August 2021) not mandated for standard containers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Iterator SCARYness is now also preserved in <a href="/libs/multi_index/doc/tutorial/debug.html#safe_mode">safe
"                mode</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multiprecision/">Multiprecision</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Rework rational_adaptor to remove dependency on Boost.Rational and
"                improve performance.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix issue with type_traits and clang, see <a href="https://github.com/boostorg/multiprecision/issues/383">#383</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed buggy Lehmer's GCD routine, see <a href="https://github.com/boostorg/multiprecision/issues/370">#370</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix mpc_complex constructors so that lossy conversions are explicit,
"                see <a href="https://github.com/boostorg/multiprecision/issues/363">#363</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Correct miscellaneous configuration issues (Intel intrinsic usage
"                and Apple clang).
"              </div>
"            </li>
"            <li>
"              <div>
"                Correct some iostream operators for unsigned char types.
"              </div>
"            </li>
"            <li>
"              <div>
"                Correct mpq_rational conversions to integer types, see <a href="https://github.com/boostorg/multiprecision/issues/342">#342</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/nowide/">Nowide</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Breaking Change: <code><span class="identifier">do_unshift</span></code>
"                for the UTF-32 specialization of <code><span class="identifier">utf8_codecvt</span></code>
"                now correctly returns <code><span class="identifier">noconv</span></code>
"                instead of <code><span class="identifier">ok</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Remove unnecessary branch in <code><span class="identifier">utf8_codecvt</span></code>
"                for UTF-16 output
"              </div>
"            </li>
"            <li>
"              <div>
"                Suppress deprecation warnings in MSVC when using <code><span class="identifier">utf8_codecvt</span></code>
"                with unicode char types
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix possible double-free when setting a custom buffer (<code><span class="identifier">setbuf</span></code>) after <code><span class="identifier">filebuf</span></code>
"                already allocated an internal buffer
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/pfr/">PFR</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added missing <code><span class="preprocessor">#include</span>
"                <span class="special">&lt;</span><span class="identifier">memory</span><span class="special">&gt;</span></code> for inclusion of <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">addressof</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed -Wzero-length-array warning when dealing with empty aggregates
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compilation on msvc compilers &lt;= 1920 (thanks to Alexey
"                Romanov aka @alexey-romanov)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added basic CMakeLists.txt support (thanks to @pdimov aka Peter Dimov)
"              </div>
"            </li>
"            <li>
"              <div>
"                Multiple improvements for docs, including links to https://github.com/apolukhin/pfr_non_boost
"              </div>
"            </li>
"            <li>
"              <div>
"                Added misc/strip_boost_namespace.sh script to remove <code><span class="identifier">boost</span><span class="special">::</span></code>
"                and <code><span class="identifier">BOOST_</span></code> prefixes
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/predef/">Predef</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Version 1.13.1
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix spelling of "epoch".
"              </div>
"            </li>
"            <li>
"              <div>
"                Add missing parenthesis in sparc.h (from tkoecker).
"              </div>
"            </li>
"            <li>
"              <div>
"                Update documentation to use Rouge code styling and Amber general
"                style.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/regex/">Regex</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>Breaking Change:</strong> Change \B to be
"                the opposite of \b as per Perl behaviour.
"              </div>
"            </li>
"            <li>
"              <div>
"                Change w32_regex_traits.hpp so that windows.h is no longer included.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fxed fuzzing related issues <a href="https://github.com/boostorg/regex/issues/151">#151</a>,
"                <a href="https://github.com/boostorg/regex/issues/152">#152</a>,
"                <a href="https://github.com/boostorg/regex/issues/153">#153</a>,
"                <a href="https://github.com/boostorg/regex/issues/156">#156</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/system/">System</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added support for source locations to <code><span class="identifier">error_code</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">error_code</span><span class="special">::</span><span class="identifier">to_string</span></code>,
"                <code><span class="identifier">error_condition</span><span class="special">::</span><span class="identifier">to_string</span></code>, <code><span class="identifier">error_code</span><span class="special">::</span><span class="identifier">what</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">system_error</span><span class="special">::</span><span class="identifier">what</span><span class="special">()</span></code>
"                now contains the source location, if present.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">result</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">,</span> <span class="identifier">E</span> <span class="special">=</span> <span class="identifier">error_code</span><span class="special">&gt;</span></code>,
"                a class holding either a value or an error, defined in <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">system</span><span class="special">/</span><span class="identifier">result</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/utility/">Utility</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Library documentation converted to QuickBook (thanks to Alan de Freitas,
"                <a href="https://github.com/boostorg/utility/pull/79">PR#79</a>).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant2/">Variant2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="special">&lt;</span><span class="identifier">boost</span><span class="special">/</span><span class="identifier">variant2</span><span class="special">.</span><span class="identifier">hpp</span><span class="special">&gt;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">unsafe_get</span><span class="special">&lt;</span><span class="identifier">I</span><span class="special">&gt;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">visit_by_index</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="keyword">operator</span><span class="special">&lt;&lt;</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_78_0.updated_tools">
"    <h3><span class="link">Updated Tools</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/tools/build/">Build</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Includes release of <a href="/tools/build/doc/html/#_version_4_7_2">B2
"                version 4.7.2</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_78_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.4, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++20: 11.0.0, 12.0.0, 13.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.6.3, 11
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 11
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++20: 8.0.1, 9.1.0, 10, 11
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 11.0.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 11.0.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 11.0.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 11.0.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++20: 11.0.3
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_78_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
"    </p>
"  </div>
"
-hash
"945daef55e5abcc33e5d119c5fea2ecd16e51c860c06458f50c57b9cb01745ca
-id
"version_1_78_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      Updated Libraries: Asio, Assert, Atomic, Beast, Core, Describe, DLL, Filesystem,
"      Geometry, JSON, Lambda2, Log, Math, MultiIndex, Multiprecision, Nowide, PFR,
"      Predef, Regex, System, Utility, Variant2.
"
-title_xml
"Version 1.78.0
)
(feed/history/boost_1_79_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_79_0.known_issues">
"    <h3><span class="link">Known Issues</span></h3>
"    <p>
"      These are patches from library authors which were found too late to be fixed
"      in the release.
"    </p>
"    <ul>
"      <li>
"        <div>
"          Boost.JSON <code><span class="identifier">array</span><span class="special">::</span><span class="identifier">erase</span></code> can segfault, see <a href="https://github.com/boostorg/json/issues/692">#692</a>.
"          <a href="/patches/1_79_0/0001-json-array-erase-relocate.patch">Patch</a>.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_79_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          No new libraries.
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_79_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/asio/">Asio</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">bind_allocator</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">file_base</span><span class="special">::</span><span class="identifier">sync_all_on_write</span></code> flag.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added missing implementation of <code><span class="identifier">basic_file</span><span class="special">::</span><span class="identifier">release</span><span class="special">()</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added per-operation cancellation support to signal sets.
"              </div>
"            </li>
"            <li>
"              <div>
"                Exposed <code><span class="identifier">recycling_allocator</span></code>
"                as part of the public interface.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added the <code><span class="identifier">nodiscard</span></code>
"                attribute to a number of functions.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added OpenSSL 3.0 compatibility.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for adopting an existing <code><span class="identifier">SSL</span><span class="special">*</span></code> into an <code><span class="identifier">ssl</span><span class="special">::</span><span class="identifier">stream</span><span class="special">&lt;&gt;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Enabled <code><span class="identifier">executor_work_guard</span><span class="special">&lt;&gt;</span></code> in all build configurations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Enabled movable socket iostreams when using clang.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">bind_cancellation_slot</span></code>
"                and <code><span class="identifier">bind_executor</span></code>
"                compatibility with legacy completion tokens.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">associator</span></code>
"                specialisations for <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">append</span></code>
"                and <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">prepend</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">associated_allocator</span></code>
"                primary template.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <tt>io_uring</tt> implementations of <code><span class="identifier">async_receive_from</span></code> for sockets
"                and <code><span class="identifier">write_some_at</span></code>
"                for files.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <tt>io_uring</tt> feature detection.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">coro</span></code>'s
"                per-operation cancellation.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed memory management in <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">promise</span></code>'s
"                type-erased completion handlers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed move <code><span class="keyword">operator</span><span class="special">=</span></code> implementation for <code><span class="identifier">ssl</span><span class="special">::</span><span class="identifier">stream</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <code><span class="identifier">any_io_executor</span></code>
"                implementation to work when both <code><span class="identifier">BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT</span></code>
"                and <code><span class="identifier">BOOST_ASIO_SEPARATE_COMPILATION</span></code>
"                are defined.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed implementation of <code><span class="identifier">basic_socket</span><span class="special">::</span><span class="identifier">at_mark</span><span class="special">()</span></code> when using the <code><span class="identifier">sockatmark</span><span class="special">()</span></code> system call.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed the recycling allocator to use the default alignment as the
"                minimum alignment for allocations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a workaround for apparent coroutine codegen bug with Apple's
"                clang.
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows, changed the file support to open files using the same
"                sharing mode as <code><span class="identifier">fopen</span><span class="special">()</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                On Linux, fixed UNIX domain sockets implementation to correctly handle
"                <code><span class="identifier">EAGAIN</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed implementation of <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">basic_channel</span><span class="special">::</span><span class="identifier">reset</span><span class="special">()</span></code> and <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">basic_concurrent_channel</span><span class="special">::</span><span class="identifier">reset</span><span class="special">()</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed potential undefined behaviour in the <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">promise</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed the <code><span class="identifier">co_spawn</span></code>
"                implementation to dispatch cancellation signals through the executor
"                in some circumstances.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed various header inclusion issues.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed various warnings.
"              </div>
"            </li>
"            <li>
"              <div>
"                A number of documentation enhancements, including:
"                <ul>
"                  <li>
"                    <div>
"                      Added an overview of Asio's asynchronous model.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Reworked reference and requirements documentation in terms
"                      of asynchronous model.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Updated documentation for <code><span class="identifier">dispatch</span><span class="special">()</span></code>, <code><span class="identifier">post</span><span class="special">()</span></code>, and <code><span class="identifier">defer</span><span class="special">()</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Documented per-operation cancellation for serial ports.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Clarified the non-concurrency guarantees made for allocators.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Reverted the <code><span class="identifier">io_context</span></code>
"                      reference documentation to use <code><span class="identifier">executor_work_guard</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added more detailed reference documentation to <code><span class="identifier">make_strand</span><span class="special">()</span></code>,
"                      <code><span class="identifier">make_work_guard</span><span class="special">()</span></code>, <code><span class="identifier">ip</span><span class="special">::</span><span class="identifier">address_v4</span></code>,
"                      <code><span class="identifier">ip</span><span class="special">::</span><span class="identifier">address_v6</span></code>, <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">basic_channel</span></code>, and <code><span class="identifier">experimental</span><span class="special">::</span><span class="identifier">basic_concurrent_channel</span></code>.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Re-arranged and extended the Overview documentation to cover
"                      recently added features.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a C++11 example showing file descriptor passing over local
"                sockets.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added C++14 examples of wrapping callback-based APIs in asynchronous
"                operations.
"              </div>
"            </li>
"            <li>
"              <div>
"                Consult the <a href="/doc/libs/1_79_0/doc/html/boost_asio/history.html">Revision
"                History</a> for further details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/assert/">Assert</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <code><span class="identifier">source_location</span><span class="special">().</span><span class="identifier">file_name</span><span class="special">()</span></code>
"                and <code><span class="identifier">source_location</span><span class="special">().</span><span class="identifier">function_name</span><span class="special">()</span></code> now return <code><span class="string">""</span></code>
"                instead of <code><span class="string">"(unknown)"</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a <code><span class="identifier">source_location</span></code>
"                constructor from <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">source_location</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed <code><span class="identifier">BOOST_CURRENT_LOCATION</span></code>
"                to more closely match the behavior of <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">source_location</span><span class="special">::</span><span class="identifier">current</span><span class="special">()</span></code>, such as being usable at top level
"                or as a default function argument.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed compilation for Universal Windows Platform (UWP). (<a href="https://github.com/boostorg/atomic/issues/54">#54</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">BOOST_ATOMIC_NO_DARWIN_ULOCK</span></code>
"                configuration macro. The macro affects compilation on Darwin systems
"                and disables <code><span class="identifier">ulock</span></code>-based
"                implementation of waiting and notifying operations. This may be useful
"                to comply with Apple App Store requirements. (<a href="https://github.com/boostorg/atomic/issues/55">#55</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/beast/">Beast</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added missing include for file_body test.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed WebSocket handshake response on failure.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed open append mode for <code><span class="identifier">file_posix</span></code>
"                and <code><span class="identifier">file_win32</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed file open with append/append_existing flag on Windows
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed clang-cl UTF8 path handling for <code><span class="identifier">file_win32</span></code>
"                and <code><span class="identifier">file_stdio</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added ARM64 builds to drone CI.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed async_base documentation link.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added tests for file open in append/append_existing mode.
"              </div>
"            </li>
"            <li>
"              <div>
"                Updated CI to include gcc 11, clang 12, msvc 14.3.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added individual tests to CMake workflow.
"              </div>
"            </li>
"            <li>
"              <div>
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the <a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast">Companies
"                and Individuals Using Beast</a> list.
"              </div>
"            </li>
"            <li>
"              <div>
"                See the full <a href="/libs/beast/doc/html/beast/release_notes.html">Release
"                Notes</a> for a complete list of changes.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/core/">Core</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Made <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">pointer_traits</span></code> SFINAE friendly,
"                addressing LWG3545. (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">allocator_traits</span></code> that uses the
"                individual allocator access traits. This implementation supports
"                C++03 and above. (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                Updated the allocator access traits to support most of the C++11
"                allocator model in C++03. (Glen Fernandes)
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">iterator</span><span class="special">.</span><span class="identifier">hpp</span></code> is deprecated and will be removed
"                in a future release. The header defines <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">iterator</span></code>
"                template, which is equivalent to <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iterator</span></code>
"                in <code><span class="special">&lt;</span><span class="identifier">iterator</span><span class="special">&gt;</span></code> header. However, since <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iterator</span></code> is itself deprecated in
"                C++17, users are advised to remove <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">iterator</span></code>
"                or <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">iterator</span></code> use from their code.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">core</span><span class="special">::</span><span class="identifier">verbose_terminate_handler</span></code>, a utility
"                function intended to be passed to <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">set_terminate</span></code>
"                that prints information about the uncaught exception to <code><span class="identifier">stderr</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/describe/">Describe</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Enabled unions in <code><span class="identifier">BOOST_DESCRIBE_STRUCT</span></code>
"                and updated examples to check <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">is_union</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added example of defining a <code><span class="identifier">fmtlib</span></code>
"                class formatter.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added example of defining a <code><span class="identifier">fmtlib</span></code>
"                enum formatter.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added example of printing pointers to members.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                <strong>v3:</strong> <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">replace_extension</span></code>
"                now works in terms of <strong>v3</strong> definition
"                of <code><span class="identifier">path</span><span class="special">::</span><span class="identifier">extension</span></code> rather than <strong>v4</strong>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compilation of path appending and concatenation operators with
"                arguments of types convertible to <code><span class="identifier">path</span></code>
"                or compatible string type. (<a href="https://github.com/boostorg/filesystem/issues/223">#223</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                On POSIX systems that support <code><span class="identifier">fdopendir</span></code>
"                and <code><span class="identifier">O_NOFOLLOW</span></code> and
"                on Windows, <code><span class="identifier">remove_all</span></code>
"                is now protected against <a href="https://www.cve.org/CVERecord?id=CVE-2022-21658">CVE-2022-21658</a>.
"                The vulnerability is a race condition that allows a third party process
"                to replace a directory that is being concurrently processed by <code><span class="identifier">remove_all</span></code> with a directory symlink
"                and cause <code><span class="identifier">remove_all</span></code>
"                to follow the symlink and remove files in the linked directory instead
"                of removing the symlink itself. (<a href="https://github.com/boostorg/filesystem/issues/224">#224</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows, in <code><span class="identifier">remove</span></code>
"                and <code><span class="identifier">remove_all</span></code> implementation,
"                use POSIX semantics for file removal, when supported by the OS (Windows
"                10 1709 and later). When POSIX semantics is supported, the file name
"                is removed from the filesystem namespace as soon as the file is marked
"                for deletion, even if it is still open and in use. With legacy Windows
"                semantics, the file name remains present in the the filesystem namespace
"                until the last file handle to the file is closed, which allows the
"                file marked for deletion to be opened and prevents creating new files
"                with the same name. (<a href="https://github.com/boostorg/filesystem/issues/216">#216</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows, <code><span class="identifier">remove</span></code>
"                and <code><span class="identifier">remove_all</span></code> now
"                support deleting read-only directories. Support for removing read-only
"                non-directory files was added previously.
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows, <code><span class="identifier">directory_iterator</span></code>
"                internal implementation has been reworked to better utilize modern
"                Windows APIs, which may improve performance while handling symlinks.
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows, initialize internal WinAPI function pointers early, if
"                possible, to allow Boost.Filesystem operations to be invoked in global
"                constructors. This is only supported on MSVC, GCC, Clang and compatible
"                compilers.
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows, <code><span class="identifier">resize_file</span></code>
"                should no longer fail with an error if the file to be resized is
"                opened.
"              </div>
"            </li>
"            <li>
"              <div>
"                Disabled use of the <code><span class="identifier">statx</span></code>
"                syscall on Android prior to 11.0 (API version 30). The syscall is
"                blacklisted by seccomp and causes process termination in runtime.
"                (<a href="https://github.com/boostorg/filesystem/issues/229">#229</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>Deprecated:</strong> <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">filesystem</span><span class="special">/</span><span class="identifier">string_file</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                header is deprecated and will be removed in a future release. The
"                header is no longer included by <code><span class="identifier">boost</span><span class="special">/</span><span class="identifier">filesystem</span><span class="special">.</span><span class="identifier">hpp</span></code>
"                by default. Users are advised to implement the functionality themselves
"                or migrate to other implementations.
"              </div>
"            </li>
"            <li>
"              <div>
"                <strong>Deprecated:</strong> Windows CE support is
"                deprecated and will be removed in a future release. Windows CE has
"                been untested for many years and is likely non-functional.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/geometry/">Geometry</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Major change
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/977">PR#977</a> Rescaling is turned off by default. This avoids
"                      many related bugs in set operations and buffer.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Improvements
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/961">PR#961</a> Added Web Mercator projection.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/966">PR#966</a> More efficient cartesian distance strategy
"                      used in simplify.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Solved issues
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/956">#956</a> Result of simplify algorithm with incorrect
"                      closure.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/962">#962</a> Runtime error in R-tree deserialization due
"                      to load factor.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/issues/971">#971</a> R-tree insertion time impacted by use of long
"                      double on ARM platforms.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bugfixes
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/936">PR#936</a> Envelope of polygon containing pole.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/948">PR#948</a> Spherical and geographic envelope for near
"                      meridian segments.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/geometry/pull/974">PR#974</a> Spheroidal normalization utilities for NaN
"                      coordinates.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Various fixes in set operations and buffer.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/integer/">Integer</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Optimized <code><span class="identifier">integer_log2</span></code>
"                implementation to use bit operations internally. This allows to employ
"                bit instructions available on most modern CPUs. (<a href="https://github.com/boostorg/integer/issues/31">#31</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/io/">IO</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">io</span><span class="special">::</span><span class="identifier">basic_nullbuf</span></code>, a null stream buffer,
"                and <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">basic_onullstream</span></code>, a null output
"                stream (Glen Fernandes).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/iterator/">Iterator</a>:</span>
"          <ul>
"            <li>
"              <div>
"                In <code><span class="identifier">counting_iterator</span></code>,
"                added support for built-in 128-bit integer types supported by gcc
"                and clang and compatible compilers on some target platforms.
"              </div>
"            </li>
"            <li>
"              <div>
"                Silenced gcc warnings about deprecated implicit copy assignment operator
"                in <code><span class="identifier">counting_iterator</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/json/">JSON</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Standalone mode of the library is removed. Users who wish to continue
"                using standalone JSON can switch to <a href="https://github.com/CPPAlliance/standalone-json.git">the
"                C++ Alliance fork</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">error_code</span></code> overloads.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">source_location</span></code> to <code><span class="identifier">error_codes</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Add support for JSON Pointer.
"              </div>
"            </li>
"            <li>
"              <div>
"                Naturally grow string during serialization.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/leaf/">LEAF</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Support for FreeRTOS and other embedded platforms
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved diagnostic information
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved configuration macros
"              </div>
"            </li>
"            <li>
"              <div>
"                BOOST_LEAF_CHECK using statement expressions under __GNUC__
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed symbol demangling bug
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                General changes:
"                <ul>
"                  <li>
"                    <div>
"                      In <code><span class="identifier">text_file_backend</span></code>,
"                      added support for appending to a previously written log file,
"                      when file rotation is used and log file names use file counters.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <strong>Breaking change:</strong> The <code><span class="identifier">file_collector</span></code> interface
"                      has changed:
"                      <ul>
"                        <li>
"                          <div>
"                            <code><span class="identifier">scan_for_files</span></code>
"                            method returns a <code><span class="identifier">scan_result</span></code>
"                            structure that contains information collected during
"                            the scan;
"                          </div>
"                        </li>
"                        <li>
"                          <div>
"                            <code><span class="identifier">is_in_storage</span></code>
"                            method added for testing if a path refers to a file within
"                            the target storage directory.
"                          </div>
"                        </li>
"                      </ul>
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added a new <code><span class="identifier">invoke_manip</span></code>
"                      stream manipulator that can be used for injecting user's function
"                      into a stream output expression.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed file counter being set to zero if the user calls <code><span class="identifier">text_file_backend</span><span class="special">::</span><span class="identifier">scan_for_files</span></code> multiple times,
"                      and the second and the following calls don't find any new files.
"                      (<a href="https://github.com/boostorg/log/issues/179">#179</a>)
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved the efficiency of <code><span class="identifier">count</span></code>
"                operations in ranked indices from <code><span class="identifier">O</span><span class="special">(</span><span class="identifier">log</span><span class="special">(</span><span class="identifier">n</span><span class="special">)</span> <span class="special">+</span> <span class="identifier">count</span><span class="special">)</span></code>
"                to <code><span class="identifier">O</span><span class="special">(</span><span class="identifier">log</span><span class="special">(</span><span class="identifier">n</span><span class="special">))</span></code>.
"                Contributed by Damian Sawicki.
"              </div>
"            </li>
"            <li>
"              <div>
"                Maintenance work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/nowide/">Nowide</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix compilation issues on some platforms (e.g. GCC 11 on MinGW-w64
"                and Cygwin)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix missing include when using <code><span class="identifier">BOOST_USE_WINDOWS_H</span></code>
"                and <code><span class="identifier">WIN32_LEAN_AND_MEAN</span></code>
"              </div>
"            </li>
"            <li>
"              <div>
"                Add sanity check when using <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">nowide</span><span class="special">::</span><span class="identifier">stat</span></code>
"                with <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">nowide</span><span class="special">::</span><span class="identifier">stat_t</span></code>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/optional/">Optional</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fixed <a href="https://github.com/boostorg/optional/issues/98">issue
"                #98</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed <a href="https://github.com/boostorg/optional/issues/92">issue
"                #92</a>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added support for <code><span class="identifier">BOOST_NO_IOSTREAM</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Now aligned storage uses <code><span class="keyword">unsigned</span>
"                <span class="keyword">char</span></code> rather than <code><span class="keyword">char</span></code> to avoid UB.
"              </div>
"            </li>
"            <li>
"              <div>
"                Now using cv-unqualified <code><span class="identifier">value_type</span></code>
"                with placement <code><span class="keyword">new</span></code> to
"                avoid UB.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/predef/">Predef</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Version 1.14.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Add detection of LoongArch (from Zhang Na).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/qvm/">QVM</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added constexpr under C++17
"              </div>
"            </li>
"            <li>
"              <div>
"                Improved single header distribution
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/smart_ptr/">Smart Pointers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">get_allocator_pointer</span></code> to obtain
"                the Allocator pointer from the result of <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">allocate_unique</span></code>
"                (Glen Fernandes).
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/system/">System</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added a <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">source_location</span></code> parameter to <code><span class="identifier">throw_exception_from_error</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">throw_exception_from_error</span></code>
"                overloads for <code><span class="identifier">errc</span><span class="special">::</span><span class="identifier">errc_t</span></code>,
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">error_code</span></code>, <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">errc</span></code>,
"                <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">exception_ptr</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">result</span><span class="special">&lt;</span><span class="identifier">T</span><span class="special">&gt;::</span><span class="identifier">value</span></code> now automatically supplies
"                <code><span class="identifier">BOOST_CURRENT_LOCATION</span></code>
"                to <code><span class="identifier">throw_exception_from_error</span></code>
"                via a default argument.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added an <code><span class="identifier">errc</span><span class="special">::</span><span class="identifier">make_error_code</span></code> overload taking
"                a source location.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/throw_exception/">ThrowException</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">throw_with_location</span></code>, a more lightweight
"                alternative of <code><span class="identifier">BOOST_THROW_EXCEPTION</span></code>
"                for programs that do not use Boost.Exception.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/unordered/">Unordered</a>:</span>
"          <ul>
"            <li>
"              <div>
"                All containers have been updated to support heterogeneous <code><span class="identifier">count</span></code>, <code><span class="identifier">equal_range</span></code>
"                and <code><span class="identifier">find</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                All containers now implement the member function <code><span class="identifier">contains</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                <code><span class="identifier">erase_if</span></code> has been
"                implemented for all containers.
"              </div>
"            </li>
"            <li>
"              <div>
"                All containers have been updated to support heterogeneous <code><span class="identifier">erase</span></code> and <code><span class="identifier">extract</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Changed behavior of <code><span class="identifier">reserve</span></code>
"                to eagerly allocate.
"              </div>
"            </li>
"            <li>
"              <div>
"                Various warning fixes in the test suite.
"              </div>
"            </li>
"            <li>
"              <div>
"                Update code to internally use <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">allocator_traits</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Switch to Fibonacci hashing.
"              </div>
"            </li>
"            <li>
"              <div>
"                Update documentation to be written in AsciiDoc instead of QuickBook.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/variant2/">Variant2</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Added <code><span class="keyword">operator</span><span class="special">&lt;&lt;</span></code>
"                for <code><span class="identifier">monostate</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/wave/">Wave</a>:</span>
"          <ul>
"            <li>
"              <div>
"                C++11 now required for building Wave itself
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed bugs:
"                <ul>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/wave/issues/135">#135</a>: Comma operators in array subscripts are deprecated
"                      in C++20
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/wave/issues/137">#137</a>: Simple unknown directive =&gt; found_unknown_directive
"                      is not called, stripped of pound.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/wave/issues/138">#138</a>: Empty ifdef block does not emit line directive
"                      for missing whitespace
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/wave/issues/143">#143</a>: Parsing __has_include() fails with trailing tokens
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/wave/issues/145">#145</a>: Sanitizer complains about reset_version()
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      <a href="https://github.com/boostorg/wave/issues/147">#147</a>: bitwise operations between different enumeration
"                      types are deprecated
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_79_0.updated_tools">
"    <h3><span class="link">Updated Tools</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/tools/build/">Build</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Includes release of <a href="/tools/build/doc/html/#_version_4_8_2">B2
"                version 4.8.2</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_79_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          Linux:
"          <ul>
"            <li>
"              <div>
"                Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++11: 3.4, 11.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                Clang, C++20: 11.0.0, 12.0.0, 13.0.0
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC: 4.6.3, 11
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++11: 4.7.3, 4.8.5, 11
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11
"              </div>
"            </li>
"            <li>
"              <div>
"                GCC, C++20: 8.0.1, 9.1.0, 10, 11
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          OS X:
"          <ul>
"            <li>
"              <div>
"                Apple Clang: 11.0.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++11: 11.0.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++14: 11.0.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++17: 11.0.3
"              </div>
"            </li>
"            <li>
"              <div>
"                Apple Clang, C++20: 11.0.3
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          Windows:
"          <ul>
"            <li>
"              <div>
"                Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_79_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
"    </p>
"  </div>
"
-hash
"314c40425d03353a84c6691d8e32a074db9bd58cdae7f5a6ec52089283466ed0
-id
"version_1_79_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      Updated Libraries: Asio, Assert, Atomic, Beast, Core, Describe, Filesystem,
"      Geometry, Integer, IO, Iterator, JSON, Log, Multi-index Containers, Nowide,
"      Optional, Predef, Smart Pointers, System, ThrowException, Unordered, Variant2,
"      Wave, LEAF, QVM.
"
-title_xml
"Version 1.79.0
)
(feed/history/boost_1_80_0.qbk
-description_xhtml
"
"
"
"  <div id="version_1_80_0.new_libraries">
"    <h3><span class="link">New Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <em>TODO</em>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_80_0.updated_libraries">
"    <h3><span class="link">Updated Libraries</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/atomic/">Atomic</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Improved portability of endianness checks on ARM, AArch32 and AArch64
"                targets. (<a href="https://github.com/boostorg/atomic/issues/59">#59</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed compilation with MSVC 14.0 (Visual Studio 2015) in C++17 mode.
"                (<a href="https://github.com/boostorg/atomic/issues/61">#61</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/filesystem/">Filesystem</a>:</span>
"          <ul>
"            <li>
"              <div>
"                On Windows, added a fallback implementation for querying file attributes
"                in case if the file cannot be opened with <code><span class="identifier">ERROR_ACCESS_DENIED</span></code>
"                error. This may allow <code><span class="identifier">status</span></code>
"                and <code><span class="identifier">symlink_status</span></code>
"                to succeed for system files and directories that are not reparse
"                points or symlinks. (<a href="https://github.com/boostorg/filesystem/issues/234">#234</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                On Windows, added a workaround for FAT/exFAT filesystems that produce
"                <code><span class="identifier">ERROR_INVALID_PARAMETER</span></code>
"                when querying file attributes. This affected <code><span class="identifier">status</span></code>
"                and <code><span class="identifier">symlink_status</span></code>,
"                which reported that files do not exist, and directory iterators,
"                which failed to construct, as well as other dependent operations.
"                (<a href="https://github.com/boostorg/filesystem/issues/236">#236</a>, <a href="https://github.com/boostorg/filesystem/issues/237">#237</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/iterator/">Iterator</a>:</span>
"          <ul>
"            <li>
"              <div>
"                For C++11 and later, added support for perfect forwarding of values
"                written to <code><span class="identifier">function_output_iterator</span></code>.
"                (<a href="https://github.com/boostorg/iterator/pull/73">PR#73</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added protection against writing to <code><span class="identifier">function_output_iterator</span></code>
"                a result of dereferencing another <code><span class="identifier">function_output_iterator</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/leaf/">LEAF</a>:</span>
"          <ul>
"            <li>
"              <div>
"                API breaking change: throw leaf::exception(....) now becomes leaf::throw_exception(....)
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed a bug in support for a rare build configuration (exception
"                handling enabled, diagnostics disabled)
"              </div>
"            </li>
"            <li>
"              <div>
"                Using nullptr instead of 0 throughout
"              </div>
"            </li>
"            <li>
"              <div>
"                Fixed pedantic warnings
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/log/">Log</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Bug fixes:
"                <ul>
"                  <li>
"                    <div>
"                      Fixed binding incorrect local address in UDP socket-based
"                      <code><span class="identifier">syslog_backend</span></code>
"                      when IPv6 address is used for the syslog server. (<a href="https://github.com/boostorg/log/issues/181">#181</a>)
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Added a workaround for a <a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=105857">bug</a>
"                      in libstdc++ from gcc 11.2. When <code><span class="identifier">max_size_decor</span></code>
"                      was used on a formatting stream, <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">codecvt</span><span class="special">::</span><span class="identifier">do_length</span></code>
"                      incorrectly accessed the input buffer and caused a buffer overflow.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"            <li>
"              <div>
"                See <a href="/libs/log/doc/html/log/changelog.html">changelog</a>
"                for more details.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/multi_index/">Multi-index Containers</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Maintenance work.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/stl_interfaces/">STLInterfaces</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Fix <a href="https://github.com/boostorg/stl_interfaces/issues/53">#53</a>: "missing 'typename' prior to dependent
"                type name 'C::const_iterator'"
"              </div>
"            </li>
"            <li>
"              <div>
"                Fix <a href="https://github.com/boostorg/stl_interfaces/issues/54">#54</a>: "Concept check fails on .data() of
"                a view on contiguous iterator_interface instantiations"
"              </div>
"            </li>
"            <li>
"              <div>
"                New additions to make it easy to write views and view adaptors that
"                work like, and interoperate with, the ones in the standard library:
"                <ul>
"                  <li>
"                    <div>
"                      Add workalikes for C++23's <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">bind_back</span><span class="special">()</span></code> and <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">range_adaptor_closure</span></code>
"                      for pre-C++23 code.
"                    </div>
"                  </li>
"                  <li>
"                    <div>
"                      Add templates <code><span class="identifier">closure</span></code>
"                      and <code><span class="identifier">adaptor</span></code>
"                      to make writing view adaptors easier, following the examples
"                      in <a href="https://www.open-std.org/jtc1/sc22/wg21/docs/papers/2021/p2387r3.html">P2387</a>.
"                    </div>
"                  </li>
"                </ul>
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/system/">System</a>:</span>
"          <ul>
"            <li>
"              <div>
"                When an <code><span class="identifier">error_code</span></code>
"                is converted to <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">error_code</span></code>
"                and then back to <code><span class="identifier">error_code</span></code>,
"                the original is now restored, if possible.
"              </div>
"            </li>
"            <li>
"              <div>
"                Reworked the conversion from <code><span class="identifier">error_category</span></code>
"                to <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">error_category</span></code> to avoid the one-time
"                allocation that shows up on leak checkers.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a constructor that allows replacing the source location of
"                an <code><span class="identifier">error_code</span></code>, and
"                a corresponding <code><span class="identifier">assign</span></code>.
"              </div>
"            </li>
"            <li>
"              <div>
"                Added a converting constructor to <code><span class="identifier">result</span></code>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <span class="library"><a href="/libs/utility/">Utility</a>:</span>
"          <ul>
"            <li>
"              <div>
"                In <code><span class="identifier">string_view</span></code>/<code><span class="identifier">string_ref</span></code>, fixed <code><span class="identifier">max_size</span></code> returning incorrect value.
"                (<a href="https://github.com/boostorg/utility/issues/91">#91</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Removed <code><span class="keyword">noexcept</span></code> specifier
"                from <code><span class="identifier">string_view</span><span class="special">::</span><span class="identifier">compare</span></code>
"                as it may throw on some input arguments. (<a href="https://github.com/boostorg/utility/issues/94">#94</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                In <code><span class="identifier">string_view</span></code>/<code><span class="identifier">string_ref</span></code>, added support for calling
"                <code><span class="identifier">substr</span></code> with no arguments.
"                (<a href="https://github.com/boostorg/utility/issues/96">#96</a>)
"              </div>
"            </li>
"            <li>
"              <div>
"                Added <code><span class="identifier">string_view</span><span class="special">::</span><span class="identifier">contains</span></code>
"                methods that were introduced in C++23. (<a href="https://github.com/boostorg/utility/issues/93">#93</a>)
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"      <li>
"        <div>
"          <em>TODO</em>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_80_0.updated_tools">
"    <h3><span class="link">Updated Tools</span></h3>
"    <ul>
"      <li>
"        <div>
"          <span class="library"><a href="/tools/build/">Build</a>:</span>
"          <ul>
"            <li>
"              <div>
"                Includes release of <a href="/tools/build/doc/html/#_version_4_9_2">B2
"                version 4.9.2</a>.
"              </div>
"            </li>
"          </ul>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_80_0.compilers_tested">
"    <h3><span class="link">Compilers Tested</span></h3>
"    <p>
"      Boost's primary test compilers are:
"    </p>
"    <ul>
"      <li>
"        <div>
"          <em>TODO</em>
"        </div>
"      </li>
"    </ul>
"    <p>
"      Boost's additional test compilers include:
"    </p>
"    <ul>
"      <li>
"        <div>
"          <em>TODO</em>
"        </div>
"      </li>
"    </ul>
"  </div>
"  <div id="version_1_80_0.acknowledgements">
"    <h3><span class="link">Acknowledgements</span></h3>
"    <p>
"      <em>TODO</em>
"    </p>
"  </div>
"
-hash
"09351b40d03b548a85bbe93f174c8a3a3a734df13330354dbbf683c523bcc694
-id
"version_1_80_0
-notice_url
-notice_xml
-pub_date
-purpose_xml
"
"      New Libraries: Updated Libraries:
"
-title_xml
"Version 1.80.0
)
(feed/news/moving_to_jfrog.qbk
-description_xhtml
"
"
"
"  <p>
"    The service that Boost uses to serve up its releases, Bintray.com is being retired
"    by JFrog on the 1st of May. Fortunately for Boost, they have a new service, called
"    JFrog.Arifactory, which we have transitioned to.
"  </p>
"  <p>
"    For the users of Boost, the only difference is that there is a new URL to download
"    releases and snapshots.
"  </p>
"  <p>
"    Instead of: <a href="https://dl.bintray.com/boostorg/release/">https://dl.bintray.com/boostorg/release/</a>
"    you should use <a href="https://boostorg.jfrog.io/artifactory/main/release/">https://boostorg.jfrog.io/artifactory/main/release/</a>
"    to retrieve boost releases.
"  </p>
"  <p>
"    Note: The pre-1.64 Boost releases are still available via Sourceforge.
"  </p>
"  <p>
"    Thank you to JFrog for all your past and current support.
"  </p>
"
-hash
"72b66f8220eb4cd5d160b19cec1dd84c0c37e93f55ca7d1a707281e7d1f521c4
-id
"boost_has_moved_downloads_to_jfr
-notice_url
-notice_xml
-pub_date
@Thu, 29 Apr 2021 11:00:00 -0700
-purpose_xml
"
"      New Location for downloads
"
-title_xml
"Boost has moved downloads to JFrog Artifactory
)
(feed/news/result_of_1_52_0.qbk
-description_xhtml
"
"
"
"  <p>
"    Starting with Boost 1.52.0, the <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">result_of</span></code>
"    component defaults to an implementation that uses the C++11 <code><span class="keyword">decltype</span></code>
"    keyword to deduce the return type of callables on compilers with strong <code><span class="keyword">decltype</span></code> support. As <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">result_of</span></code>
"    is a key piece of library infrastructure, we at Boost have found this change
"    to be moderately disruptive. You should be aware of the issue when making the
"    decision to upgrade from an older version of Boost.
"  </p>
"  <div id="a_special_note_for_boost_1_52_0_and_higher.why_the_change_was_made">
"    <h3><span class="link">Why
"    the Change Was Made</span></h3>
"    <p>
"      <code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">result_of</span></code> has been changed to use <code><span class="keyword">decltype</span></code> to make it more consistent with <code><span class="identifier">std</span><span class="special">::</span><span class="identifier">result_of</span></code>
"      (when sufficient compiler support is available). Also, the use of <code><span class="keyword">decltype</span></code> should help to improve compile times
"      and increase the accuracy of the type computation.
"    </p>
"  </div>
"  <div id="a_special_note_for_boost_1_52_0_and_higher.who_is_affected">
"    <h3><span class="link">Who
"    is Affected</span></h3>
"    <p>
"      If you use a compiler with sufficiently bug-free <code><span class="keyword">decltype</span></code>
"      support (including <a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf">N3276</a>),
"      then you will get the new behavior. At the time of writing (Nov 4, 2012), the
"      only compiler in that category is Clang 3.1, but as other compilers improve,
"      this will change.
"    </p>
"  </div>
"  <div id="a_special_note_for_boost_1_52_0_and_higher.what_problems_can_the_change_cause_">
"    <h3><span class="link">What
"    Problems Can the Change Cause?</span></h3>
"    <p>
"      The use of <code><span class="keyword">decltype</span></code> in <code><span class="identifier">result_of</span></code> can result in a different type
"      being computed than with the now-obsolete TR1 <code><span class="identifier">result_of</span></code>
"      protocol. This will often be the case for incorrectly written TR1-style function
"      objects that misreport their result types. This is unfortunately too common.
"      But it can even happen for some correctly written function objects.
"    </p>
"  </div>
"  <div id="a_special_note_for_boost_1_52_0_and_higher.where_can_i_learn_more_">
"    <h3><span class="link">Where
"    Can I Learn More?</span></h3>
"    <p>
"      Please see the documentation for <a href="https://www.boost.org/doc/libs/1_52_0/libs/utility/utility.htm#result_of"><code><span class="identifier">boost</span><span class="special">::</span><span class="identifier">result_of</span></code></a>
"      to understand the differences between TR1 <code><span class="identifier">result_of</span></code>
"      and <code><span class="keyword">decltype</span></code> <code><span class="identifier">result_of</span></code>,
"      and to find out how you can write your code to accommodate both.
"    </p>
"  </div>
"
-hash
"72c583d54dba6d1ce31a888cc946a12b31b14397e294fe01930b313c00be1990
-id
"a_special_note_for_boost_1_52_0_and_higher
-notice_url
-notice_xml
-pub_date
@Tue, 06 Nov 2012 09:27:25 +0000
-purpose_xml
"
"      Important information for users of boost::result_of.
"
-title_xml
"A Special Note for Boost 1.52.0 and Higher
)
