(feed/history/boost_1_10_3.qbk
-item
"<item><title>Version 1.10.3</title><pubDate>Thu, 30 Dec 1999 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Compse, Operators, Cast, Config, Smart Pointer First release
"      with a version number.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;p&gt;
"    Minor fixes to the compose library examples, &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators
"    documentation&lt;/a&gt;, &lt;a href=&quot;/boost/operators.hpp&quot;&gt;operators.hpp&lt;/a&gt;,
"    &lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;cast documentation&lt;/a&gt;, &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;,
"    &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;, and &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt;.
"  &lt;/p&gt;
"  &lt;p&gt;
"    This is the first release with a version number. The version numbering scheme
"    is xxx.yyy.zzz.
"  &lt;/p&gt;
"  &lt;ul&gt;
"    &lt;li&gt;
"      xxx = Major version
"    &lt;/li&gt;
"    &lt;li&gt;
"      yyy = New library or feature added
"    &lt;/li&gt;
"    &lt;li&gt;
"      zzz = Bug fixes only
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Thu, 30 Dec 1999 12:00:00 +0000
-quickbook
"feed/history/boost_1_10_3.qbk
)
(feed/history/boost_1_10_4.qbk
-item
"<item><title>Version 1.10.4</title><pubDate>Fri, 31 Dec 1999 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Smart Pointer, Cast.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;p&gt;
"    Minor fixes to &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt; and &lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;cast documentation&lt;/a&gt;.
"  &lt;/p&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Fri, 31 Dec 1999 12:00:00 +0000
-quickbook
"feed/history/boost_1_10_4.qbk
)
(feed/history/boost_1_11_0.qbk
-item
"<item><title>Version 1.11.0</title><pubDate>Tue,  1 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Library: Rational Number. Updated Libraries: Case, Config, Smart Pointer,
"      Utility.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;p&gt;
"    Added &lt;a href=&quot;/libs/rational/index.html&quot;&gt;Rational Number Library&lt;/a&gt;.
"    Minor fixes to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;, &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;,
"    &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt;, &lt;a href=&quot;/boost/utility.hpp&quot;&gt;utility.hpp&lt;/a&gt;,
"    and to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;min_rand&lt;/span&gt;&lt;/code&gt; sample programs.
"    Minor site cleanup (thanks to Paul Baxter).
"  &lt;/p&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Tue, 01 Feb 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_11_0.qbk
)
(feed/history/boost_1_11_1.qbk
-item
"<item><title>Version 1.11.1</title><pubDate>Wed,  2 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Minor fix for cast.hpp.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;p&gt;
"    Minor fix to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; (thanks to Doncho
"    Angelov).
"  &lt;/p&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Wed, 02 Feb 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_11_1.qbk
)
(feed/history/boost_1_11_2.qbk
-item
"<item><title>Version 1.11.2</title><pubDate>Mon, 21 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Smart Pointer.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;p&gt;
"    &lt;a href=&quot;/libs/smart_ptr/smarttests.htm&quot;&gt;Smart pointer timings&lt;/a&gt; added
"    (thanks to Gavin Collings). Minor fix to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;min_rand&lt;/span&gt;&lt;/code&gt;
"    sample program. Minor fixes to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;.
"  &lt;/p&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Mon, 21 Feb 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_11_2.qbk
)
(feed/history/boost_1_12_0.qbk
-item
"<item><title>Version 1.12.0</title><pubDate>Wed, 23 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Library: Integer.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;p&gt;
"    Adds a &lt;a href=&quot;/libs/integer/integer_traits.html&quot;&gt;integer_traits&lt;/a&gt;
"    header from Jens Maurer to the &lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer
"    Library&lt;/a&gt;.
"  &lt;/p&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Wed, 23 Feb 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_12_0.qbk
)
(feed/history/boost_1_13_0.qbk
-item
"<item><title>Version 1.13.0</title><pubDate>Tue, 29 Feb 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Added Libraries: Utility, Type Traits, Call Traits, Compressed Pair.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;p&gt;
"    Adds &lt;a href=&quot;/libs/utility/index.html&quot;&gt;Utility Library&lt;/a&gt; &lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;type_traits&lt;/a&gt;,
"    &lt;a href=&quot;/libs/utility/call_traits.htm&quot;&gt;call_traits&lt;/a&gt;, and &lt;a href=&quot;/libs/utility/compressed_pair.htm&quot;&gt;compressed_pair&lt;/a&gt;
"    headers from John Maddock, Steve Cleary and Howard Hinnant.
"  &lt;/p&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Tue, 29 Feb 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_13_0.qbk
)
(feed/history/boost_1_14_0.qbk
-item
"<item><title>Version 1.14.0</title><pubDate>Sun,  5 Mar 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Integer. Experimental libraries moved to vault.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;p&gt;
"    &lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt; status upgraded
"    after removing bin_bun.hpp. The &amp;quot;Experimental&amp;quot; library category has
"    been removed; the boost files/vault now serves the purpose. Minor fix to &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt; line endings.
"  &lt;/p&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Sun, 05 Mar 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_14_0.qbk
)
(feed/history/boost_1_14_1.qbk
-item
"<item><title>Version 1.14.1</title><pubDate>Fri, 17 Mar 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Rational, Smart Pointer, Call Traits, Compressed Pair, Type
"      Traits.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;p&gt;
"    Minor fix to &lt;a href=&quot;/boost/rational.hpp&quot;&gt;rational.hpp&lt;/a&gt;. Minor documentation
"    changes to the &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointer&lt;/a&gt;
"    Library and &lt;a href=&quot;/libs/utility/call_traits.htm&quot;&gt;call_traits&lt;/a&gt;,
"    &lt;a href=&quot;/libs/utility/compressed_pair.htm&quot;&gt;compressed_pair&lt;/a&gt;, and type_traits.
"    Updated &lt;a href=&quot;/more/lib_guide.htm&quot;&gt;Library Guidelines&lt;/a&gt; and &lt;a href=&quot;/users/people.html&quot;&gt;People&lt;/a&gt; page.
"  &lt;/p&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Fri, 17 Mar 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_14_1.qbk
)
(feed/history/boost_1_14_2.qbk
-item
"<item><title>Version 1.14.2</title><pubDate>Tue,  9 May 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Documentation updates.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;p&gt;
"    No libraries updated. &lt;a href=&quot;/more/lib_guide.htm&quot;&gt;Library Requirements and
"    Guidelines&lt;/a&gt; expanded, &lt;a href=&quot;/more/submission_process.htm&quot;&gt;Library
"    Submission Process&lt;/a&gt; added.
"  &lt;/p&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Tue, 09 May 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_14_2.qbk
)
(feed/history/boost_1_14_3.qbk
-item
"<item><title>Version 1.14.3</title><pubDate>Mon, 29 May 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Config, Type Traits.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;p&gt;
"    Minor additions to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; for Borland
"    compilers. Minor fix to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_traits&lt;/span&gt;&lt;/code&gt;
"    example. Minor web site fixes. &lt;a href=&quot;/more/formal_review_process.htm&quot;&gt;Library
"    Formal Review Process&lt;/a&gt; page added.
"  &lt;/p&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Mon, 29 May 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_14_3.qbk
)
(feed/history/boost_1_15_0.qbk
-item
"<item><title>Version 1.15.0</title><pubDate>Sat, 17 Jun 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Added Library: Random Number. Updated Libraries: Utility, Config, Cast.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;p&gt;
"    &lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt; from Jens
"    Maurer added. Updated utility library &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators&lt;/a&gt;
"    eliminates code bloat. Minor additions to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;
"    and &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; for Microsoft compilers.
"  &lt;/p&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Sat, 17 Jun 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_15_0.qbk
)
(feed/history/boost_1_15_1.qbk
-item
"<item><title>Version 1.15.1</title><pubDate>Wed, 21 Jun 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Cast, Operators, Config.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;p&gt;
"    Fixes to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; and &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators&lt;/a&gt;
"    fix. Minor additions to &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; for
"    Microsoft compilers. The 1.15.0 operators changes seem to have introduced incompatibilities.
"    We are working on fixing them, and have started to build a regression test to
"    prevent similar future problems.
"  &lt;/p&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Wed, 21 Jun 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_15_1.qbk
)
(feed/history/boost_1_16_0.qbk
-item
"<item><title>Version 1.16.0</title><pubDate>Wed, 28 Jun 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Functional, iterator header, Updated Libraries: Random Number,
"      Rational, Cast, Smart Pointer, Config.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      Added &lt;a href=&quot;/libs/functional/index.html&quot;&gt;Functional Library&lt;/a&gt; -
"      Enhanced function object adaptors from Mark Rodgers.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Added missing &lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;
"      files.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Updated &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators docs&lt;/a&gt; and
"      &lt;a href=&quot;/boost/operators.hpp&quot;&gt;operators.hpp&lt;/a&gt;.
"    &lt;/li&gt;
"    &lt;li&gt;
"      New &lt;a href=&quot;/boost/iterator.hpp&quot;&gt;iterator.hpp&lt;/a&gt; header.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Minor &lt;a href=&quot;/boost/rational.hpp&quot;&gt;rational.hpp&lt;/a&gt;, &lt;a href=&quot;/libs/rational/rational_example.cpp&quot;&gt;rational_example.cpp&lt;/a&gt;,
"      and &lt;a href=&quot;/libs/integer/integer_traits_test.cpp&quot;&gt;integer_traits_test.cpp&lt;/a&gt;
"      changes to support more compilers.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Revised &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;: removed implicit_cast,
"      plus fixes for broken compilers.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Minor &lt;a href=&quot;/boost/smart_ptr.hpp&quot;&gt;smart_ptr.hpp&lt;/a&gt; workaround for
"      some GCC builds.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Several &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; changes for Microsoft,
"      Intel, and other compilers.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Added &lt;a href=&quot;/libs/config/index.html&quot;&gt;Configuration Header&lt;/a&gt; page
"      and test program.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Added Experimental &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt;
"      page showing what library works with which compilers.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Wed, 28 Jun 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_16_0.qbk
)
(feed/history/boost_1_16_1.qbk
-item
"<item><title>Version 1.16.1</title><pubDate>Wed,  5 Jul 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Integer, Random Number, Cast, Call Traits, Operators.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer&lt;/a&gt;&lt;/span&gt; library: fixed
"      &lt;a href=&quot;/boost/cstdint.hpp&quot;&gt;cstdint.hpp&lt;/a&gt; bug, added &lt;a href=&quot;/libs/integer/cstdint_test.cpp&quot;&gt;cstdint_test.cpp&lt;/a&gt;,
"      updated &lt;a href=&quot;/libs/integer/cstdint.htm&quot;&gt;docs&lt;/a&gt;.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; minor
"      fixes to &lt;a href=&quot;/boost/random.hpp&quot;&gt;random.hpp&lt;/a&gt; and &lt;a href=&quot;/libs/random/random_test.cpp&quot;&gt;random_test.cpp&lt;/a&gt;
"      to support more compilers.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Updated &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; with more Microsoft compiler
"      workarounds.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Updated &lt;a href=&quot;/libs/utility/call_traits.htm&quot;&gt;call_traits docs&lt;/a&gt;,
"      added &lt;a href=&quot;/libs/utility/call_traits_test.cpp&quot;&gt;call_traits_test.cpp&lt;/a&gt;.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Cleanup and bug fixes for &lt;a href=&quot;/boost/operators.hpp&quot;&gt;operators.hpp&lt;/a&gt;
"      and &lt;a href=&quot;/libs/utility/operators_test.cpp&quot;&gt;operators_test.cpp&lt;/a&gt;.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Wed, 05 Jul 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_16_1.qbk
)
(feed/history/boost_1_17_0.qbk
-item
"<item><title>Version 1.17.0</title><pubDate>Thu,  3 Aug 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Added Library: Array. Updated Libraries: Array Traits, Random Number, Smart
"      Pointer.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;&lt;/span&gt; added - An
"      STL compliant container wrapper for arrays of constant size from Nicolai Josuttis.
"    &lt;/li&gt;
"    &lt;li&gt;
"      array traits header renamed array_traits.hpp (was array.hpp).
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; more
"      minor changes to support more compilers.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
"  performance
"      reducing exception-specifications removed.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Compiler and test program fixes for call_traits, compressed_pair, and type_traits.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Updated &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; to clear compiler warning
"      messages.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Linux &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt; added.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Boost source code now lives in a publicly accessible Concurrent Versions System
"      (CVS) repository.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Thu, 03 Aug 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_17_0.qbk
)
(feed/history/boost_1_18_0.qbk
-item
"<item><title>Version 1.18.0</title><pubDate>Thu, 28 Sep 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Graph, Regular Expression. Updated Libraries: Array, Functional,
"      Utility, Integer.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      Preliminary release of two important new libraries:
"      &lt;ul&gt;
"        &lt;li&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt; -
"          Generic graph components and algorithms from Jeremy Siek and a University
"          of Notre Dame team.
"        &lt;/li&gt;
"        &lt;li&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; -
"          Text pattern matching in all its glory from John Maddock.
"        &lt;/li&gt;
"      &lt;/ul&gt;
"    &lt;/li&gt;
"    &lt;li&gt;
"      Other changes:
"      &lt;ul&gt;
"        &lt;li&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;&lt;/span&gt; improvements
"          reflecting formal review comments.
"        &lt;/li&gt;
"        &lt;li&gt;
"          &lt;a href=&quot;/boost/functional.hpp&quot;&gt;functional.hpp&lt;/a&gt; compiler workarounds
"          added.
"        &lt;/li&gt;
"        &lt;li&gt;
"          &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tie&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;
"          &lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;template&lt;/span&gt;&lt;/code&gt;
"          added to utility.hpp for easier handling of std::pair&amp;lt;&amp;gt; return values.
"        &lt;/li&gt;
"        &lt;li&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;&lt;/span&gt; improved
"          handling of 64-bit integers.
"        &lt;/li&gt;
"        &lt;li&gt;
"          Minor web site page updates.
"        &lt;/li&gt;
"      &lt;/ul&gt;
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Thu, 28 Sep 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_18_0.qbk
)
(feed/history/boost_1_18_1.qbk
-item
"<item><title>Version 1.18.1</title><pubDate>Sun, 15 Oct 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Graph, Random, Regular Expression, Configuration.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;,
"      &lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;, and &lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;: Minor fixes.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Configuration Header&lt;/a&gt;&lt;/span&gt; additions
"      for various compiler foibles.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Portability Hints: Borland C++ 5.5.1 from Jens Maurer added.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt;&lt;/span&gt; updated
"      for latest versions of several compilers.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Sun, 15 Oct 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_18_1.qbk
)
(feed/history/boost_1_18_2.qbk
-item
"<item><title>Version 1.18.2</title><pubDate>Fri,  3 Nov 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Case, Graph, Regular Expression, Configuration. Utility
"      library split into separate libraries.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;Cast Library&lt;/a&gt;&lt;/span&gt; Fix numeric_cast&amp;lt;&amp;gt;
"      bugs with floating types.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
"  minor
"      fixes.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
"      fixes.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Configuration Header&lt;/a&gt;&lt;/span&gt; more
"      fixes for broken compilers.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Boost Header Dependencies page added.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Terminology change: Several headers previously lumped together as a &amp;quot;utility&amp;quot;
"      library are now considered separate libraries. For historical reasons, their
"      non-header files still live in the &amp;quot;utility&amp;quot; sub-directory.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Fri, 03 Nov 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_18_2.qbk
)
(feed/history/boost_1_18_3.qbk
-item
"<item><title>Version 1.18.3</title><pubDate>Sat, 18 Nov 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Graph, Regular Expression, Cast.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
"  minor
"      fixes and additions.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
"      fixes.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; Borland compiler fixes.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;/boost/cstdint.hpp&quot;&gt;cstdint.hpp&lt;/a&gt; changed to no longer expose
"      names to the global namespace.
"    &lt;/li&gt;
"    &lt;li&gt;
"      BeOS5/Intel compiler status contributed by John Maddock.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler Status&lt;/a&gt;&lt;/span&gt; added
"      two additional test programs.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Sat, 18 Nov 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_18_3.qbk
)
(feed/history/boost_1_19_0.qbk
-item
"<item><title>Version 1.19.0</title><pubDate>Sun, 10 Dec 2000 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Concept Check, Python, Static Assert, Property Map Concepts.
"      Updated Libraries: Graph, Regular Expression.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/concept_check/concept_check.htm&quot;&gt;Concept Check Library&lt;/a&gt;&lt;/span&gt; added
"      - tools for generic programming from Jeremy Siek.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;&lt;/span&gt; added
"      - reflects C++ classes and functions into Python, from Dave Abrahams.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/static_assert/static_assert.htm&quot;&gt;Static Assert Library&lt;/a&gt;&lt;/span&gt; added
"      - compile time assertions from John Maddock
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_map/property_map.html&quot;&gt;Property Map Concepts&lt;/a&gt;&lt;/span&gt; added
"      - interfaces which map key objects to value objects from Jeremy Siek.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
"  minor
"      updates.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
"      updates.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;/more/lib_guide.htm&quot;&gt;Library Requirements and Guidelines&lt;/a&gt;
"      - directory name policy added.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;/more/faq.htm&quot;&gt;FAQ&lt;/a&gt; updated.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Sun, 10 Dec 2000 12:00:00 +0000
-quickbook
"feed/history/boost_1_19_0.qbk
)
(feed/history/boost_1_20_0.qbk
-item
"<item><title>Version 1.20.0</title><pubDate>Sat,  6 Jan 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Library: Conversion. Updated Libraries: Array, Graph, Regular Expression.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/conversion/index.html&quot;&gt;Conversion Library&lt;/a&gt;&lt;/span&gt; added
"      - &lt;a href=&quot;/libs/conversion/cast.htm&quot;&gt;cast&lt;/a&gt; and &lt;a href=&quot;/libs/conversion/lexical_cast.htm&quot;&gt;lexical_cast&lt;/a&gt;
"      headers from Dave Abrahams and Kevlin Henney.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Web site moved to a larger host after the old ISP collapsed unexpectedly.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Regression tests now include execution testing. See &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Compiler
"      Status&lt;/a&gt;.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;/more/discussion_policy.htm&quot;&gt;Discussion Policy&lt;/a&gt; page added.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;&lt;/span&gt; minor documentation
"      improvements.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
"  minor
"      updates.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
"      updates.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Sat, 06 Jan 2001 12:00:00 +0000
-quickbook
"feed/history/boost_1_20_0.qbk
)
(feed/history/boost_1_20_1.qbk
-item
"<item><title>Version 1.20.1</title><pubDate>Wed, 10 Jan 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Compressed Pair, Graph Library, Regular Expression.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;/boost/compressed_pair.hpp&quot;&gt;compressed_pair.hpp&lt;/a&gt; minor update
"      fixes test failures of other libraries under VC++.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt;
"  minor
"      updates.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;&lt;/span&gt; minor
"      updates.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Minor website fixes including missing files in boost_all.zip.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Wed, 10 Jan 2001 12:00:00 +0000
-quickbook
"feed/history/boost_1_20_1.qbk
)
(feed/history/boost_1_20_2.qbk
-item
"<item><title>Version 1.20.2</title><pubDate>Sat, 10 Feb 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Array traits, Graph, Integer, Random Number, Rational Number,
"      Regular Expression, Smart Pointer, Timer.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/project/showfiles.php?group_id=7586&amp;package_id=8041&amp;release_id=138112</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      Array traits: minor portability fix.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;&lt;/span&gt; -
"      Changes to &lt;a href=&quot;/libs/graph/doc/breadth_first_search.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;breadth_first_search&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"      re: &lt;a href=&quot;/libs/graph/doc/BFSVisitor.html&quot;&gt;BFSVisitor&lt;/a&gt;, added
"      max flow algorithms &lt;a href=&quot;/libs/graph/doc/edmunds_karp_max_flow.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;edmunds_karp_max_flow&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"      and &lt;a href=&quot;/libs/graph/doc/push_relabel_max_flow.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;push_relabel_max_flow&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, added &lt;a href=&quot;/libs/graph/doc/adjacency_matrix.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; graph class, added
"      &lt;a href=&quot;/libs/graph/doc/filtered_graph.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;filtered_graph&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"      adaptor
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;:&lt;/span&gt; minor
"      fixes to integer.hpp and integer_test.cpp
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;microsoft_vcpp.html&quot;&gt;Portability Hints: Microsoft Visual C++&lt;/a&gt;
"      added.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Minor
"      portability fixes
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/rational/index.html&quot;&gt;Rational Number Library&lt;/a&gt;:&lt;/span&gt;
"  documentation
"      updates, efficiency improvements, co-operates with user-defined types, regression
"      tests
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;:&lt;/span&gt; minor
"      updates.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
"  shared_ptr
"      example added.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/timer/index.html&quot;&gt;Timer Library&lt;/a&gt;:&lt;/span&gt; changed to
"      an all inline implementation.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Sat, 10 Feb 2001 12:00:00 +0000
-quickbook
"feed/history/boost_1_20_2.qbk
)
(feed/history/boost_1_21_0.qbk
-item
"<item><title>Version 1.21.0</title><pubDate>Fri,  9 Mar 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Iterator Adaptor, Pool, Test. Updated Libraries: Graph, Python,
"      Regular Expression, Type Traits.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/iterator_adaptors.htm&quot;&gt;Iterator Adaptor Library&lt;/a&gt;&lt;/span&gt; added.
"      Adapt a base type into a standard conforming iterator, and more, from Dave
"      Abrahams, Jeremy Siek, and John Potter.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/pool/doc/index.html&quot;&gt;Pool Library&lt;/a&gt;&lt;/span&gt; added. Memory
"      pool management from Steve Cleary.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/test/doc/index.html&quot;&gt;Test Library&lt;/a&gt;&lt;/span&gt; added. Support
"      for program testing and execution from Beman Dawes.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;/more/generic_programming.html&quot;&gt;Generic Programming Techniques&lt;/a&gt;
"      page added, contributed by Dave Abrahams.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt;
"  Updated
"      use of iterator adaptors. Changed &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;
"      &lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;/code&gt; for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_list&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;edge_descriptor&lt;/span&gt;&lt;/code&gt;
"      to improve semantics for multigraphs. Moved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_iterator_generator&lt;/span&gt;&lt;/code&gt;
"      from namespace &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;/code&gt; and added &lt;a href=&quot;/libs/graph/doc/adjacency_iterator.html&quot;&gt;documentation&lt;/a&gt;.
"      Renamed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dynamic_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; to &lt;a href=&quot;/libs/graph/doc/incremental_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;incremental_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"      better matching graph literature terminology. Cleaned up interface of &lt;a href=&quot;/libs/graph/doc/connected_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;connected_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and created separate &lt;a href=&quot;/libs/graph/doc/strong_components.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;strong_components&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"      function using Tarjan's more efficient algorithm. Fixed documentation figures
"      for &lt;a href=&quot;/libs/graph/doc/adjacency_list.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_list&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"      and &lt;a href=&quot;/libs/graph/doc/adjacency_matrix.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
"      Added docs for &lt;a href=&quot;/libs/graph/doc/cuthill_mckee_ordering.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cuthill_mckee_ordering&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"      algorithm.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;&lt;/span&gt; upgraded.
"      Better compatibility with Python 2.0, NULL pointers and smart-pointers get
"      converted to/from python None, massive documentation review/revision.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regular Expression Library&lt;/a&gt;:&lt;/span&gt; Minor
"      fixes for Unicode platforms.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;Type Traits Library&lt;/a&gt;&lt;/span&gt;
"  upgraded:
"      Major revision.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Fri, 09 Mar 2001 12:00:00 +0000
-quickbook
"feed/history/boost_1_21_0.qbk
)
(feed/history/boost_1_21_1.qbk
-item
"<item><title>Version 1.21.1</title><pubDate>Wed, 14 Mar 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Graph, Python, Regex.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.21.1/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      New download page. The .zip and .tar.gz files now live on the SourceForge ftp
"      site.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Minor
"      docs fixes.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt; Minor
"      docs fixes.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex Library&lt;/a&gt;:&lt;/span&gt; Minor portability
"      fixes.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Wed, 14 Mar 2001 12:00:00 +0000
-quickbook
"feed/history/boost_1_21_1.qbk
)
(feed/history/boost_1_21_2.qbk
-item
"<item><title>Version 1.21.2</title><pubDate>Tue, 24 Apr 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Compatibility. Updated Libraries: Random Number, Integer, Graph.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.21.2/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/compatibility/index.html&quot;&gt;Compatibility Library&lt;/a&gt;&lt;/span&gt;
"  added:
"      Help for non-conforming standard libraries missing CXX headers from Ralf Grosse-Kunstleve,
"      and help for missing standard library &amp;lt;limits&amp;gt; header from Jens Maurer.
"      (These are unreviewed implementation libraries, treated as maintenance steps
"      only.)
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Split
"      into separate headers, updated documentation, added lagged_fibonacci generator.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;:&lt;/span&gt; Minor
"      portability update.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/table_of_contents.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt;
"  Changed
"      algorithm interfaces to use named parameters technique. Added graph isomorphism
"      algorithm.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Download refinements - files now available from either FTP or web server.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;http://sourceforge.net/tracker/?group_id=7586&quot;&gt;Tracker&lt;/a&gt;
"      Added: View and submit bug, support, and feature requests.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Minor portability fixes in several other libraries.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Tue, 24 Apr 2001 12:00:00 +0000
-quickbook
"feed/history/boost_1_21_2.qbk
)
(feed/history/boost_1_22_0.qbk
-item
"<item><title>Version 1.22.0</title><pubDate>Fri, 25 May 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libary: CRC. Updated Libraries: Graph, Integer, Regex, Smart Pointer, Utility.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.22.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/crc/index.html&quot;&gt;CRC Library&lt;/a&gt;&lt;/span&gt; added. Compute
"      cyclic redundancy codes from Daryle Walker.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Minor
"      fixes.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/integer_traits.html&quot;&gt;Integer Traits&lt;/a&gt;:&lt;/span&gt; added
"      wchar_t specialization, minor portability fixes.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex Library&lt;/a&gt;:&lt;/span&gt; Minor portability
"      fixes.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/smart_ptr.htm&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
"  fixed
"      bugs, tightened requirements, added examples.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;Utility Library&lt;/a&gt;:&lt;/span&gt; added
"      checked_delete() and checked_array_delete() functions.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Fri, 25 May 2001 12:00:00 +0000
-quickbook
"feed/history/boost_1_22_0.qbk
)
(feed/history/boost_1_23_0.qbk
-item
"<item><title>Version 1.23.0</title><pubDate>Fri,  6 Jul 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Any, Function, Tokenizer, Special functions, Octonions, Quaternions.
"      Updated Library: Smart Pointer.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.23.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/any/index.html&quot;&gt;Any Library&lt;/a&gt;&lt;/span&gt; added. Safe, generic
"      container for single values of different value types, from Kevlin Henney.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;&lt;/span&gt; added.
"      Function object wrappers for deferred calls or callbacks, from Doug Gregor.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tokenizer/index.html&quot;&gt;Tokenizer Library&lt;/a&gt;&lt;/span&gt; added.
"      Break a string into a series of tokens, from John Bandela.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;/doc/html/boost_math/math_special_functions.html&quot;&gt;Special functions&lt;/a&gt;,
"      &lt;a href=&quot;/doc/html/boost_math/octonions.html&quot;&gt;octonions&lt;/a&gt;, &lt;a href=&quot;/doc/html/boost_math/quaternions.html&quot;&gt;quaternions&lt;/a&gt; added, from
"      Hubert Holin.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/smart_ptr.htm&quot;&gt;Smart Pointer Library&lt;/a&gt;:&lt;/span&gt;
"  shared_ptr
"      polymorphic pointers now work on more broken compilers.
"    &lt;/li&gt;
"    &lt;li&gt;
"      IBM/Aix Compiler status table contributed by Toon Knapen.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Minor fixes to a number of other libraries.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Fri, 06 Jul 2001 12:00:00 +0000
-quickbook
"feed/history/boost_1_23_0.qbk
)
(feed/history/boost_1_24_0.qbk
-item
"<item><title>Version 1.24.0</title><pubDate>Sun, 19 Aug 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Library: Tuple.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.24.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tuple/doc/tuple_users_guide.html&quot;&gt;Tuple Library&lt;/a&gt;&lt;/span&gt;
"  added.
"      Tuples ease definition of functions returning multiple values, and more, from
"      Jaakko Jarvi.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Minor fixes to some other libraries.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost Build System&lt;/a&gt;&lt;/span&gt; added.
"      Preliminary release of an innovative build system for Boost libraries, from
"      Dave Abrahams and others.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;/more/formal_review_schedule.html&quot;&gt;Formal Review Schedule&lt;/a&gt;
"      added. Shows current, future, and recent past review dates.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Sun, 19 Aug 2001 12:00:00 +0000
-quickbook
"feed/history/boost_1_24_0.qbk
)
(feed/history/boost_1_25_0.qbk
-item
"<item><title>Version 1.25.0</title><pubDate>Mon,  1 Oct 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Thread, Bind. Updated Libraries: Utility, Array, Config, Random
"      Number, Math, Tokenizer.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.25.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/doc/index.html&quot;&gt;Thread Library&lt;/a&gt;&lt;/span&gt; added.
"      Portable C++ multi-programming at last, from William Kempf.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;/libs/utility/base_from_member.html&quot;&gt;Base From Member&lt;/a&gt; added
"      to &lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;Utility Library&lt;/a&gt;. Support
"      for the base from member idiom, from Daryle Walker.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;/libs/bind/bind.html&quot;&gt;Bind&lt;/a&gt; and &lt;a href=&quot;/libs/bind/mem_fn.html&quot;&gt;mem_fn&lt;/a&gt;
"      added - Generalized binders for function/object/pointers and member functions,
"      from Peter Dimov.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array Library&lt;/a&gt;:&lt;/span&gt; Minor updates,
"      from Nico Josuttis.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/config.htm&quot;&gt;Config Library&lt;/a&gt;:&lt;/span&gt; major redesign
"      with much improved and automated configuration of Boost libraries for specific
"      compilers, from John Maddock.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Fixed
"      bug when copying normal_distribution and improved the documentation, from Michael
"      Stevens and Jens Maurer.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;/doc/html/boost_math/math_special_functions.html&quot;&gt;Special functions&lt;/a&gt;,
"      &lt;a href=&quot;/doc/html/boost_math/octonions.html&quot;&gt;octonions&lt;/a&gt;, &lt;a href=&quot;/doc/html/boost_math/quaternions.html&quot;&gt;quaternions&lt;/a&gt; updated, now
"      useable with many more compilers, plus three new special functions, from Hubert
"      Holin, Eric Ford, and others.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tokenizer/index.html&quot;&gt;Tokenizer Library&lt;/a&gt;:&lt;/span&gt;
"  fixes/enhancements
"      to escaped_list_separator based on empty fields and tokens comments from Johan
"      Nillson and Jens Maurer.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Coming Soon - A mailing list for Boost users!
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Mon, 01 Oct 2001 12:00:00 +0000
-quickbook
"feed/history/boost_1_25_0.qbk
)
(feed/history/boost_1_25_1.qbk
-item
"<item><title>Version 1.25.1</title><pubDate>Mon,  5 Nov 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Graph, Thread, Function.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.25.1/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost Build System&lt;/a&gt;:&lt;/span&gt; Continued
"      improvements.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/config.htm&quot;&gt;Config Library&lt;/a&gt;:&lt;/span&gt; Continued
"      refinements.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Final
"      cleanup for upcoming the Boost Graph Library book.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/doc/index.html&quot;&gt;Thread Library&lt;/a&gt;:&lt;/span&gt; Minor
"      fixes - tests now pass on most Win32 and POSIX systems including Linux and
"      Solaris. Semaphore removed as too error prone.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; direct
"      support for member function pointers and documentation updates.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;http://groups.yahoo.com/group/Boost-Users&quot;&gt;Boost-Users&lt;/a&gt;
"      mailing list has been created to address topics of interest to users of Boost
"      libraries.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;http://www.crystalclearsoftware.com/cgi-bin/boost_wiki/wiki.pl&quot;&gt;Boost
"      Wiki web&lt;/a&gt; added. Provides a place for Boost users to openly discuss
"      and document the use of Boost libraries. It is not officially maintained by
"      Boost developers.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Mon, 05 Nov 2001 12:00:00 +0000
-quickbook
"feed/history/boost_1_25_1.qbk
)
(feed/history/boost_1_26_0.qbk
-item
"<item><title>Version 1.26.0</title><pubDate>Fri, 30 Nov 2001 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Common Factor, Preprocessor. Updated Libraries: Iterator Adaptor,
"      Random Number, Operators.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.26.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/common_factor.html&quot;&gt;Common Factor Library&lt;/a&gt;&lt;/span&gt;
"  added.
"      Greatest common divisor and least common multiple, from Daryle Walker.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/preprocessor/doc/index.html&quot;&gt;Preprocessor Library&lt;/a&gt;&lt;/span&gt;
"  added.
"      Preprocessor metaprogramming tools including repetition and recursion, from
"      Vesa Karvonen.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/iterator_adaptors.htm&quot;&gt;Iterator Adaptor Library&lt;/a&gt;:&lt;/span&gt; Added
"      &lt;a href=&quot;/libs/utility/generator_iterator.htm&quot;&gt;generator iterator&lt;/a&gt;
"      adaptor, from Jens Maurer.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Removed
"      iterator interface. Fixed overflows in uniform_int&amp;lt;&amp;gt;. Both changes cause
"      random number sequences to differ compared to previous boost releases.
"    &lt;/li&gt;
"    &lt;li&gt;
"      [phase library..&lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;operators.hpp&lt;/a&gt;:]
"      Improvements from Daryle and Helmut Ziesel
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost.Build&lt;/a&gt;:&lt;/span&gt; Continuing
"      improvements, including pre-built &lt;a href=&quot;/tools/build/index.html&quot;&gt;Boost.Jam
"      executables&lt;/a&gt;.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Minor fixes to a number of other libraries.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Fri, 30 Nov 2001 12:00:00 +0000
-quickbook
"feed/history/boost_1_26_0.qbk
)
(feed/history/boost_1_27_0.qbk
-item
"<item><title>Version 1.27.0</title><pubDate>Tue,  5 Feb 2002 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Python, Integer, Function, Quaternions, Octonions, Smart
"      Pointers, Preprocessor, Threads.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.27.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt; Scott
"      Snyder contributed inplace operator support.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer Library&lt;/a&gt;:&lt;/span&gt; Daryle
"      Walker contributed enhancements to the &lt;a href=&quot;/libs/integer/integer.htm&quot;&gt;type
"      selection templates&lt;/a&gt;, and added new compile-time &lt;a href=&quot;/libs/integer/doc/integer_mask.html&quot;&gt;bit
"      mask&lt;/a&gt;, &lt;a href=&quot;/libs/integer/doc/static_log2.html&quot;&gt;binary logarithm&lt;/a&gt;,
"      and &lt;a href=&quot;/libs/integer/doc/static_min_max.html&quot;&gt;extrema&lt;/a&gt; templates.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; user
"      may request that &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt; objects store a reference to a function
"      object target instead of a copy, using &lt;a href=&quot;/libs/bind/ref.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ref&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;. Stateless objects are optimized
"      so that they require no dynamic storage.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/boost_math/quaternions.html&quot;&gt;Quaternions&lt;/a&gt;:&lt;/span&gt; added
"      support for GCC 2.95.x.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/boost_math/octonions.html&quot;&gt;Octonions&lt;/a&gt;:&lt;/span&gt; added
"      support for GCC 2.95.x.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointers Library&lt;/a&gt;:&lt;/span&gt; Peter
"      Dimov contributed a new implementation that fixes some bugs and adds some features
"      including &lt;a href=&quot;/libs/smart_ptr/compatibility.htm#threadsafe&quot;&gt;thread
"      safety&lt;/a&gt; when manipulating the use count, &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#constructors&quot;&gt;custom
"      delete functions&lt;/a&gt;, a new &lt;a href=&quot;/libs/smart_ptr/weak_ptr.htm&quot;&gt;weak_ptr&lt;/a&gt;,
"      and shared_static_cast and shared_dynamic_cast.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/preprocessor/doc/index.html&quot;&gt;Preprocessor Library&lt;/a&gt;:&lt;/span&gt;
"  changed
"      macro prefix from BOOST_PREPROCESSOR to BOOST_PP, added support for list data
"      structure manipulation, added examples, made library ANSI C friendly, added
"      generalized &lt;a href=&quot;/libs/preprocessor/doc/ref/for.html&quot;&gt;repetition&lt;/a&gt;
"      and &lt;a href=&quot;/libs/preprocessor/doc/ref/while.html&quot;&gt;iteration&lt;/a&gt; primitives,
"      improved reference manual.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/doc/index.html&quot;&gt;Threads Library&lt;/a&gt;:&lt;/span&gt; Mac
"      Carbon implementation contributed by Mac Murrett.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Minor fixes to many libraries.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Tue, 05 Feb 2002 12:00:00 +0000
-quickbook
"feed/history/boost_1_27_0.qbk
)
(feed/history/boost_1_28_0.qbk
-item
"<item><title>Version 1.28.0</title><pubDate>Wed, 15 May 2002 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Lambda, I/O State Saver. Updated Libraries: Configuration, Random
"      Number, Smart Pointers, Function Utility.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.28.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      The Boost mailing lists are now also accessible as &lt;a href=&quot;/more/mailing_lists.htm#newsgroup&quot;&gt;newsgroups&lt;/a&gt;.
"    &lt;/li&gt;
"    &lt;li&gt;
"      A powerful &lt;a href=&quot;http://aspn.activestate.com/ASPN/Mail/Archives/boost/&quot;&gt;mailing
"      list archive&lt;/a&gt; has been contributed by the &lt;a href=&quot;http://aspn.activestate.com/ASPN&quot;&gt;ActiveState
"      Programmer Network&lt;/a&gt;.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/lambda/doc/index.html&quot;&gt;Lambda Library&lt;/a&gt;&lt;/span&gt; added,
"      from Jaakko Jarvi and Gary Powell. Define small unnamed function objects at
"      the actual call site: for_each( a.begin(), a.end(), std::cout &amp;lt;&amp;lt; _1 &amp;lt;&amp;lt;
"      ' ' );
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/io/doc/ios_state.html&quot;&gt;I/O State Saver Library added&lt;/a&gt;&lt;/span&gt; -
"      Save I/O state to prevent jumbled data, from Daryle Walker.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/config.htm&quot;&gt;Configuration Library&lt;/a&gt;:&lt;/span&gt; User
"      code should not use BOOST_NO_LIMITS.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random Number Library&lt;/a&gt;:&lt;/span&gt; Avoid
"      compiler warnings.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointers Library&lt;/a&gt;:&lt;/span&gt; Added
"      shared_polymorphic_cast and shared_polymorphic_downcast.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; Now
"      supports function objects with the unary &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;
"      operator overloaded.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;Utility Library&lt;/a&gt;:&lt;/span&gt; Added
"      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"      function.
"    &lt;/li&gt;
"    &lt;li&gt;
"      The usual small fixes and tweaks.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Wed, 15 May 2002 12:00:00 +0000
-quickbook
"feed/history/boost_1_28_0.qbk
)
(feed/history/boost_1_29_0.qbk
-item
"<item><title>Version 1.29.0</title><pubDate>Thu, 10 Oct 2002 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Date-Time, Dynamic Bitset, Format. Updated Libraries: Function,
"      Multi-Array, Preprocessor, Python, Signals, uBLASH.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.29.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/doc/index.html&quot;&gt;Date-Time Library&lt;/a&gt;&lt;/span&gt; added
"      - Dates, times, leap seconds, infinity, and more, from Jeff Garland.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/dynamic_bitset/dynamic_bitset.html&quot;&gt;Dynamic Bitset&lt;/a&gt;&lt;/span&gt;
"  added
"      - A runtime sized version of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bitset&lt;/span&gt;&lt;/code&gt;
"      class from Jeremy Siek and Chuck Allison.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/format/index.html&quot;&gt;Format Library&lt;/a&gt;&lt;/span&gt; added - Type-safe
"      'printf-like' format operations, from Samuel Krempp.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;:&lt;/span&gt; Major
"      syntactic changes have been made. Some old syntax and little-used features
"      have been deprecated (and will be removed shortly), and the syntax for the
"      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt; class template has been greatly
"      improved on conforming compilers. Please see the compatibility note for more
"      information.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_array/doc/index.html&quot;&gt;Multi-array Library&lt;/a&gt;&lt;/span&gt;
"  added
"      - Multidimensional containers and adaptors for arrays of contiguous data, from
"      Ron Garcia.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/preprocessor/index.html&quot;&gt;Preprocessor Library&lt;/a&gt;:&lt;/span&gt;
"  Major
"      upgrade, from Paul Mensonides.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;&lt;/span&gt; - Version
"      2 is released, from Dave Abrahams and others. This is a major rewrite which
"      works on many more compilers and platforms, with a completely new interface
"      and lots of new features. Boost.Python v2 requires Python 2.2 or later.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/signals/doc/index.html&quot;&gt;Signals Library&lt;/a&gt;&lt;/span&gt; added
"      - Managed signals &amp;amp; slots callback implementation, from Doug Gregor.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/test/doc/index.html&quot;&gt;Test Library&lt;/a&gt;:&lt;/span&gt; Major new
"      version, including full unit test capabilities, from Gennadiy Rozental.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/numeric/ublas/doc/index.htm&quot;&gt;uBLAS Library&lt;/a&gt;&lt;/span&gt; added
"      - Basic linear algebra for dense, packed and sparse matrices, from Joerg Walter
"      and Mathias Koch.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Thu, 10 Oct 2002 12:00:00 +0000
-quickbook
"feed/history/boost_1_29_0.qbk
)
(feed/history/boost_1_30_0.qbk
-item
"<item><title>Version 1.30.0</title><pubDate>Wed, 19 Mar 2003 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Filesystem, Optional, Interval, MPL, Spirit Updated Libraries:
"      Smart Pointers, Utility, Date-Time, Function, Operators, Test
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.30.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/doc/index.htm&quot;&gt;Filesystem Library&lt;/a&gt;&lt;/span&gt; added
"      - Portable paths, iteration over directories, and other useful filesystem operations,
"      from Beman Dawes.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/optional/doc/optional.html&quot;&gt;Optional Library&lt;/a&gt;&lt;/span&gt; added
"      - A discriminated-union wrapper for optional values, from Fernando Cacciola.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/numeric/interval/doc/interval.htm&quot;&gt;Interval Library&lt;/a&gt;&lt;/span&gt;
"  added
"      - Extends the usual arithmetic functions to mathematical intervals, from Guillaume
"      Melquiond, Herve Bronnimann and Sylvain Pion.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/mpl/doc/index.html&quot;&gt;MPL&lt;/a&gt;&lt;/span&gt; added - Template metaprogramming
"      framework of compile-time algorithms, sequences and metafunction classes, from
"      Aleksey Gurtovoy.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit Library&lt;/a&gt;&lt;/span&gt; added - An
"      LL (unlimited lookahead) parser framework that represents parsers directly
"      as EBNF grammars in inlined C++ source code, complete with semantic actions,
"      ASTs and much more, from Joel de Guzman and team.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart Pointers Library&lt;/a&gt;&lt;/span&gt; -
"      cast functions are now spelled &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#static_pointer_cast&quot;&gt;static_pointer_cast&lt;/a&gt;
"      / &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#dynamic_pointer_cast&quot;&gt;dynamic_pointer_cast&lt;/a&gt;;
"      &lt;a href=&quot;/libs/smart_ptr/enable_shared_from_this.html&quot;&gt;enable_shared_from_this&lt;/a&gt;
"      added; shared_ptr::shared_ptr(), shared_ptr::reset(), weak_ptr::weak_ptr(),
"      weak_ptr::reset() no longer throw; &lt;a href=&quot;/libs/smart_ptr/shared_ptr.htm#get_deleter&quot;&gt;get_deleter&lt;/a&gt;
"      added; weak_ptr::get() removed; make_shared is now spelled &lt;a href=&quot;/libs/smart_ptr/weak_ptr.htm#lock&quot;&gt;weak_ptr::lock()&lt;/a&gt;
"      ; &lt;a href=&quot;/libs/smart_ptr/intrusive_ptr.html&quot;&gt;intrusive_ptr documentation&lt;/a&gt;
"      added; some experimental undocumented shared_ptr features have been removed;
"      a &lt;a href=&quot;/libs/smart_ptr/sp_techniques.html&quot;&gt;page describing some smart
"      pointer programming techniques&lt;/a&gt; has been added.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;/libs/utility/assert.html&quot;&gt;boost/assert.hpp&lt;/a&gt;, &lt;a href=&quot;/libs/utility/current_function.html&quot;&gt;boost/current_function.hpp&lt;/a&gt;,
"      &lt;a href=&quot;/libs/utility/throw_exception.html&quot;&gt;boost/throw_exception.hpp&lt;/a&gt;,
"      &lt;a href=&quot;/libs/utility/checked_delete.html&quot;&gt;boost/checked_delete.hpp&lt;/a&gt;
"      have been documented.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/doc/index.html&quot;&gt;Date-Time Library&lt;/a&gt;&lt;/span&gt; -
"      several fixes and small additions including an interface change to partial_date.
"      See the Date-Time Change History for more details.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function Library&lt;/a&gt;&lt;/span&gt; - added
"      support for assignment to zero (to clear) and comparison against zero (to check
"      if empty).
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/operators.htm#symmetry&quot;&gt;Operators Library&lt;/a&gt;&lt;/span&gt; -
"      now takes advantage of named return value optimization (NRVO) when available,
"      from Daniel Frey.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;/status/compiler_status.html&quot;&gt;Regression Tests&lt;/a&gt; - Much expanded,
"      plus a very nice &lt;a href=&quot;http://boost.sourceforge.net/regression-logs/&quot;&gt;summary
"      page&lt;/a&gt; from Rene Rivera.
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/test/index.html&quot;&gt;Test Library&lt;/a&gt;&lt;/span&gt; - introduced
"      following new facilities: &lt;ul&gt;
"  &lt;li&gt;
"  Automatic registration of unit tests &lt;/li&gt;
"  &lt;li&gt;
"          XML log format
"      &lt;/li&gt;
"  &lt;li&gt;
"          XML report format &lt;/li&gt;
"  &lt;li&gt;
"          BOOST_CHECK_NO_THROW test tool &lt;/li&gt;
"  &lt;li&gt;
"          BOOST_BITWISE_CHECK test tool
"      &lt;/li&gt;
"  &lt;/ul&gt;
"  &lt;p&gt;
"  For a complete list of changes see the Test Library &lt;a href=&quot;/libs/test/doc/release_notes.html#v1_30_0&quot;&gt;release
"      notes&lt;/a&gt;. &lt;/p&gt;
"
"    &lt;/li&gt;
"    &lt;li&gt;
"      Many fixes and enhancements to other libraries.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Wed, 19 Mar 2003 12:00:00 +0000
-quickbook
"feed/history/boost_1_30_0.qbk
)
(feed/history/boost_1_30_1.qbk
-item
"<item><title>Version 1.30.1</title><pubDate>Mon,  4 Aug 2003 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Withdrawn bug fix release, fixes for Lambda, Spirit, MPL, Function, Config,
"      Format, Regex, Smart Pointers, Python
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;p&gt;
"    This release was withdrawn on the 12 Aug 2003.
"  &lt;/p&gt;
"  &lt;p&gt;
"    Fixes were made to the following libraries: * The &lt;a href=&quot;/libs/lambda/doc/index.html&quot;&gt;Boost.Lambda&lt;/a&gt;
"    ..library is now usable with gcc-2.95.2 * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Boost.Spirit&lt;/a&gt;:&lt;/span&gt; 
"  *
"    Fixed. Using MSVC++6 (SP5), calling the assign action with a string value on
"    parsers using the file_iterator will not work. * Fixed: using assign semantic
"    action in a grammar with a multi_pass iterator adaptor applied to an std::istream_iterator
"    resulted in a failure to compile under msvc 7.0. * Fixed: There is a bug in the
"    &lt;tt&gt;range_run&amp;lt;CharT&amp;gt;::set(range&amp;lt;CharT&amp;gt; const&amp;amp; r)&lt;/tt&gt;
"    function in &amp;quot;../boost/spirit/utility/impl/chset/range_run.ipp&amp;quot;. * Fixed:
"    handling of trailing whitespace bug (ast_parse/pt_parse related) * Fixed: comment_p
"    and end of data bug * Fixed: Most trailing space bug * Fixed: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;chset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;~(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;
"    bug, &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;amp;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;
"    bug, &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;amp;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;chset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;
"    bug * Fixed: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detach_clear&lt;/span&gt;&lt;/code&gt; bug * Fixed: mismatch closure
"    return type bug * Fixed: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;access_node_d&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;access_match_d&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt; iterator bugs * Fixed a bug regarding thread
"    safety of Phoenix/Spirit closures. * The Boost Template &lt;a href=&quot;/libs/mpl/doc/index.html&quot;&gt;Metaprogramming
"    Library (MPL)&lt;/a&gt;'s ..typeof implementation is now compatible with Metrowerks
"    CodeWarrior Pro8. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Boost.Function&lt;/a&gt;:&lt;/span&gt; workaround
"    for the new Borland patch (version 0x564) and MSVC++ .NET 2003. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Boost.Config&lt;/a&gt;&lt;/span&gt;, &lt;a href=&quot;/libs/format/doc/format.html&quot;&gt;Boost.Format&lt;/a&gt;,
"    and &lt;a href=&quot;/libs/regex/index.html&quot;&gt;Boost.Regex&lt;/a&gt; ..have been adjusted
"    to avoid warnings with GCC-3.3, and Boost.Format also now works with string types
"    other than &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;/code&gt;. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;Smart
"    Pointers&lt;/a&gt;:&lt;/span&gt; 
"  * &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;checked_delete&lt;/span&gt;&lt;/code&gt;
"    now works on more platforms * Compatibility with the SunPro compiler * Added
"    missing &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;&lt;/code&gt;s. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/index.html&quot;&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt; 
"  * warning suppression for
"    finicky compilers * fixed a crashing bug in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;raw_function&lt;/span&gt;&lt;/code&gt;
"    facility when no keyword arguments were passed. * Improved conversion of NULL
"    &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;s to Python.
"  &lt;/p&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Mon, 04 Aug 2003 12:00:00 +0000
-quickbook
"feed/history/boost_1_30_1.qbk
)
(feed/history/boost_1_30_2.qbk
-item
"<item><title>Version 1.30.2</title><pubDate>Tue, 19 Aug 2003 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Bugfix release
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.30.2/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;ul&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;http://www.boost-consulting.com&quot;&gt;Boost Consulting&lt;/a&gt; is now
"      hosting Boost CVS mirrors - see our &lt;a href=&quot;/more/getting_started.html#CVS&quot;&gt;download
"      page&lt;/a&gt;.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Backported changes to the &lt;a href=&quot;/libs/config/config.htm&quot;&gt;config system&lt;/a&gt;,
"      to better handle new compiler releases.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Bugs in regression reporting in subproject tests were fixed.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Tests are now run in the context of the user's PATH environment settings
"    &lt;/li&gt;
"    &lt;li&gt;
"      msvc-stlport and intel-win32-stlport toolsets now build static libraries with
"      multithreading enabled, to be compatible with the STLPort builds.
"    &lt;/li&gt;
"    &lt;li&gt;
"      intel-win32 toolset now handles &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt;&lt;/code&gt;
"      correctly when intel is installed over msvc6.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Backported fixes from the main trunk which prevent errors building the &lt;a href=&quot;/libs/test/doc/index.html&quot;&gt;Boost.Test&lt;/a&gt; library in its default configuration.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Backported portability improvements for &lt;a href=&quot;/libs/utility/checked_delete.html&quot;&gt;checked_delete&lt;/a&gt;.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Locale support for metrowerks (requiring a statically-linked runtime) is more
"      uniformly handled.
"    &lt;/li&gt;
"    &lt;li&gt;
"      Backported &lt;a href=&quot;/libs/conversion/lexical_cast.htm&quot;&gt;conversion/lexical_cast&lt;/a&gt;'s
"      &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;wchar_t&lt;/span&gt;&lt;/code&gt; fixes from the main trunk.
"    &lt;/li&gt;
"    &lt;li&gt;
"      intel-linux-tools: added &lt;tt&gt;rt&lt;/tt&gt; to FINDLIBS in order to make
"      the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;clock_gettime&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"      function available (backport of a patch in CVS HEAD).
"    &lt;/li&gt;
"    &lt;li&gt;
"      &lt;a href=&quot;/tools/regression/index.htm&quot;&gt;regression/compiler_status.cpp&lt;/a&gt;:
"      backported fixes in error log links generation.
"    &lt;/li&gt;
"  &lt;/ul&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Tue, 19 Aug 2003 12:00:00 +0000
-quickbook
"feed/history/boost_1_30_2.qbk
)
(feed/history/boost_1_31_0.qbk
-item
"<item><title>Version 1.31.0</title><pubDate>Mon, 26 Jan 2004 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: enable_if, Variant. Updated Libraries: Date Time, Filesystem,
"      Iterator, MultiArray, Python, Random Number, Regex, Spirit, Test. Deprecated
"      Libraries: Compose.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.31.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;div id=&quot;version_1_31_0.new_license&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New License&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      A unified &lt;a href=&quot;/doc/libs/1_31_0/more/license_info.html&quot;&gt;Boost Software
"      License&lt;/a&gt; has been developed and will gradually replace the individual
"      licenses for most Boost libraries. The new license offers better legal protection
"      for both users and developers, and should speed user's legal reviews of Boost
"      libraries. Dave Abrahams led the Boost effort to develop better licensing.
"      The legal team was led by &lt;a href=&quot;http://cyber.law.harvard.edu/people/cabell/index.html&quot;&gt;Diane
"      Cabell&lt;/a&gt;, Director, Clinical Programs, &lt;a href=&quot;http://cyber.law.harvard.edu&quot;&gt;Berkman
"      Center for Internet &amp;amp; Society&lt;/a&gt;, Harvard Law School. &lt;a href=&quot;http://www.nixonpeabody.com/attorneys_detail1.asp?ID=121&quot;&gt;Devin
"      Smith&lt;/a&gt;, attorney, &lt;a href=&quot;http://www.nixonpeabody.com/default.asp&quot;&gt;Nixon
"      Peabody LLP&lt;/a&gt;, wrote the Boost License. Eva Chan, Harvard Law School,
"      contributed analysis of issues and drafts of various legal documents.
"    &lt;/p&gt;
"    &lt;p&gt;
"      Note: Many of the Boost libraries are still using earlier licenses, though
"      all conform to the &lt;a href=&quot;/doc/libs/1_31_0/more/lib_guide.htm#license&quot;&gt;Boost
"      License Requirements&lt;/a&gt;. After this release we will begin an effort to
"      move toward uniform use of the new license.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_31_0.build_and_installation&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build and Installation&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        New &lt;a href=&quot;/doc/libs/1_31_0/more/getting_started.html&quot;&gt;Getting Started&lt;/a&gt;
"        procedures ease download and installation, from Rene Rivera and others.
"      &lt;/li&gt;
"      &lt;li&gt;
"        Improved support for libraries requiring &lt;a href=&quot;/doc/libs/1_31_0/more/separate_compilation.html&quot;&gt;separate
"        compilation&lt;/a&gt;, from John Maddock and others.
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_31_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/utility/enable_if.html&quot;&gt;enable_if&lt;/a&gt;:&lt;/span&gt; Selective
"        inclusion of function template overloads, from Jaakko Jarvi, Jeremiah Willcock,
"        and Andrew Lumsdaine. This is an important new technique which exploits the
"        SFINAE (substitution-failure-is-not-an-error) principle.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/variant/index.html&quot;&gt;Variant Library&lt;/a&gt;:&lt;/span&gt; Safe,
"        generic, stack-based discriminated union container, from Eric Friedman and
"        Itay Maman.
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_31_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/compose/index.htm&quot;&gt;Compose&lt;/a&gt;:&lt;/span&gt; This
"        library has been deprecated and will be removed in a future release. Use
"        &lt;a href=&quot;/doc/libs/1_31_0/libs/bind/bind.html&quot;&gt;Bind&lt;/a&gt; or &lt;a href=&quot;/doc/libs/1_31_0/libs/lambda/doc/index.html&quot;&gt;Lambda&lt;/a&gt; instead.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/date_time/doc/index.html&quot;&gt;Date Time
"        Library&lt;/a&gt;:&lt;/span&gt; A whole host of bug fixes, new features, and documentation
"        improvements. See the Date Time Change History for details.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/filesystem/doc/index.htm&quot;&gt;Filesystem
"        Library&lt;/a&gt;:&lt;/span&gt;
"  Several added functions, including improved checking for
"        directory and file name portability.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/iterator/doc/index.html&quot;&gt;Iterator
"        Library&lt;/a&gt;:&lt;/span&gt; Major version upgrade, with interface as proposed for the
"        C++ library TR, including an improved &lt;tt&gt;iterator_adaptor&lt;/tt&gt;
"        design plus several new components, from David Abrahams, Jeremy Siek, and
"        Thomas Witt.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/multi_array/index.html&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt; The
"        &lt;tt&gt;multi_array&lt;/tt&gt; class template now provides an element-preserving
"        resize operation as well as default construction (see the &lt;a href=&quot;/doc/libs/1_31_0/libs/multi_array/doc/reference.html&quot;&gt;reference
"        manual&lt;/a&gt; for more information).
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/python/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Support for Python 2.3 and Intel C++ on Linux
"          &lt;/li&gt;
"          &lt;li&gt;
"            Container &lt;a href=&quot;/doc/libs/1_31_0/libs/python/doc/v2/indexing.html&quot;&gt;Indexing
"            Suite&lt;/a&gt; added.
"          &lt;/li&gt;
"          &lt;li&gt;
"            injected constructors and wrapped function objects.
"          &lt;/li&gt;
"          &lt;li&gt;
"            wrapping static data members.
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;wstring&lt;/span&gt;&lt;/code&gt; conversions.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Improved &lt;a href=&quot;/doc/libs/1_31_0/libs/python/doc/v2/args.html&quot;&gt;keyword
"            arguments&lt;/a&gt;.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Better error messages, including name demangling for GCC.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Simpler &lt;a href=&quot;/doc/libs/1_31_0/libs/python/doc/building.html&quot;&gt;build
"            procedure&lt;/a&gt;.
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;em&gt;...and more....&lt;/em&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/random/index.html&quot;&gt;Random Number
"        Library&lt;/a&gt;:&lt;/span&gt; Interface changed to match the C++ &lt;a href=&quot;/doc/libs/1_31_0/libs/random/wg21-proposal.html&quot;&gt;TR
"        proposal&lt;/a&gt;, from Jens Maurer.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/regex/doc/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt; Completely
"        new matching algorithm is now much faster than before, plus a selection of
"        &lt;a href=&quot;/doc/libs/1_31_0/libs/regex/doc/history.html&quot;&gt;new features and
"        enhancements&lt;/a&gt;.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/spirit/index.html&quot;&gt;Boost.Spirit
"        1.8.0&lt;/a&gt;:&lt;/span&gt;
"  &lt;ul&gt;
"    &lt;li&gt;Multiple grammar start rules&lt;/li&gt;
"    &lt;li&gt;Multiple Scanner rules (no more scanner business woes)&lt;/li&gt;
"    &lt;li&gt;More dynamic parsers&lt;/li&gt;
"    &lt;li&gt;Predefined actors&lt;/li&gt;
"    &lt;li&gt;Numerous bug fixes and QOI stuff&lt;/li&gt;
"    &lt;li&gt;&lt;em&gt;and more...&lt;/em&gt;&lt;/li&gt;
"  &lt;/ul&gt;
"  &lt;p&gt;
"    Starting from Spirit v1.8.0, ill conforming compilers will no longer be
"    supported. If you are still using one of these older compilers, please use
"    Spirit v1.6.x. See [@http://spirit.sf.net Spirit's Site] for more details.
"  &lt;/p&gt;
"
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_31_0/libs/test/index.html&quot;&gt;Test Library&lt;/a&gt;:&lt;/span&gt; 
"  &lt;ul&gt;
"    &lt;li&gt;Free function template based test case&lt;/li&gt;
"    &lt;li&gt;Custom exception translators support in execution monitor and
"    register_exception_translator added for unit test framework&lt;/li&gt;
"    &lt;li&gt;Added support for multi-module unit tests in automatic
"    registration facility&lt;/li&gt;
"    &lt;li&gt;Floating point comparison algorithm reworked (Is not backward
"    compatible!!!)&lt;/li&gt;
"    &lt;li&gt;Added support for custom users predicate returning both boolean
"    result code and possibly error message&lt;/li&gt;
"    &lt;li&gt;Documentation structure rework and update&lt;/li&gt;
"  &lt;/ul&gt;
"  &lt;p&gt;
"    For a complete list of changes see the Test Library
"    &lt;a href=&quot;/doc/libs/1_31_0/libs/test/doc/release_notes.html#v1_31_0&quot;&gt;release notes&lt;/a&gt;.
"  &lt;/p&gt;
"
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_31_0.miscellaneous&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Miscellaneous&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        Expanded testing and fixes for non-conforming compilers.
"      &lt;/li&gt;
"      &lt;li&gt;
"        Web site hosting now provided by &lt;a href=&quot;http://www.sourceforge.net/&quot;&gt;SourceForge&lt;/a&gt;.
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Mon, 26 Jan 2004 12:00:00 +0000
-quickbook
"feed/history/boost_1_31_0.qbk
)
(feed/history/boost_1_32_0.qbk
-item
"<item><title>Version 1.32.0</title><pubDate>Fri, 19 Nov 2004 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Assignment, Minmax, Multi-Index, Numeric Conversion, Program
"      Options, Range, Serialization, String, Tribool. Updated Libraries: Graph, MPL,
"      Python, Signals, Utility, Test. Removed Libraries: Compose.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.32.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;div id=&quot;version_1_32_0.important___new_toolset_names&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Important
"    - New Toolset Names&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      The names of some the Boost.Build &lt;a href=&quot;/doc/libs/1_32_0/more/getting_started.html#Tools&quot;&gt;toolsets&lt;/a&gt;
"      have been changed to remove the &amp;quot;&lt;tt&gt;.&lt;/tt&gt;&amp;quot; (dot) character
"      and to fix some other naming inconsistencies. For example, &lt;tt&gt;vc7.1&lt;/tt&gt;
"      toolset was renamed to become &lt;tt&gt;vc-7_1&lt;/tt&gt;. Please refer to the
"      &lt;a href=&quot;/doc/libs/1_32_0/more/getting_started.html#Tools&quot;&gt;Supported Toolsets&lt;/a&gt;
"      section of the installation guide for the complete list of the current toolset
"      names. This change was made as a part of the effort to make the Boost distribution
"      compatible with ISO 9660 level 2 requirements.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_32_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/assign/index.html&quot;&gt;Assignment Library&lt;/a&gt;:&lt;/span&gt; Filling
"        containers with constant or generated data has never been easier, from Thorsten
"        Ottosen.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/algorithm/minmax/index.html&quot;&gt;Minmax
"        Library&lt;/a&gt;:&lt;/span&gt; Standard library extensions for simultaneous min/max and
"        min/max element computations, from Herve Bronnimann.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/multi_index/doc/index.html&quot;&gt;Multi-index
"        Containers Library&lt;/a&gt;:&lt;/span&gt; Containers with multiple STL-compatible access
"        interfaces, from Joaquin M Lopez Munoz.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/numeric/conversion/index.html&quot;&gt;Numeric
"        Conversion Library&lt;/a&gt;:&lt;/span&gt; Optimized policy-based numeric conversions, from
"        Fernando Cacciola.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/doc/html/program_options.html&quot;&gt;Program
"        Options Library&lt;/a&gt;:&lt;/span&gt; Access to configuration data given on command line,
"        in config files and other sources, from Vladimir Prus.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/range/index.html&quot;&gt;Range Library&lt;/a&gt;:&lt;/span&gt; a
"        new infrastructure for generic algorithms that builds on top of the new iterator
"        concepts, from Thorsten Ottosen.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/serialization/doc/index.html&quot;&gt;Serialization
"        Library&lt;/a&gt;:&lt;/span&gt; Serialization/de-serialization of arbitrary C++ data structures
"        to various formats including text, binary, and xml, from Robert Ramey.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/algorithm/string/index.html&quot;&gt;String
"        Algorithms Library&lt;/a&gt;:&lt;/span&gt; Collection of string related algorithms for case
"        conversion, trimming, find/replace operations and more, from Pavol Droba.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/doc/html/tribool.html&quot;&gt;Tribool&lt;/a&gt;:&lt;/span&gt; 3-state
"        boolean type library, from Doug Gregor.
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_32_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        Compose: This deprecated library has been removed.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/bundles.html&quot;&gt;bundled
"            properties&lt;/a&gt; to the &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/adjacency_list.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_list&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/adjacency_matrix.html&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; class templates,
"            greatly simplifying the introduction of internal vertex and edge properties.
"          &lt;/li&gt;
"          &lt;li&gt;
"            The &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/leda_conversion.html&quot;&gt;LEDA
"            graph adaptors&lt;/a&gt; have been ported to LEDA 4.5.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added algorithms for &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/betweenness_centrality.html&quot;&gt;betweenness
"            centrality&lt;/a&gt; and &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/bc_clustering.html&quot;&gt;betweenness
"            centrality clustering&lt;/a&gt;.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/circle_layout.html&quot;&gt;circle
"            layout&lt;/a&gt; and &lt;a href=&quot;/doc/libs/1_32_0/libs/graph/doc/kamada_kawai_spring_layout.html&quot;&gt;undirected
"            spring layout&lt;/a&gt; algorithms.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/index.html&quot;&gt;MPL Library&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Updated to use the Boost Software License.
"          &lt;/li&gt;
"          &lt;li&gt;
"            New &lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/index.html&quot;&gt;documentation&lt;/a&gt;,
"            including a complete &lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/refmanual.html&quot;&gt;reference
"            manual.&lt;/a&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            Major interface changes and improvements, many of which are not backward
"            compatible. Please refer to the &lt;a href=&quot;/doc/libs/1_32_0/libs/mpl/doc/tutorial/changes-in-boost-1-32-0.html&quot;&gt;1.32
"            changelog&lt;/a&gt; for the detailed information about upgrading to the
"            new version.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/python/doc/index.html&quot;&gt;Python Library&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Updated to use the Boost Software License.
"          &lt;/li&gt;
"          &lt;li&gt;
"            a new, &lt;a href=&quot;/doc/libs/1_32_0/libs/python/doc/tutorial/doc/html/python/exposing.html#python.class_virtual_functions&quot;&gt;better
"            method of wrapping classes with virtual functions&lt;/a&gt; has been implemented.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Support for the new Python Bool type, thanks to Daniel Holth.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Support for upcoming GCC symbol export control features have been folded
"            in, thanks to Niall Douglas.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Improved support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;auto_ptr&lt;/span&gt;&lt;/code&gt;-like
"            types.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Components used by other libraries have been moved out of &lt;tt&gt;python/detail&lt;/tt&gt;
"            and into &lt;tt&gt;boost/detail&lt;/tt&gt; to improve dependency relationships.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Miscellaneous bug fixes and compiler workarounds.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/doc/html/signals.html&quot;&gt;Signals Library&lt;/a&gt;:&lt;/span&gt; Introduced
"        deterministic slot ordering, permitting slots to be connected at the beginning
"        or end of slot groups or the slot list itself. Combiners may safely have
"        state and are accessible from the signal.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/utility/utility.htm&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt; class
"        template &lt;a href=&quot;/doc/libs/1_32_0/libs/utility/utility.htm#result_of&quot;&gt;result_of&lt;/a&gt;
"        added.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/libs/1_32_0/libs/test/index.html&quot;&gt;Test Library&lt;/a&gt;:&lt;/span&gt; 
"  &lt;ul&gt;
"    &lt;li&gt;namespace names gets shorten; old one still supported till next
"      release&lt;/li&gt;
"    &lt;li&gt;added proper encoding of XML PCDATA&lt;/li&gt;
"    &lt;li&gt;support for wide string comparison implemented&lt;/li&gt;
"  &lt;/ul&gt;
"  &lt;p&gt;
"    For complete list of changes see Test Library
"    &lt;a href=&quot;/doc/libs/1_32_0/libs/test/doc/release_notes.html#v1_32_0&quot;&gt;release notes&lt;/a&gt;.
"  &lt;/p&gt;
"
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_32_0.regression_tests&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Regression tests&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      This release has been extensively tested on a variety of different compilers
"      and platforms. It is known to contain no regressions against the previous reference
"      release on the compilers and configurations tested. Please refer to the corresponding
"      &lt;a href=&quot;http://www.meta-comm.com/engineering/boost-regression/1_32_0/index.html&quot;&gt;regression
"      reports&lt;/a&gt; to see how well your compiler performs on the new Boost codebase.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_32_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;img alt=&quot;[]&quot; src=&quot;http://boost.sourceforge.net/photos/aleksey_gurtovoy2.jpg&quot;/&gt; &lt;a href=&quot;/users/people/aleksey_gurtovoy.html&quot;&gt;Aleksey
"      Gurtovoy&lt;/a&gt; managed this release. &lt;a href=&quot;/doc/libs/1_32_0/more/release_procedures.htm&quot;&gt;Managing
"      a release&lt;/a&gt; at all is an enormous job, and Aleksey always goes beyond
"      merely meeting requirements by insisting on the highest possible quality. The
"      Boost membership owes him a debt of gratitude.
"    &lt;/p&gt;
"    &lt;p&gt;
"      This release wouldn't have been possible without the dedicated effort of many,
"      many members of the Boost community who generously contributed their outstanding
"      expertise, time and energy to making it happen. For patches, bug fixes, troubleshooting,
"      expert advice, and prompt responses to the release manager's requests we thank:
"    &lt;/p&gt;
"    &lt;p&gt;
"      David Abrahams, Misha Bergal, Jonathan Brandmeyer, Fernando Cacciola, Marshall
"      Clow, Christopher Currie, Pavol Droba, Caleb Epstein, Eric Friedman, Jeff Garland,
"      Michael Glassford, Doug Gregor, Joel de Guzman, Hubert Holin, Jaakko Jarvi,
"      Hartmut Kaiser, Bronek Kozicki, Tarjei Knapstad, Toon Knapen, Aaron W. LaFramboise,
"      Joaquin M Lopez Munoz, Christoph Ludwig, John Maddock, Paul Mensonides, Guillaume
"      Melquiond, Thorsten Ottosen, Vladimir Prus, Robert Ramey, Rene Rivera, Gennadiy
"      Rozental, Stefan Slapeta, Jonathan Turkanis, Pavel Vozenilek, Jonathan Wakely,
"      Daryle Walker, Victor A. Wagner Jr. and Martin Wille.
"    &lt;/p&gt;
"    &lt;p&gt;
"      Also, our special thanks go to: John Maddock for the managing the effort of
"      converting the majority of the Boost libraries to the &lt;a href=&quot;/doc/libs/1_32_0/more/license_info.html&quot;&gt;Boost
"      Software License&lt;/a&gt;, Eric Niebler and Joel de Guzman for taking on the
"      important job of improving the Boost documentation's look and feel, and last,
"      but not least, to our regression test runners, without whom we simply would
"      never have released: Toon Knapen, Bronek Kozicki, Rene Rivera, Markus Schopflin,
"      Stefan Slapeta, Victor A. Wagner Jr. and Martin Wille.
"    &lt;/p&gt;
"    &lt;p&gt;
"      Thank you everybody!
"    &lt;/p&gt;
"  &lt;/div&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Fri, 19 Nov 2004 12:00:00 +0000
-quickbook
"feed/history/boost_1_32_0.qbk
)
(feed/history/boost_1_33_0.qbk
-item
"<item><title>Version 1.33.0</title><link>https://www.boost.org/users/history/version_1_33_0.html</link><guid>http://www.boost.org/users/history/version_1_33_0.html</guid><pubDate>Thu, 11 Aug 2005 12:00:00 +0000</pubDate><description>
"
"
"
"  &lt;div id="version_1_33_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/iostreams/doc/index.html"&gt;Iostreams
"          Library&lt;/a&gt;:&lt;/span&gt;
"  Framework for defining streams, stream buffers and i/o
"          filters, from Jonathan Turkanis.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/functional/hash/index.html"&gt;Functional/Hash
"          Library&lt;/a&gt;:&lt;/span&gt; A TR1 hash function object that can be extended to hash
"          user defined types, from Daniel James.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/parameter/doc/html/index.html"&gt;Parameter
"          Library&lt;/a&gt;:&lt;/span&gt;
"  Write functions that accept arguments by name: especially
"          useful when a function has more than one argument with a useful default
"          value, since named arguments can be passed in any order.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/ptr_container/index.html"&gt;Pointer
"          Container Library&lt;/a&gt;:&lt;/span&gt;
"  Containers for storing heap-allocated polymorphic
"          objects to ease OO-programming, from Thorsten Ottosen.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/wave/index.html"&gt;Wave&lt;/a&gt;:&lt;/span&gt; Standards
"          conformant implementation of the mandated C99/C++ preprocessor functionality
"          packed behind an easy to use iterator interface, from Hartmut Kaiser.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_33_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/doc/html/any.html"&gt;Any Library&lt;/a&gt;:&lt;/span&gt; &lt;code&gt;&lt;span class="identifier"&gt;any_cast&lt;/span&gt;&lt;/code&gt; has been enhanced to allow direct
"          access to &lt;code&gt;&lt;span class="identifier"&gt;any&lt;/span&gt;&lt;/code&gt;'s held value.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/assign/doc/index.html"&gt;Assignment
"          Library&lt;/a&gt;:&lt;/span&gt; Support for &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/ptr_container/index.html"&gt;Pointer
"          Container Library&lt;/a&gt; and new efficient functions &lt;code&gt;&lt;span class="identifier"&gt;ref_list_of&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;cref_list_of&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; for generating anonymous ranges.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/bind/bind.html"&gt;Bind Library&lt;/a&gt;:&lt;/span&gt; Bind
"          expressions now support &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/bind/bind.html#operators"&gt;comparisons
"          and negation&lt;/a&gt;. Example: &lt;code&gt;&lt;span class="identifier"&gt;bind&lt;/span&gt;&lt;span class="special"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="identifier"&gt;X&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;_1&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt; &lt;span class="special"&gt;&amp;lt;&lt;/span&gt; &lt;span class="identifier"&gt;bind&lt;/span&gt;&lt;span class="special"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="identifier"&gt;X&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;_2&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/doc/html/date_time.html"&gt;Date-Time
"          Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;a href="https://www.boost.org/doc/libs/1_33_1/doc/html/date_time/local_time.html"&gt;local
"                time and time zone classes&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;a href="https://www.boost.org/doc/libs/1_33_1/doc/html/date_time/date_time_io.html"&gt;format-based
"                Input/Output facets&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                For a complete list of changes, see the library &lt;a href="https://www.boost.org/doc/libs/1_33_1/doc/html/date_time/details.html#date_time.changes"&gt;change
"                history&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/index.html"&gt;Graph Library&lt;/a&gt;:&lt;/span&gt; Introduced
"          several new algorithms and improved existing algorithms:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/python.html"&gt;Experimental
"                Python bindings&lt;/a&gt;, from Doug Gregor and Indiana University.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/floyd_warshall_shortest.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;floyd&lt;/span&gt; &lt;span class="identifier"&gt;warshall&lt;/span&gt;
"                &lt;span class="identifier"&gt;all&lt;/span&gt; &lt;span class="identifier"&gt;pairs&lt;/span&gt;
"                &lt;span class="identifier"&gt;shortest&lt;/span&gt; &lt;span class="identifier"&gt;paths&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                from Lauren Foutz and Scott Hill.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/astar_search.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;astar&lt;/span&gt; &lt;span class="identifier"&gt;search&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                from Kristopher Beevers and Jufeng Peng.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/fruchterman_reingold.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;fruchterman&lt;/span&gt; &lt;span class="identifier"&gt;reingold&lt;/span&gt;
"                &lt;span class="identifier"&gt;force&lt;/span&gt; &lt;span class="identifier"&gt;directed&lt;/span&gt;
"                &lt;span class="identifier"&gt;layout&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, from Doug
"                Gregor and Indiana University.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/biconnected_components.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;biconnected&lt;/span&gt; &lt;span class="identifier"&gt;components&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;articulation&lt;/span&gt; &lt;span class="identifier"&gt;points&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, from Jeremy Siek,
"                Janusz Piwowarski, and Doug Gregor.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/sequential_vertex_coloring.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;sequential&lt;/span&gt; &lt;span class="identifier"&gt;vertex&lt;/span&gt;
"                &lt;span class="identifier"&gt;coloring&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; has been
"                updated, tested, and documented.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/gursoy_atun_layout.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;gursoy&lt;/span&gt; &lt;span class="identifier"&gt;atun&lt;/span&gt;
"                &lt;span class="identifier"&gt;layout&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, from Jeremiah
"                Willcock and Doug Gregor of Indiana University.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/king_ordering.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;king&lt;/span&gt; &lt;span class="identifier"&gt;ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                from D. Kevin McGrath of Indiana University.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/cuthill_mckee_ordering.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;cuthill&lt;/span&gt; &lt;span class="identifier"&gt;mckee&lt;/span&gt;
"                &lt;span class="identifier"&gt;ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; has been
"                recast as an invocation of &lt;code&gt;&lt;span class="identifier"&gt;breadth&lt;/span&gt;
"                &lt;span class="identifier"&gt;first&lt;/span&gt; &lt;span class="identifier"&gt;search&lt;/span&gt;&lt;/code&gt;
"                and now supports graphs with multiple components.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/dijkstra_shortest_paths.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;dijkstra&lt;/span&gt; &lt;span class="identifier"&gt;shortest&lt;/span&gt;
"                &lt;span class="identifier"&gt;paths&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; now uses
"                a relaxed heap [&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/bibliography.html#driscoll88"&gt;61&lt;/a&gt;]
"                as its priority queue, improving its complexity to O(V log V) and
"                improving real-world performance for larger graphs.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/read_graphviz.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;read&lt;/span&gt; &lt;span class="identifier"&gt;graphviz&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"                now has a new, Spirit-based parser that works for all graph types
"                and supports arbitrary properties on the graph, from Ron Garcia.
"                The old, Bison-based GraphViz reader has been deprecated and will
"                be removed in a future Boost release. &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/write-graphviz.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;write&lt;/span&gt; &lt;span class="identifier"&gt;graphviz&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"                also supports dynamic properties.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/subgraph.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;subgraph&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;&lt;span class="identifier"&gt;get_property&lt;/span&gt;&lt;/code&gt; now refers to the
"                subgraph property, not the root graph's property.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/history.html#by-version"&gt;history&lt;/a&gt;
"                for additional changes and bug fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/multi_index/doc/index.html"&gt;Multi-index
"          Containers Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/multi_index/doc/tutorial/indices.html#hashed_indices"&gt;hashed
"                indices&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/multi_index/doc/tutorial/creation.html#serialization"&gt;serialization
"                support&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                For a complete list of changes, see the library &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/multi_index/doc/release_notes.html"&gt;release
"                notes&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/program_options/doc/index.html"&gt;Program
"          Options Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Option descriptions are now printed with word wrapping.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Command line parser can bypass unregistered options, instread of
"                throwing.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed support for "implicit" (optional) values.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New customization method 'command_line_parser::extra_style_parser'.
"                Unlike 'additional_parser', allows the user to parse several tokens
"                and return a vector of options, not just a single option.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Work with disabled exceptions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/property_map/property_map.html"&gt;Property
"          Map Library&lt;/a&gt;:&lt;/span&gt; Introduced the &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/property_map/doc/dynamic_property_map.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;dynamic&lt;/span&gt; &lt;span class="identifier"&gt;properties&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"          class, which provides dynamically-typed access to a set of property maps.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/python/doc/index.html"&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for docstrings on nonstatic properties.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                We now export the client-provided docstrings for &lt;code&gt;&lt;span class="identifier"&gt;init&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                and &lt;em&gt;XXX&lt;/em&gt;&lt;code&gt;&lt;span class="identifier"&gt;_FUNCTION_OVERLOADS&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; for only the last overload.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for Embedded VC++ 4 and GCC-3.3 on MacOS added
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Introduced better support for rvalue from-python conversions of shared_ptr.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for exposing &lt;code&gt;&lt;span class="identifier"&gt;vector&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt; with the indexing suite.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                updated visual studio project build file.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added search feature to the index page.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;p&gt;&lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/random/index.html"&gt;Random Number
"          Library&lt;/a&gt;:&lt;/span&gt;
"  Improved initialization for &lt;code&gt;&lt;span class="identifier"&gt;mersenne_twister&lt;/span&gt;&lt;/code&gt;,
"          algorithm by Makoto Matsumoto and Takuji Nishimura, implemented for Boost
"          by Jens Maurer.&lt;/p&gt;
"  &lt;p&gt;Note: All test vectors for &lt;code&gt;&lt;span class="identifier"&gt;mersenne_twister&lt;/span&gt;&lt;/code&gt;s
"          constructed or seeded without parameters or with a single &lt;code&gt;&lt;span class="keyword"&gt;unsigned&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt;&lt;/code&gt;
"          parameter become invalid.&lt;/p&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/range/index.html"&gt;Range Library&lt;/a&gt;:&lt;/span&gt; Minor
"          addition of convenience functions to &lt;code&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;
"          &lt;span class="identifier"&gt;range&lt;/span&gt;&lt;/code&gt; like &lt;code&gt;&lt;span class="identifier"&gt;front&lt;/span&gt;&lt;span class="special"&gt;(),&lt;/span&gt; &lt;span class="identifier"&gt;back&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;[]()&lt;/span&gt;&lt;/code&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/regex/index.html"&gt;Regex Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Rewritten front end parser now supports (?imsx-imsx) constructs,
"                plus lookbehind assertions and conditional expressions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Thin wrapper classes improve integration with MFC/ATL code.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Full (optional) Unicode support via the ICU library. Refer to the
"                &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/regex/doc/history.html"&gt;regex history
"                page&lt;/a&gt; for more information on these and other small changes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/serialization/doc/index.html"&gt;Serialization
"          Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                DLL version.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Auto-linking.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Serialization of variants.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved serialization of shared pointers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/doc/html/signals.html"&gt;Signals Library&lt;/a&gt;:&lt;/span&gt; added
"          slot blocking/unblocking, from Frantz Maerten. Huge improvements to signal
"          invocation performance from Robert Zeh.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_33_0.supported_compilers"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
"      rely on modern C++ features not available in all compilers, not all Boost libraries
"      will work with every compiler. The following compilers and platforms have been
"      extensively tested with Boost, although many other compilers and platforms
"      will work as well. For more information, see the &lt;a href="https://www.boost.org/regression/release/user/"&gt;regression
"      test results&lt;/a&gt;.
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://developer.apple.com/"&gt;Apple GCC&lt;/a&gt; 3.x on Mac OS
"          X.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://www.codegear.com/products/cppbuilder"&gt;Borland C++&lt;/a&gt;
"          5.6.4 on Windows.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://gcc.gnu.org"&gt;GNU C++&lt;/a&gt; 2.95.3 (with and without
"          STLport), 3.2.x., 3.3.x, 3.4.x, 4.0.x on Windows, Linux and Solaris.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm"&gt;Intel
"          C++&lt;/a&gt; 8.1, 9.0 on Windows, Linux.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://www.metrowerks.com"&gt;Metrowerks CodeWarrior&lt;/a&gt; 8.3,
"          9.4, 9.5 on Mac OS X and Windows.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://msdn.microsoft.com/visualc/"&gt;Microsoft Visual C++&lt;/a&gt;
"          6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0 beta. Note: due to intermittent
"          problems with Visual C++ 8.0 beta, and the presence of a variety of pre-release
"          compiler builds, we are unable to guarantee compatibility until the final
"          compiler is released.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_33_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;img src="https://www.boost.org/gfx/boost_1_33_0.jpg" alt="[]"/&gt;&lt;a href="https://www.boost.org/users/people/doug_gregor.html"&gt;Douglas Gregor&lt;/a&gt;
"      managed this release.
"    &lt;/p&gt;
"    &lt;p&gt;
"      A great number of people contributed their time and expertise to make this
"      release possible. Special thanks go to Aleksey Gurtovoy and Misha Bergal, who
"      managed to keep the regression testing system working throughout the release
"      process; David Abrahams, Beman Dawes, Aleksey Gurtovoy, Rene Rivera and Jonathan
"      Turkanis for greatly improving the quality of this release; Rene Rivera for
"      the new Boost web page design; and Zoltan "cad" Juhasz for the new
"      Boost logo.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Fri, 13 Apr 2018 10:15:19 +0000
-quickbook
"feed/history/boost_1_33_0.qbk
-update_count
=1
)
(feed/history/boost_1_33_1.qbk
-item
"<item><title>Version 1.33.1</title><link>https://www.boost.org/users/history/version_1_33_1.html</link><guid>http://www.boost.org/users/history/version_1_33_1.html</guid><pubDate>Tue, 05 Dec 2006 12:00:00 +0000</pubDate><description>
"
"
"
"  &lt;div id="version_1_33_1.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/doc/html/any.html"&gt;Any Library&lt;/a&gt;:&lt;/span&gt; Cast
"          to reference types introduced in 1.33.0 is now documented on &lt;code&gt;&lt;span class="identifier"&gt;any_cast&lt;/span&gt;&lt;/code&gt; documentation page.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/bind/bind.html"&gt;Bind Library&lt;/a&gt;:&lt;/span&gt; Bind
"          expressions now support &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/bind/bind.html#operators"&gt;comparisons
"          and negation&lt;/a&gt;. Example: &lt;code&gt;&lt;span class="identifier"&gt;bind&lt;/span&gt;&lt;span class="special"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="identifier"&gt;X&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;_1&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt; &lt;span class="special"&gt;&amp;lt;&lt;/span&gt; &lt;span class="identifier"&gt;bind&lt;/span&gt;&lt;span class="special"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="identifier"&gt;X&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;_2&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/config/index.html"&gt;Config Library&lt;/a&gt;:&lt;/span&gt; Don't
"          undef &lt;code&gt;&lt;span class="identifier"&gt;BOOST_LIB_TOOLSET&lt;/span&gt;&lt;/code&gt;
"          after use.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/python/doc/index.html"&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The build now assumes Python 2.4 by default, rather than 2.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support Python that's built without Unicode support
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for wrapping classes with overloaded address-of (&lt;code&gt;&lt;span class="special"&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;) operators
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/smart_ptr/index.html"&gt;Smart Pointer
"          Library&lt;/a&gt;:&lt;/span&gt; Fixed problems under Metrowerks CodeWarrior on PowerPC
"          (Mac OS X) with inlining on, GNU GCC on PowerPC 64.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/regex/doc/index.html"&gt;Regex Library&lt;/a&gt;:&lt;/span&gt; Fixed
"          the supplied makefiles, and other small compiler specific changes. Refer
"          to the &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/regex/doc/history.html"&gt;regex
"          history page&lt;/a&gt; for more information on these and other small changes.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/iostreams/doc/index.html"&gt;Iostreams
"          Library&lt;/a&gt;:&lt;/span&gt;
"  Improved the interface for accessing a chain's components,
"          added &lt;code&gt;&lt;span class="identifier"&gt;is_open&lt;/span&gt;&lt;/code&gt; members to
"          the file and file descriptor devices, fixed memory-mapped files on Windows,
"          and made minor changes to the documentation.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/python/doc/index.html"&gt;Boost.Python&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for docstrings on nonstatic properties.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                We now export the client-provided docstrings for &lt;code&gt;&lt;span class="identifier"&gt;init&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                and &lt;em&gt;XXX&lt;/em&gt;&lt;code&gt;&lt;span class="identifier"&gt;_FUNCTION_OVERLOADS&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; for only the last overload.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for Embedded VC++ 4 and GCC-3.3 on MacOS added
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Introduced better support for rvalue from-python conversions of shared_ptr.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for exposing &lt;code&gt;&lt;span class="identifier"&gt;vector&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt; with the indexing suite.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                updated visual studio project build file.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added search feature to the index page.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/functional/hash/index.html"&gt;Functional/Hash
"          Library&lt;/a&gt;:&lt;/span&gt;
"  Fixed the points example.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/multi_index/doc/index.html"&gt;Multi-index
"          Containers Library&lt;/a&gt;:&lt;/span&gt;
"  Fixed a problem with multithreaded code, and
"          other minor changes. Refer to the library &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/multi_index/doc/release_notes.html#boost_1_33_1"&gt;release
"          notes&lt;/a&gt; for further details.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/table_of_contents.html"&gt;Graph
"          Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a problem with the relaxed heap on x86 Linux (fixes bug in
"                &lt;code&gt;&lt;span class="identifier"&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed problems with &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/cuthill_mckee_ordering.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;cuthill_mckee_ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"                and &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/graph/doc/king_ordering.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;king_ordering&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; producing
"                no results.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;color_map&lt;/span&gt;&lt;/code&gt; parameter
"                to &lt;code&gt;&lt;span class="identifier"&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/signals/doc/index.html"&gt;Signals
"          Library&lt;/a&gt;:&lt;/span&gt; Fixed problems with the use of Signals across shared library
"          boundaries.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/thread/doc/index.html"&gt;Thread
"          library&lt;/a&gt;:&lt;/span&gt;
"  &lt;code&gt;&lt;span class="identifier"&gt;read_write_mutex&lt;/span&gt;&lt;/code&gt;
"          has been removed due to problems with deadlocks.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/wave/index.html"&gt;Wave library&lt;/a&gt;
"          (V1.2.1):&lt;/span&gt; Fixed a couple of problems, refer to the &lt;a href="https://www.boost.org/doc/libs/1_33_1/libs/wave/ChangeLog"&gt;change
"          log&lt;/a&gt; for further details.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_33_1.supported_compilers"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
"      rely on modern C++ features not available in all compilers, not all Boost libraries
"      will work with every compiler. The following compilers and platforms have been
"      extensively tested with Boost, although many other compilers and platforms
"      will work as well. For more information, see the &lt;a href="https://www.boost.org/regression/release/user/"&gt;regression
"      test results&lt;/a&gt;.
"    &lt;/p&gt;
"    &lt;p&gt;
"      &lt;em&gt;New for this release&lt;/em&gt;: Support for building with the newest
"      STLport-5.0 was added. The support includes building with MinGW Runtime 3.8
"      plus STLport-5.0 improved to support wide character operations. Apple GCC 4.0,
"      HP Tru64 C++, and Microsoft Visual C++ 8.0 are supported platforms. We have
"      added an experimental autoconf-like &lt;tt&gt;configure&lt;/tt&gt; script for
"      Unix-like systems: run &lt;tt&gt;configure --help&lt;/tt&gt; for more information.
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://developer.apple.com/"&gt;Apple GCC&lt;/a&gt; 3.3, 4.0 on
"          Mac OS X.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://www.codegear.com/products/cppbuilder"&gt;Borland C++&lt;/a&gt;
"          5.6.4 on Windows.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://gcc.gnu.org"&gt;GNU C++&lt;/a&gt; 2.95.3 (with and without
"          STLport), 3.2.x., 3.3.x, 3.4.x, 4.0.x on Windows, Linux and Solaris.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://h30097.www3.hp.com/cplus/"&gt;HP C++ for Tru64 UNIX 7.1&lt;/a&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm"&gt;Intel
"          C++&lt;/a&gt; 8.1, 9.0 on Windows, Linux.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://www.metrowerks.com"&gt;Metrowerks CodeWarrior&lt;/a&gt; 8.3,
"          9.4, 9.5 on Mac OS X and Windows.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://msdn.microsoft.com/visualc/"&gt;Microsoft Visual C++&lt;/a&gt;
"          6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
"          support the non-standard "Safe" C++ Library shipping with Visual
"          C++ 8.0, which may result in many spurious warnings from Boost headers
"          and other standards-conforming C++ code. To suppress these warnings, define
"          the macro &lt;code&gt;&lt;span class="identifier"&gt;_SCL_SECURE_NO_DEPRECATE&lt;/span&gt;&lt;/code&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_33_1.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;span class="inset-left"&gt;&lt;img src="https://www.boost.org/gfx/boost_1_33_0.jpg" alt="Medieval Mr. Gregor"/&gt;&lt;/span&gt;
"&lt;a href="https://www.boost.org/users/people/doug_gregor.html"&gt;Douglas
"      Gregor&lt;/a&gt; managed this release.
"    &lt;/p&gt;
"    &lt;p&gt;
"      A great number of people contributed their time and expertise to make this
"      release possible. Special thanks go to Aleksey Gurtovoy and Misha Bergal, who
"      managed to keep the regression testing system working throughout the release
"      process; David Abrahams, Beman Dawes, Aleksey Gurtovoy, Bronek Kozicki, Rene
"      Rivera and Jonathan Turkanis for greatly improving the quality of this release;
"      Rene Rivera for the new Boost web page design; and Zoltan "cad" Juhasz
"      for the new Boost logo.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Fri, 13 Apr 2018 10:15:19 +0000
-quickbook
"feed/history/boost_1_33_1.qbk
-update_count
=1
)
(feed/history/boost_1_34_0.qbk
-item
"<item><title>Version 1.34.0</title><link>https://www.boost.org/users/history/version_1_34_0.html</link><guid>http://www.boost.org/users/history/version_1_34_0.html</guid><pubDate>Sat, 12 May 2007 12:00:00 +0000</pubDate><description>
"
"
"
"  &lt;div id="version_1_34_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/doc/html/foreach.html"&gt;Foreach Library&lt;/a&gt;:&lt;/span&gt; &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FOREACH&lt;/span&gt;&lt;/code&gt; macro for easily iterating
"          over the elements of a sequence, from Eric Niebler.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/statechart/doc/index.html"&gt;Statechart
"          Library&lt;/a&gt;:&lt;/span&gt;
"  Arbitrarily complex finite state machines can be implemented
"          in easily readable and maintainable C++ code, from Andreas Huber.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/tr1/index.html"&gt;TR1 Library&lt;/a&gt;:&lt;/span&gt; An
"          implementation of the C++ Technical Report on Standard Library Extensions,
"          from John Maddock. This library does not itself implement the TR1 components,
"          rather it's a thin wrapper that will include your standard library's TR1
"          implementation (if it has one), otherwise it will include the Boost Library
"          equivalents, and import them into namespace &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;tr1&lt;/span&gt;&lt;/code&gt;.
"          Highlights include: Reference Wrappers, Smart Pointers, result_of, Function
"          Object Binders, Polymorphic function wrappers, Type Traits, Random Number
"          Generators and Distributions, Tuples, Fixed Size Array, Hash Function Objects,
"          Regular Expressions, and Complex Number Additional Algorithms.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/doc/html/typeof.html"&gt;Typeof Library&lt;/a&gt;:&lt;/span&gt; Typeof
"          operator emulation, from Arkadiy Vertleyb and Peder Holt.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/doc/html/xpressive.html"&gt;Xpressive
"          Library&lt;/a&gt;:&lt;/span&gt; Regular expressions that can be written as strings or as
"          expression templates, and that can refer to each other and themselves recursively
"          with the power of context-free grammars, from Eric Niebler.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_34_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/assign/index.html"&gt;Assign Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for &lt;code&gt;&lt;span class="identifier"&gt;ptr_map&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;key&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; via the new function &lt;code&gt;&lt;span class="identifier"&gt;ptr_map_insert&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for initialization of &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/ptr_container/index.html"&gt;Pointer
"                Containers&lt;/a&gt; when the containers hold pointers to an abstract
"                base class.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/doc/html/date_time.html"&gt;Date_time
"          library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for new US/Canada timezone rules and other bug fixes. See
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/doc/html/date_time/details.html#changes"&gt;Change
"                History&lt;/a&gt; for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/filesystem/doc/index.htm"&gt;Filesystem
"          Library&lt;/a&gt;:&lt;/span&gt; Major upgrade in preparation for submission to the C++
"          Standards Committee for TR2. Changes include:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Internationalization"&gt;Internationalization&lt;/a&gt;,
"                provided by class templates &lt;em&gt;basic_path&lt;/em&gt;, &lt;em&gt;basic_filesystem_error&lt;/em&gt;,
"                &lt;em&gt;basic_directory_iterator&lt;/em&gt;, and &lt;em&gt;basic_directory_entry&lt;/em&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Simplification"&gt;Simplification&lt;/a&gt;
"                of the path interface by eliminating special constructors to identify
"                native formats.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Rationalization"&gt;Rationalization&lt;/a&gt;
"                of predicate function design, including the addition of several new
"                functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clearer specification by reference to &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/filesystem/doc/design.htm#POSIX-01"&gt;POSIX&lt;/a&gt;,
"                the ISO/IEEE Single Unix Standard, with provisions for Windows and
"                other operating systems.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#Preservation"&gt;Preservation&lt;/a&gt;
"                of existing user code whenever possible.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/filesystem/doc/i18n.html#More_efficient"&gt;More
"                efficient&lt;/a&gt; directory iteration.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Addition of a &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/filesystem/doc/tr2_proposal.html#Class-template-basic_recursive_directory_iterator"&gt;recursive
"                directory iterator&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/function/index.html"&gt;Function
"          Library&lt;/a&gt;:&lt;/span&gt;
"  Boost.Function now implements a small buffer optimization,
"          which can drastically improve the performance when copying or constructing
"          Boost.Function objects storing small function objects. For instance, &lt;code&gt;&lt;span class="identifier"&gt;bind&lt;/span&gt;&lt;span class="special"&gt;(&amp;amp;&lt;/span&gt;&lt;span class="identifier"&gt;X&lt;/span&gt;&lt;span class="special"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;foo&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="special"&gt;&amp;amp;&lt;/span&gt;&lt;span class="identifier"&gt;x&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;_1&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;_2&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; requires no heap allocation when placed
"          into a Boost.Function object.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/functional/hash/index.html"&gt;Functional/Hash
"          Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use declarations for standard classes, so that the library doesn't
"                need to include all of their headers
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Deprecated the &lt;tt&gt;&amp;lt;boost/functional/hash/*.hpp&amp;gt;&lt;/tt&gt;
"                headers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for the &lt;code&gt;&lt;span class="identifier"&gt;BOOST_HASH_NO_EXTENSIONS&lt;/span&gt;&lt;/code&gt;
"                macro, which disables the extensions to TR1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Minor improvements to the hash functions for floating point numbers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/graph/doc/index.html"&gt;Graph Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/graph/doc/maximum_matching.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;edmonds_maximum_cardinality_matching&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                from Aaron Windsor.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/graph/doc/lengauer_tarjan_dominator.htm"&gt;&lt;code&gt;&lt;span class="identifier"&gt;lengauer_tarjan_dominator_tree&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                from JongSoo Park.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/graph/doc/compressed_sparse_row.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;compressed_sparse_row_graph&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                from Jeremiah Willcock and Douglas Gregor of Indiana University.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/graph/doc/sorted_erdos_renyi_gen.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;sorted_erdos_renyi_iterator&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                from Jeremiah Willcock of Indiana University.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/graph/doc/biconnected_components.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;biconnected_components&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"                now supports a visitor and named parameters, from Janusz Piwowarski.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/graph/doc/adjacency_matrix.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;adjacency_matrix&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; now models
"                the &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/graph/doc/BidirectionalGraph.html"&gt;Bidirectional
"                Graph&lt;/a&gt; concept.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/graph/doc/dijkstra_shortest_paths.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"                now calls &lt;code&gt;&lt;span class="identifier"&gt;vis&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;initialize_vertex&lt;/span&gt;&lt;/code&gt; for each vertex
"                during initialization.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Note:&lt;/em&gt; the name of the compiled library for the
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/graph/doc/read_graphviz.html"&gt;GraphViz
"                reader&lt;/a&gt; has changed to &lt;tt&gt;boost_graph&lt;/tt&gt; (from
"                &lt;tt&gt;bgl-viz&lt;/tt&gt;) to match Boost conventions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/graph/doc/history.html#1.34.0"&gt;complete
"                revision history&lt;/a&gt; for more information.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/multi_array/index.html"&gt;MultiArray
"          Library&lt;/a&gt;:&lt;/span&gt;
"  Boost.MultiArray now by default provides range-checking
"          for &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;[]&lt;/span&gt;&lt;/code&gt;.
"          Range checking can be disabled by defining the macro &lt;code&gt;&lt;span class="identifier"&gt;BOOST_DISABLE_ASSERTS&lt;/span&gt;&lt;/code&gt;
"          before including &lt;tt&gt;multi_array.hpp&lt;/tt&gt;. A bug in &lt;code&gt;&lt;span class="identifier"&gt;multi_array&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;resize&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"          related to storage orders was fixed.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/multi_index/doc/index.html"&gt;Multi-index
"          Containers Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/multi_index/doc/tutorial/indices.html#rnd_indices"&gt;random
"                access indices&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Non key-based indices feature new &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/multi_index/doc/tutorial/indices.html#rearrange"&gt;rearrange
"                facilities&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This version also includes a number of optimizations and usage improvements.
"                For a complete list of changes, see the library &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/multi_index/doc/release_notes.html#boost_1_34"&gt;release
"                notes&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/optional/index.html"&gt;Optional
"          Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;none_t&lt;/span&gt; &lt;span class="keyword"&gt;and&lt;/span&gt;
"                &lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;none&lt;/span&gt;&lt;/code&gt; now added to Optional's documentation
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Relational operators now directly support arguments of type &lt;code&gt;&lt;span class="char"&gt;'T'&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="char"&gt;'none_t'&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                operator-&amp;gt;() now also works with reference types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Helper functions &lt;code&gt;&lt;span class="identifier"&gt;make_optional&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;val&lt;/span&gt;&lt;span class="special"&gt;),&lt;/span&gt; &lt;span class="identifier"&gt;make_optional&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;cond&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt;&lt;span class="identifier"&gt;val&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt; &lt;span class="keyword"&gt;and&lt;/span&gt; &lt;span class="identifier"&gt;get_optional_value_or&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;opt&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt;&lt;span class="identifier"&gt;alternative_value&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;
"                added.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Constructor taking a boolean condition (as well as a value) added.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Member function &lt;code&gt;&lt;span class="identifier"&gt;get_value_or&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;alternative_value&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; added.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Incompatbility bug with mpl::apply&amp;lt;&amp;gt; fixed.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Converting assignment bug with uninitialized lvalues fixed.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/parameter/index.html"&gt;Parameter
"          Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Every ArgumentPack is now a valid &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/mpl/doc/refmanual/forward-sequence.html"&gt;MPL
"                Forward Sequence.&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for unnamed arguments (those whose keyword is deduced from
"                their types) is added.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for named and unnamed template arguments is added.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New overload generation macros solve the &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2002/n1385.htm"&gt;forwarding
"                problem&lt;/a&gt; directly.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See also the Python library changes, below.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/ptr_container/index.html"&gt;Pointer
"          Container Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for serialization via &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/serialization/index.html"&gt;Boost.Serialization.&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Exceptions can be disabled by defining the macro BOOST_PTR_CONTAINER_NO_EXCEPTIONS
"                before including any header. This macro is defined by default if
"                BOOST_NO_EXCEPTIONS is defined.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Additional &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;auto_ptr&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                overloads added s.t. one can also pass &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;auto_ptr&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; instead of only &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt;
"                arguments to member functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;transfer&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                now has weaker requirements s.t. one can transfer objects from &lt;code&gt;&lt;span class="identifier"&gt;ptr_container&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;Derived&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                to &lt;code&gt;&lt;span class="identifier"&gt;ptr_container&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;Base&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;,
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/python/index.html"&gt;Python Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.Python now automatically appends C++ signatures to docstrings.
"                The new &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/python/doc/v2/docstring_options.html"&gt;&lt;tt&gt;docstring_options.hpp&lt;/tt&gt;&lt;/a&gt;
"                header is available to control the content of docstrings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/python/doc/v2/stl_iterator.html#stl_input_iterator-spec"&gt;&lt;code&gt;&lt;span class="identifier"&gt;stl_input_iterator&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, for
"                turning a Python iterable object into an STL input iterator, from
"                Eric Niebler.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for &lt;code&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt;
"                conversions is added.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Integrated support for wrapping C++ functions built with the parameter
"                library; keyword names are automatically known to docsstrings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enhancements to the API for better embedding support (&lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;python&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;import&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;python&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;exec&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;,
"                and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;python&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;exec_file&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/doc/html/signals.html"&gt;Signals Library&lt;/a&gt;:&lt;/span&gt; More
"          improvements to signal invocation performance from Robert Zeh.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/smart_ptr/smart_ptr.htm"&gt;Smart
"          Pointers Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/smart_ptr/shared_ptr.htm#allocator_constructor"&gt;Allocator
"                support&lt;/a&gt; as proposed in &lt;a href="http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1851.pdf"&gt;N1851&lt;/a&gt;
"                (162 Kb PDF).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/smart_ptr/pointer_cast.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;pointer_cast&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/smart_ptr/pointer_to_other.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;pointer_to_other&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; utilities
"                to allow pointer-independent code, from Ion Gaztanaga.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/algorithm/string/index.html"&gt;String
"          Algorithm Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;lexicographical_compare&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;join&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New comparison predicates &lt;code&gt;&lt;span class="identifier"&gt;is_less&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;is_not_greater&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Negative indexes support (like Perl) in various algorihtms (&lt;code&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;span class="identifier"&gt;_head&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;tail&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;span class="identifier"&gt;_nth&lt;/span&gt;&lt;/code&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/wave/index.html"&gt;Wave Library&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Wave now correctly recognizes pp-number tokens as mandated by the
"                C++ Standard, which are converted to C++ tokens right before they
"                are returned from the library.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Several new preprocessing hooks have been added. For a complete description
"                please refer to the related documentation page: &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/wave/doc/class_reference_ctxpolicy.html"&gt;The
"                Context Policy&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Shared library (dll) support has been added for the generated Wave
"                libraries.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The overall error handling has been improved. It is now possible
"                to recover and continue after an error or a warning was issued.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for optional comment and/or full whitespace preservation
"                in the generated output stream has been added.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The Wave library now performs automatic include guard detection to
"                avoid accessing header files more than once, if appropriate.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Full interactive mode has been added to the Wave tool. Now the Wave
"                tool can be used just like Python or Perl for instance to interactively
"                try out your BOOST_PP macros. Additionally it is now possible to
"                load and save the current state of an interactive session (macro
"                tables et.al.).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The overall performance has been improved by upto 40-60%, depending
"                on the concrete files to process.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for new pragmas has been added allowing to control certain
"                library features from inside the preprocessed sources (partial output
"                redirection, control of generated whitespace and #line directives).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Optional support for #pragma message "..." has been added.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This version also includes a number of bug fixes and usage improvements.
"                For a complete list of changes, see the libraries &lt;a href="https://www.boost.org/doc/libs/1_34_0/libs/wave/ChangeLog"&gt;change
"                log&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_34_0.supported_compilers"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
"      rely on modern C++ features not available in all compilers, not all Boost libraries
"      will work with every compiler. The following compilers and platforms have been
"      extensively tested with Boost, although many other compilers and platforms
"      will work as well. For more information, see the &lt;a href="https://www.boost.org/regression/release/user/"&gt;regression
"      test results&lt;/a&gt;.
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://developer.apple.com/"&gt;Apple GCC&lt;/a&gt; 4.0.1 on Mac
"          OS X.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://www.codegear.com/products/cppbuilder"&gt;Borland C++&lt;/a&gt;
"          5.8.2 on Windows.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://gcc.gnu.org/"&gt;GNU C++&lt;/a&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                3.2.x., 3.3.x, 3.4.x, 4.0.x, 4.1.x on Linux
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                4.1.x on Solaris
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                3.4.x on Windows
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://h30097.www3.hp.com/cplus/"&gt;HP aC++ A.06.14&lt;/a&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm"&gt;Intel
"          C++&lt;/a&gt; 9.1 on Windows, 9.0 on Linux.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://www.metrowerks.com/"&gt;Metrowerks CodeWarrior&lt;/a&gt;
"          9.4 on Windows.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://msdn.microsoft.com/visualc/"&gt;Microsoft Visual C++&lt;/a&gt;
"          6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
"          support the non-standard "Safe" C++ Library shipping with Visual
"          C++ 8.0, which may result in many spurious warnings from Boost headers
"          and other standards-conforming C++ code. To suppress these warnings, define
"          the macro &lt;code&gt;&lt;span class="identifier"&gt;_SCL_SECURE_NO_DEPRECATE&lt;/span&gt;&lt;/code&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://developers.sun.com/sunstudio/compilers_index.html"&gt;Sun
"          Studio 11&lt;/a&gt; on Solaris.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_34_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="https://www.boost.org/users/people/thomas_witt.html"&gt;Thomas Witt&lt;/a&gt; managed this
"      release.
"    &lt;/p&gt;
"    &lt;p&gt;
"      A great number of people contributed their time and expertise to make this
"      release possible. Special thanks go to Vladimir Prus for making Boost.Build
"      version 2 a reality, David Abrahams for authoring a new getting started guide
"      and Greg D. for answering countless questions.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Fri, 13 Apr 2018 10:15:19 +0000
-quickbook
"feed/history/boost_1_34_0.qbk
-update_count
=1
)
(feed/history/boost_1_34_1.qbk
-item
"<item><title>Version 1.34.1</title><link>https://www.boost.org/users/history/version_1_34_1.html</link><guid>http://www.boost.org/users/history/version_1_34_1.html</guid><pubDate>Tue, 24 Jul 2007 12:00:00 +0000</pubDate><description>
"
"
"
"  &lt;p&gt;
"    This is a bug fix release addressing many problems with the 1.34.0 release. It
"    is a recommended upgrade for all users of Boost 1.34.0. For a complete list of
"    fixes see &lt;a href="http://svn.boost.org/trac/boost/query?status=closed&amp;amp;milestone=Boost+1.34.1"&gt;Boost
"    Trac&lt;/a&gt;.
"  &lt;/p&gt;
"  &lt;div id="version_1_34_1.supported_compilers"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      New in this release is improved support for the IBM XL C/C++ compiler.
"    &lt;/p&gt;
"    &lt;p&gt;
"      Boost is tested on a wide range of compilers and platforms. Since Boost libraries
"      rely on modern C++ features not available in all compilers, not all Boost libraries
"      will work with every compiler. New in this release The following compilers
"      and platforms have been extensively tested with Boost, although many other
"      compilers and platforms will work as well. For more information, see the &lt;a href="https://www.boost.org/regression/release/user/"&gt;regression test results&lt;/a&gt;.
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://developer.apple.com/"&gt;Apple GCC&lt;/a&gt; 4.0.1 on Mac
"          OS X.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://www.codegear.com/products/cppbuilder"&gt;Borland C++&lt;/a&gt;
"          5.8.2 on Windows.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://gcc.gnu.org/"&gt;GNU C++&lt;/a&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                3.2.x., 3.3.x, 3.4.x, 4.0.x, 4.1.x on Linux
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                4.1.x on Solaris
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                3.4.x on Windows
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://h30097.www3.hp.com/cplus/"&gt;HP C++ for Tru64 UNIX 7.1&lt;/a&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://www.hp.com/go/c++"&gt;HP aC++ A.06.14&lt;/a&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://www.intel.com/cd/software/products/asmo-na/eng/compilers/index.htm"&gt;Intel
"          C++&lt;/a&gt; 9.1 on Windows, 9.0 on Linux.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://www.metrowerks.com/"&gt;Metrowerks CodeWarrior&lt;/a&gt;
"          9.4 on Windows.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://msdn.microsoft.com/visualc/"&gt;Microsoft Visual C++&lt;/a&gt;
"          6.0 (sp5, with and without STLport), 7.0, 7.1, 8.0. Note: Boost does not
"          support the non-standard "Safe" C++ Library shipping with Visual
"          C++ 8.0, which may result in many spurious warnings from Boost headers
"          and other standards-conforming C++ code. To suppress these warnings, define
"          the macro &lt;code&gt;&lt;span class="identifier"&gt;_SCL_SECURE_NO_DEPRECATE&lt;/span&gt;&lt;/code&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://developers.sun.com/sunstudio/index.jsp"&gt;Sun Studio 11&lt;/a&gt;
"          on Solaris.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_34_1.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="https://www.boost.org/users/people/thomas_witt.html"&gt;Thomas Witt&lt;/a&gt; managed this
"      release.
"    &lt;/p&gt;
"    &lt;p&gt;
"      A great number of people contributed their time and expertise to make this
"      release possible. Special thanks go to Kim Barrett consolidating Boost.Iostreams
"      changes from various branches and Rene Rivera for general build and installation
"      support.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Fri, 13 Apr 2018 10:15:19 +0000
-quickbook
"feed/history/boost_1_34_1.qbk
-update_count
=1
)
(feed/history/boost_1_35_0.qbk
-item
"<item><title>Version 1.35.0</title><pubDate>Sat, 29 Mar 2008 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Asio, Bimap, Circular Buffer, Function Types, Fusion, GIL, Interprocess,
"      Intrusive, Math/Special Functions, Math/Statistical Distributions, MPI, System.
"      Updated Libraries: Graph, Hash, Iostreams, Multi Array, Multi-index Containers,
"      Serialization, Thread, Wave, Xpressive.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.35.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;div id=&quot;version_1_35_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt; Portable networking,
"        including sockets, timers, hostname resolution and socket iostreams, from
"        Chris Kohlhoff.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/bimap/index.html&quot;&gt;Bimap&lt;/a&gt;:&lt;/span&gt; Boost.Bimap is a
"        bidirectional maps library for C++. With Boost.Bimap you can create associative
"        containers in which both types can be used as key, from Matias Capeletto.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt; STL
"        compliant container also known as ring or cyclic buffer, from Jan Gaspar.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function_types/index.html&quot;&gt;Function Types&lt;/a&gt;:&lt;/span&gt; 
"  Boost.FunctionTypes
"        provides functionality to classify, decompose and synthesize function, function
"        pointer, function reference and pointer to member types. From Tobias Schwinger.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt; 
"  Library for working
"        with tuples, including various containers, algorithms, etc. From Joel de
"        Guzman, Dan Marsden and Tobias Schwinger.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/gil/doc/index.html&quot;&gt;GIL&lt;/a&gt;:&lt;/span&gt; 
"  Generic Image Library,
"        from Lubomir Bourdev and Hailin Jin.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt; 
"  Shared
"        memory, memory mapped files, process-shared mutexes, condition variables,
"        containers and allocators, from Ion Gaztañaga.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt; 
"  Intrusive
"        containers and algorithms, from Ion Gaztañaga.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math/Special
"        Functions&lt;/a&gt;:&lt;/span&gt; 
"  A wide selection of mathematical special functions from
"        John Maddock, Paul Bristow, Hubert Holin and Xiaogang Zhang.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math/Statistical
"        Distributions&lt;/a&gt;:&lt;/span&gt; 
"  A wide selection of univariate statistical distributions
"        and functions that operate on them from John Maddock and Paul Bristow
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/mpi.html&quot;&gt;MPI&lt;/a&gt;:&lt;/span&gt; 
"  Message Passing Interface
"        library, for use in distributed-memory parallel application programming,
"        from Douglas Gregor and Matthias Troyer.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/system/index.html&quot;&gt;System&lt;/a&gt;:&lt;/span&gt; 
"  Operating system
"        support, including the diagnostics support that will be part of the C++0x
"        standard library, from Beman Dawes.
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_35_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/doc/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"  Generic graph
"        components and algorithms. Highlights:
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;kolmogorov_max_flow&lt;/span&gt;&lt;/code&gt;,
"            from Stephan Diederich as part of the 2006 Google Summer of Code.
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_dimacs_max_flow&lt;/span&gt;&lt;/code&gt;
"            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;write_dimacs_max_flow&lt;/span&gt;&lt;/code&gt;
"            for max-flow problems, from Stephan Diederich.
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_graphml&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;write_graphml&lt;/span&gt;&lt;/code&gt; for GraphML input/output,
"            from Tiago de Paula Peixoto.
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;minimum_cycle_ratio&lt;/span&gt;&lt;/code&gt; and
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;maximum_cycle_ratio&lt;/span&gt;&lt;/code&gt;,
"            from Dmitry Bufistov and Andrey Parfenov.
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boyer_myrvold_planarity_test&lt;/span&gt;&lt;/code&gt;,
"            along with a suite of algorithms for planar graphs, from Aaron Windsor.
"          &lt;/li&gt;
"          &lt;li&gt;
"            LEDA Adaptor improvements, from Jens Müller.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"  A TR1 hash
"        function object, from Daniel James. Highlights:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Support for &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;&lt;/code&gt;,
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;complex&lt;/span&gt;&lt;/code&gt;.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Improved the algorithm for hashing floating point numbers.
"          &lt;/li&gt;
"          &lt;li&gt;
"            A few bug and warning fixes.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt; Framework
"        for defining streams, stream buffers and i/o filters, from Jonathan Turkanis.
"        Highlights:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Clarified the semantics of close(). This fixes several bugs but will
"            break some existing code. See &lt;a href=&quot;/libs/iostreams/doc/index.html?path=12&quot;&gt;Release
"            Notes&lt;/a&gt; for details.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Numerous other bug fixes and optimizations.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_array/index.html&quot;&gt;Multi Array&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added &amp;quot;dimensionality&amp;quot; compile-time constante to the MultiArray
"            concept.
"          &lt;/li&gt;
"          &lt;li&gt;
"            For greater control over error situations, uses of C++ assert have been
"            replaced with BOOST_ASSERT.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed a bug with simultaneous resizing and reindexing.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            New &lt;a href=&quot;/libs/multi_index/doc/tutorial/key_extraction.html#global_fun&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;global_fun&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; predefined key extractor.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added &lt;a href=&quot;/libs/multi_index/doc/tutorial/indices.html#iterator_to&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;iterator_to&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; facility.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Included &lt;a href=&quot;/libs/multi_index/doc/tutorial/creation.html#special_allocator&quot;&gt;support
"            for non-standard allocators&lt;/a&gt; such as those of &lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Boost.Interprocess&lt;/a&gt;,
"            which makes &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;s
"            placeable in shared memory.
"          &lt;/li&gt;
"          &lt;li&gt;
"            New versions of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;modify&lt;/span&gt;&lt;/code&gt;
"            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;modify_key&lt;/span&gt;&lt;/code&gt; with rollback,
"            as described in the &lt;a href=&quot;/libs/multi_index/doc/tutorial/basics.html#ord_updating&quot;&gt;tutorial&lt;/a&gt;.
"          &lt;/li&gt;
"          &lt;li&gt;
"            A number of optimizations and minor improvements have also been included.
"            For a complete list of changes, see the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_35&quot;&gt;release
"            notes&lt;/a&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/serialization/index.html&quot;&gt;Serialization&lt;/a&gt;:&lt;/span&gt; 
"   Boost.Serialization
"        has been updated with optimizations for dense arrays.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            The Thread library has been updated to be more in line with the C++0x
"            working draft.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Instances of boost::thread and of the various lock types are now movable.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Threads can be interrupted at interruption points.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Condition variables can now be used with any type that implements the
"            Lockable concept, through the use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable_any&lt;/span&gt;&lt;/code&gt;
"            (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition&lt;/span&gt;&lt;/code&gt; is a typedef to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable_any&lt;/span&gt;&lt;/code&gt;, provided for
"            backwards compatibility). &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;condition_variable&lt;/span&gt;&lt;/code&gt;
"            is provided as an optimization, and will only work with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"            (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;&lt;/code&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Thread IDs are separated from boost::thread, so a thread can obtain it's
"            own ID (using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_id&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;),
"            and IDs can be used as keys in associative containers, as they have the
"            full set of comparison operators.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Timeouts are now implemented using the Boost DateTime library, through
"            a typedef &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;system_time&lt;/span&gt;&lt;/code&gt; for absolute timeouts,
"            and with support for relative timeouts in many cases. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;xtime&lt;/span&gt;&lt;/code&gt;
"            is supported for backwards compatibility only.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Locks are implemented as publicly accessible templates &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lock_guard&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_lock&lt;/span&gt;&lt;/code&gt;,
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_lock&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;upgrade_lock&lt;/span&gt;&lt;/code&gt;,
"            which are templated on the type of the mutex. The Lockable concept has
"            been extended to include publicly available &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; member functions, which are used by
"            the lock types.
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;try_mutex&lt;/span&gt;&lt;/code&gt; has been removed, and the
"            functionality subsumed into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;/code&gt;.
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;try_mutex&lt;/span&gt;&lt;/code&gt; is left as a typedef, but
"            is no longer a separate class.
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_try_mutex&lt;/span&gt;&lt;/code&gt; has been removed,
"            and the functionality subsumed into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_mutex&lt;/span&gt;&lt;/code&gt;.
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_try_mutex&lt;/span&gt;&lt;/code&gt; is left as a typedef,
"            but is no longer a separate class.
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lock_ops&lt;/span&gt;&lt;/code&gt; has been removed. Code that
"            relies on the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock_ops&lt;/span&gt;&lt;/code&gt;
"            implementation detail will no longer work, as this has been removed,
"            as it is no longer necessary now that mutex types now have public &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"            member functions.
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;&lt;/code&gt; constructors
"            with a second parameter of type bool are no longer provided. With previous
"            boost releases, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;
"            &lt;span class=&quot;identifier&quot;&gt;some_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;some_mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
"            could be used to create a lock object that was associated with a mutex,
"            but did not lock it on construction. This facility has now been replaced
"            with the constructor that takes a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;defer_lock_type&lt;/span&gt;&lt;/code&gt;
"            as the second parameter: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_lock&lt;/span&gt;
"            &lt;span class=&quot;identifier&quot;&gt;some_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;some_mutex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;defer_lock&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            The broken &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;read_write_mutex&lt;/span&gt;&lt;/code&gt; has been replaced
"            with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_mutex&lt;/span&gt;&lt;/code&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt; Standards conformant
"        implementation of the mandated C99/C++ preprocessor functionality packed
"        behind an easy to use iterator interface, from Hartmut Kaiser. Highlights:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added the possibility to continue the preprocessing after an error occured.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added the macro introspection API to the wave::context object.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added threading support to the library.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Improved the overall performance by upto 30%.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Changed and unified preprocessor hook interface (this is an interface
"            breaking change!), added several new preprocessor hook functions.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added serialization support.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added new examples (for instance: Hannibal - a partial C++ parser, by
"            Danny Havenith).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added a new lexical analyzer based on Ben Hansons Lexertl library.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed a large number of other bugs and problems.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt; Regular
"        expressions that can be written as strings or as expression templates, and
"        that can refer to each other and themselves recursively with the power of
"        context-free grammars, from Eric Niebler. Highlights:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added &lt;em&gt;semantic actions&lt;/em&gt; to static regexes. A semantic
"            action is code that executes when part of a regular expression matches.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added &lt;em&gt;custom assertions&lt;/em&gt; to static regexes. A custom
"            assertion is a Boolean predicate that can participate in the regex match.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added &lt;em&gt;named regexes&lt;/em&gt; for embedding a static or dynamic
"            regex into a dynamic regex. This can be used to create dynamic regex
"            grammars.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added &lt;em&gt;named captures&lt;/em&gt; to dynamic regexes, like Perl.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_35_0.supported_compilers&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported Compilers&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      The following compilers are officially supported in this release:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        HP aC++ A.06.14 on HP-UX
"      &lt;/li&gt;
"      &lt;li&gt;
"        Darwin GCC 4.01.
"      &lt;/li&gt;
"      &lt;li&gt;
"        GNU GCC up to version 4.2.1, on Linux and Solaris.
"      &lt;/li&gt;
"      &lt;li&gt;
"        Intel C++ 9.1 on Linux.
"      &lt;/li&gt;
"      &lt;li&gt;
"        Intel C++ 10.1 on Windows.
"      &lt;/li&gt;
"      &lt;li&gt;
"        Microsoft Visual C++ 7.1 and 8 on Windows (Visual Sudio .NET 2003 and 2005).
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      In addition the following compilers should be well supported, but weren't part
"      of our release criteria for 1.35:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        IBM Visual Age 9.0 on AIX.
"      &lt;/li&gt;
"      &lt;li&gt;
"        Intel C++ 10 and later on Linux.
"      &lt;/li&gt;
"      &lt;li&gt;
"        GNU GCC 4.3 and later on Linux and Solaris.
"      &lt;/li&gt;
"      &lt;li&gt;
"        Microsoft Visual C++ 9 (Visual Studio .NET 2008).
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_35_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt; managed this
"      release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Sat, 29 Mar 2008 12:00:00 +0000
-quickbook
"feed/history/boost_1_35_0.qbk
)
(feed/history/boost_1_36_0.qbk
-item
"<item><title>Version 1.36.0</title><pubDate>Thu, 14 Aug 2008 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Accumulators, Exception, Units, Unordered. Updated Libraries:
"      Asio, Assign, Circular Buffer, Foreach, Function, Hash, Interprocess, Intrusive,
"      Math, Multi-index Containers, MPI, PtrContainer, Spirit, Thread, Wave, Xpressive.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.36.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;div id=&quot;version_1_36_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt; Framework
"        for incremental calculation, and collection of statistical accumulators,
"        from Eric Niebler.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/exception/doc/boost-exception.html&quot;&gt;Exception&lt;/a&gt;:&lt;/span&gt; 
"  A
"        library for transporting of arbitrary data in exception objects, and transporting
"        of exceptions between threads, from Emil Dotchevski.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/units/index.html&quot;&gt;Units&lt;/a&gt;:&lt;/span&gt;
"  Zero-overhead dimensional
"        analysis and unit/quantity manipulation and conversion, from Matthias Schabel
"        and Steven Watanabe
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt; 
"  Unordered
"        associative containers, from Daniel James.
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_36_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added support for serial ports.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added support for UNIX domain sockets.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added support for raw sockets and ICMP.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added wrappers for POSIX stream-oriented file descriptors (excluding
"            regular files).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added wrappers for Windows stream-oriented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
"            such as named pipes (requires &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
"            that work with I/O completion ports).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added wrappers for Windows random-access &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
"            such as files (requires &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;s
"            that work with I/O completion ports).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added support for reactor-style operations (i.e. they report readiness
"            but perform no I/O) using a new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
"            type.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added an iterator type for bytewise traversal of buffer sequences.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;read_until&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_until&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; overloads that take a user-defined
"            function object for locating message boundaries.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added an experimental two-lock queue (enabled by defining &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_ENABLE_TWO_LOCK_QUEUE&lt;/span&gt;&lt;/code&gt;) that
"            may provide better &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
"            scalability across many processors.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Various fixes, performance improvements, and more complete coverage of
"            the custom memory allocation support.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/assign/index.html&quot;&gt;Assign&lt;/a&gt;:&lt;/span&gt;
"  &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"        (and its variants) now has overloaded comparison operators. This allows you
"        to write test code such as &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_CHECK_EQUAL&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;my_container&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;list_of&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;
"        &lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Default constructor now doesn't allocate memory, and sets the capacity
"            of the buffer to 0
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FOREACH&lt;/span&gt;&lt;/code&gt; macro for easily iterating
"        over the elements of a sequence, from Eric Niebler.
"        &lt;ul&gt;
"          &lt;li&gt;
"            New &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_REVERSE_FOREACH&lt;/span&gt;&lt;/code&gt;
"            macro for iterating over a sequence in reverse.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Improved allocator support, from Emil Dotchevski.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"  Minor updates
"        and fixes, for more info see the &lt;a href=&quot;/doc/html/hash/changes.html#hash.changes.boost_1_36_0&quot;&gt;change
"        log&lt;/a&gt;.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added anonymous shared memory for UNIX systems.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed missing move semantics on managed memory classes.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added copy_on_write and open_read_only options for shared memory and
"            mapped file managed classes.
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;/code&gt; is movable
"            and supports aliasing.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;linear&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cache_last&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"            options to singly linked lists.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optimize_multikey&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; option to unordered container
"            hooks.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Optimized unordered containers when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;store_hash&lt;/span&gt;&lt;/code&gt;
"            option is used in the hook.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Implementation changed to avoid explicit use of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;/code&gt;-&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;&lt;/code&gt; blocks and be compilable with exceptions
"            disabled.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added new non-central Chi-Square, Beta, F and T distributions.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added Exponential Integral and Zeta special functions.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added Rounding, Truncation, and Unit-in-the-last-place functions.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added support for compile time powers of a runtime base.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added a few SSE2 based optimisations for the Lanczos approximations.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/doc/html/mpi.html&quot;&gt;MPI&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added support for non-blocking operations in Python, from Andreas Klöckner.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added support for graph topologies.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"  Minor
"        additions and maintenance fixes. Consult the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_36&quot;&gt;release
"        notes&lt;/a&gt; for further information.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/ptr_container/index.html&quot;&gt;PtrContainer&lt;/a&gt;:&lt;/span&gt;
"  Support
"        for a few more containers, and addition of insert iterators. For details
"        see &lt;a href=&quot;/libs/ptr_container/doc/ptr_container.html#upgrading-from-boost-v-1-35&quot;&gt;upgrading
"        details&lt;/a&gt;.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
"  Integrated the
"        &amp;quot;Classic&amp;quot; Spirit V1.8.x code base with Spirit V2, &amp;quot;The New
"        Generation&amp;quot;. See &lt;a href=&quot;/libs/spirit/classic/change_log.html&quot;&gt;Change
"        Log&lt;/a&gt;.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            New generic &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lock&lt;/span&gt;&lt;/code&gt; and
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;try_lock&lt;/span&gt;&lt;/code&gt; functions for
"            locking multiple mutexes at once.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Rvalue reference support for move semantics where the compilers supports
"            it.
"          &lt;/li&gt;
"          &lt;li&gt;
"            A few bugs fixed and missing functions added (including the serious win32
"            condition variable bug).
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;scoped_try_lock&lt;/span&gt;&lt;/code&gt; types
"            are now backwards-compatible with Boost 1.34.0 and previous releases.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Support for passing function arguments to the thread function by supplying
"            additional arguments to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;/code&gt;
"            constructor.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Backwards-compatibility overloads added for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timed_lock&lt;/span&gt;&lt;/code&gt;
"            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timed_wait&lt;/span&gt;&lt;/code&gt; functions
"            to allow use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xtime&lt;/span&gt;&lt;/code&gt;
"            for timeouts.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Wave V2.0 is a new major release introducing some breaking API changes,
"            preventing it to be used with Boost versions earlier than V1.36.0. Mainly,
"            the API and hook interface have been streamlined for more consistency.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed a couple of bugs, improved regression test system to include testing
"            of the preporcessing hooks interface (for details see: &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt; 
"  Regular
"        expressions that can be written as strings or as expression templates, and
"        that can refer to each other and themselves recursively with the power of
"        context-free grammars, from Eric Niebler.
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;skip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"            for specifying which parts of the input sequence to ignore when matching
"            it against a regex.
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;regex_replace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"            accepts formatter objects and formatter expressions in addition to format
"            strings.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Range-based &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;regex_replace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; algorithm.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fix crash when semantic actions are placed in look-aheads, look-behinds
"            or independent sub-expressions.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_36_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        GCC 4.01 on Mac OS X 10.4.10 with both Intel and Power PC
"      &lt;/li&gt;
"      &lt;li&gt;
"        GCC 4.2.3 on Ubuntu Linux 8.04.1
"      &lt;/li&gt;
"      &lt;li&gt;
"        HP C/aC++ B3910B A.06.17 on HP-UX 64-bit
"      &lt;/li&gt;
"      &lt;li&gt;
"        Visual C++ 9.0 SP1 beta, 8.0 SP1, and 7.1, all on Windows XP SP-2
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        GCC 4.2.1 on FreeBSD-7
"      &lt;/li&gt;
"      &lt;li&gt;
"        GCC 4.1.2 on NetBSD
"      &lt;/li&gt;
"      &lt;li&gt;
"        HP aCC on OS: HP-UX B.11.31 U ia64 and HP-UX B.11.31 9000/800 RISC
"      &lt;/li&gt;
"      &lt;li&gt;
"        IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40
"      &lt;/li&gt;
"      &lt;li&gt;
"        Intel 9.1, 10.0, and 10.1, on Mac OS X 10.4.1
"      &lt;/li&gt;
"      &lt;li&gt;
"        Compaq C++ V7.1-006 for Compaq Tru64 Unix on an OSF1 V5.1 platform.
"      &lt;/li&gt;
"      &lt;li&gt;
"        Sun C++ 5.7, 5.8, 5.9 and GCC 3.4.6 on Sun Solaris 5.10.
"      &lt;/li&gt;
"      &lt;li&gt;
"        On Linux:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 3.4.3, 4.0.1, 4.2.1, 4.3.0.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.0 with C++0x extensions.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 3.4.6, 4.1.1, 4.2.1 on 64 bit linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel C++ 8.1, 9.0 and 9.1.
"          &lt;/li&gt;
"          &lt;li&gt;
"            QLogic PathScale(TM) Compiler Suite: Version 3.1
"          &lt;/li&gt;
"          &lt;li&gt;
"            pgCC 7.2-3 64-bit target on x86-64 Linux
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        On Windows:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Intel 10.1, with Visual C++ 9 backend.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Lots of tests on Visual C++ 7.1, 8.0, 9.0
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 7.1 with Apache C++ Standard Library 4.2.x branch.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 8.0 with STLport 5.1
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 8.0 with STLport 5.1 cross-compiling for Windows Mobile 5.0
"            Pocket PC SDK (ARMV4I).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Borland 5.6.4, 5.8.2, 5.9.3
"          &lt;/li&gt;
"          &lt;li&gt;
"            64 bit Intel 10.1, with Visual C++ 9 backend.
"          &lt;/li&gt;
"          &lt;li&gt;
"            64 bit Visual C++ 9.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Comeau C++ 4.3.10.1 beta 2, with Visual C++ 9 backend.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_36_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene
"      Rivera&lt;/a&gt;, and Daniel James managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Thu, 14 Aug 2008 12:00:00 +0000
-quickbook
"feed/history/boost_1_36_0.qbk
)
(feed/history/boost_1_37_0.qbk
-item
"<item><title>Version 1.37.0</title><pubDate>Mon, 03 Nov 2008 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Library: Proto. Updated Libraries: Asio, Circular Buffer, Dynamic Bitset,
"      Exception, Hash, Interprocess, Intrusive, Math, Type Traits, Unordered
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.37.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;div id=&quot;version_1_37_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Expression template library and compiler construction toolkit for domain-specific
"            embedded languages, from Eric Niebler.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_37_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Enhanced CompletionCondition concept with the signature &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;CompletionCondition&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;
"            &lt;span class=&quot;identifier&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
"            &lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;total&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;, where the return value indicates the
"            maximum number of bytes to be transferred on the next read or write operation.
"            (The old CompletionCondition signature is still supported for backwards
"            compatibility).
"          &lt;/li&gt;
"          &lt;li&gt;
"            New windows::overlapped_ptr class to allow arbitrary overlapped I/O functions
"            (such as TransmitFile) to be used with Asio.
"          &lt;/li&gt;
"          &lt;li&gt;
"            On recent versions of Linux, an eventfd descriptor is now used (rather
"            than a pipe) to interrupt a blocked select/epoll reactor.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added const overloads of lowest_layer().
"          &lt;/li&gt;
"          &lt;li&gt;
"            Synchronous read, write, accept and connect operations are now thread
"            safe (meaning that it is now permitted to perform concurrent synchronous
"            operations on an individual socket, if supported by the OS).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Reactor-based io_service implementations now use lazy initialisation
"            to reduce the memory usage of an io_service object used only as a message
"            queue.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added new methods &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;is_linearized&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rotate&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;const_iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Minor bug fixes and documentation updates.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/dynamic_bitset/&quot;&gt;Dynamic Bitset&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Constructor &amp;quot;do the right thing&amp;quot; dispatch, a la standard sequence
"            containers (follows the proposed resolution of &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#438&quot;&gt;library
"            issue 438&lt;/a&gt;, currently in the &lt;tt&gt;C++0x&lt;/tt&gt; working
"            paper).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Improvements to documentation, code examples and implementation.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/exception/index.html&quot;&gt;Exception&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Support for non-RTTI builds.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Optimizations.
"          &lt;/li&gt;
"          &lt;li&gt;
"            A new macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THROW_EXCEPTION&lt;/span&gt;&lt;/code&gt;
"            which can be used instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;/code&gt;
"            when throwing, to automatically record information about the location
"            of the throw in the exception object.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Minor bug fix (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/2264&quot;&gt;ticket
"            2264&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added placement insertion (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace_back&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;...) methods to containers.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Containers can be used now in recursive types.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Minor bug fixes.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Intrusive now takes advantage of compilers with variadic templates.
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;clone_from&lt;/span&gt;&lt;/code&gt; functions
"            now copy predicates and hash functions of associative containers.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added incremental hashing to unordered containers via &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;incremental&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; option.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Minor bug fixes.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math.Special
"        Functions&lt;/a&gt;:&lt;/span&gt;
"   Improved accuracy and testing of the inverse hypergeometric
"        functions.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
"   Added
"        better support for the Codegear compiler.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Rename overload of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;/code&gt;
"            with hint, to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace_hint&lt;/span&gt;&lt;/code&gt;
"            as specified in &lt;a href=&quot;http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2008/n2691.pdf&quot;&gt;n2691&lt;/a&gt;.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Provide forwarding headers at &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_map_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"            and &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_set_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Move all of the implementation inside the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered&lt;/span&gt;&lt;/code&gt;
"            directory.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_37_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        GCC 4.01 on Mac OS X 10.4.10 with both Intel and Power PC
"      &lt;/li&gt;
"      &lt;li&gt;
"        GCC 4.2.4 on Ubuntu Linux 8.10
"      &lt;/li&gt;
"      &lt;li&gt;
"        GCC 4.3.2 on Debian Sid
"      &lt;/li&gt;
"      &lt;li&gt;
"        GCC 4.2.1 on HP-UX Integrity
"      &lt;/li&gt;
"      &lt;li&gt;
"        HP C/aC++ B3910B A.06.17 on HP-UX 64-bit
"      &lt;/li&gt;
"      &lt;li&gt;
"        Visual C++ 9.0 SP1, 8.0, and 7.1 SP1, all on Windows XP
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        GCC 4.1.2 on NetBSD
"      &lt;/li&gt;
"      &lt;li&gt;
"        HP aCC on OS: HP-UX B.11.31 U ia64 and HP-UX B.11.31 9000/800 RISC
"      &lt;/li&gt;
"      &lt;li&gt;
"        IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40
"      &lt;/li&gt;
"      &lt;li&gt;
"        Intel 9.1, 10.0, and 10.1, on Mac OS X 10.4.10
"      &lt;/li&gt;
"      &lt;li&gt;
"        Compaq C++ V7.1-006 for Compaq Tru64 Unix on an OSF1 V5.1 platform.
"      &lt;/li&gt;
"      &lt;li&gt;
"        Sun C++ 5.7, 5.8, 5.9 and GCC 3.4.6 on Sun Solaris 5.10.
"      &lt;/li&gt;
"      &lt;li&gt;
"        On Linux:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 3.4.3, 4.0.1, 4.2.1, 4.2.4, 4.3.2.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.2 with C++0x extensions.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.1.1, 4.2.1 on 64 bit linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel C++ 8.1, 9.0, 9.1 and 10.0
"          &lt;/li&gt;
"          &lt;li&gt;
"            QLogic PathScale(TM) Compiler Suite: Version 3.1
"          &lt;/li&gt;
"          &lt;li&gt;
"            Sun Compiler 5.9, 5.10 with stdcxx
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        On Windows:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Several testers using Visual C++ 7.1, 8.0, 9.0 and 10.0
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 7.1 with Apache C++ Standard Library 4.2.x branch.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 8.0 with STLport 5.1
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 8.0 with STLport 5.1 cross-compiling for Windows Mobile 5.0
"            Pocket PC SDK (ARMV4I).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 10.1, with Visual C++ 9 backend.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Borland 5.9.3 and 6.10.0
"          &lt;/li&gt;
"          &lt;li&gt;
"            64 bit Intel 10.1, with Visual C++ 9 backend.
"          &lt;/li&gt;
"          &lt;li&gt;
"            64 bit Visual C++ 9.0.
"          &lt;/li&gt;
"          &lt;li&gt;
"            64-bit Visual C++ 9.0 with Apache C++ Standard Library 4.2.x branch.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Comeau C++ 4.3.10.1 beta 2, with Visual C++ 9 backend.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_37_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
"      James managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Mon, 03 Nov 2008 12:00:00 +0000
-quickbook
"feed/history/boost_1_37_0.qbk
)
(feed/history/boost_1_38_0.qbk
-item
"<item><title>Version 1.38.0</title><link>http://www.boost.org/users/history/version_1_38_0.html</link><guid>http://www.boost.org/users/history/version_1_38_0.html</guid><pubDate>Sun, 08 Feb 2009 12:00:00 +0000</pubDate><description>
"
"
"
"  &lt;div id="version_1_38_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/flyweight/index.html"&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Design pattern to manage large quantities of highly redundant objects,
"                from Joaquín M López Muñoz.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/scope_exit/doc/html/index.html"&gt;ScopeExit&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Execute arbitrary code at scope exit, from Alexander Nasonov.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/utility/swap.html"&gt;Swap&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enhanced generic swap function, from Joseph Gauterin.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_38_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/accumulators/index.html"&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class="identifier"&gt;rolling_sum&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;rolling_count&lt;/span&gt;&lt;/code&gt; and
"                &lt;code&gt;&lt;span class="identifier"&gt;rolling_mean&lt;/span&gt;&lt;/code&gt; accumulators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/doc/html/any.html"&gt;Any&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use a by-value argument for &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;=&lt;/span&gt;&lt;/code&gt; (&lt;a href="https://svn.boost.org/trac/boost/ticket/2311"&gt;#2311&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/asio/index.html"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved compatibility with some Windows firewall software.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured arguments to &lt;code&gt;&lt;span class="identifier"&gt;windows&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;overlapped_ptr&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;complete&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; are correctly passed to the completion
"                handler (&lt;a href="https://svn.boost.org/trac/boost/ticket/2614"&gt;#2614&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a link problem and multicast failure on QNX (&lt;a href="https://svn.boost.org/trac/boost/ticket/2504"&gt;#2504&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2530"&gt;#2530&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a compile error in SSL support on MinGW / g++ 3.4.5.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Drop back to using a pipe for notification if eventfd is not available
"                at runtime on Linux (&lt;a href="https://svn.boost.org/trac/boost/ticket/2683"&gt;#2683&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Various minor bug and documentation fixes (&lt;a href="https://svn.boost.org/trac/boost/ticket/2534"&gt;#2534&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2541"&gt;#2541&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2607"&gt;#2607&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2617"&gt;#2617&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2619"&gt;#2619&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/config/index.html"&gt;Config&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add new macros BOOST_NO_STD_UNORDERED and BOOST_NO_INITIALIZER_LISTS.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Codegear compiler support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Dragonfly to the BSD family of configs.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated MSVC's binary ABI settings to match compiler default when
"                doing 64-bit builds.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Recognise latest compilers from MS and Intel.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/date_time/index.html"&gt;Date_Time&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for formatting and reading time durations longer than
"                24 hours with new formatter: &lt;code&gt;&lt;span class="special"&gt;%&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed the &lt;code&gt;&lt;span class="identifier"&gt;testfrmwk&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                file from the public include directory.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed several bugs and compile errors.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                For full details see the &lt;a href="http://www.boost.org/doc/libs/1_38_0/doc/html/date_time/details.html#date_time.changes"&gt;change
"                history&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/exception/index.html"&gt;Exception&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved and more customizable &lt;a href="http://www.boost.org/libs/exception/doc/diagnostic_information.html"&gt;diagnostic_information&lt;/a&gt;
"                output.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/filesystem/index.html"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix native(name) test failures on POSIX-like systems.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Several bugfixes (&lt;a href="https://svn.boost.org/trac/boost/ticket/2543"&gt;#2543&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2224"&gt;#2224&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2531"&gt;#2531&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/1840"&gt;#1840&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2542"&gt;#2542&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/graph/index.html"&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a new algorithms for Travelling Salesman Problem approximation
"                (&lt;code&gt;&lt;span class="identifier"&gt;metric_tsp_approx&lt;/span&gt;&lt;/code&gt;)
"                and resource-constrained Shortest Paths (&lt;code&gt;&lt;span class="identifier"&gt;r_c_shortest_paths&lt;/span&gt;&lt;/code&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for named vertices in &lt;code&gt;&lt;span class="identifier"&gt;adjacency_list&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                A number of bugfixes ( &lt;a href="https://svn.boost.org/trac/boost/ticket/416"&gt;#416&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/1622"&gt;#1622&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/1700"&gt;#1700&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2209"&gt;#2209&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2392"&gt;#2392&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2460"&gt;#2460&lt;/a&gt;,
"                and &lt;a href="https://svn.boost.org/trac/boost/ticket/2550"&gt;#2550&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/functional/hash/index.html"&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;functional&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;detail&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;container_fwd&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; has been moved to &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;detail&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;container_fwd&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;. The current location is deprecated.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                For more detail, see the &lt;a href="http://www.boost.org/doc/html/hash/changes.html#hash.changes.boost_1_38_0"&gt;library
"                changelog&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/interprocess/index.html"&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated documentation to show rvalue-references functions instead
"                of emulation functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                More non-copyable classes are now movable.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Move-constructor and assignments now leave moved object in default-constructed
"                state instead of just swapping contents.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Several bugfixes (&lt;a href="https://svn.boost.org/trac/boost/ticket/2391"&gt;#2391&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2431"&gt;#2431&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/1390"&gt;#1390&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2570"&gt;#2570&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2528"&gt;#2528&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/intrusive/index.html"&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New treap-based containers: treap, treap_set, treap_multiset.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Corrected compilation bug for Windows-based 64 bit compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Corrected exception-safety bugs in container constructors.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated documentation to show rvalue-references functions instead
"                of emulation functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/conversion/lexical_cast.htm"&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to work without RTTI when &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_TYPEID&lt;/span&gt;&lt;/code&gt;
"                is defined (&lt;a href="https://svn.boost.org/trac/boost/ticket/1220"&gt;#1220&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/math/doc/sf_and_dist/html/index.html"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Johan Råde's optimised floating point classification routines.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed code so that it compiles in GCC's -pedantic mode (bug report
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/1451"&gt;#1451&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/multi_index/doc/index.html"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"  Some
"          redundant type definitions have been deprecated. Consult the library &lt;a href="http://www.boost.org/libs/multi_index/doc/release_notes.html#boost_1_38"&gt;release notes&lt;/a&gt;
"          for further information.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/proto/index.html"&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix problem with SFINAE of binary operators (Bug &lt;a href="https://svn.boost.org/trac/boost/ticket/2407"&gt;2407&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;code&gt;&lt;span class="identifier"&gt;proto&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;call&lt;/span&gt;&lt;/code&gt; transform for callable transforms
"                with &amp;gt;3 arguments.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;result_of&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;value&lt;/span&gt;&lt;/code&gt; changed behavior for array-by-value
"                terminals.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;unpack_expr&lt;/span&gt;&lt;/code&gt; requires
"                only Forward Sequences rather than Random Access Sequences.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Deprecate legacy undocumented &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PROTO_DEFINE_&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;VARARG_&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;span class="identifier"&gt;FUNCTION_TEMPLATE&lt;/span&gt;&lt;/code&gt;
"                macros.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PROTO_REPEAT&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PROTO_LOCAL_ITERATE&lt;/span&gt;&lt;/code&gt;
"                macros to help with repetitive code generation
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for nullary expressions with tag types other than &lt;code&gt;&lt;span class="identifier"&gt;proto&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;tag&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;terminal&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Allow 0- and 1-argument variants of &lt;code&gt;&lt;span class="identifier"&gt;proto&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;or_&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;proto&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;and_&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/regex/index.html"&gt;Regex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Breaking change&lt;/em&gt;: empty expressions, and empty
"                alternatives are now allowed when using the Perl regular expression
"                syntax. This change has been added for Perl compatibility, when the
"                new &lt;code&gt;&lt;span class="identifier"&gt;syntax_option_type&lt;/span&gt;&lt;/code&gt;
"                &lt;em&gt;no_empty_expressions&lt;/em&gt; is set then the old behaviour
"                is preserved and empty expressions are prohibited. This is issue
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/1081"&gt;#1081&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for Perl style ${n} expressions in format strings (issue
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2556"&gt;#2556&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for accessing the location of sub-expressions within
"                the regular expression string (issue &lt;a href="https://svn.boost.org/trac/boost/ticket/2269"&gt;#2269&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compiler compatibility issues &lt;a href="https://svn.boost.org/trac/boost/ticket/2244"&gt;#2244&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/2514"&gt;#2514&lt;/a&gt;,
"                and &lt;a href="https://svn.boost.org/trac/boost/ticket/2244"&gt;#2458&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/doc/html/thread.html"&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                No longer catches unhandled exceptions in threads as this debuggers
"                couldn't identify the cause of unhandled exceptions in threads. An
"                unhandled exception will still cause the application to terminate.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/tr1/index.html"&gt;TR1&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for the TR1 math functions and the unordered containers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/type_traits/index.html"&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for Codegear intrinsics.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Minor tweaks to warning suppression and alignment_of code.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/unordered/index.html"&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use &lt;a href="http://www.boost.org/libs/utility/swap.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;swap&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use a larger prime number list for selecting the number of buckets.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use &lt;a href="http://www.boost.org/libs/type_traits/doc/html/boost_typetraits/category/alignment.html"&gt;aligned
"                storage&lt;/a&gt; to store the types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for C++0x initializer lists where they're available.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                For more detail, see the &lt;a href="http://www.boost.org/doc/html/unordered/changes.html#unordered.changes.boost_1_38_0"&gt;library
"                changelog&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/xpressive/index.html"&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;basic_regex&lt;/span&gt;&lt;/code&gt; gets
"                nested &lt;code&gt;&lt;span class="identifier"&gt;syntax_option_flags&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;value_type&lt;/span&gt;&lt;/code&gt; typedef,
"                for compatibility with &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_regex&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ported to Proto v4; Proto v2 at &lt;tt&gt;boost/xpressive/proto&lt;/tt&gt;
"                has been removed.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;regex_error&lt;/span&gt;&lt;/code&gt; inherits
"                from &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;exception&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_38_0.other_changes"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Other Changes&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Experimental support for building Boost with &lt;a href="http://www.cmake.org/"&gt;CMake&lt;/a&gt;
"          has been introduced in this version. For more details see the &lt;a href="https://svn.boost.org/trac/boost/wiki/CMake"&gt;wiki&lt;/a&gt;,
"          Discussion is taking place on the &lt;a href="https://lists.boost.org/mailman/listinfo.cgi/boost-cmake"&gt;Boost-cmake
"          mailing list&lt;/a&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Fixed subversion properties for several files. Most notably, unix shell
"          scripts should always have unix line endings, even in the windows packages.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_38_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.0.1 on Intel OS X 10.4.10, 10.5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.0.1 on PowerPC OS X 10.4.9
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.3.2 on Ubuntu Linux.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.3.3 on Debian "unstable".
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          HP-UX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.2.1 on HP-UX 64-bit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                HP C/aC++ B3910B A.06.17 on HP-UX 64-bit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.1.1, 4.2.1 on 64-bit Red Hat Enterprise Linux
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.1.2 on 64-bit Redhat Server 5.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 3.4.3, GCC 4.0.1, GCC 4.2.4 and GCC 4.3.2 on Red Hat Enterprise
"                Linux
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.3.2 with C++0x extensions
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.2.1 on OpenSuSE Linux
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                pgCC 8.0-0a 64-bit target on Red Hat Enterprise Linux
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QLogic PathScale(TM) Compiler Suite: Version 3.1 on Red Hat Enterprise
"                Linux
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel 9.1, 10.0 on OS X 10.4.10
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel 10.1, 11.0 on OS X 10.5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 9.0 on Vista EE 64-bit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 9.0 express on Vista 32-bit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 9.0 on XP 32-bit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 8.0, using STLport, on XP and Windows Mobile 5.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 7.1, using STLport, on XP
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Borland 5.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Borland 6.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel C++ 11.0, with a Visual C++ 9.0 backend, on XP 32-bit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel C++ 11.0, with a Visual C++ 9.0 backend, on Vista 64-bit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Comeau 4.3.10.1 beta 2, with a Visual C++ 9.0 backend.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 3.4.4, on Cygwin
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          AIX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version
"                5.3.0.40
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.2.1 on FreeBSD 7.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          NetBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.1.2 on NetBSD 4.0/i386 and NetBSD 4.0/amd64.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QNX Software Development Platform 6.4.0 x86
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Solaris:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Sun C++ 5.7, 5.8, 5.9 on Solaris 5.10
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 3.4.6 on Solaris 5.10
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_38_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="http://www.boost.org/users/people/beman_dawes.html"&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href="http://www.boost.org/users/people/rene_rivera.html"&gt;Rene Rivera&lt;/a&gt;, and Daniel
"      James managed this release. Thanks to Vicente Botet for helping compile these
"      release notes.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Sun, 25 Mar 2018 11:10:08 +0000
-quickbook
"feed/history/boost_1_38_0.qbk
-update_count
=1
)
(feed/history/boost_1_39_0.qbk
-item
"<item><title>Version 1.39.0</title><pubDate>Sat, 02 May 2009 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Signals2. Updated Libraries: Asio, Flyweight, Foreach, Hash,
"      Interprocess, Intrusive, Program.Options, Proto, PtrContainer, Range, Unordered,
"      Xpressive. Updated Tools: Boostbook, Quickbook.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.39.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;div id=&quot;version_1_39_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/signals2/index.html&quot;&gt;Signals2&lt;/a&gt;:&lt;/span&gt; Managed signals
"        &amp;amp; slots callback implementation (thread-safe version 2), from Frank Mori
"        Hess.
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_39_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Implement automatic resizing of the bucket array in the internal hash
"            maps. This is to improve performance for very large numbers of asynchronous
"            operations and also to reduce memory usage for very small numbers. A
"            new macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_HASH_MAP_BUCKETS&lt;/span&gt;&lt;/code&gt;
"            may be used to tweak the sizes used for the bucket arrays.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Add performance optimisation for the Windows IOCP backend for when no
"            timers are used.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Prevent locale settings from affecting formatting of TCP and UDP endpoints
"            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2682&quot;&gt;#2682&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fix a memory leak that occurred when an asynchronous SSL operation's
"            completion handler threw an exception (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2910&quot;&gt;#2910&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fix the implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_control&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; so that it adheres to the documented
"            type requirements for IoControlCommand (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2820&quot;&gt;#2820&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fix incompatibility between Asio and ncurses.h (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2156&quot;&gt;#2156&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            On Windows, specifically handle the case when an overlapped &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ReadFile&lt;/span&gt;&lt;/code&gt; call fails with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ERROR_MORE_DATA&lt;/span&gt;&lt;/code&gt;. This enables a hack
"            where a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_handle&lt;/span&gt;&lt;/code&gt; can be used with a message-oriented
"            named pipe (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2936&quot;&gt;#2936&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fix system call wrappers to always clear the error on success, as POSIX
"            allows successful system calls to modify errno (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2953&quot;&gt;#2953&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Don't include termios.h if &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DISABLE_SERIAL_PORT&lt;/span&gt;&lt;/code&gt;
"            is defined (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2917&quot;&gt;#2917&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Cleaned up some more MSVC level 4 warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2828&quot;&gt;#2828&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Various documentation fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2871&quot;&gt;#2871&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/flyweight/index.html&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            The &lt;a href=&quot;/libs/flyweight/doc/tutorial/configuration.html#refcounted&quot;&gt;refcounted&lt;/a&gt;
"            component was not thread-safe due to an incorrect implementation and
"            could deadlock under heavy usage conditions. This problem has been corrected.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Eliminate shadow warnings on gcc for nested &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;FOREACH&lt;/span&gt;&lt;/code&gt;
"            loops
"          &lt;/li&gt;
"          &lt;li&gt;
"            Portability fix for Intel-Win toolset
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Remove deprecated headers for hashing containers. Everything that was
"            in them is included in &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2412&quot;&gt;#2412&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Other minor changes, full details in the library &lt;a href=&quot;/doc/html/hash/changes.html#hash.changes.boost_1_39_0&quot;&gt;change
"            log&lt;/a&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Increased portability and bug fixes. Full details in the library &lt;a href=&quot;/doc/html/interprocess/acknowledgements_notes.html#interprocess.acknowledgements_notes.release_notes.release_notes_boost_1_39_00&quot;&gt;change
"            log&lt;/a&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Optimizations and bug fixes. Full details in the library &lt;a href=&quot;/doc/html/intrusive/release_notes.html#intrusive.release_notes.release_notes_boost_1_39_00&quot;&gt;change
"            log&lt;/a&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/program_options/index.html&quot;&gt;Program.Options&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Multitoken options fixed (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/469&quot;&gt;#469&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Work around incompatibility with standard Linux header.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;noinvoke&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"            to block metafunction invocation in object transforms.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/ptr_container/index.html&quot;&gt;PtrContainer&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Bug fixes from Trac applied.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/range/index.html&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Bug fixes from Trac applied.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Fixed regression in 1.38 that prevented unordered from using more than
"            about 1.5 million buckets (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2975&quot;&gt;#2975&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Minor implementation changes, including &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2756&quot;&gt;#2756&lt;/a&gt;.
"            Full details in the library &lt;a href=&quot;/doc/html/unordered/changes.html#unordered.changes.boost_1_39_0&quot;&gt;change
"            log&lt;/a&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Work around for gcc optimization problem resulting in pure virtual function
"            call runtime error (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2655&quot;&gt;#2655&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_39_0.updated_tools&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Improved PDF generation.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Preliminary HTMLHelp support.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Add default path for callout images.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Include data members' &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;purpose&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"            in the class synopsis.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fix bug where a function's &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;purpose&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"            wasn't displayed if it was just plain text.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Support the alt tag in &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;headername&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"            and &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;macroname&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;. Use this if the header or macro
"            name is different to the contents of the tag (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1977&quot;&gt;#1977&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Support links relative to the boost root in &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ulink&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"            tags, using a custom url, see the &lt;a href=&quot;/doc/html/boostbook/together.html#boostbook.linking&quot;&gt;linking
"            documentation&lt;/a&gt; for details (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1166&quot;&gt;#1166&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Avoid generating filenames that only differ in case for function, method
"            and macro documentation.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Run the docbook chunker quietly, unless boostbook.verbose is set. This
"            parameter might be used in other places in future releases.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Make the 1.1 DTD available.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fill in some missing reference documentation (partially fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2153&quot;&gt;#2153&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Changes to doxygen integration:
"            &lt;ul&gt;
"              &lt;li&gt;
"                Support &lt;code&gt;&lt;span class=&quot;special&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt;&lt;/code&gt;.
"              &lt;/li&gt;
"              &lt;li&gt;
"                Support global variables and enums.
"              &lt;/li&gt;
"              &lt;li&gt;
"                Better support for documentation written in function and method bodies.
"              &lt;/li&gt;
"              &lt;li&gt;
"                Workaround a problem with doxygen 1.5.8's xml output (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2937&quot;&gt;#2937&lt;/a&gt;).
"              &lt;/li&gt;
"            &lt;/ul&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Return an error code and error count if there are any errors (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1399&quot;&gt;#1399&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Support both windows and cygwin paths at the compile line when compiled
"            with cygwin.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fix some issues with C++ and Python code:
"            &lt;ul&gt;
"              &lt;li&gt;
"                Fail gracefully for a mismatched &lt;code&gt;&lt;span class=&quot;char&quot;&gt;''&lt;/span&gt;&lt;/code&gt;.
"              &lt;/li&gt;
"              &lt;li&gt;
"                Warn if any unexpected character are encountered and write them out
"                properly (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1170&quot;&gt;#1170&lt;/a&gt;).
"              &lt;/li&gt;
"              &lt;li&gt;
"                Fix a bug for hex encoded characters in strings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2860&quot;&gt;#2860&lt;/a&gt;).
"              &lt;/li&gt;
"            &lt;/ul&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            Improved testing, including tests for expected failures.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Generate valid document info for document types other than &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;library&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2711&quot;&gt;#2711&lt;/a&gt;):
"            &lt;ul&gt;
"              &lt;li&gt;
"                Remove library specific attributes.
"              &lt;/li&gt;
"              &lt;li&gt;
"                Put title before info block.
"              &lt;/li&gt;
"            &lt;/ul&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fix a bug when calling templates.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Less warnings when built using gcc.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Small documentation improvements (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1213&quot;&gt;#1213&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2701&quot;&gt;#2701&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fix a bug with xinclude pages when outdir is the current directory (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2921&quot;&gt;#2921&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_39_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        OS X:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on Intel Tiger and Leopard
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on PowerPC Tiger
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Linux:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.3.2 on Ubuntu Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.3 on Debian &amp;quot;unstable&amp;quot;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Windows:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        Linux:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Intel 9.0 on Red Hat Enterprise Linux
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 10.0 on Red Hat Enterprise Linux
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 10.1 on 64-bit Linux Redhat 5.1 Server.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 10.1 on Suse Linux on 64 bit Itanium
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 11.0 on Red Hat Enterprise Linux
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.1.1, 4.2.1 on 64-bit Red Hat Enterprise Linux
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.1.2 on 64-bit Redhat Server 5.1
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.1.2 on Suse Linux on 64 bit Itanium
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 3.4.3, GCC 4.0.1, GCC 4.2.4 and GCC 4.3.2 on Red Hat Enterprise Linux
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.2 with C++0x extensions on Red Hat Enterprise Linux
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.2.1 on OpenSuSE Linux
"          &lt;/li&gt;
"          &lt;li&gt;
"            QLogic PathScale(TM) Compiler Suite: Version 3.1 on Red Hat Enterprise
"            Linux
"          &lt;/li&gt;
"          &lt;li&gt;
"            GNU gcc version 4.2.0 (PathScale 3.2 driver) on 64-bit Red Hat Enterprise
"            Linux
"          &lt;/li&gt;
"          &lt;li&gt;
"            Sun 5.9 on Red Hat Enterprise Linux
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        OS X:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Intel 9.1, 10.1 on Tiger
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 10.1, 11.0 on Leopard
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.2.1 on Leopard
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Windows:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Visual C++ 9.0 on Vista.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 9.0, using STLport 5.2, on XP and Windows Mobile 5.0.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Borland 5.9.3
"          &lt;/li&gt;
"          &lt;li&gt;
"            Borland 6.1.0
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel C++ 11.0, with a Visual C++ 9.0 backend, on XP 32-bit.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel C++ 11.0, with a Visual C++ 9.0 backend, on Vista 64-bit. (TODO:
"            not recently)
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.3, on Mingw
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        AIX:
"        &lt;ul&gt;
"          &lt;li&gt;
"            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        NetBSD:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.1.2 on NetBSD 4.0/i386 and NetBSD 4.0/amd64.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Solaris:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Sun C++ 5.7, 5.8, 5.9 on Solaris 5.10
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 3.4.6 on Solaris 5.10
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_39_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
"      James managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Sat, 02 May 2009 12:00:00 +0000
-quickbook
"feed/history/boost_1_39_0.qbk
)
(feed/history/boost_1_40_0.qbk
-item
"<item><title>Version 1.40.0</title><pubDate>Thu, 27 Aug 2009 17:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Build System improvements. Updated Libraries: Accumulators, Asio, Circular
"      Buffer, Foreach, Function, Fusion, Graph, Hash, Interprocess, Intrusive, MPL,
"      Program.Options, Property Map, Proto, Random, Serialization, Unordered, Xpressive.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.40.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;div id=&quot;version_1_40_0.update&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Update&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Added missing notes for Graph and Property Map.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_40_0.boost_cmake&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Boost.CMake&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost.CMake is &lt;em&gt;now distributed separately&lt;/em&gt;.
"      The cmake build for boost is &lt;em&gt;BROKEN&lt;/em&gt; in the
"      tarballs above. See the &lt;a href=&quot;https://svn.boost.org/trac/boost/wiki/CMake&quot;&gt;Boost.CMake
"      wiki page&lt;/a&gt; for pointers to working versions.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_40_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Works on GCC 4.4.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added a new ping example to illustrate the use of ICMP sockets.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Changed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;buffered&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; templates to treat 0-byte reads
"            and writes as no-ops, to comply with the documented type requirements
"            for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SyncReadStream&lt;/span&gt;&lt;/code&gt;,
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;AsyncReadStream&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SyncWriteStream&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;AsyncWriteStream&lt;/span&gt;&lt;/code&gt;.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Changed some instances of the &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt;&lt;/code&gt;
"            keyword to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"            to allow Asio to be used when exception support is disabled. Note that
"            the SSL wrappers still require exception support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2754&quot;&gt;#2754&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Made Asio compatible with the OpenSSL 1.0 beta (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3256&quot;&gt;#3256&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Eliminated a redundant system call in the Solaris &lt;tt&gt;/dev/poll&lt;/tt&gt;
"            backend.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed a bug in resizing of the bucket array in the internal hash maps
"            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3095&quot;&gt;#3095&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Ensured correct propagation of the error code when a synchronous accept
"            fails (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3216&quot;&gt;#3216&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Ensured correct propagation of the error code when a synchronous read
"            or write on a Windows HANDLE fails.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed failures reported when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_GLIBCXX_DEBUG&lt;/span&gt;&lt;/code&gt;
"            is defined (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3098&quot;&gt;#3098&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed custom memory allocation support for timers (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3107&quot;&gt;#3107&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Tidied up various warnings reported by g++ (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1341&quot;&gt;#1341&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2618&quot;&gt;#2618&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Various documentation improvements, including more obvious hyperlinks
"            to function overloads, header file information, examples for the handler
"            type requirements, and adding enum values to the index (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3157&quot;&gt;#3157&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2620&quot;&gt;#2620&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2785&quot;&gt;#2785&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3285&quot;&gt;#3285&lt;/a&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Workaround for conflict with Python headers (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3000&quot;&gt;#3000&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Optimize the use of small target objects.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Make Boost.Function compile under BOOST_NO_EXCEPTIONS (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2499&quot;&gt;#2499&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2494&quot;&gt;#2494&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2469&quot;&gt;#2469&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2466&quot;&gt;#2466&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2900&quot;&gt;#2900&lt;/a&gt;)
"          &lt;/li&gt;
"          &lt;li&gt;
"            Various minor fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2642&quot;&gt;#2642&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2847&quot;&gt;#2847&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2929&quot;&gt;#2929&lt;/a&gt;
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3012&quot;&gt;#3012&lt;/a&gt;)
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Improved compile times for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Merged in the &lt;a href=&quot;/libs/graph_parallel/doc/html/index.html&quot;&gt;Parallel
"            Boost Graph Library&lt;/a&gt;, giving a full suite of graph algorithms
"            and data structures for distributed-memory computers (such as clusters).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Updates to the interface of the compressed sparse row graph, including
"            constructors from unsorted edge lists.
"          &lt;/li&gt;
"          &lt;li&gt;
"            An implicit grid graph, saving memory over using the former generator.
"          &lt;/li&gt;
"          &lt;li&gt;
"            New algorithms: Dijkstra's single-source shortest path algorithm without
"            a separate color map and an algorithm to find maximal common subgraphs
"            between two graphs.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Assorted bug fixes.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Automatically configure the float functions using template metaprogramming
"            instead of trying to configure every possibility manually.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Windows shared memory is created in Shared Documents folder so that it
"            can be shared between services and processes
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2967&quot;&gt;#2967&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2973&quot;&gt;#2973&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2992&quot;&gt;#2992&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3138&quot;&gt;#3138&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3166&quot;&gt;#3166&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3205&quot;&gt;#3205&lt;/a&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Code cleanup in tree_algorithms.hpp and avl_tree_algorithms.hpp
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3164&quot;&gt;#3164&lt;/a&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/mpl/index.html&quot;&gt;MPL&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;char_&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;/code&gt;
"            for compile-time string manipulation, based on multichar literals (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2905&quot;&gt;#2905&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Updated &lt;a href=&quot;/libs/mpl/doc/refmanual.html&quot;&gt;MPL Reference Manual&lt;/a&gt;.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Bug fixes.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/program_options/index.html&quot;&gt;Program.Options&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Support for building with disabled exceptions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2096&quot;&gt;#2096&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Unicode parser no longer drops original tokens (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2425&quot;&gt;#2425&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed crash on user-inserted items in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;variables_map&lt;/span&gt;&lt;/code&gt;
"            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2782&quot;&gt;#2782&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_map/index.html&quot;&gt;Property Map&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Moved property map code into a separate directory, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt;. The old files exist and forward to
"            the new ones; the previous files directly in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt; will be removed in Boost 1.42.0.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Moved distributed property maps to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;parallel&lt;/span&gt;&lt;/code&gt;
"            namespace.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added a property map based on a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;shared_array&lt;/span&gt;&lt;/code&gt;,
"            providing a simpler interface.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            PrimitiveTransforms have stricter conformance to ResultOf protocol. (Warning:
"            some invalid code may break.)
"          &lt;/li&gt;
"          &lt;li&gt;
"            Add a sensible default for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_default&lt;/span&gt;&lt;/code&gt;'s
"            template parameter.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Improved default evaluation strategy for pointers to members.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 3.4 portability fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3021&quot;&gt;#3021&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Work around Visual C++'s non-std-compliant ciso646 macros.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Made the constructors of all the generators call the copy constructor
"            when passed a non-const reference.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Changed seeding functions to accept any arithmetic type. As a side-effect,
"            the exact signature of seed changed for some classes.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Major bug fixes in uniform_int.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/serialization/index.html&quot;&gt;Serialization&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Removed deprecated headers: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;static_warning&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;state_saver&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;smart_cast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pfto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;. Use the the equivalent headers
"            in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;serialization&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt;
"            directory instead (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3062&quot;&gt;#3062&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;archive_serializer_map&lt;/span&gt;&lt;/code&gt; should now be
"            used instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;archive_pointer_iserializer&lt;/span&gt;&lt;/code&gt;.
"            For more details see &lt;a href=&quot;/doc/libs/1_40_0/libs/serialization/doc/release.html&quot;&gt;the
"            library release notes&lt;/a&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Implement &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;/code&gt; for
"            all compilers, not just ones with rvalue references and variadic templates
"            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1978&quot;&gt;#1978&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Create less buckets by default.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Some minor tweaks for better compiler support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2908&quot;&gt;#2908&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3096&quot;&gt;#3096&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3082&quot;&gt;#3082&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Works on Visual C++ 10.0 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3124&quot;&gt;#3124&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_40_0.build_system&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build System&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      The default naming of libraries in Unix-like environment now matches system
"      conventions, and does not include various decorations. Naming of libraries
"      on Cygwin was also fixed. Support for beta versions of Microsoft Visual Studio
"      10 was added. With gcc, 64-bit compilation no longer requires that target architecture
"      be specified.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_40_0.updated_tools&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Hide &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;INTERNAL&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;ONLY&lt;/span&gt;&lt;/code&gt;
"            enums in doxygen documentation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3242&quot;&gt;#3242&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Tweaked appearance of member classes/structs/unions in a class synopsis.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Support python code snippets (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3029&quot;&gt;#3029&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;teletype&lt;/span&gt;&lt;/code&gt; source mode
"            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1202&quot;&gt;#1202&lt;/a&gt;)
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_40_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        OS X:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on Intel Tiger and Leopard
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on PowerPC Tiger
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Linux:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.3.3 on Ubuntu Linux.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Windows:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        Linux:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Intel 9.0 on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 10.0 on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 10.1 on 64-bit Linux Redhat 5.1 Server.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 10.1 on Suse Linux on 64 bit Itanium.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 11.0 on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 11.1 on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 3.4.3, GCC 4.0.1, GCC 4.2.4, GCC 4.3.3 and GCC 4.4.0 on Red Hat Enterprise
"            Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.3 and GCC 4.4.0 with C++0x extensions on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.1.1, 4.2.1 on 64-bit Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.1.2 on Suse Linux on 64 bit Itanium.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.1.2 on 64-bit Redhat Server 5.1.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC Open64 4.2.2 on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.4 on Debian unstable.
"          &lt;/li&gt;
"          &lt;li&gt;
"            QLogic PathScale(TM) Compiler Suite: Version 3.1 on Red Hat Enterprise
"            Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC version 4.2.0 (PathScale 3.2 driver) on 64-bit Red Hat Enterprise
"            Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Sun 5.9 on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        OS X:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Intel 10.1, 11.0 on Intel Leopard.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 10.1, 11.0 on Intel Tiger.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.0.1, 4.2.1 on Intel Leopard.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on Intel Tiger.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on PowerPC Tiger.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Windows:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Visual C++ 7.1 on XP.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 9.0 on XP.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 9.0 on Vista.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 9.0 on Vista 64-bit.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 9.0, using STLport 5.2, on XP and Windows Mobile 5.0.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 10.0 beta.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Borland 5.9.3, 6.1.0, 6.1.3.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Borland C++ Builder 2007 and 2009.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 64-bit.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.3 and 4.4.0, on Mingw with C++0x features.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        AIX:
"        &lt;ul&gt;
"          &lt;li&gt;
"            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Solaris:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Sun C++ 5.7, 5.8, 5.9 on Solaris 5.10.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 3.4.6 on Solaris 5.10.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_40_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
"      James managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Thu, 27 Aug 2009 17:00:00 +0000
-quickbook
"feed/history/boost_1_40_0.qbk
)
(feed/history/boost_1_41_0.qbk
-item
"<item><title>Version 1.41.0</title><pubDate>Tue, 17 Nov 2009 17:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Library: Property Tree. Updated libraries: DateTime, Filesystem, Iostreams,
"      Math, Multi-index Containers, Proto, Python, Regex, Spirit, System, Thread,
"      Unordered, Utility, Wave, Xpressive. Updates to boost build and quickbook.
"      The CMake build system for Boost, still under development &lt;a href=&quot;http://sodium.resophonic.com/boost-cmake/current-docs/&quot;&gt;here&lt;/a&gt;,
"      has been removed from the main release to avoid confusion.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.41.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;div id=&quot;version_1_41_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_tree/index.html&quot;&gt;Property Tree&lt;/a&gt;:&lt;/span&gt; A
"        tree data structure especially suited to storing configuration data, from
"        Marcin Kalicinski and Sebastian Redl.
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_41_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/index.html&quot;&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            The default format for time durations is now &amp;quot;&lt;code&gt;&lt;span class=&quot;special&quot;&gt;%-%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;F&lt;/span&gt;&lt;/code&gt;&amp;quot; instead of &amp;quot;&lt;code&gt;&lt;span class=&quot;special&quot;&gt;%-%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;H&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;:%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;F&lt;/span&gt;&lt;/code&gt;&amp;quot;
"            that was used previously. In order to retain the old behavior, the format
"            string has to be specified explicitly during the time IO facet construction
"            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1861&quot;&gt;#1861&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Gregorian dates now use 32-bit integer type internally on 64-bit platforms
"            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3308&quot;&gt;#3308&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            See the &lt;a href=&quot;/doc/html/date_time/details.html#date_time.changes&quot;&gt;full
"            changelog&lt;/a&gt; for more detail.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/index.html&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Bug fixes: (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3385&quot;&gt;#3385&lt;/a&gt;).
"            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3528&quot;&gt;#3528&lt;/a&gt;).
"            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3509&quot;&gt;#3509&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
"  Some old
"        unreleased developments. There are still several open issues that should
"        be fixed in the next version.
"        &lt;ul&gt;
"          &lt;li&gt;
"            Add a grep filter (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1627&quot;&gt;#1627&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Support archives with multiple members (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1896&quot;&gt;#1896&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tee&lt;/span&gt;&lt;/code&gt; work with input
"            streams (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/791&quot;&gt;#791&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Improved filesystem interoperability.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Several warnings fixed or suppressed (including &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1618&quot;&gt;#1618&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1875&quot;&gt;#1875&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2779&quot;&gt;#2779&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Various other fixes (including &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1580&quot;&gt;#1580&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1671&quot;&gt;#1671&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
"  Substantially improved
"        the performance of the incomplete gamma function and it's inverse: this enhances
"        the performance of the gamma, poisson, chi-squared and non-central chi-squared
"        distributions.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"  Maintenance
"        fixes. Consult the library &lt;a href=&quot;/libs/multi_index/doc/release_notes.html#boost_1_41&quot;&gt;release
"        notes&lt;/a&gt; for further information.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Clean up some MSVC warnings and errors in /Za (disable Microsoft extensions)
"            mode.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixes for c++0x mode on various compilers.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/python/index.html&quot;&gt;Python&lt;/a&gt;:&lt;/span&gt;
"  Boost.Python now
"        supports Python 3 (Haoyu Bai's Google Summer of Code project, mentored by
"        Stefan Seefeld).
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
"  Added support for
"        many Perl 5.10 syntax elements including named sub-expressions, branch resets
"        and recursive regular expressions.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt; This is the initial
"        official release of the new Spirit V2.1, a completely new library for parsing,
"        lexing, and output generation. Note: this release is not backwards compatible
"        with earlier versions. Known issue: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;qi&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;symbol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;find&lt;/span&gt;&lt;/code&gt;
"        will match a symbol that starts with the string you're searching for. This
"        will be fixed in the next version.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/system/index.html&quot;&gt;System&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Bug fix: (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3559&quot;&gt;#3559&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Support for futures, promises and packaged tasks added
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread_specific_ptr&lt;/span&gt;&lt;/code&gt; is now faster when
"            there are lots of thread-specific objects
"          &lt;/li&gt;
"          &lt;li&gt;
"            Some Boost.Thread facilities are now header-only
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"  Major update:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Replaced a lot of the macro based implementation with a cleaner template
"            based implementation.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Reduced memory use.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Full details in &lt;a href=&quot;/doc/html/unordered/changes.html#unordered.changes.boost_1_41_1&quot;&gt;the
"            changelog&lt;/a&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"  A &amp;quot;const&amp;quot;
"        issue of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_initialized&lt;/span&gt;&lt;/code&gt;
"        is fixed: Its &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"        member function and its conversion operator are replaced by overloads for
"        const and non-const access (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2548&quot;&gt;#2548&lt;/a&gt;).
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"  See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;changelog&lt;/a&gt;
"        for details.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Fix infinite loop with some uses of &lt;tt&gt;\Q...\E&lt;/tt&gt; quotemeta
"            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3586&quot;&gt;#3586&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Eliminate unreachable code warnings on MSVC
"          &lt;/li&gt;
"          &lt;li&gt;
"            Clean up some MSVC warnings and errors in /Za (&amp;quot;disable Microsoft
"            extensions&amp;quot;) mode.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixes for c++0x mode on various compilers.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_41_0.build_system&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build System&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      A bug preventing &amp;quot;fat&amp;quot; 32-bit + 64-bit builds on OSX has been fixed.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_41_0.boost_cmake_moved&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Boost.CMake moved&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      The cmake version of boost has moved; the Boost.CMmake release will be separate
"      and will lag the main release slightly, but will also be capable of producing
"      patch releases as necessary.
"    &lt;/p&gt;
"    &lt;p&gt;
"      More information on the &lt;a href=&quot;https:://svn.boost.org/trac/boost/wiki/CMake&quot;&gt;Boost
"      CMake wiki page&lt;/a&gt;.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_41_0.updated_tools&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook 1.5&lt;/a&gt;:&lt;/span&gt;
"  These
"        changes require your document to use the &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;quickbook&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt; tag:
"        &lt;ul&gt;
"          &lt;li&gt;
"            More intuitive syntax and variable lookup for template calls (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1174&quot;&gt;#1174&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2034&quot;&gt;#2034&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2036&quot;&gt;#2036&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Image attributes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1157&quot;&gt;#1157&lt;/a&gt;)
"          &lt;/li&gt;
"          &lt;li&gt;
"            Table Ids (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1194&quot;&gt;#1194&lt;/a&gt;)
"          &lt;/li&gt;
"          &lt;li&gt;
"            Better handling of whitespace in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;section&lt;/span&gt;&lt;/code&gt;
"            syntax. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2712&quot;&gt;#2712&lt;/a&gt;)
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_41_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        OS X:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on Intel Tiger and Leopard.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on PowerPC Tiger.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Linux:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.4.1 on Ubuntu Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.4 on Debian
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Windows:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        Linux:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Intel 10.1 on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 10.1 on 64-bit Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 10.1 on Suse Linux on 64 bit Itanium.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 11.0 on 32 bit Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 11.0 on 64 bit Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 11.1 on 64 bit Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 11.1 on 64 bit Linux Redhat 5.1 Server.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 3.4.3, GCC 4.2.4, GCC 4.3.3 and GCC 4.4.1 on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.3 and GCC 4.4.1 with C++0x extensions on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.3 on 64-bit Redhat Server 5.1.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.3 on 64 bit Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.4 on Debian unstable.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.2 on 64 bit Gentoo.
"          &lt;/li&gt;
"          &lt;li&gt;
"            QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
"            Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Sun 5.9 on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        OS X:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Intel C++ Compiler 11.1 on Leopard.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel C++ Compiler 10.1, 11.0.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on Intel Tiger.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on PowerPC Tiger.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Windows:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Visual C++ 7.1, 8,0, 9,0 on XP.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 9.0 on 32-bit Vista.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 9.0 on AMD 64-bit Vista.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 10.0 beta 1 with &lt;a href=&quot;http://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=457199&quot;&gt;a
"            patch for the program options lib&lt;/a&gt;.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.0 (2010).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.4.1 on Mingw, with and without C++0x extensions.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        AIX:
"        &lt;ul&gt;
"          &lt;li&gt;
"            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        FreeBSD:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.2.1 on FreeBSD 7.0.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Solaris:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Sun C++ 5.10 on Solaris 5.10.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_41_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, and Daniel
"      James managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Tue, 17 Nov 2009 17:00:00 +0000
-quickbook
"feed/history/boost_1_41_0.qbk
)
(feed/history/boost_1_42_0.qbk
-item
"<item><title>Version 1.42.0</title><pubDate>Tue 2 Feb 2010 14:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Uuid. Updated Libraries: Asio, Circular Buffer, Fusion, Graph,
"      Integer, Iostreams, Program.Options, PropertyMap, Proto, Regex, Spirit, Unordered,
"      Xpressive.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.42.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;div id=&quot;version_1_42_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/uuid/index.html&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
"  A universally unique
"        identifier, from Andy Tompkins.
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_42_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added a new HTTP Server 4 example illustrating the use of stackless coroutines
"            with Asio.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Changed handler allocation and invocation to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;/code&gt;
"            to get the address of handler objects, rather than applying &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;
"            directly (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2977&quot;&gt;#2977&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Restricted MSVC buffer debugging workaround to 2008, as it causes a crash
"            with 2010 beta 2 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3796&quot;&gt;#3796&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3822&quot;&gt;#3822&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed a problem with the lifetime of handler memory, where Windows needs
"            the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;OVERLAPPED&lt;/span&gt;&lt;/code&gt; structure
"            to be valid until both the initiating function call has returned and
"            the completion packet has been delivered.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Don't block signals while performing system calls, but instead restart
"            the calls if they are interrupted.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Documented the guarantee made by strand objects with respect to order
"            of handler invocation.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Changed strands to use a pool of implementations, to make copying of
"            strands cheaper.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Ensured that kqueue support is enabled for BSD platforms (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3626&quot;&gt;#3626&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost_&lt;/span&gt;&lt;/code&gt; prefix
"            to the &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;/code&gt;
"            thread entry point function (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3809&quot;&gt;#3809&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            In &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;getaddrinfo&lt;/span&gt;&lt;/code&gt; emulation,
"            only check the socket type (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SOCK_STREAM&lt;/span&gt;&lt;/code&gt;
"            or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SOCK_DGRAM&lt;/span&gt;&lt;/code&gt;) if a service
"            name has been specified. This should allow the emulation to work with
"            raw sockets.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added a workaround for some broken Windows firewalls that make a socket
"            appear bound to 0.0.0.0 when it is in fact bound to 127.0.0.1.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Applied a fix for reported excessive CPU usage under Solaris (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3670&quot;&gt;#3670&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added some support for platforms that use older compilers such as g++
"            2.95 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3743&quot;&gt;#3743&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/circular_buffer/index.html&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added methods erase_begin(size_type) and erase_end(size_type) with constant
"            complexity for such types of stored elements which do not need an explicit
"            destruction e.g. int or double.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Similarly changed implementation of the clear() method and the destructor
"            so their complexity is now constant for such types of stored elements
"            which do not require an explicit destruction (the complexity for other
"            types remains linear).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            The accumulator is the first argument to the functor of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fold&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;accumulate&lt;/span&gt;&lt;/code&gt;
"            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2355&quot;&gt;#2355&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added support for associative iterators and views (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3473&quot;&gt;#3473&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Removed old interface to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compressed_sparse_row_graph&lt;/span&gt;&lt;/code&gt;,
"            making new interface the default.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;Integer&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Reverted Trunk to release branch state (i.e. a &amp;quot;known good state&amp;quot;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/653&quot;&gt;653&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3084&quot;&gt;3084&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3177&quot;&gt;3177&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3180&quot;&gt;3180&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3548&quot;&gt;3568&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3657&quot;&gt;3657&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2134&quot;&gt;2134&lt;/a&gt;.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added long long support to &lt;tt&gt;boost::static_log2&lt;/tt&gt;, &lt;tt&gt;boost::static_signed_min&lt;/tt&gt;,
"            &lt;tt&gt;boost::static_signed_max&lt;/tt&gt;, &lt;tt&gt;boost::static_unsigned_min&lt;/tt&gt;&lt;tt&gt;boost::static_unsigned_max&lt;/tt&gt;,
"            when available.
"          &lt;/li&gt;
"          &lt;li&gt;
"            The argument type and the result type of &lt;tt&gt;boost::static_signed_min&lt;/tt&gt;
"            etc are now typedef'd. Formerly, they were hardcoded as &lt;tt&gt;unsigned
"            long&lt;/tt&gt; and &lt;tt&gt;int&lt;/tt&gt; respectively. Please, use the
"            provided typedefs in new code (and update old code as soon as possible).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Fixed many outstanding issues. Thanks to Richard Smith for his work on
"            this. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3612&quot;&gt;#3612&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3311&quot;&gt;#3311&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2094&quot;&gt;#2094&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3010&quot;&gt;#3010&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2894&quot;&gt;#2894&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3011&quot;&gt;#3011&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3352&quot;&gt;#3352&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3505&quot;&gt;#3505&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            For more information see the &lt;a href=&quot;/libs/iostreams/doc/release_notes.html&quot;&gt;library
"            release notes&lt;/a&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/program_options/index.html&quot;&gt;Program.Options&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Information about option name added to a few exception classes and various
"            clean ups in exception classes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3423&quot;&gt;#3423&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Description wordwrapping in presense of default parameters fixed (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2613&quot;&gt;#2613&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Empty value in configuration file is now permitted (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1537&quot;&gt;#1537&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Quotes are no longer stripped from string values (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/850&quot;&gt;#850&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fix endless loop in case of long default arguments (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/689&quot;&gt;#689&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fix compile warning caused by usage of boost::any (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2562&quot;&gt;#2562&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fix memory bug in example/response_file.cpp (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3525&quot;&gt;#3525&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Most compilation warnings were fixed (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3608&quot;&gt;#3608&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Make column width for description text configurable. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3703&quot;&gt;#3703&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Add general split function: split_unix() (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2561&quot;&gt;#2561&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Enable open config files from given file name (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3264&quot;&gt;#3264&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Additional flag for required options (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2982&quot;&gt;#2982&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Enable case insensitive style for command line (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3498&quot;&gt;#3498&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_map/index.html&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Removed old header files (directly in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt; directory); they were deprecated since
"            1.40, replaced by headers in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;property_map&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;/code&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Fix const correctness issues with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flatten&lt;/span&gt;&lt;/code&gt;
"            and friends (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3364&quot;&gt;#3364&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Accomodate recent change to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fold&lt;/span&gt;&lt;/code&gt;,
"            remove old support for Doxygen and pre-1.35 Fusion (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3553&quot;&gt;#3553&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            In binary operations, when one operand has a user-specified domain and
"            the other has the default domain, the user-specified domain trumps.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_EXTENDS&lt;/span&gt;&lt;/code&gt;
"            to work with elaborated types.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Work around EDG compiler bug with function types and cv-qualification.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added support for Functors rather than strings as format expressions.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Improved error reporting when throwing exceptions to include better more
"            relevant information.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Improved performance and reduced stack usage of recursive expressions.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed tickets &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2802&quot;&gt;#2802&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3425&quot;&gt;#3425&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3507&quot;&gt;#3507&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3546&quot;&gt;#3546&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3631&quot;&gt;#3631&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3632&quot;&gt;#3632&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3715&quot;&gt;#3715&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3718&quot;&gt;#3718&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3763&quot;&gt;#3763&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3764&quot;&gt;#3764&lt;/a&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
"  Spirit V2.2, see
"        the '&lt;a href=&quot;/doc/libs/1_42_0/libs/spirit/doc/html/spirit/what_s_new.html&quot;&gt;What's
"        New&lt;/a&gt;' section for details.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Support instantiating the containers with incomplete value types.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase_return_void&lt;/span&gt;&lt;/code&gt;
"            as a temporary workaround for the current &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;/code&gt;
"            which can be inefficient because it has to find the next element to return
"            an iterator (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3693&quot;&gt;#3693&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Add templated find overload for compatible keys.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Improved codegear compatibility.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Other minor changes, full details in &lt;a href=&quot;/doc/html/unordered/changes.html#unordered.changes.boost_1_42_0&quot;&gt;the
"            changelog&lt;/a&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;match_results&lt;/span&gt;&lt;/code&gt; no longer
"            relies on undefined behavior in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;list&lt;/span&gt;&lt;/code&gt;
"            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3278&quot;&gt;#3278&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Do NOT copy singular iterators (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3538&quot;&gt;#3538&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Eliminate gcc and darwin warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3734&quot;&gt;#3734&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_42_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        OS X:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on Intel Leopard.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on PowerPC Tiger.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Linux:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.4.1 on Ubuntu Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.4 on Debian.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Windows:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Visual C++ 7.1 SP1, 8.0 SP1 and 9.0 SP1 on Windows XP.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 9.0 on Windows 2008, 64 bit.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.3, using Mingw
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        FreeBSD:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.2.1, 32 and 64 bit.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        Linux:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Intel 10.1 on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 10.1 on 64 bit Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 11.0 on 32 bit Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 11.0 on 64 bit Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 11.1 on 64 bit Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 11.1 on 64 bit Linux Redhat 5.1 Server.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 11.1 on Suse Linux 64 bit.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 3.4.6, GCC 4.2.4, GCC 4.3.4 and GCC 4.4.2 on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.4 and GCC 4.4.2 with C++0x extensions on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.4.1 on 64 bit Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.4.3 on Debian unstable.
"          &lt;/li&gt;
"          &lt;li&gt;
"            QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
"            Linux.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        OS X:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Intel C++ Compiler 10.1, 11.0, 11.1 on Leopard.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on Intel Leopard.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on PowerPC Tiger.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Windows:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Visual C++ 7.1, 8,0, 9,0 on XP.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 10.0 beta 2.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 10.0 on 32-bit Vista.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.1 (2010).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.4.1 on Mingw, with and without C++0x extensions.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        AIX:
"        &lt;ul&gt;
"          &lt;li&gt;
"            IBM XL C/C++ Enterprise Edition for AIX, V10.1.0.0, on AIX Version 5.3.0.40.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        FreeBSD:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.2.1 on FreeBSD 7.0, 32 bit and 64 bit.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Solaris:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Sun C++ 5.10 on Solaris 5.10.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_42_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
"      and Vladimir Prus managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Tue, 02 Feb 2010 14:00:00 +0000
-quickbook
"feed/history/boost_1_42_0.qbk
)
(feed/history/boost_1_43_0.qbk
-item
"<item><title>Version 1.43.0</title><pubDate>Thu 6 May 2010 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Functional/Factory, Functional/Forward. Major Update: Range.
"      Updated Libraries: Accumulators, Array, Asio, Fusion, Iostreams, Multi-index
"      Containers, Proto, Random, Spirit, Thread, Unordered, Uuid, Wave, Xpressive.
"      Also, updates to the build system and quickbook.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.43.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;div id=&quot;version_1_43_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/factory/index.html&quot;&gt;Functional/factory&lt;/a&gt;:&lt;/span&gt;
"  Function
"        objects for dynamic and by-value construction, from Tobias Schwinger.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/forward/index.html&quot;&gt;Functional/forward&lt;/a&gt;:&lt;/span&gt;
"  Function
"        object adapters to address the forwarding problem, from Tobias Schwinger.
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_43_0.major_updates&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Major Updates&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/range/index.html&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
"  Boost.Range has
"        undergone extensive updates that it include all of the features from the
"        recently reviewed Boost.RangeEx, from Neil Groves.
"        &lt;ul&gt;
"          &lt;li&gt;
"            Range-based version of the full STL iterator based algorithms.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Range adaptors which can be combined with range-based algorithms for
"            unprecedented expressiveness and efficiency.
"          &lt;/li&gt;
"          &lt;li&gt;
"            New functions: irange, istream_range, join, combine.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_43_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Avoid premature template evaluation in operator overload return types.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added support for SunCC compiler.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added 'fill' member function.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Changed exception code to use boost::throw_exception.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Improved performance.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Reduced compile times.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Reduced the size of generated code.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Extended the guarantee that background threads don't call user code to
"            all asynchronous operations (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3923&quot;&gt;#3923&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Changed to use edge-triggered epoll on Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Changed to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;timerfd&lt;/span&gt;&lt;/code&gt;
"            for dispatching timers on Linux, when available.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Changed to use one-shot notifications with kqueue on Mac OS X and BSD
"            platforms.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added a bitmask type &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_query_base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flags&lt;/span&gt;&lt;/code&gt;
"            as per the TR2 proposal. This type prevents implicit conversion from
"            &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;flags&lt;/span&gt;&lt;/code&gt;,
"            allowing the compiler to catch cases where users incorrectly pass a numeric
"            port number as the service name.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#define&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;NOMINMAX&lt;/span&gt;&lt;/code&gt;
"            for all Windows compilers. Users can define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_NO_NOMINMAX&lt;/span&gt;&lt;/code&gt;
"            to suppress this definition (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3901&quot;&gt;#3901&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed a bug where 0-byte asynchronous reads were incorrectly passing
"            an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;eof&lt;/span&gt;&lt;/code&gt; result to the completion handler
"            (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4023&quot;&gt;#4023&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Changed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_control&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; member functions to always call &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ioctl&lt;/span&gt;&lt;/code&gt; on the underlying descriptor
"            when modifying blocking mode (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3307&quot;&gt;#3307&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Changed the resolver implementation to longer require the typedefs &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;InternetProtocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_query&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;InternetProtocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_iterator&lt;/span&gt;&lt;/code&gt;,
"            as neither typedef is part of the documented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;InternetProtocol&lt;/span&gt;&lt;/code&gt;
"            requirements. The corresponding typedefs in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;/code&gt;,
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;udp&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;icmp&lt;/span&gt;&lt;/code&gt;
"            classes have been deprecated.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed out-of-band handling for reactors not based on &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DISABLE_THREADS&lt;/span&gt;&lt;/code&gt;
"            macro that allows Asio's threading support to be independently disabled.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Minor documentation improvements.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Added new macros for adapting or defining custom types. See the &lt;a href=&quot;/libs/fusion/doc/html/fusion/change_log.html&quot;&gt;Changelog&lt;/a&gt;
"            for details.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Minor fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2505&quot;&gt;#2505&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3839&quot;&gt;#3839&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3953&quot;&gt;#3953&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3723&quot;&gt;#3723&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3969&quot;&gt;#3969&lt;/a&gt;,
"            &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4135&quot;&gt;#4135&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;a href=&quot;/libs/serialization/doc/serialization.html#constructors&quot;&gt;Serialization
"            of non default constructible values&lt;/a&gt; is now properly supported
"            through user-provided facilities &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;save_construct_data&lt;/span&gt;&lt;/code&gt;
"            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;load_construct_data&lt;/span&gt;&lt;/code&gt;.
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;
"            serialization &lt;a href=&quot;/libs/serialization/doc/tutorial.html#versioning&quot;&gt;class
"            version&lt;/a&gt; has been bumped from 1 to 2.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Minor change in behavior: non-const expression self-assignment creates
"            an assign node. See Proto's &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_43&quot;&gt;Release
"            Notes&lt;/a&gt; for details.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Minor change to recommended expression extension mechanism: use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_EXTENDS_USING_ASSIGN&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
"            See Proto's &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_43&quot;&gt;Release
"            Notes&lt;/a&gt; for details.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fix error in invocation of callable monomorphic function objects in Proto
"            transforms.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fix misc const correctness issues, work around fusion bug.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Add non-const function call overloads to proto terminals.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Add a default constructor to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;literal&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Do not use deprecated config macros.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;assert_matches&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"            function and friends to &lt;tt&gt;&amp;lt;boost/proto/debug.hpp&amp;gt;&lt;/tt&gt;.
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;make_expr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unpack_expr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"            return const-qualified rvalues.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Add documentation for Expr and Domain concepts.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Put the implementation of random_device in a compiled lib, and added
"            Windows support.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Rewrote the documentation using Quickbook/Doxygen/Boostbook and brought
"            it up to date.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
"  Spirit V2.3, see
"        the '&lt;a href=&quot;/doc/libs/1_43_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_3.html&quot;&gt;What's
"        New&lt;/a&gt;' section for details.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Uses &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;throw_exception&lt;/span&gt;&lt;/code&gt; for all exceptions
"            except &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread_interrupted&lt;/span&gt;&lt;/code&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            Added fix for issue 2742
"          &lt;/li&gt;
"          &lt;li&gt;
"            Optimizations to mutex locks and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;call_once&lt;/span&gt;&lt;/code&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase_return_void&lt;/span&gt;&lt;/code&gt; is
"            now &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;quick_erase&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3966&quot;&gt;#3966&lt;/a&gt;).
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/uuid/index.html&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Split generators into separate files.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Fixed bug in basic_random_generator (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3971&quot;&gt;#3971&lt;/a&gt;).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Updated documentation.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"  See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;
"        for details.
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Add missing include to &lt;tt&gt;&amp;lt;boost/xpressive/regex_error.hpp&amp;gt;&lt;/tt&gt;.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_43_0.build_system&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build System&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        When cross-compiling to GNU targets, static libraries are properly created.
"        Previously, using such libraries resulted in &lt;tt&gt;Archive has no index&lt;/tt&gt;
"        error.
"      &lt;/li&gt;
"      &lt;li&gt;
"        The naming of DLL and import libraries with gcc compiler on Windows, both
"        mingw and cygwin, now matches default conventions of those environments.
"        Previously, the naming scheme was the same as for other Windows compilers.
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_43_0.updated_tools&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            Unicode escape characters.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Support the UTF-8 byte order mark.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Disallow &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;/code&gt; in simple markup.
"            Fixes some errors with mismatched punctuation.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Add a command line flag (&lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;D&lt;/span&gt;&lt;/code&gt;) to define macros at the command
"            line.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Improved post-processor output.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Check that &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;section&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;endsect&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;
"            tags are balanced in templates.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_43_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        OS X:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on Intel Leopard.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Linux:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.4.1 on Ubuntu Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.4 on 64-bit Suse.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Windows:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Visual C++ 8.0 SP1 and 9.0 SP1 on Windows XP.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.3, using Mingw
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        FreeBSD:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.2.1, 32 and 64 bit.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        Linux:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Intel 10.1, 11.1 on 32 bit Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel 10.1, 11.0, 11.1 on 64 bit Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 3.4.6, 4.2.4, 4.3.4, 4.4.3 on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.4, 4.4.3 with C++0x extensions on Red Hat Enterprise Linux.
"          &lt;/li&gt;
"          &lt;li&gt;
"            QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
"            Linux.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        OS X:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Intel C++ Compiler 10.1, 11.0, 11.1 on Leopard.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.0.1 on Intel Leopard.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Clang from subversion.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Windows:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Visual C++ 8,0, 9,0 on 32-bit XP.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 10.0 on XP.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Visual C++ 10.0 on 64-bit Windows 7.
"          &lt;/li&gt;
"          &lt;li&gt;
"            Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.1 (2010).
"          &lt;/li&gt;
"          &lt;li&gt;
"            Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.3.3 on Mingw.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.4.3 on Mingw, with and without C++0x extensions.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.5 on Mingw.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        AIX:
"        &lt;ul&gt;
"          &lt;li&gt;
"            IBM XL C/C++ Enterprise Edition, V10.1.0.0, on AIX Version 5.3.0.40.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        FreeBSD:
"        &lt;ul&gt;
"          &lt;li&gt;
"            GCC 4.2.1 on FreeBSD 7.2, 64 bit.
"          &lt;/li&gt;
"          &lt;li&gt;
"            GCC 4.2.1 on FreeBSD 8.0, 32 bit.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        Solaris:
"        &lt;ul&gt;
"          &lt;li&gt;
"            Sun C++ 5.10 on Solaris 5.10.
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_43_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
"      and Vladimir Prus managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Thu, 06 May 2010 12:00:00 +0000
-quickbook
"feed/history/boost_1_43_0.qbk
)
(feed/history/boost_1_44_0.qbk
-item
"<item><title>Version 1.44.0</title><pubDate>Fri, 13 Aug 2010 13:00:00 EDT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Meta State Machine, Polygon. Updated Libraries: Accumulators,
"      Asio, Config, Filesystem, Foreach, Fusion, Hash, Iostreams, Math, MPL, Multi-index
"      Containers, Proto, Regex, Spirit, Thread, TR1, Type Traits, uBLAS, Utility,
"      Uuid, Wave, Xpressive. Updates for Quickbook and Boostbook.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.44.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;div id=&quot;version_1_44_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/msm/index.html&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
"  High-performance
"          expressive UML2 finite state machines, from Christophe Henry
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/polygon/index.html&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
"  Booleans/clipping,
"          resizing/offsetting and more for planar polygons with integral coordinates,
"          from Lucanus Simonson.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_44_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct miscellaneous documentation inaccuracies
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reduced compile times. (Note that some programs may need to add additional
"                &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;&lt;/code&gt;s, e.g.
"                if the program uses &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;/code&gt;
"                but does not explicitly include &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reduced the size of generated code.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Refactored &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;deadline_timer&lt;/span&gt;&lt;/code&gt;
"                implementation to improve performance.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved multiprocessor scalability on Windows by using a dedicated
"                hidden thread to wait for timers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved performance of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;streambuf&lt;/span&gt;&lt;/code&gt;
"                with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_read&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_until&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;. These read operations now use
"                the existing capacity of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;streambuf&lt;/span&gt;&lt;/code&gt;
"                when reading, rather than limiting the read to 512 bytes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added optional separate compilation. To enable, add &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                to one source file in a program, then build the program with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_SEPARATE_COMPILATION&lt;/span&gt;&lt;/code&gt;
"                defined in the project/compiler settings. Alternatively, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DYN_LINK&lt;/span&gt;&lt;/code&gt; may be defined
"                to build a separately-compiled Asio as part of a shared library.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_DISABLE_FENCED_BLOCK&lt;/span&gt;&lt;/code&gt;
"                to permit the disabling of memory fences around completion handlers,
"                even if thread support is enabled.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reworked timeout examples to better illustrate typical use cases.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured that handler arguments are passed as &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;/code&gt;
"                types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed incorrect parameter order in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
"                variant of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_send_to&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4170&quot;&gt;#4170&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;&lt;/code&gt;
"                is used with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;isdigit&lt;/span&gt;&lt;/code&gt;
"                in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;getaddrinfo&lt;/span&gt;&lt;/code&gt; emulation
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4201&quot;&gt;#4201&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed handling of very small but non-zero timeouts (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4205&quot;&gt;#4205&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed crash that occurred when an empty buffer sequence was passed
"                to a composed read or write operation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added missing &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;+&lt;/span&gt;&lt;/code&gt; overload in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;buffers_iterator&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4382&quot;&gt;#4382&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented cancellation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
"                operations on Windows.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new defect macro, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_COMPLETE_VALUE_INITIALIZATION&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new defect macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_0X_HDR_TYPEINDEX&lt;/span&gt;&lt;/code&gt;,
"                fixes issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4274&quot;&gt;#4274&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for code visibility in GCC.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4385&quot;&gt;#4385&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4324&quot;&gt;#4324&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4221&quot;&gt;#4221&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4182&quot;&gt;#4182&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4178&quot;&gt;#4178&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4152&quot;&gt;#4152&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4182&quot;&gt;#4115&lt;/a&gt;.
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4112&quot;&gt;#4112&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4059&quot;&gt;#4059&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4041&quot;&gt;#4041&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4012&quot;&gt;#4012&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/index.html&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This release contains both version 2 and version 3 of the library.
"                Version 3 is a major upgrade that will break some existing user code,
"                so version 2 is the default. Users are encouraged to migrate to version
"                3. See '&lt;a href=&quot;/libs/filesystem/v2/doc/index.htm&quot;&gt;Version 2&lt;/a&gt;'
"                and '&lt;a href=&quot;/libs/filesystem/v3/doc/index.htm&quot;&gt;Version 3&lt;/a&gt;'
"                for more information.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix problems with symbol visibility for shared libraries.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix various minor problems.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3863&quot;&gt;#3863&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4248&quot;&gt;#4248&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;foreach_fwd&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; for forward declarations of
"                foreach's customization points, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3998&quot;&gt;#3998&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove out-of-date work-arounds for sun compilers, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4306&quot;&gt;#4306&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;reverse_fold&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iter_fold&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;reverse_iter_fold&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1623&quot;&gt;#1623&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Option to prevent implicit casts when calling the hash function by
"                defining the macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HASH_NO_IMPLICIT_CASTS&lt;/span&gt;&lt;/code&gt;,
"                which can avoid some subtle problems. This might be activated by
"                default in a future version.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Several fixes for file descriptors class, including a breaking change
"                to the constructors and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;open&lt;/span&gt;&lt;/code&gt;
"                methods for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;file_descriptor&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;file_descriptor_source&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;file_descriptor_sink&lt;/span&gt;&lt;/code&gt;.
"                See &lt;a href=&quot;/libs/iostreams/doc/classes/file_descriptor.html&quot;&gt;the
"                documentation&lt;/a&gt; for details. The old methods are still available
"                if you define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_IOSTREAMS_USE_DEPRECATED&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3323&quot;&gt;#3323&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3517&quot;&gt;#3517&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4335&quot;&gt;#4335&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix several issues with compression and decompression (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2318&quot;&gt;#2318&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4091&quot;&gt;#4091&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3348&quot;&gt;#3348&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2783&quot;&gt;#2783&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1579&quot;&gt;#1579&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3853&quot;&gt;#3853&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                And a load more miscellaneous fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3851&quot;&gt;#3851&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3279&quot;&gt;#3279&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3689&quot;&gt;#3689&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2356&quot;&gt;#2356&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2996&quot;&gt;#2996&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4102&quot;&gt;#4102&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2998&quot;&gt;#2998&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1612&quot;&gt;#1612&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2325&quot;&gt;#2325&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Thanks to Steven Watanabe for almost all these fixes. For more detail
"                see the &lt;a href=&quot;/libs/iostreams/doc/release_notes.html&quot;&gt;release
"                notes&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed incorrect range and support for Rayleigh distribution.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/mpl/index.html&quot;&gt;MPL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;string&lt;/span&gt;&lt;/code&gt; work with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;transform&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/doc/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a bug preventing the use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;modify_key&lt;/span&gt;&lt;/code&gt;
"                with rollback in &lt;a href=&quot;/libs/multi_index/doc/reference/ord_indices.html#modify_key&quot;&gt;ordered&lt;/a&gt;
"                and &lt;a href=&quot;/libs/multi_index/doc/reference/hash_indices.html#modify_key&quot;&gt;hashed&lt;/a&gt;
"                indices when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Modifier&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Rollback&lt;/span&gt;&lt;/code&gt; are
"                different types (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4130&quot;&gt;#4130&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Minor change in behavior:&lt;/em&gt; when using
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;and_&lt;/span&gt;&lt;/code&gt; as a transform, apply &lt;em&gt;all&lt;/em&gt;
"                transforms but only return the result of applying the last. See Proto's
"                &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_44&quot;&gt;Release
"                Notes&lt;/a&gt; for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Minor change in behavior:&lt;/em&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;as_expr&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;as_child&lt;/span&gt;&lt;/code&gt;
"                no longer run objects that are already proto expressions through
"                the expression domain's generator. See Proto's &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_44&quot;&gt;Release
"                Notes&lt;/a&gt; for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Minor change in behavior:&lt;/em&gt; Proto
"                uses &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;basic_expr&lt;/span&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;expr&lt;/span&gt;&lt;/code&gt; when possible for better compile
"                times. See Proto's &lt;a href=&quot;/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_44&quot;&gt;Release
"                Notes&lt;/a&gt; for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for sub-domains.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Introduce per-domain &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;as_expr&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;as_child&lt;/span&gt;&lt;/code&gt; customization
"                points to allow for domain-specific customization of variable capture
"                behavior.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_default&lt;/span&gt;&lt;/code&gt; transform is also a grammar
"                that matches the expressions the transform knows how to handle.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_void&lt;/span&gt;&lt;/code&gt;, a no-op primitive transform
"                that does nothing and returns &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pass_through&lt;/span&gt;&lt;/code&gt; transform doesn't
"                strip expression wrappers, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4175&quot;&gt;#4175&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Const-correctness fixes when invoking proto domains.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4309&quot;&gt;#4309&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4215&quot;&gt;#4215&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4212&quot;&gt;#4212&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4191&quot;&gt;#4191&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4132&quot;&gt;#4132&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4123&quot;&gt;#4123&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4114&quot;&gt;#4114&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4036&quot;&gt;#4036&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4020&quot;&gt;#4020&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3941&quot;&gt;#3941&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3902&quot;&gt;#3902&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3890&quot;&gt;#3890&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
"  Spirit V2.4,
"          see the '&lt;a href=&quot;/doc/libs/1_44_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_4.html&quot;&gt;What's
"          New&lt;/a&gt;' section for details.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/system/index.html&quot;&gt;System&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Change system_category and generic_category to functions, to conform
"                to the C++0x FCD. This change may cause compile errors some user
"                code; the fix is add &amp;quot;()&amp;quot; to references to system_category
"                and generic_category, so that they become function calls.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix problems with symbol visibility for shared libraries.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4254&quot;&gt;#4254&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3994&quot;&gt;#3994&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3474&quot;&gt;#3474&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixes for miscellaneous trac issues (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2501&quot;&gt;#2501&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4341&quot;&gt;#4341&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4363&quot;&gt;#4363&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3760&quot;&gt;#3760&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3761&quot;&gt;#3761&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3611&quot;&gt;#3611&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2955&quot;&gt;#2955&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4071&quot;&gt;#4071&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3195&quot;&gt;#3195&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3097&quot;&gt;#3097&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2874&quot;&gt;#2874&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4316&quot;&gt;#4316&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4317&quot;&gt;#4317&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4322&quot;&gt;#4322&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3244&quot;&gt;#3244&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2747&quot;&gt;#2747&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4305&quot;&gt;#4305&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3195&quot;&gt;#3195&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2704&quot;&gt;#2704&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2293&quot;&gt;#2293&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/868&quot;&gt;#868&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2918&quot;&gt;#2918&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4238&quot;&gt;#4238&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3269&quot;&gt;#3269&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3178&quot;&gt;#3178&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3195&quot;&gt;#3195&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixes for other miscellaneous issues (remove warnings, support newer
"                compilers, etc.)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tr1/index.html&quot;&gt;TR1&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed VC10 support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tr1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; always uses the TR1 ResultOf
"                protocol, even on compilers that support the C++0x &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;-based implementation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for rvalue references throughout the library, plus
"                two new traits classes is_rvalue_reference and is_lvalue_reference.
"                Fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4407&quot;&gt;#4407&lt;/a&gt;
"                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3804&quot;&gt;#3804&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3621&quot;&gt;#3621&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/numeric/ublas/index.html&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New assignment operators to feed in vectors and matrices in many
"                nice ways (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4034&quot;&gt;#4034&lt;/a&gt;).
"                Thank you Nasos
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New doxygen-based &lt;a href=&quot;/libs/numeric/ublas/doc/html/index.html&quot;&gt;documentation&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enable arithmetic operators (+,-,*,/) to work between ublas containers
"                of std::complex and integral types (&lt;a href=&quot;http://svn/boost/org/trac/boost/ticket/3649&quot;&gt;#3649&lt;/a&gt;).
"                Thank you Neal
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed unused variables in functional.hpp (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4377&quot;&gt;#4377&lt;/a&gt;).
"                Thank you Marco
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New matrix_indirect and vector_indirect views to access elements
"                with a matrix or vector of indices
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a new template class, &lt;a href=&quot;/libs/utility/value_init.htm#initialized&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;initialized&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                in order to fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3472&quot;&gt;#3472&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New version of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_initialized&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; no longer calls &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;memset&lt;/span&gt;&lt;/code&gt; when the compiler has implemented
"                value-initialization completely (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3869&quot;&gt;#3869&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New template &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tr1_result_of&lt;/span&gt;&lt;/code&gt;
"                that implements the TR1 ResultOf protocol even if &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt;
"                uses the C++0x &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;-based
"                implementation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/uuid/index.html&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_UUID_NO_TYPE_TRAITS&lt;/span&gt;&lt;/code&gt;
"                to remove the dependency on Boost.TypeTraits.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Stream &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/code&gt;
"                handles left, internal, and right manipulators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;to_string&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;to_wstring&lt;/span&gt;&lt;/code&gt; to convert
"                a uuid to a string.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed minor bugs in documentation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"  See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;
"          for details.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Replace non-portable &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;using&lt;/span&gt;&lt;/code&gt;
"                declarations with &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt;&lt;/code&gt;s
"                in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;nested_results&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support user-defined assertions with placeholders for non-local variables.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_44_0.updated_tools&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Significantly faster.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved syntax highlighter.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use the cygwin 1.7 API for better path handling.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved boostbook generation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Tweak the grammar to clean up some edge cases.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                For more detail see the &lt;a href=&quot;/doc/libs/1_44_0/doc/html/quickbook/change_log.html#quickbook.change_log.version_1_5_2___boost_1_44_0&quot;&gt;change
"                log&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_44_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.0.1 on Intel Leopard.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.4 on 64-bit Suse.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 7.1 SP1, 8.0 SP1, 9.0 SP1 and 10.0.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.3.3, using Mingw.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.2.1, 32 and 64 bit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel 10.1 on 32 bit Red Hat Enterprise Linux.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel 10.1, 11.0, 11.1 on 64 bit Red Hat Enterprise Linux.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.5 on Red Hat Enterprise Linux.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, with C++0x extensions, 4.3.4, 4.4.3, 4.5 on Red Hat Enterprise
"                Linux.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.4 on 64 bit Suse.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QLogic PathScale(TM) Compiler Suite: Version 3.2 on Red Hat Enterprise
"                Linux.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang from subversion (will be released with LLVM 2.8).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel C++ Compiler 10.1, 11.0, 11.1 on Leopard.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.0.1, 4.2.1 (Apple build).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, with C++0x extensions, 4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang from subversion (will be released with LLVM 2.8).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 7.1 SP, 8.0, 9.0 on 32-bit XP.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 9.0 using STLport 5.2 on XP and Windows Mobile 5.0.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 10.0 on XP.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 10.0 on 64-bit Windows 7.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Borland/Codegear C++ 5.9.3, 6.1.3 (2009), 6.2.1 (2010).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel C++ 11.1, with a Visual C++ 9.0 backend, on Vista 32-bit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.3.3, 4.5 on Mingw.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, with C++0x extensions, 4.5 on Mingw.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          AIX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                IBM XL C/C++ Enterprise Edition, V11.1.0.0, on AIX Version 5.3.0.40.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.2.1 on FreeBSD 7.2, 64 bit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.2.1 on FreeBSD 8.0, 32 bit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Solaris:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Sun C++ 5.10 on Solaris 5.10.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_44_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
"      and Vladimir Prus managed this release.
"    &lt;/p&gt;
"    &lt;p&gt;
"      Thanks to Marshall Clow for organizing the bug sprint and to everyone who took
"      part.
"    &lt;/p&gt;
"  &lt;/div&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Fri, 13 Aug 2010 17:00:00 +0000
-quickbook
"feed/history/boost_1_44_0.qbk
)
(feed/history/boost_1_45_0.qbk
-item
"<item><title>Version 1.45.0</title><pubDate>Fri, 19 Nov 2010 11:00:00 EST</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Updated Libraries: Asio, Config, Flyweight, Foreach, Fusion, Graph, Interprocess,
"      Math, Meta State Machine, MultiArray, Proto, Spirit, TypeTraits, uBLAS, Unordered,
"      Wave, Xpressive. Updated tools: Boostbook, Quickbook
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.45.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;div id=&quot;version_1_45_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed a problem on kqueue-based platforms where a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;deadline_timer&lt;/span&gt;&lt;/code&gt;
"              may never fire if the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
"              is running in a background thread (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4568&quot;&gt;#4568&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed a const-correctness issue that prevented valid uses of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;has_service&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"              from compiling (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4638&quot;&gt;#4638&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed MinGW cross-compilation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4491&quot;&gt;#4491&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Removed dependency on deprecated Boost.System functions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4672&quot;&gt;#4672&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Ensured &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;closesocket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"              failures are correctly propagated (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4573&quot;&gt;#4573&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added a check for errors returned by &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;InitializeCriticalSectionAndSpinCount&lt;/span&gt;&lt;/code&gt;
"              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4574&quot;&gt;#4574&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added support for hardware flow control on QNX (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4625&quot;&gt;#4625&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Always use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pselect&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; on HP-UX, if it is available (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4578&quot;&gt;#4578&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Ensured handler arguments are passed as lvalues (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4744&quot;&gt;#4744&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed Windows build when thread support is disabled (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4680&quot;&gt;#4680&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed a Windows-specific problem where &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;deadline_timer&lt;/span&gt;&lt;/code&gt;
"              objects with expiry times set more than 5 minutes in the future may
"              never expire (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4745&quot;&gt;#4745&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;resolver&lt;/span&gt;&lt;/code&gt;
"              backend on BSD platforms so that an empty service name resolves to
"              port number &lt;code&gt;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/code&gt;, as per the
"              documentation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4690&quot;&gt;#4690&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed read operations so that they do not accept buffer sequences of
"              type &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;const_buffers_1&lt;/span&gt;&lt;/code&gt;
"              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4746&quot;&gt;#4746&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Redefined &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Protocol&lt;/span&gt;&lt;/code&gt;
"              and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;id&lt;/span&gt;&lt;/code&gt; to avoid clashing
"              with Objective-C++ keywords (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4191&quot;&gt;#4191&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt; reallocation
"              performance issue that can occur when there are many active &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;deadline_timer&lt;/span&gt;&lt;/code&gt; objects (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4780&quot;&gt;#4780&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed the kqueue backend so that it compiles on NetBSD (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4662&quot;&gt;#4662&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed the socket &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_control&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; implementation on 64-bit Mac OS X
"              and BSD platforms (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4782&quot;&gt;#4782&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed a Windows-specific problem where failures from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"              are incorrectly treated as successes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4859&quot;&gt;#4859&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Deprecated the separate compilation header &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;cpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"              in favour of &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4560&quot;&gt;#4560&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added new defect macros, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_VARIADIC_MACROS&lt;/span&gt;&lt;/code&gt;
"              and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_NUMERIC_LIMITS_LOWEST&lt;/span&gt;&lt;/code&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Minor fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4670&quot;&gt;#4670&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4563&quot;&gt;#4563&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4474&quot;&gt;#4474&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4508&quot;&gt;#4508&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/flyweight/index.html&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed a hanging problem with &lt;a href=&quot;/libs/flyweight/doc/tutorial/configuration.html#intermodule_holder&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;intermodule_holder&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; in Win32
"              platforms related to a Boost.Interprocess issue described at ticket
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4606&quot;&gt;#4606&lt;/a&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Removed an internal assertion incompatible with program termination
"              via &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;exit&lt;/span&gt;&lt;/code&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fix ambiguitiy by making &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;auto_any&lt;/span&gt;&lt;/code&gt;
"              constructor explicit.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FUSION_ADAPT_ADT&lt;/span&gt;&lt;/code&gt;,
"              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FUSION_ADAPT_TPL_ADT&lt;/span&gt;&lt;/code&gt;,
"              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FUSION_ADAPT_ASSOC_ADT&lt;/span&gt;&lt;/code&gt;
"              and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FUSION_ADAPT_ASSOC_TPL_ADT&lt;/span&gt;&lt;/code&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added Stoer-Wagner min-cut algorithm contributed by Daniel Trebbien.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added implicit graph (implicit_graph) and A* (astar_maze) examples
"              contributed by W. P. McNeill.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added bundled property support for graph properties.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4556&quot;&gt;#4556&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4622&quot;&gt;#4622&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4631&quot;&gt;#4631&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4715&quot;&gt;#4715&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4753&quot;&gt;#4753&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4758&quot;&gt;#4758&lt;/a&gt;
"              and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4793&quot;&gt;#4793&lt;/a&gt;
"              plus others not in Trac.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed documentation bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4731&quot;&gt;#4731&lt;/a&gt;
"              and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4737&quot;&gt;#4737&lt;/a&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1080&quot;&gt;#1080&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3284&quot;&gt;#3284&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3439&quot;&gt;#3439&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3448&quot;&gt;#3448&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3582&quot;&gt;#3582&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3682&quot;&gt;#3682&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3829&quot;&gt;#3829&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3846&quot;&gt;#3846&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3914&quot;&gt;#3914&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3947&quot;&gt;#3947&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3950&quot;&gt;#3950&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3951&quot;&gt;#3951&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3985&quot;&gt;#3985&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4010&quot;&gt;#4010&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4417&quot;&gt;#4417&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4019&quot;&gt;#4019&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4039&quot;&gt;#4039&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4218&quot;&gt;#4218&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4230&quot;&gt;#4230&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4250&quot;&gt;#4250&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4297&quot;&gt;#4297&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4350&quot;&gt;#4350&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4352&quot;&gt;#4352&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4426&quot;&gt;#4426&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4516&quot;&gt;#4516&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4524&quot;&gt;#4524&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4557&quot;&gt;#4557&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4606&quot;&gt;#4606&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4685&quot;&gt;#4685&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4694&quot;&gt;#4694&lt;/a&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added support for standard rvalue reference move semantics (tested
"              on GCC 4.5 and VC10).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Permissions can be detailed for interprocess named resources.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mapped_region&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flush&lt;/span&gt;&lt;/code&gt; initiates disk flushing but
"              does not guarantee it's completed when returns, since it is not portable.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              FreeBSD and MacOS now use posix semaphores to implement named semaphores
"              and mutex.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added inverse gamma distribution and inverse chi_square and scaled
"              inverse chi_square.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added warnings about potential ambiguity with std random library in
"              distribution and function names.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Editorial revision of documentation, and added FAQ.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/msm/index.html&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;a href=&quot;/doc/libs/1_45_0/libs/msm/doc/HTML/ch08.html#d0e2995&quot;&gt;Support
"              for serialization&lt;/a&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;a href=&quot;/doc/libs/1_45_0/libs/msm/doc/HTML/ch03s04.html#eUML-reuse-functor&quot;&gt;Possibility
"              to use normal&lt;/a&gt; functors (from functor front-end) in eUML.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;a href=&quot;/doc/libs/1_45_0/libs/msm/doc/HTML/ch03s05.html#backend-fsm-constructor-args&quot;&gt;New
"              constructors where substates / submachines can be taken as arguments&lt;/a&gt;.
"              This allows passing arguments to the constructor of a submachine.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Bugfixes (anonymous transitions)
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_array/index.html&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixes for bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3581&quot;&gt;#3581&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3820&quot;&gt;#3820&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3989&quot;&gt;#3989&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4032&quot;&gt;#4032&lt;/a&gt;,
"              plus other bugs not in Trac.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added new examples and test cases.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Knock down value of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;/code&gt;,
"              fixes bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4602&quot;&gt;#4602&lt;/a&gt;,
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Support non-rtti compilers
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fix bug with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;matches&lt;/span&gt;&lt;/code&gt;,
"              array types and the wildcard pattern.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Make Proto work on MSVC with the /clr option
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Add const-qualified overloads of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;eval&lt;/span&gt;&lt;/code&gt;
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
"  Spirit V2.4.1,
"          see the '&lt;a href=&quot;/doc/libs/1_45_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_4_1.html&quot;&gt;What's
"          New&lt;/a&gt;' section for details.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/type_traits/index.html&quot;&gt;TypeTraits&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added new traits add_rvalue_reference, add_lvalue_reference and common_type.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Minor fixes to is_signed, is_unsigned and is_virtual_base_of.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/numeric/ublas/index.html&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Tickets closed:
"            &lt;/div&gt;
"            &lt;ul&gt;
"              &lt;li&gt;
"                &lt;div&gt;
"                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4410&quot;&gt;#4410&lt;/a&gt;,
"                &lt;/div&gt;
"              &lt;/li&gt;
"              &lt;li&gt;
"                &lt;div&gt;
"                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3397&quot;&gt;#3397&lt;/a&gt;,
"                &lt;/div&gt;
"              &lt;/li&gt;
"              &lt;li&gt;
"                &lt;div&gt;
"                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/795&quot;&gt;#795&lt;/a&gt;,
"                &lt;/div&gt;
"              &lt;/li&gt;
"              &lt;li&gt;
"                &lt;div&gt;
"                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3514&quot;&gt;#3514&lt;/a&gt;,
"                &lt;/div&gt;
"              &lt;/li&gt;
"            &lt;/ul&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Mixed types operation are possible and new tests added (like matrix&amp;lt;complex&amp;gt;+matrix&amp;lt;double&amp;gt;),
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              New features:
"            &lt;/div&gt;
"            &lt;ul&gt;
"              &lt;li&gt;
"                &lt;div&gt;
"                  a new size&amp;lt;&amp;gt; operator is available. For example size&amp;lt;1&amp;gt;(A+B)
"                  give the number of rows of the sum of matrices A and B,
"                &lt;/div&gt;
"              &lt;/li&gt;
"            &lt;/ul&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fix inserting from iterators which return by copy from &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;
"              in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_map&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unordered_set&lt;/span&gt;&lt;/code&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/xpressive/index.html&quot;&gt;Xpressive&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xpressive&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;as&lt;/span&gt;&lt;/code&gt; handles wide-char &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sub_match&lt;/span&gt;&lt;/code&gt; objects, fixes bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4496&quot;&gt;#4496&lt;/a&gt;
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_45_0.updated_tools&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fix syntax highlighter for comments at the end of code blocks.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fix command line macros.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Nested code snippets.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Nested documentation info comments.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Revert xml escaping document info, it broke some documentation files
"              (will now be in 1.6).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Some other small tweaks. See &lt;a href=&quot;/doc/html/quickbook/change_log.html#quickbook.change_log.releases.version_1_5_3___boost_1_45_0&quot;&gt;the
"              change log&lt;/a&gt; for more info.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_45_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.5, 4.5.1.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Intel: 10.1, 11.0, 11.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Pathscale: 3.2.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 4.0.1, 4.2.1, 4.4
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, C++0x mode: 4.4.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Intel: 11.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Visual C++: 7.1, 8.0, 9.0 and 10.0.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, mingw: 4.3.3.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 4.2.1, 32 bit.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 4.2.1, 64 bit.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.5, 4.5.0, 4.6.0 (dev version).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Intel: 10.1, 11.0, 11.1.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              pgCC 10.1.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              PathScale: 3.2.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Clang from subversion.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Intel C++ Compiler: 10.1, 11.0, 11.1.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 4.0.1, 4.2.1, 4.4.4
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, C++0x mode: 4.4.4
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Clang from subversion.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Borland: 5.9.3, 6.1.3 (2009), 6.2.1 (2010), 6.3.0
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, mingw: 4.3.3, 4.4.5, 4.5.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, mingw, C++0x mode: 4.5.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Visual C++: 7.1, 8.0, 9.0, 10.0
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          AIX:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              IBM XL C/C++ Enterprise Edition, V11.1.0.0.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC 4.2.1, 64 bit.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Solaris:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Sun C++: 5.10.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_45_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
"      and Vladimir Prus managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Fri, 19 Nov 2010 16:00:00 +0000
-quickbook
"feed/history/boost_1_45_0.qbk
)
(feed/history/boost_1_46_0.qbk
-item
"<item><title>Version 1.46.0</title><pubDate>Mon, 21 Feb 2011 15:36:13 -0500</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      New Libraries: Icl. Updated Libraries: Array, Asio, Bind, Concept Check, Filesystem,
"      Fusion, Hash, Iostreams, Iterator, Math, Meta State Machine, Optional, Pool,
"      Program Options, Proto, Signals, Spirit, Tokenizer, Unordered, Wave. Updated
"      Tools: Boostbook, Inspect, Quickbook.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.46.0/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;div id=&quot;version_1_46_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/icl/index.html&quot;&gt;Icl&lt;/a&gt;:&lt;/span&gt;
"  Interval Container
"          Library, interval sets and maps and aggregation of associated values, from
"          Joachim Faulhaber.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_46_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/array/index.html&quot;&gt;Array&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added support for cbegin/cend (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4761&quot;&gt;#4761&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed a problem with the Sun compiler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4757&quot;&gt;#4757&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed an integer overflow problem that occurs when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;address_v4&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;broadcast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; is used on 64-bit platforms.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed a problem on older Linux kernels (where epoll is used without
"              timerfd support) that prevents timely delivery of deadline_timer handlers,
"              after the program has been running for some time (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5045&quot;&gt;#5045&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/bind/index.html&quot;&gt;Bind&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;make_adaptable&lt;/span&gt;&lt;/code&gt; now
"              documented (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4532&quot;&gt;#4532&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/concept_check/index.html&quot;&gt;Concept Check&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              fixed warnings with self-assignment (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4918&quot;&gt;#4918&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/index.html&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Version 3 of the library is now the default.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              IBM vacpp: Workaround for compiler bug affecting &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;iterator_facade&lt;/span&gt;&lt;/code&gt;.
"              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4912&quot;&gt;#4912&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Verify, clarify, document that &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"              can be used to specify &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_FILESYSTEM_VERSION&lt;/span&gt;&lt;/code&gt;.
"              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4891&quot;&gt;#4891&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Replaced C-style &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;assert&lt;/span&gt;&lt;/code&gt;
"              with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASSERT&lt;/span&gt;&lt;/code&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Undeprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unique_path&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;. Instead, add a note mentioning the
"              workaround for lack of thread safety and possible change to cwd. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unique_path&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"              is just too convenient to deprecate!
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Cleared several GCC warnings.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Changed V2 code to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THROW_EXCEPTION&lt;/span&gt;&lt;/code&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Windows: Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; to report non-symlink reparse point
"              correctly.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;symlink_option&lt;/span&gt;&lt;/code&gt;
"              to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;,
"              allowing control over recursion into directory symlinks. Note that
"              the default is changed to not recurse into directory symlinks.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Reference documentation cleanup, including fixing missing and broken
"              links, and adding missing functions.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Miscellaneous implementation code cleanup.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              vector copy constructor now copies sequence members in the same order
"              on different platforms (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2823&quot;&gt;#2823&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed Graphviz output to work on Visual C++ 7.1.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Replaced assert with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASSERT&lt;/span&gt;&lt;/code&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Changed to Boost.Filesystem v3.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed the following bugs from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1021&quot;&gt;#1021&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4556&quot;&gt;#4556&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4631&quot;&gt;#4631&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4642&quot;&gt;#4642&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4715&quot;&gt;#4715&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4731&quot;&gt;#4731&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4737&quot;&gt;#4737&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4753&quot;&gt;#4753&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4758&quot;&gt;#4758&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4793&quot;&gt;#4793&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4843&quot;&gt;#4843&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4851&quot;&gt;#4851&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4852&quot;&gt;#4852&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4887&quot;&gt;#4887&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4914&quot;&gt;#4914&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4966&quot;&gt;#4966&lt;/a&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed various bugs not in Trac.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/functional/hash/index.html&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;type_index&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4756&quot;&gt;#4756&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Avoid &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wconversion&lt;/span&gt;&lt;/code&gt;
"              warnings.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASSERT&lt;/span&gt;&lt;/code&gt; instead
"              of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;assert&lt;/span&gt;&lt;/code&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed flush regression (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4590&quot;&gt;#4590&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iterator/index.html&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              fixed problem with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;implicit_cast&lt;/span&gt;&lt;/code&gt;
"              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3645&quot;&gt;#3645&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/doc/sf_and_dist/html/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added Wald, Inverse Gaussian and geometric distributions.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added information about configuration macros.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Added support for mpreal as a real-numered type.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/msm/index.html&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;a href=&quot;/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-compile-time-analysis&quot;&gt;Compile-time
"              state machine analysis&lt;/a&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;a href=&quot;/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-boost-parameter&quot;&gt;Boost.Parameter
"              interface definition for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;msm&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;state_machine&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; template arguments&lt;/a&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;a href=&quot;/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-queues&quot;&gt;Possibility
"              to provide a container for the event and deferred event queues&lt;/a&gt;.
"              A policy implementation based on a more efficient Boost.CircularBuffer
"              is provided.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;msm&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;state_machine&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;is_flag_active&lt;/span&gt;&lt;/code&gt; method made const.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;a href=&quot;/doc/libs/1_46_0/libs/msm/doc/HTML/ch03s05.html#backend-enqueueing&quot;&gt;Added
"              possibility to enqueue events for delayed processing&lt;/a&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Bugfixes
"            &lt;/div&gt;
"            &lt;ul&gt;
"              &lt;li&gt;
"                &lt;div&gt;
"                  &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4926&quot;&gt;#4926&lt;/a&gt;.
"                &lt;/div&gt;
"              &lt;/li&gt;
"              &lt;li&gt;
"                &lt;div&gt;
"                  stack overflow using the Defer functor
"                &lt;/div&gt;
"              &lt;/li&gt;
"              &lt;li&gt;
"                &lt;div&gt;
"                  anonymous transition of a submachine not called for the initial
"                  state
"                &lt;/div&gt;
"              &lt;/li&gt;
"            &lt;/ul&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/optional/index.html&quot;&gt;Optional&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Updated test results with information about expected failures (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2294&quot;&gt;#2294&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/pool/index.html&quot;&gt;Pool&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Now can set a max_size for pool (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2696&quot;&gt;#2696&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt; uses &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;reinterpret_cast&lt;/span&gt;&lt;/code&gt;
"              instead of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;static_cast&lt;/span&gt;&lt;/code&gt;
"              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2941&quot;&gt;#2941&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pool_allocator&lt;/span&gt;&lt;/code&gt; now works with vector
"              of vectors (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/386&quot;&gt;#386&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Boost pool is now compatible with Microsoft memory leak detection (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4346&quot;&gt;#4346&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/program_options/index.html&quot;&gt;Program Options&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed errors in examples in docs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3992&quot;&gt;#3992&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4858&quot;&gt;#4858&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Now takes &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;argv&lt;/span&gt;&lt;/code&gt; as const
"              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3909&quot;&gt;#3909&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;core&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
"              no longer defines &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pop_front&lt;/span&gt;&lt;/code&gt;
"              and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;reverse&lt;/span&gt;&lt;/code&gt;, which have moved to their
"              own headers under &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;/code&gt;
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Add callable wrappers for more Fusion algorithms (including &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;at&lt;/span&gt;&lt;/code&gt;); and callable wrappers for some
"              std utilities like &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;make_pair&lt;/span&gt;&lt;/code&gt;,
"              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;first&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;second&lt;/span&gt;&lt;/code&gt;, all under the new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;functional&lt;/span&gt;&lt;/code&gt; directory
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Allow transforms to be specified separately from a grammar
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;matches&lt;/span&gt;&lt;/code&gt; preserves domain-specific
"              expression wrappers
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fix ADL issue with &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;and_&lt;/span&gt;&lt;/code&gt;
"              transform
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fix handling of grammar checking in expressions involving multiple
"              domains (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4675&quot;&gt;#4675&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fix ambiguous &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;display_expr&lt;/span&gt;&lt;/code&gt;
"              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4910&quot;&gt;#4910&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;is_sequence&lt;/span&gt;&lt;/code&gt; answers true for Proto
"              expressions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5006&quot;&gt;#5006&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Eliminate &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wundef&lt;/span&gt;&lt;/code&gt;
"              GCC warning in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
"              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5075&quot;&gt;#5075&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/signals/index.html&quot;&gt;Signals&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              gcc warning cleanup (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4365&quot;&gt;#4365&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Spirit V2.4.2, see the '&lt;a href=&quot;/doc/libs/1_46_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_4_2.html&quot;&gt;What's
"              New&lt;/a&gt;' section for details.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tokenizer/index.html&quot;&gt;Tokenizer&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;isspace&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ispunct&lt;/span&gt;&lt;/code&gt; was called with wrong character
"              type (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4791&quot;&gt;#4791&lt;/a&gt;)
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/index.html&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Avoid using &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;
"              with the value type.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Avoid &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wconversion&lt;/span&gt;&lt;/code&gt;
"              warnings.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              See the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_46_0.updated_tools&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Better support for attributes on root elements - including &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lang&lt;/span&gt;&lt;/code&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/inspect/index.html&quot;&gt;Inspect&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Check that Boost headers do not use C's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;assert&lt;/span&gt;&lt;/code&gt;
"              macro.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Add support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lang&lt;/span&gt;&lt;/code&gt;
"              attribute in documentation info.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Improved anchors.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Support &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;import&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;include&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xinclude&lt;/span&gt;&lt;/code&gt;
"              in conditional phrases.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Uses Filesystem 3.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_46_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.5, 4.5.2,
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0, 4.5.2
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Intel: 10.1, 11.0, 11.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Clang: 2.8
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Pathscale: 3.2.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 4.0.1, 4.2.1, 4.4
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, C++0x mode: 4.4.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Intel: 11.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Visual C++: 7.1, 8.0, 9.0 and 10.0.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, mingw: 4.4.0.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 4.2.1, 64 bit.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 3.4.6, 4.2.4, 4.3.4, 4.3.5, 4.4.3, 4.4.5, 4.5.0, 4.5.2
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.0, 4.5.2
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              pgCC 11.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Intel: 10.1, 11.0, 11.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              PathScale: 3.2, 4.0
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Visual Age C++ 10.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Clang from subversion
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Intel C++ Compiler: 10.1, 11.0, 11.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 4.0.1, 4.2.1, 4.4.4
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, C++0x mode: 4.4.4
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Clang from subversion
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Visual C++: 7.1, 8.0, 9.0, 10.0
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Visual C++ with STLport: 9.0
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Visual C++, Windows Mobile 5, with STLport: 9.0
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, mingw: 4.4.0, 4.5.1, 4.6.0
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, mingw, C++0x mode: 4.5.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Borland: 6.1.3 (2009), 6.2.1 (2010)
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          AIX:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              IBM XL C/C++ Enterprise Edition, V11.1.0.0
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC 4.2.1, 64 bit
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Solaris:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Sun C++: 5.10
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_46_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
"      and Vladimir Prus managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Sun, 22 Jan 2017 12:52:17 +0000
-quickbook
"feed/history/boost_1_46_0.qbk
-update_count
=1
)
(feed/history/boost_1_46_1.qbk
-item
"<item><title>Version 1.46.1</title><pubDate>Sat, 12 Mar 2011 10:45:53 -0500</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Bug fixes: Asio, Fusion, Graph, Icl, Math, Polygon, Proto, Property Tree, Signals2,
"      TR1, Unordered.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><boostbook:download>http://sourceforge.net/projects/boost/files/boost/1.46.1/</boostbook:download><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  
"  &lt;div id=&quot;version_1_46_1.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EV_ONESHOT&lt;/span&gt;&lt;/code&gt; seems to
"              cause problems on some versions of Mac OS X, with the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt; destructor getting stuck
"              inside the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"              system call. Changed the kqueue backend to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EV_CLEAR&lt;/span&gt;&lt;/code&gt;
"              instead (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5021&quot;&gt;#5021&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed compile failures with some versions of &lt;tt&gt;g++&lt;/tt&gt;
"              due to the use of anonymous enums (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4883&quot;&gt;#4883&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed a bug on kqueue-based platforms, where some system calls that
"              repeatedly fail with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EWOULDBLOCK&lt;/span&gt;&lt;/code&gt;
"              are not correctly re-registered with kqueue.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;streambuf&lt;/span&gt;&lt;/code&gt; to ensure that its internal
"              pointers are updated correctly after the data has been modified using
"              &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;streambuf&lt;/span&gt;&lt;/code&gt; member functions.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed a bug that prevented the linger socket option from working on
"              platforms other than Windows.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;disable_if&lt;/span&gt;&lt;/code&gt; for
"              Visual C++ 7.1/8.0
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/filesystem/&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fix for STLPort (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5217&quot;&gt;#5217&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              PGI large file support
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Bug fixes, including fixes for: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5181&quot;&gt;#5181&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5180&quot;&gt;#5180&lt;/a&gt;,
"              &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5199&quot;&gt;#5199&lt;/a&gt;
"              and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5175&quot;&gt;#5175&lt;/a&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/icl/&quot;&gt;Icl&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Intersects for interval_maps and segment_type/element_type (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5207&quot;&gt;#5207&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fixed some ambiguous calls to functions in boost and std namespaces.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Other bug fixes, and documentation fixes.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Several minor bug fixes.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Disabled 45-degree booleans optimization.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;display_expr&lt;/span&gt;&lt;/code&gt; copyable
"              (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5096&quot;&gt;#5096&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fix const correctness problem in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pass_through&lt;/span&gt;&lt;/code&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/property_tree/&quot;&gt;Property Tree&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fix compile error in JSON parser.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/signals2/&quot;&gt;Signals2&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Fix unused parameter warning.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tr1/&quot;&gt;TR1&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Allow specialization of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tr1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hash&lt;/span&gt;&lt;/code&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Improved support for Pathscale and Sun compilers.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Add missing copy constructors and assignment operators when using rvalue
"              references (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5119&quot;&gt;#5119&lt;/a&gt;).
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_46_1.other_changes&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Other changes&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Update getting started guide to reflect changes to boost build.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          In quickbook, workaround optimization bug in g++ 4.4.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_46_1.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.1, 4.4.3, 4.4.5, 4.5.2
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Intel: 10.1, 11.0, 11.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Clang: 2.8
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Pathscale: 3.2
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 4.0.1, 4.2.1, 4.4
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, C++0x mode: 4.4.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Intel: 11.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Visual C++: 7.1, 8.0, 9.0 and 10.0.
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, mingw: 4.4.0.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 4.2.1, 64 bit.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.4.4, 4.4.5, 4.5.2
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              pgCC: 11.2
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Intel: 10.1, 11.0, 11.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              PathScale: 3.2, 4.0.8
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Visual Age C++: 10.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Clang from subversion
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Intel C++ Compiler: 10.1, 11.0, 11.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC: 4.0.1, 4.2.1, 4.4.4
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, C++0x mode: 4.4.4
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Clang from subversion, with GNU libstdc++, libc++ and libc++ in C++0x
"              mode.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Visual C++: 7.1, 9.0, 10.0
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Visual C++ with STLport: 9.0
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Visual C++, Windows Mobile 5, with STLport: 9.0
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, mingw: 4.5.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              GCC, mingw, C++0x mode: 4.5.1
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Borland: 6.1.3 (2009), 6.2.1 (2010)
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          AIX:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              IBM XL C/C++ Enterprise Edition, V11.1.0.0
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Solaris:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              Sun C++: 5.10
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_46_1.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
"      and Vladimir Prus managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Sat, 12 Mar 2011 15:45:53 +0000
-quickbook
"feed/history/boost_1_46_1.qbk
)
(feed/history/boost_1_47_0.qbk
-item
"<item><title>Version 1.47.0</title><link>http://www.boost.org/users/history/version_1_47_0.html</link><pubDate>Mon, 11 Jul 2011 18:19:33 -0400</pubDate><boostbook:purpose>
"      New Libraries: Chrono, Geometry, Phoenix and Ratio. Updated Libraries: Accumulators,
"      Asio, Config, DateTime, Dynamic Bitset, Foreach, Function, Function Types,
"      Graph, Iostreams, Iterator, Lexical Cast, Logic, Math, Meta State Machine,
"      MultiIndex, Proto, Random, Range, Spirit, Tokenizer, Utility, Uuid, Wave
"    </boostbook:purpose><boostbook:downlaod>http://sourceforge.net/projects/boost/files/boost/1.47.0/</boostbook:downlaod><description>
"  
"  
"  
"  &lt;div id=&quot;version_1_47_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/chrono/index.html&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
"  Useful time
"          utilities, from Vicente J. Botet Escribá.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/geometry/index.html&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"  Geometry
"          Library, from Barend Gehrels, Bruno Lalande and Mateusz Loskot.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/phoenix/index.html&quot;&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
"  Define small
"          unnamed function objects at the actual call site, and more, from Joel de
"          Guzman, Dan Marsden and Thomas Heller.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/ratio/index.html&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
"  Compile time rational
"          arithmetic, from Vicente J. Botet Escribá.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_47_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/accumulators/index.html&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New statistical accumulators: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sum_kahan&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sum_of_weights_kahan&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sum_of_variates_kahan&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Many new features and improvements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Signal handling.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      A debugging aid for asynchronous programs.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Timeouts on socket iostreams.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Composed connect operations.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Rewritten SSL implementation.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      C++0x move support.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Compatibility with POSIX &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      ... and much more. See the &lt;a href=&quot;/doc/libs/1_47_0/doc/html/boost_asio/history.html&quot;&gt;Revision
"                      History&lt;/a&gt; in the Boost.Asio documentation for more details.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Tickets addressed: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2879&quot;&gt;#2879&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3238&quot;&gt;#3238&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3297&quot;&gt;#3297&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3307&quot;&gt;#3307&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3702&quot;&gt;#3702&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3741&quot;&gt;#3741&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3900&quot;&gt;#3900&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3905&quot;&gt;#3905&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3939&quot;&gt;#3939&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3958&quot;&gt;#3958&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4162&quot;&gt;#4162&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4971&quot;&gt;#4971&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5124&quot;&gt;#5124&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5128&quot;&gt;#5128&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5418&quot;&gt;#5418&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5453&quot;&gt;#5453&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/config/index.html&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1988&quot;&gt;#1988&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/date_time/index.html&quot;&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4920&quot;&gt;#4920&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3651&quot;&gt;#3651&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4845&quot;&gt;#4845&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4475&quot;&gt;#4475&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4952&quot;&gt;#4952&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5345&quot;&gt;#5345&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5250&quot;&gt;#5250&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4798&quot;&gt;#4798&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4754&quot;&gt;#4754&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4411&quot;&gt;#4411&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5126&quot;&gt;#5126&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4780&quot;&gt;#4780&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2475&quot;&gt;#2475&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1674&quot;&gt;#1674&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/dynamic_bitset/index.html&quot;&gt;Dynamic Bitset&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5439&quot;&gt;#5439&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/foreach/index.html&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use rvalue refs on supporting compilers for const rvalue detection.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function/index.html&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3410&quot;&gt;#3410&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3618&quot;&gt;#3618&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3912&quot;&gt;#3912&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4073&quot;&gt;#4073&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4325&quot;&gt;#4325&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4717&quot;&gt;#4717&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4765&quot;&gt;#4765&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/function_types/index.html&quot;&gt;Function Types&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1653&quot;&gt;#1653&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3162&quot;&gt;#3162&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/graph/index.html&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove deprecated function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;kolmogorov_max_flow&lt;/span&gt;&lt;/code&gt;,
"                use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boykov_kolmogorov_max_flow&lt;/span&gt;&lt;/code&gt;
"                instead.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;is_same&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; header since its functionality
"                is in Boost.Type_Traits.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iostreams/index.html&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support filesystem v3 paths (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4485&quot;&gt;#4485&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix a memory leak in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;chain&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4922&quot;&gt;#4922&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/iterator/index.html&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;function_input_iterator&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2893&quot;&gt;#2893&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1427&quot;&gt;#1427&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1517&quot;&gt;#1517&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3434&quot;&gt;#3434&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Better performance and less memory usage for many combinations of
"                Source and Target types (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5564&quot;&gt;#5564&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5417&quot;&gt;#5417&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4397&quot;&gt;#4397&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5350&quot;&gt;#5350&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5576&quot;&gt;#5576&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Documentation updated (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5576&quot;&gt;#5576&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5494&quot;&gt;#5494&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/logic/index.html&quot;&gt;Logic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3093&quot;&gt;#3093&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3600&quot;&gt;#3600&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added changesign function to sign.hpp to facilitate addition of nonfinite
"                facets.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Addition of nonfinite facets from Johan Rade, with tests, examples
"                of use for C99 format infinity and NaN, and documentation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added tests and documentation of changesign from Johan Rade.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/msm/index.html&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a &lt;a href=&quot;/doc/libs/1_47_0/libs/msm/doc/HTML/ch03s05.html#backend-start&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"                method in the back-end.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added partial support for &lt;a href=&quot;/doc/libs/1_47_0/libs/msm/doc/HTML/ch03s04.html#eUML-phoenix&quot;&gt;Boost.Phoenix
"                functors in eUML&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the possibility to &lt;a href=&quot;/doc/libs/1_47_0/libs/msm/doc/HTML/ch03s05.html#backend-state-switch&quot;&gt;choose
"                when state switching occurs&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5117&quot;&gt;#5117&lt;/a&gt;,
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5253&quot;&gt;#5253&lt;/a&gt;,
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5533&quot;&gt;#5533&lt;/a&gt;,
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5573&quot;&gt;#5573&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      gcc warnings about unused variables.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      better implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;favor_compile_time&lt;/span&gt;&lt;/code&gt;
"                      back-end policy.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      bug with eUML and state construction.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      incorrect eUML event and state macros.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      incorrect event type passed to a direct entry state's on_entry
"                      action.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      more examples.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/multi_index/index.html&quot;&gt;MultiIndex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an ADL problem in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;composite_key_compare&lt;/span&gt;&lt;/code&gt;
"                related with Boost.Ref.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Pre-preprocessed for better compile times.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Default preprocessor limits raised:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Max expression arity (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_MAX_ARITY&lt;/span&gt;&lt;/code&gt;)
"                      bumped from 5 to 10.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Max function call arity (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_MAX_FUNCTION_CALL_ARITY&lt;/span&gt;&lt;/code&gt;)
"                      bumped from 5 to 10.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Max logical operator arity (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_MAX_LOGICAL_ARITY&lt;/span&gt;&lt;/code&gt;)
"                      bumped from 8 to 10.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Better integration of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;basic_expr&lt;/span&gt;&lt;/code&gt;
"                to avoid accidental needless instantiations of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;expr&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/random/index.html&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Synchronized with the new standard.
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Many new distributions added: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;chi_squared_distribution&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;negative_binomial_distribution&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fisher_f_distribution&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;student_t_distribution&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;weibull_distribution&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;extreme_value_distribution&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;discrete_distribution&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;piecewise_constant_distribution&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;piecewise_liear_distribution&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Renamed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;uniform_int&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;uniform_real&lt;/span&gt;&lt;/code&gt;
"                      to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;uniform_int_distribution&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;uniform_real_distribution&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added members to all distributions: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;param_type&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;param&lt;/span&gt;&lt;/code&gt;, stream
"                      operators, comparison operators, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;min&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;max&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Allow distributions to be used directly with generators without
"                      use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;variate_generator&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Changed the meaning of the parameters of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometric_distribution&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lognormal_distribution&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a second parameter to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;gamma_distribution&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;seed_seq&lt;/span&gt;&lt;/code&gt;
"                      and added the corresponding constructors and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;seed&lt;/span&gt;&lt;/code&gt; overloads the generators.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generate_canonical&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Renamed the engine tempates. e.g. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mersenne_twister&lt;/span&gt;&lt;/code&gt;
"                      becomes &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mersenne_twister_engine&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New engine adapter &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;independent_bits_engine&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added new predefined engine typedefs: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mt19937_64&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ranlux&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;48&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;knuth_b&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Updated seeding algorithms.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;discard&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Use unsigned types instead of signed types in all the predefined
"                      engines.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;linear_congruential_engine&lt;/span&gt;&lt;/code&gt;
"                      could assert because the modular arithmetic was not implemented
"                      in all cases. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shuffle_output&lt;/span&gt;&lt;/code&gt;,
"                      now called &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shuffle_order_engine&lt;/span&gt;&lt;/code&gt;,
"                      could cause integer overflow. These cases were not triggered
"                      by any predefined engines.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;uniform_small_int&lt;/span&gt;&lt;/code&gt;
"                      now actually behaves as documented.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New efficient algorithms for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;binomial_distribution&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;poisson_distribution&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Moved all features into &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;namespace&lt;/span&gt;
"                &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;random&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Backwards compatibility issues:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The seeding algorithms have changed. This was unavoidable for
"                      compatibility with the standard. Not to mention that some of
"                      the existing algorithms were weird and inconsistent.
"                      &lt;ul&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            Seeding with an integer: The behaviour should be unchanged
"                            for most generators except &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lagged_fibonacci&lt;/span&gt;&lt;/code&gt;
"                            and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;subtract_with_carry&lt;/span&gt;&lt;/code&gt;
"                            (and thus &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ranlux&lt;/span&gt;&lt;/code&gt;).
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            Seeding a generator with another generator: This has
"                            been enabled by making all all generators models of
"                            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;SeedSeq&lt;/span&gt;&lt;/code&gt;.
"                            Therefore, if you seed a Boost.Random generator with
"                            a non Boost.Random generator, your code will no longer
"                            compile. The algorithm has changed, so code using this
"                            seeding method will yield different values.
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            Seeding a generator from a pair of iterators: This implicitly
"                            assumed that the elements were 32-bit integers in some
"                            places, but not everywhere. I've added this requirement
"                            everywhere and updated the algorithms accordingly. The
"                            behaviour of generators with a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_type&lt;/span&gt;&lt;/code&gt;
"                            no more than 32 bits should be unchanged.
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                      &lt;/ul&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Renaming:
"                      &lt;ul&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            Whenever a class was renamed, there is a wrapper with
"                            the old name. There are also using declarations in namespace
"                            boost for everything that was moved.
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            The names of a few accessors in the distributions changed.
"                            Both the old and the new names are allowed.
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                      &lt;/ul&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometric_distribution&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lognormal_distribution&lt;/span&gt;&lt;/code&gt;:
"                      The behaviour is different at runtime. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;geometric_distribution&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lognormal_distribution&lt;/span&gt;&lt;/code&gt; provide
"                      the old behaviour, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;geometric_distribution&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;lognormal_distribution&lt;/span&gt;&lt;/code&gt; provide
"                      the new behaviour.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Streaming: gamma_distribution has a new parameter, thus text
"                      saved with the old version will not readable by the new version.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;variate_generator&lt;/span&gt;&lt;/code&gt;
"                      is now a simple pass through wrapper. Code that assumes that
"                      it will adjust the generator's result type to match the distribution
"                      will no longer work. This is not an issue with any of the distributions
"                      provided by Boost.Random.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Return types: The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;result_types&lt;/span&gt;&lt;/code&gt;
"                      of some generators have changed slightly. Some signed types
"                      have changed to unsigned to match the standard.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;has_fixed_range&lt;/span&gt;&lt;/code&gt;:
"                      This is now always false, as it doesn't appear to be very useful
"                      and is excessively cumbersome. Anything that was accessing
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;const_min&lt;/span&gt;&lt;/code&gt; and
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;const_max&lt;/span&gt;&lt;/code&gt; without
"                      first checking &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;has_fixed_range&lt;/span&gt;&lt;/code&gt;
"                      was incorrect to begin with.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/range/index.html&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed the end position &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;irange&lt;/span&gt;&lt;/code&gt;
"                when step size is greater than 1 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5544&quot;&gt;#5544&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit V2.5, see the '&lt;a href=&quot;/doc/libs/1_47_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_5.html&quot;&gt;What's
"                New&lt;/a&gt;' section for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/tokenizer/index.html&quot;&gt;Tokenizer&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4649&quot;&gt;#4649&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4432&quot;&gt;#4432&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/utility/index.html&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed tickets: (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5570&quot;&gt;#5570&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4601&quot;&gt;#4601&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4991&quot;&gt;#4991&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5145&quot;&gt;#5145&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5235&quot;&gt;#5235&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Wave V2.3.0, see the &lt;a href=&quot;/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt;
"                for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_47_0.build_system&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Build System&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          The official name of Boost.Build executable was changed to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;b2&lt;/span&gt;&lt;/code&gt;. The bootstrap scripts create a copy
"          with the old name &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;bjam&lt;/span&gt;&lt;/code&gt;
"          to prevent third-party build scripts from failing.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_47_0.updated_tools&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/boostbook/index.html&quot;&gt;BoostBook&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Handle doxygen tags: &lt;code&gt;&lt;span class=&quot;special&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;see&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tparam&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ref&lt;/span&gt;&lt;/code&gt; (for classes
"                only).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support note for classes as well as functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/tools/quickbook/index.html&quot;&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Generate consistent ids for headings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved unicode support for windows.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Warn about windows paths, as they aren't portable.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reverse deprecation of &lt;code&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;br&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support date ranges and comma seperated clauses in copyright attributes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved delimeter checking for simple markup (e.g. &lt;code&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;bold&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Pass-thru comments in code snippets.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;__FILENAME__&lt;/code&gt; macro now generates relative paths.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Allow quickbook escapes inside comments in syntax highlighted code.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_47_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                LLVM Clang 2.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.6, 4.2.4, 4.3.4, 4.3.5, 4.4.1, 4.4.3, 4.4.5, 4.5.1, 4.5.2,
"                4.6.0, 4.6.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang 2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel 11.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1, 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 7.1, 9.0, 10.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.2.1, 64 bit
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang from subversion, with GNU libstdc++.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                LLVM Clang 2.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.6, 4.2.4, 4.3.4, 4.3.5, 4.4.3, 4.4.5, 4.5.1, 4.5.2, 4.6.0,
"                4.6.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                pgCC: 11.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 10.1, 11.0, 11.1, 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                PathScale: 3.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang from subversion, with GNU libstdc++.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel 11.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 7.1, 9.0, 10.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ with STLport: 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++, Windows Mobile 5, with STLport: 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode, mingw: 4.5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          AIX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                IBM XL C/C++ Enterprise Edition, V11.1.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_47_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
"      and Vladimir Prus managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Mon, 11 Jul 2011 22:19:33 +0000
-quickbook
"feed/history/boost_1_47_0.qbk
)
(feed/history/boost_1_48_0.qbk
-item
"<item><title>Version 1.48.0</title><link>http://www.boost.org/users/history/version_1_48_0.html</link><guid>http://www.boost.org/users/history/version_1_48_0.html</guid><pubDate>Tue, 15 Nov 2011 10:47:30 -0500</pubDate><description>&lt;x&gt;
"  
"  
"  
"  &lt;div id=&quot;version_1_48_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/index.html&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
"  Standard
"          library containers and extensions, from Ion Gaztañaga.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/locale/index.html&quot;&gt;Locale&lt;/a&gt;:&lt;/span&gt;
"  Provide localization
"          and Unicode handling tools for C++, from Artyom Beilis.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/doc/html/move.html&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
"  Portable move semantics
"          for C++03 and C++11 compilers, from Ion Gaztañaga.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_48_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/index.html&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented various performance improvements, including:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Using thread-local operation queues in single-threaded use
"                      cases (i.e. when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;concurrency_hint&lt;/span&gt;&lt;/code&gt;
"                      is 1) to eliminate a lock/unlock pair.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Allowing some &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;
"                      speculative operations to be performed without holding the
"                      lock.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improving locality of reference by performing an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;'s I/O operation
"                      immediately before the corresponding handler is called. Also
"                      improves scalability across CPUs.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Specialising asynchronous read and write operations for buffer
"                      sequences that are arrays (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;/code&gt;
"                      or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;array&lt;/span&gt;&lt;/code&gt;) of exactly two buffers.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compile error in regex overload of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_until&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5688&quot;&gt;#5688&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed Windows-specific compile error by explicitly specifying the
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;signal&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"                function from the global namespace (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5722&quot;&gt;#5722&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;deadline_timer&lt;/span&gt;&lt;/code&gt;
"                implementation to not read clock unless the timer heap is non-empty.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed SSL buffer sizes to be large enough to hold a complete TLS
"                record (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5854&quot;&gt;#5854&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed synchronous &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
"                operations so that they obey the user's non-blocking setting (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5756&quot;&gt;#5756&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to set &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fd_set&lt;/span&gt;&lt;/code&gt;
"                size at runtime when using Windows.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disabled MSVC warning due to const qualifier being applied to function
"                type.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed crash that occurs when using Intel C++ compiler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5763&quot;&gt;#5763&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed OpenSSL initialisation to support all available algorithms.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed SSL error mapping when session is gracefully shut down.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added some latency test programs.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clarified that a read operation ends when the buffer is full (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5999&quot;&gt;#5999&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed exception safety issue in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;
"                initialisation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6006&quot;&gt;#6006&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Made number of strand implementations configurable via &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_STRAND_IMPLEMENTATIONS&lt;/span&gt;&lt;/code&gt;
"                macro.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ASIO_ENABLE_SEQUENTIAL_STRAND_ALLOCATION&lt;/span&gt;&lt;/code&gt;
"                flag which switches strand allocation to use a round-robin approach
"                rather than hashing.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed potential strand starvation issue that can occur when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"                is used.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/index.html&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5979&quot;&gt;#5979&lt;/a&gt;
"                Added chrono rounding utilities as defined by Howard Hinnant &lt;a href=&quot;http://home.roadrunner.com/~hinnant/duration_io/chrono_util.html&quot;&gt;here&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5978&quot;&gt;#5978&lt;/a&gt;
"                Add BOOST_CHRONO_HAS_PROCESS_CLOCKS to know if process clocks are
"                available.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5998&quot;&gt;#5998&lt;/a&gt;
"                Make possible to disable hybrid error handling.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5906&quot;&gt;#5906&lt;/a&gt;
"                Take in account the constexpr as defined in the standard.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5907&quot;&gt;#5907&lt;/a&gt;
"                Take in account noexcept for compilers supporting it.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some bugs.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the &lt;a href=&quot;http://www.boost.org/doc/html/chrono/appendices.html#chrono.appendices.history&quot;&gt;History&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/index.html&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_DECLTYPE_N3276&lt;/span&gt;&lt;/code&gt;
"                config macro. (See &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf&quot;&gt;N3276&lt;/a&gt;.)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/index.html&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;single_view&lt;/span&gt;&lt;/code&gt;
"                a random access fusion sequence.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove bogus compile-time asserts from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;distance&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Cleaner implementation of segmented Fusion.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Robustness issue, in some circumstances the union failed to
"                      output. Fixed.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Robustness issue, in some circumstances the calculated intersection
"                      point was outside the segment. Fixed.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Concept issue, cartesian intersect didn't understand segments
"                      other than the provided one. Fixed.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Sometimes self-intersections in linestrings were missed. Fixed.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The fusion coordinate system was not registered correctly.
"                      Fixed.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved tickets:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5726&quot;&gt;#5726&lt;/a&gt;
"                      (Segment intersection algorithm still assumes 'first', 'second'
"                      members)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5744&quot;&gt;#5744&lt;/a&gt;
"                      (mistake fusion adapt example)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5748&quot;&gt;#5748&lt;/a&gt;
"                      (need include &amp;lt;boost/foreach.hpp&amp;gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5954&quot;&gt;#5954&lt;/a&gt;
"                      (distance_pythagoras skips sqrt() step)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements on algorithms:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Checking self-intersections is now not done automatically,
"                      this can blast performance.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Besides that, checking self-intersections is made faster.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Intersections now avoid outputting duplicate points. So they
"                      output the minimal set.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Additional algorithms:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      covered_by: within is defined as &amp;quot;within, not on boundary&amp;quot;.
"                      covered_by is &amp;quot;within or on boundary&amp;quot;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Additional functionality:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      within: strategies can now be specified for within&amp;lt;point,
"                      box&amp;gt; and within&amp;lt;box, box&amp;gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      convert: a much broader range of conversions is supported
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      assign: idem, (currently partly) synonym for convert (but reversed
"                      arguments)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Additional coordinate types:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Basic support for Boost.Rational
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5185&quot;&gt;#5185&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5506&quot;&gt;#5506&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5813&quot;&gt;#5813&lt;/a&gt;
"                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5919&quot;&gt;#5919&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Various other bug fixes not in Trac.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed edge_descriptor type for reverse_graph to a new data type
"                to avoid ambiguities with the edge_descriptor of the underlying graph.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/index.html&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2796&quot;&gt;#2796&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4031&quot;&gt;#4031&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4251&quot;&gt;#4251&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4452&quot;&gt;#4452&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4895&quot;&gt;#4895&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5077&quot;&gt;#5077&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5120&quot;&gt;#5120&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5123&quot;&gt;#5123&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5230&quot;&gt;#5230&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5197&quot;&gt;#5197&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5287&quot;&gt;#5287&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5294&quot;&gt;#5294&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5306&quot;&gt;#5306&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5308&quot;&gt;#5308&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5392&quot;&gt;#5392&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5409&quot;&gt;#5409&lt;/a&gt;,
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support to customize offset_ptr and allow creating custom managed
"                segments that might be shared between 32 and 64 bit processes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Shared memory in windows has again filesystem lifetime: kernel bootstamp
"                and WMI use to get a reliable timestamp was causing a lot of trouble.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/index.html&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4797&quot;&gt;#4797&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5165&quot;&gt;#5165&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5183&quot;&gt;#5183&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5191&quot;&gt;#5191&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added code to work with Inf and NaN values on any platform (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5689&quot;&gt;#5689&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New Quickbook documentation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5723&quot;&gt;#5723&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Better performance and less memory usage for many combinations of
"                Source and Target types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Better performance for C locale.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new series evaluation methods to the cyclic Bessel I, J, K
"                and Y functions. Also taken great care to avoid spurious over and
"                underflow of these functions. Fixes issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5560&quot;&gt;#5560&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added an example of using Inverse Chi-Squared distribution for Bayesian
"                statistics, provided by Thomas Mang.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added tests to use improved version of lexical_cast which handles
"                C99 nonfinites without using global facets.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Corrected wrong out-of-bound uniform distribution CDF complement
"                values &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5733&quot;&gt;#5733&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled long double support on OpenBSD (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6014&quot;&gt;#6014&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed nextafter and related functions to behave in the same way
"                as other implementations - so that nextafter(+INF, 0) is a finite
"                value (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5832&quot;&gt;#5832&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed tuple include configuration to fix issue when using in conjunction
"                with Boost.Tr1 (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5934&quot;&gt;#5934&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed class eps_tolerance to behave correctly when both ends of
"                the range are zero (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6001&quot;&gt;#6001&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed missing include guards on prime.hpp (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5927&quot;&gt;#5927&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed unused/undocumented constants from constants.hpp (issue
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5982&quot;&gt;#5982&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed missing std:: prefix in nonfinite_num_facets.hpp (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5914&quot;&gt;#5914&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Minor patches for Cray compiler compatibility.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;MSM&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                eUML: added easier event reprocessing: process(event_) and reprocess()
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Rewrite of internal transition tables. There were a few bugs (failing
"                recursivity in internal transition tables of sub-sub machines) and
"                a missing feature (unused internal transition table of the main state
"                machine).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Reverted favor_compile_time policy to Boost 1.46 state
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      none event now is convertible from any other event
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      eUML and pseudo exit states
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed not working Flag_AND
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed rare bugs causing multiple processing of the same event
"                      in a submachine whose transition table contains this event
"                      and a base event of it.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      gcc warnings about unused variables
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Breaking change: the new internal transition table feature causes
"                a minor breaking change. In a submachine, the &amp;quot;Fsm&amp;quot; template
"                parameter for guards / actions of an internal table declared using
"                internal_transition_table now is the submachine, not the higher-level
"                state machine. Internal transitions declared using internal rows
"                in the higher-level state machine keep their behavior (the &amp;quot;Fsm&amp;quot;
"                parameter is the higher-level state machine). To sum up, the internal
"                transition &amp;quot;Fsm&amp;quot; parameter is the closest state machine
"                containing this transition.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/conversion/index.html&quot;&gt;Numeric.Conversion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added numeric_cast_traits; see '&lt;a href=&quot;http://www.boost.org/doc/libs/1_48_0/libs/numeric/conversion/doc/html/boost_numericconversion/type_requirements_and_user_defined_types_support.html#boost_numericconversion.type_requirements_and_user_defined_types_support.udts_with_numeric_cast&quot;&gt;numeric_cast_traits&lt;/a&gt;'
"                for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto/index.html&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Breaking Change:&lt;/em&gt; Reduce numbers
"                of operator overloads by using rvalue references on compilers that
"                support them. Any user code that defines additional operator overloads
"                on Proto expressions could potentially be rendered ambiguous by this
"                change. The solution is to use a grammar to disable Proto's operators
"                that are made ambiguous by any user-defined operators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Move definitions of Proto tag types into an ADL-blocking namespace.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add second template parameter to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;siwtch_&lt;/span&gt;&lt;/code&gt;
"                to control dispatching to cases.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Allow dependent domains to be specified with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_EXTENDS&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PROTO_BASIC_EXTENDS&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/698&quot;&gt;#698&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5835&quot;&gt;#5835&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5958&quot;&gt;#5958&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5736&quot;&gt;#5736&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit V2.5.1, see the '&lt;a href=&quot;http://www.boost.org/doc/libs/1_48_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_5_1.html&quot;&gt;What's
"                New&lt;/a&gt;' section for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_traits/&quot;&gt;TypeTraits&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Extension to support &lt;a href=&quot;http://www.boost.org/libs/type_traits/doc/html/boost_typetraits/category/value_traits/operators.html&quot;&gt;operator
"                detection&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved support for the C++11 standard - breaking change to equality
"                and emplace.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use Boost.Move to implement move semantics.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the &lt;a href=&quot;http://www.boost.org/doc/html/unordered/changes.html#unordered.changes.boost_1_48_0___major_update&quot;&gt;change
"                log&lt;/a&gt; for full details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/index.html&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_48_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                LLVM Clang 2.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.5.1, 4.5.2, 4.6
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel 11.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel 11.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1, 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 8.0, 9.0, 10.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.2.1, 32 and 64 bit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC, C++0x mode: 4.4.2, 4.6.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang from subversion, with libc++ and GNU libstdc++
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                LLVM Clang 2.8 x
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.4, 4.5.2, 4.5.4, 4.6.1, 4.6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.3.4, 4.4.3, 4.4.4, 4.5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                pgCC: 11.2 x
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 10.1, 11.1, 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                PathScale: 4.0.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual Age 10.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang from subversion, with libc++ and GNU libstdc++.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel 11.1.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1, 4.4.4.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.4.4.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 8.0, 9.0, 10.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ with STLport: 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++, Windows Mobile 5, with STLport: 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.0, 4.4.7, 4.5.2, 4.5.4, 4.6.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode, mingw: 4.5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw 64-bit: 4.7.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          AIX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                IBM XL C/C++ Enterprise Edition, V11.1.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.2.1, 32 and 64 bit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Solaris:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Sun 5.10
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_48_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
"      and Vladimir Prus managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"&lt;/x&gt;</description></item>
-last_modified
@Tue, 15 Nov 2011 15:47:30 +0000
-quickbook
"feed/history/boost_1_48_0.qbk
)
(feed/history/boost_1_49_0.qbk
-item
"<item><title>Version 1.49.0</title><link>http://www.boost.org/users/history/version_1_49_0.html</link><guid>http://www.boost.org/users/history/version_1_49_0.html</guid><pubDate>Fri, 24 Feb 2012 16:20:32 -0500</pubDate><description>
"
"
"
"  &lt;div id=&quot;version_1_49_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/heap/index.html&quot;&gt;Heap&lt;/a&gt;:&lt;/span&gt;
"  Priority queue data
"          structures, from Tim Blechmann.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_49_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a new class template &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_waitable_timer&lt;/span&gt;&lt;/code&gt;
"                based around the C++11 clock type requirements. It may be used with
"                the clocks from the C++11 &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chrono&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                library facility or, if those are not available, Boost.Chrono. The
"                typedefs &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;high_resolution_timer&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;steady_timer&lt;/span&gt;&lt;/code&gt; and
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;system_timer&lt;/span&gt;&lt;/code&gt; may
"                be used to create timer objects for the standard clock types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;object_handle&lt;/span&gt;&lt;/code&gt;
"                class for performing waits on Windows kernel objects. Thanks go to
"                Boris Schaeling for contributing substantially to the development
"                of this feature.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Linux, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; can return EAGAIN in certain circumstances.
"                Remapped this to another error so that it doesn't look like a non-blocking
"                operation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6048&quot;&gt;#6048&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a compile error on NetBSD (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6098&quot;&gt;#6098&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed deadlock on Mac OS X (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6275&quot;&gt;#6275&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a regression in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;buffered_write_stream&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6310&quot;&gt;#6310&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a non-paged pool &amp;quot;leak&amp;quot; on Windows when an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt; is repeatedly run without
"                anything to do (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6321&quot;&gt;#6321&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reverted earlier change to allow some speculative operations to be
"                performed without holding the lock, as it introduced a race condition
"                in some multithreaded scenarios.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a bug where the second buffer in an array of two buffers may
"                be ignored if the first buffer is empty.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug Fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6092&quot;&gt;#6092&lt;/a&gt;
"                      Input from non integral durations makes the compiler fail.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6093&quot;&gt;#6093&lt;/a&gt;
"                      [1/3]second fails as valid duration input.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6113&quot;&gt;#6113&lt;/a&gt;
"                      duplicate symbol when BOOST_CHRONO_HEADER_ONLY is defined.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6243&quot;&gt;#6243&lt;/a&gt;
"                      Sandia-pgi-11.9: more than one instance of overloaded function
"                      &amp;quot;min&amp;quot; matches.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6257&quot;&gt;#6257&lt;/a&gt;
"                      process_cpu_clock::now() on linux gives time_points 1/1000
"                      times.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6499&quot;&gt;#6499&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6336&quot;&gt;#6336&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6335&quot;&gt;#6335&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6287&quot;&gt;#6287&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6205&quot;&gt;#6205&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4383&quot;&gt;#4383&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
"                support for both C++11 and C++03 compilers through an internal &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_traits&lt;/span&gt;&lt;/code&gt; clone.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/filesystem/&quot;&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3714&quot;&gt;#3714&lt;/a&gt;,
"                Added test cases and fixes for class path errors when assignment
"                or append used self or portion of self as source.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4889&quot;&gt;#4889&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6320&quot;&gt;#6320&lt;/a&gt;,
"                Locale codecvt_facet not thread safe on Windows. Move Windows, Mac
"                OS X, locale and codecvt facet back to namespace scope. POSIX except
"                OS X uses local static initialization (IE lazy) to ensure exceptions
"                are catchable if environmental variables are misconfigured and to
"                avoid use of locale(&amp;quot;&amp;quot;) if not actually used.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5652&quot;&gt;#5652&lt;/a&gt;,
"                recursive_directory_iterator fails on cyclic symbolic links. Thanks
"                to Daniel Aarno for the patch.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5653&quot;&gt;#5653&lt;/a&gt;,
"                recursive_directory_iterator(error_code) can still throw filesystem_error.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5900&quot;&gt;#5900&lt;/a&gt;,
"                directory_iterator access violation on Windows if error is thrown.
"                Thanks to Andreas Eckleder for the patch.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5900&quot;&gt;#5900&lt;/a&gt;
"                comment 2, a bug in director_iterator construction with error_code
"                argument that caused increment to be called without the ec argument
"                being passed.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5989&quot;&gt;#5989&lt;/a&gt;
"                by cleaning up test suite path_test.cpp code even though the ticket
"                itself was not a defect, and clarifying docs; iteration over a path
"                yields generic format.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5592&quot;&gt;#5592&lt;/a&gt;,
"                Change Windows codecvt processing from CP_THREAD_ACP to CP_ACP.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Operations function fixes for PGI compiler, thanks to Noel Belcourt.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Relax permissions test to reflect reality, particularly on the Sandia
"                test platforms.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/foreach/&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix for &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6131&quot;&gt;#6131&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Distance for multi-geometries ignored specified distance strategy.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      In difference for polygon/multi_polygon (reported 2011/10/24
"                      on GGL-list).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Raise exception for calculation of distances of multi-geometrie(s)
"                      where one of them is empty
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Multi DSV did not correctly use settings.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Self-intersections could sometimes be missed (introduced in
"                      1.48).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Convex hull crashed on empty range (e.g. empty multi point).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved tickets
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6028&quot;&gt;#6028&lt;/a&gt;
"                      Documentation: closure.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6178&quot;&gt;#6178&lt;/a&gt;
"                      Missing headerfile.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6021&quot;&gt;#6021&lt;/a&gt;
"                      convex hull of multipoint.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Additional functionality
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Support for line/polygon intersections and differences
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Support for convert of segment/box of different point types
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Support for append for multi point
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Scalar functions (distance, area, length, perimeter) now throw
"                      an empty_input_exception on empty input
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Documentation
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Updated support status
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Internal changes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Updates in specializations/not_implemented for distance/convert/assign/area
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Move of wkt/dsv to io folder, making domains redundant
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Strategy concepts assigned to zero to avoid clang warnings
"                      (patched by Vishnu)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5881&quot;&gt;#5881&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6033&quot;&gt;#6033&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6061&quot;&gt;#6061&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6137&quot;&gt;#6137&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6246&quot;&gt;#6246&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6239&quot;&gt;#6239&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6293&quot;&gt;#6293&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6306&quot;&gt;#6306&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6313&quot;&gt;#6313&lt;/a&gt;
"                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6371&quot;&gt;#6371&lt;/a&gt;,
"                plus others not in Trac.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Re-enabled LEDA graph support (thanks to Jens Muller for the patch).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added documentation for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;edge_predecessor_recorder&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/icl/&quot;&gt;Icl&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed tickets &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6095&quot;&gt;#6095&lt;/a&gt;
"                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6210&quot;&gt;#6210&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added move semantics for constructors, assignment operators and binary
"                operators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6531&quot;&gt;#6531&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6412&quot;&gt;#6412&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6398&quot;&gt;#6398&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6340&quot;&gt;#6340&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6319&quot;&gt;#6319&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6287&quot;&gt;#6287&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6265&quot;&gt;#6265&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6233&quot;&gt;#6233&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6147&quot;&gt;#6147&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6134&quot;&gt;#6134&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6058&quot;&gt;#6058&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6054&quot;&gt;#6054&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5772&quot;&gt;#5772&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5738&quot;&gt;#5738&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5622&quot;&gt;#5622&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5552&quot;&gt;#5552&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5518&quot;&gt;#5518&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4655&quot;&gt;#4655&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4452&quot;&gt;#4452&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4383&quot;&gt;#4383&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4297&quot;&gt;#4297&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed timed functions in mutex implementations to fulfill POSIX requirements:
"                &lt;em&gt;Under no circumstance shall the function fail with a timeout
"                if the mutex can be locked immediately. The validity of the abs_timeout
"                parameter need not be checked if the mutex can be locked immediately.&lt;/em&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6347&quot;&gt;#6347&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6223&quot;&gt;#6223&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6153&quot;&gt;#6153&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs and warnings: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6127&quot;&gt;#6127&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6132&quot;&gt;#6132&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6159&quot;&gt;#6159&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6182&quot;&gt;#6182&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6186&quot;&gt;#6186&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6193&quot;&gt;#6193&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6264&quot;&gt;#6264&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6290&quot;&gt;#6290&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6298&quot;&gt;#6298&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6400&quot;&gt;#6400&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Better performance and less memory usage for boost::container::basic_string
"                conversions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/locale/&quot;&gt;Locale&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed incorrect use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;MultiByteToWideChar&lt;/span&gt;&lt;/code&gt;
"                in detection of invalid input sequences.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6417&quot;&gt;#6417&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6183&quot;&gt;#6183&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6185&quot;&gt;#6185&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6395&quot;&gt;#6395&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6396&quot;&gt;#6396&lt;/a&gt;,
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_tree&quot;&gt;PropertyTree&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixes for bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4840&quot;&gt;#4840&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5259&quot;&gt;#5259&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5281&quot;&gt;#5281&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5944&quot;&gt;#5944&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5757&quot;&gt;#5757&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5710&quot;&gt;#5710&lt;/a&gt;,
"                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5307&quot;&gt;#5307&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Force some functions to be inline, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5735&quot;&gt;#5735&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add user documentation for per-domain &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;as_expr&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;as_child&lt;/span&gt;&lt;/code&gt;; other
"                doc tweaks.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix some buggy and over-complicated example programs.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add some missing copyright notices.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/spirit/index.html&quot;&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit V2.5.2, see the '&lt;a href=&quot;http://www.boost.org/doc/libs/1_49_0/libs/spirit/doc/html/spirit/what_s_new/spirit_2_5_2.html&quot;&gt;What's
"                New&lt;/a&gt;' section for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed Bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/2309&quot;&gt;#2309&lt;/a&gt;
"                      Lack of g++ symbol visibility support in Boost.Thread.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/2639&quot;&gt;#2639&lt;/a&gt;
"                      documentation should be extended(defer_lock, try_to_lock, ...).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3639&quot;&gt;#3639&lt;/a&gt;
"                      Boost.Thread doesn't build with Sun-5.9 on Linux.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3762&quot;&gt;#3762&lt;/a&gt;
"                      Thread can't be compiled with winscw (Codewarrior by Nokia).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3885&quot;&gt;#3885&lt;/a&gt;
"                      document about mix usage of boost.thread and native thread
"                      api.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/3975&quot;&gt;#3975&lt;/a&gt;
"                      Incorrect precondition for promise::set_wait_callback().
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4048&quot;&gt;#4048&lt;/a&gt;
"                      thread::id formatting involves locale
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4315&quot;&gt;#4315&lt;/a&gt;
"                      gcc 4.4 Warning: inline ... declared as dllimport: attribute
"                      ignored.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4480&quot;&gt;#4480&lt;/a&gt;
"                      OpenVMS patches for compiler issues workarounds.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4819&quot;&gt;#4819&lt;/a&gt;
"                      boost.thread's documentation misprints.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5040&quot;&gt;#5040&lt;/a&gt;
"                      future.hpp in boost::thread does not compile with /clr.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5423&quot;&gt;#5423&lt;/a&gt;
"                      thread issues with C++0x.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5502&quot;&gt;#5502&lt;/a&gt;
"                      race condition between shared_mutex timed_lock and lock_shared.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5594&quot;&gt;#5594&lt;/a&gt;
"                      boost::shared_mutex not fully compatible with Windows CE.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5617&quot;&gt;#5617&lt;/a&gt;
"                      boost::thread::id copy ctor.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5739&quot;&gt;#5739&lt;/a&gt;
"                      set-but-not-used warnings with gcc-4.6.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5826&quot;&gt;#5826&lt;/a&gt;
"                      threads.cpp: resource leak on threads creation failure.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5839&quot;&gt;#5839&lt;/a&gt;
"                      thread.cpp: ThreadProxy leaks on exceptions.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5859&quot;&gt;#5859&lt;/a&gt;
"                      win32 shared_mutex constructor leaks on exceptions.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6100&quot;&gt;#6100&lt;/a&gt;
"                      Compute hardware_concurrency() using get_nprocs() on GLIBC
"                      systems.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6141&quot;&gt;#6141&lt;/a&gt;
"                      Compilation error when boost.thread and boost.move are used
"                      together.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6168&quot;&gt;#6168&lt;/a&gt;
"                      recursive_mutex is using wrong config symbol (possible typo).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6175&quot;&gt;#6175&lt;/a&gt;
"                      Compile error with SunStudio.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6200&quot;&gt;#6200&lt;/a&gt;
"                      patch to have condition_variable and mutex error better handle
"                      EINTR.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6207&quot;&gt;#6207&lt;/a&gt;
"                      shared_lock swap compiler error on clang 3.0 c++11.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6208&quot;&gt;#6208&lt;/a&gt;
"                      try_lock_wrapper swap compiler error on clang 3.0 c++11.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On compilers without rvalue references, the containers are no longer
"                movable by default, as move emulation was causing some odd quirks
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6167&quot;&gt;#6167&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6311&quot;&gt;#6311&lt;/a&gt;).
"                Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_UNORDERED_USE_MOVE&lt;/span&gt;&lt;/code&gt;
"                to make them movable - Boost.Move is still used for elements regardless.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix sequence point warning (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6370&quot;&gt;#6370&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Better support for C++11 compilers using older standard libraries.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/uuid/&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6258&quot;&gt;#6258&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5325&quot;&gt;#5325&lt;/a&gt;
"                (sha1 implementation handles messages as long as the specification)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                progress on &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6118&quot;&gt;#6118&lt;/a&gt;
"                (there are fewer warnings)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Eliminate some unused variable warnings on gcc.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_49_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 11.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                LLVM Clang 2.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.6, 4.2.4, 4.3.4, 4.4.3, 4.5.2, 4.6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 11.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1, 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 8.0, 9.0, 10.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1, 4.7.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.2.1, 32 and 64 bit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC, C++0x mode: 4.4.2, 4.6.1, 4.6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.2, 4.6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.3.4, 4.4.4, 4.5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                pgCC: 11.9
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 10.1, 11.1, 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                PathScale: 4.0.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual Age 10.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang from subversion
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel 11.1, 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 8.0, 9.0, 10.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ with STLport: 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++, Windows Mobile 5, with STLport: 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.0, 4.5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode, mingw: 4.5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw 64-bit: 4.4.7, 4.5.4, 4.6.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          AIX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                IBM XL C/C++ Enterprise Edition, V11.1.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.2.1, 32 and 64 bit
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Solaris:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Sun 5.10
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_49_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James
"      and Vladimir Prus managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Fri, 24 Feb 2012 21:20:32 +0000
-quickbook
"feed/history/boost_1_49_0.qbk
)
(feed/history/boost_1_50_0.qbk
-item
"<item><title>Version 1.50.0</title><link>https://www.boost.org/users/history/version_1_50_0.html</link><guid>http://www.boost.org/users/history/version_1_50_0.html</guid><pubDate>Thu, 28 Jun 2012 08:48:57 -0400</pubDate><description>
"
"
"
"  &lt;div id="version_1_50_0.patches"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Patches&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="https://www.boost.org/patches/1_50_0/001-unordered.patch"&gt;Boost.Unordered patch&lt;/a&gt;
"          - Fixes a bug when compiled using a C++11 compiler, but with a C++03 allocator.
"          When inserting elements, &lt;code&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
"          detects that the node can be constructed using an accidental implicit conversion
"          which causes several problems.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://cppcms.com/files/locale/boost_locale_utf.patch"&gt;Locale
"          Patch&lt;/a&gt; - Fixes a bug which causes &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;locale&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;utf&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;utf_traits&lt;/span&gt;&lt;/code&gt;
"          to accept some invalid UTF-8 sequences, which is a possible security flaw.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_50_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/algorithm/"&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
"  A collection of
"          useful generic algorithms, from Marshall Clow. This includes several different
"          searching algorithms, as well as most of the new algorithms from the C++11
"          standard library
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/functional/overloaded_function/"&gt;Functional/OverloadedFunction&lt;/a&gt;:&lt;/span&gt;
"  Overload
"          different functions into a single function object, from Lorenzo Caminiti.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/local_function/"&gt;LocalFunction&lt;/a&gt;:&lt;/span&gt;
"  Program
"          functions locally, within other functions, directly within the scope where
"          they are needed, from Lorenzo Caminiti.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/utility/identity_type/"&gt;Utility/IdentityType&lt;/a&gt;:&lt;/span&gt;
"  Wrap
"          types within round parenthesis so they can always be passed as macro parameters,
"          from Lorenzo Caminiti.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_50_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/accumulators/"&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                add missing &lt;code&gt;&lt;span class="preprocessor"&gt;#include&lt;/span&gt;
"                &lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;throw_exception&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, fixes &lt;a href="https://svn.boost.org/trac/boost/ticket/6702"&gt;#6702&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                work around for msvc which allows ctor templates to be copy ctors,
"                fixes &lt;a href="https://svn.boost.org/trac/boost/ticket/6535"&gt;#6535&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                shorten filenames to meet boost guidelines, fixes &lt;a href="https://svn.boost.org/trac/boost/ticket/6196"&gt;#6196&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/array/"&gt;Array&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                add support for Boost.Hash &lt;a href="https://svn.boost.org/trac/boost/ticket/6791"&gt;#6791&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the &lt;code&gt;&lt;span class="identifier"&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;
"                backend to do lazy registration for &lt;code&gt;&lt;span class="identifier"&gt;EPOLLOUT&lt;/span&gt;&lt;/code&gt;
"                events.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed the &lt;code&gt;&lt;span class="identifier"&gt;epoll_reactor&lt;/span&gt;&lt;/code&gt;
"                handling of out-of-band data, which was broken by an incomplete fix
"                in the last release.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed Asio's SSL wrapper to respect OpenSSL's &lt;code&gt;&lt;span class="identifier"&gt;OPENSSL_NO_ENGINE&lt;/span&gt;&lt;/code&gt;
"                feature test &lt;code&gt;&lt;span class="preprocessor"&gt;#define&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/6432"&gt;#6432&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;windows&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;object_handle&lt;/span&gt;&lt;/code&gt; so that it works
"                with Windows compilers that support C++11 move semantics (such as
"                &lt;tt&gt;g++&lt;/tt&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved the performance of strand rescheduling.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for &lt;tt&gt;g++&lt;/tt&gt; 4.7 when compiling in C++11
"                mode (&lt;a href="https://svn.boost.org/trac/boost/ticket/6620"&gt;#6620&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a problem where &lt;code&gt;&lt;span class="identifier"&gt;signal_set&lt;/span&gt;&lt;/code&gt;
"                handlers were not being delivered when the &lt;code&gt;&lt;span class="identifier"&gt;io_service&lt;/span&gt;&lt;/code&gt;
"                was constructed with a &lt;code&gt;&lt;span class="identifier"&gt;concurrency_hint&lt;/span&gt;&lt;/code&gt;
"                of 1 (&lt;a href="https://svn.boost.org/trac/boost/ticket/6657"&gt;#6657&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/bimap/"&gt;Bimap&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove spurious dependency on Boost.Serialization, fixes &lt;a href="https://svn.boost.org/trac/boost/ticket/3868"&gt;#3868&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solve unused constructor parameter warning, fixes &lt;a href="https://svn.boost.org/trac/boost/ticket/5749"&gt;#5749&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add key_type and mapped_type (leaving data_type for backward compatibility)
"                typedefs to map views, fixes &lt;a href="https://svn.boost.org/trac/boost/ticket/6031"&gt;#6031&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/chrono/"&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed Bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6361"&gt;#6361&lt;/a&gt;
"                      integer overflow in boost::chrono::process_real_cpu_clock::now()
"                      under Windows 32bits.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6628"&gt;#6628&lt;/a&gt;
"                      compiler warning in process_cpu_clocks.hpp.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6666"&gt;#6666&lt;/a&gt;
"                      thread_clock.hpp needs pthread.h.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/concept_check/"&gt;Concept Check&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6738"&gt;#6738&lt;/a&gt;
"                      Shadowed variable warning.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove Filesystem Version 2 from the distribution. Version 3 is now
"                the only distributed version. Those still using V2 are urged to migrate
"                to V3 as soon as possible.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add constexpr value_type preferred_separator to class path.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/5118"&gt;#5118&lt;/a&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;replace_extension&lt;/span&gt;&lt;/code&gt;
"                doesn't work as specified in documentation. The documentation, implementation,
"                and test cases have all had fixes applied. The documentation had
"                failed to mention that any existing extension is removed. The behavior
"                for simple cases has been reverted to the Version 2 behavior, but
"                with corrections so that complex replacements now work. Two test
"                cases from &lt;a href="https://svn.boost.org/trac/boost/ticket/5118"&gt;#5118&lt;/a&gt;
"                have been added.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/3737"&gt;#3737&lt;/a&gt;,
"                Boost.Filesystem does not compile on Windows Mobile. On Windows,
"                &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;sys&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;stat&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;h&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; is no longer included.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/4065"&gt;#4065&lt;/a&gt;,
"                Boost Filesystem lexicographic path comparison inconsistent. This
"                required multiple source code bug fixes and code cleanup, correcting
"                problems not related to lexicographical issues.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add class path member function compare for consistency with std::string.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Tighten &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FILESYSTEM_DYN_LINK&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FILESYSTEM_STATIC_LINK&lt;/span&gt;&lt;/code&gt;
"                logic in &lt;code&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;config&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                so that one or the other is always defined, and both being defined
"                is a &lt;code&gt;&lt;span class="preprocessor"&gt;#error&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/6690"&gt;#6690&lt;/a&gt;
"                and &lt;a href="https://svn.boost.org/trac/boost/ticket/6737"&gt;#6737&lt;/a&gt;,
"                resolving static linking related problems with VC++ 8 through 11.
"                Note that this fix may reintroduce codecvt thread safety problems
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/4889"&gt;#4889&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/6320"&gt;#6320&lt;/a&gt;,
"                for these compilers if static linking is used.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;+=&lt;/span&gt;&lt;/code&gt;
"                and concat functions to tack on things like suffixes or numbers.
"                Suggested by Ed Smith-Rowland and others.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/6809"&gt;#6809&lt;/a&gt;,
"                Implementation of &lt;code&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;rename&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; method for MS Windows is wrong,
"                by adding &lt;code&gt;&lt;span class="identifier"&gt;MOVEFILE_COPY_ALLOWED&lt;/span&gt;&lt;/code&gt;
"                to deal with renames across drives, volumes, file systems. Fix has
"                no effect on non-Windows systems.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/6819"&gt;#6819&lt;/a&gt;,
"                A path operand with a source that was a one character array was treated
"                as empty, even if it wasn't empty. Such arrays can occur in unions
"                or in code using C variable length array idioms.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/6932"&gt;#6932&lt;/a&gt;,
"                create_directories throws exception even if &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
"                is specified.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/foreach/"&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Revert fix for &lt;a href="https://svn.boost.org/trac/boost/ticket/6131"&gt;#6131&lt;/a&gt;
"                which caused more harm than good.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed Bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      the return type of comparable projected point strategy for
"                      integer points was wrong (integer), fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      several robustness issues in intersection of segments and polygons,
"                      fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      invalid intersection output is filtered out
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      disjoint for multi_polygon's might incorrectly return true,
"                      fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved tickets
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6585"&gt;6585&lt;/a&gt;
"                      patch for alternative syntax multipoint, applied
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6584"&gt;6584&lt;/a&gt;
"                      patch for bug in distance, applied
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/5730"&gt;5730&lt;/a&gt;
"                      same issue as 6584, fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6166"&gt;6166&lt;/a&gt;
"                      patch for missing transformation, applied
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6696"&gt;6696&lt;/a&gt;
"                      invalid intersection output, was (by chance) already fixed
"                      in Trunk before reported
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Additional functionality
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      added algorithm "touches" (OGC SF compliant) for
"                      *polygon/*polygon
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/graph/"&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed Bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/4622"&gt;#4622&lt;/a&gt;
"                      clear_vertex on a vertex with a self-loop can cause a segmentation
"                      fault.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6033"&gt;#6033&lt;/a&gt;
"                      Lowpoint map calculated by biconnected_components(...) is sometimes
"                      wrong.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6242"&gt;#6242&lt;/a&gt;
"                      isomorphism doesn't reset mapping.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6435"&gt;#6435&lt;/a&gt;
"                      cube_topology documentation should say 3D, not 2D.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6520"&gt;#6520&lt;/a&gt;
"                      small_world_1_70_6_0p02.png is broken in documentation of graph_parallel.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6564"&gt;#6564&lt;/a&gt;
"                      BGL copy constructor for subgraph does not track local vertices/edges.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6573"&gt;#6573&lt;/a&gt;
"                      BGL: boost::isomorphism routine fails with large graphs.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6583"&gt;#6583&lt;/a&gt;
"                      Dijkstra Visitor Concept docs probably show wrong type for
"                      variable.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6647"&gt;#6647&lt;/a&gt;
"                      BGL strong_components do not compile on MSVC 8.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6656"&gt;#6656&lt;/a&gt;
"                      Dependent type in subgraph used without typename.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6707"&gt;#6707&lt;/a&gt;
"                      is_straight_line_drawing.hpp missing #include &amp;lt;map&amp;gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6708"&gt;#6708&lt;/a&gt;
"                      Make bool boost::intersects() in is_straight_line_drawing.hpp
"                      inline?
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6739"&gt;#6739&lt;/a&gt;
"                      Cannot use write_graphviz_dp with a constified subgraph.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6858"&gt;#6858&lt;/a&gt;
"                      boost::get() calls wrongly resolved by g++.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6892"&gt;#6892&lt;/a&gt;
"                      VertexIndexGraph concept not required for bron_kerbosch_all_cliques().
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Other bugs and warnings not in Trac.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/functional/hash/"&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;array&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;tuple&lt;/span&gt;&lt;/code&gt;
"                when available (&lt;a href="https://svn.boost.org/trac/boost/ticket/6806"&gt;#6806&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Avoid gcc's &lt;code&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;Wfloat&lt;/span&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;equal&lt;/span&gt;&lt;/code&gt;
"                warning (&lt;a href="https://svn.boost.org/trac/boost/ticket/6771"&gt;#6771&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add deprecation warning to the long deprecated &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;functional&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;detail&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;container_fwd&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/iostreams/"&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved gzip support (&lt;a href="https://svn.boost.org/trac/boost/ticket/5908"&gt;#5908&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update tests for latest Boost.Filesystem and Boost.Test.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix some documentation errors (&lt;a href="https://svn.boost.org/trac/boost/ticket/6530"&gt;#6530&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/6650"&gt;#6650&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/iterator/"&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/5127"&gt;#5127&lt;/a&gt;
"                      Incorrect result_of usage in transform_iterator
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/5697"&gt;#5697&lt;/a&gt;
"                      iterator_facade::operator-&amp;gt; is broken for proxy references
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_array/"&gt;MultiArray&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Concepts bug fix and Workaround for Visual Studio 2010 (&lt;a href="https://svn.boost.org/trac/boost/ticket/4874"&gt;#4874&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix to assert.cpp test case (&lt;a href="https://svn.boost.org/trac/boost/changeset/78498"&gt;Patch&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/conversion/lexical_cast.htm"&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;bad_lexical_cast&lt;/span&gt;&lt;/code&gt; exception is now
"                globaly visible and can be catched even if code is compiled with
"                -fvisibility=hidden
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Now it is possible to compile and use library with disabled exceptions
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/5800"&gt;#5800&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Better performance, less memory usage and bugfixes for &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator_range&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;character_type&lt;/span&gt;&lt;span class="special"&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                conversions
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs and warnings: &lt;a href="https://svn.boost.org/trac/boost/ticket/6645"&gt;#6645&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/6562"&gt;#6562&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/6812"&gt;#6812&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/6852"&gt;#6852&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/6717"&gt;#6717&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/6670"&gt;#6770&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/6504"&gt;#6504&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/locale/"&gt;Locale&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed build issues with STLPort library
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.System is now required depenency
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href="https://svn.boost.org/trac/boost/ticket/6635"&gt;#6635&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/6833"&gt;#6833&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Promoted math constants to be 1st class citizens, including convenient
"                access to the most widely used built-in float, double, long double
"                via three namespaces.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the Owen's T function and Skew Normal distribution written
"                by Benjamin Sobotta.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Hankel functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Corrected issue &lt;a href="https://svn.boost.org/trac/boost/ticket/6627"&gt;#6627
"                nonfinite_num_put formatting of 0.0 is incorrect&lt;/a&gt; based on
"                a patch submitted by K R Walker.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed constant initialization mechanism so that it is thread safe
"                even for user-defined types, also so that user defined types get
"                the full precision of the constant, even when &lt;code&gt;&lt;span class="keyword"&gt;long&lt;/span&gt;
"                &lt;span class="keyword"&gt;double&lt;/span&gt;&lt;/code&gt; does not. So for example
"                128-bit rational approximations will work with UDT's and do the right
"                thing, even though &lt;code&gt;&lt;span class="keyword"&gt;long&lt;/span&gt; &lt;span class="keyword"&gt;double&lt;/span&gt;&lt;/code&gt; may be only 64 or 80 bits.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issue in &lt;code&gt;&lt;span class="identifier"&gt;bessel_jy&lt;/span&gt;&lt;/code&gt;
"                which causes Y[sub 8.5](4[pi]) to yield a NaN.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/msm/"&gt;MSM&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                eUML : better syntax for front-ends defined with eUML as transition
"                table only. Caution: Breaking Change!&lt;a href="https://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table"&gt;https://www.boost.org/doc/libs/1_50_0/libs/msm/doc/HTML/ch03s04.html#eUML-composite-table&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfix: graph building was only working if initial_state defined
"                as a sequence.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfix: flags defined for a Terminate or Interrupt state do not break
"                the blocking function of these states any more.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfix: multiple deferred events from several regions were not working
"                in every case.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfix: visitor was passed by value to submachines.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfix: no_transition was not called for submachines who send an
"                event to themselves.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed warnings with gcc.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/program_options/"&gt;Program Options&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved error reporting (&lt;a href="https://svn.boost.org/trac/boost/changeset/77827"&gt;Patch
"                from Leo Goodstadt&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for customizing name of option's value in help messages (&lt;a href="https://svn.boost.org/trac/boost/ticket/4781"&gt;#4781&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation with gcc 4.7 (&lt;a href="https://svn.boost.org/trac/boost/ticket/6790"&gt;#6790&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/property_map/"&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed Bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6539"&gt;#6539&lt;/a&gt;
"                      the return type of get() is not documented correctly.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6721"&gt;#6721&lt;/a&gt;
"                      property_map_traits documentation does not mention reference.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/proto/"&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use &lt;code&gt;&lt;span class="keyword"&gt;decltype&lt;/span&gt;&lt;/code&gt;-based
"                &lt;code&gt;&lt;span class="identifier"&gt;result_of&lt;/span&gt;&lt;/code&gt; if and
"                only if the compiler implements N3276.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                For C++11, force parameter to &lt;code&gt;&lt;span class="identifier"&gt;mpl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;eval_if_c&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;mpl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;if_c&lt;/span&gt;&lt;/code&gt; to be &lt;code&gt;&lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disable &lt;tt&gt;'__forceinline not inlined'&lt;/tt&gt; warning on
"                msvc.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/ratio/"&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed Bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6498"&gt;#6498&lt;/a&gt;
"                      boost::ratio won't compile with default settings.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/scope_exit/"&gt;ScopeExit&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New Features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Use variadic macros to specify captures as commas-separated
"                      lists (but kept preprocessor sequence syntax for backward compatibility).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Capture the object in scope using &lt;code&gt;&lt;span class="identifier"&gt;this_&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Support empty captures using &lt;code&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Implicit lambda-like captures using &lt;code&gt;&lt;span class="identifier"&gt;BOOST_SCOPE_EXIT_ALL&lt;/span&gt;&lt;/code&gt;
"                      on compilers that support C++11 lambda functions.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/thread/"&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New Features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/1850"&gt;#1850&lt;/a&gt;
"                      Request for unlock_guard to compliment lock_guard.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/2637"&gt;#2637&lt;/a&gt;
"                      Request for shared_mutex duration timed_lock and timed_lock_shared.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/2741"&gt;#2741&lt;/a&gt;
"                      Proposal to manage portable and non portable thread attributes.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/3567"&gt;#3567&lt;/a&gt;
"                      Request for shared_lock_guard.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6194"&gt;#6194&lt;/a&gt;
"                      Adapt to Boost.Move.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6195"&gt;#6195&lt;/a&gt;
"                      c++11 compliance: Provide the standard time related interface
"                      using Boost.Chrono.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6217"&gt;#6217&lt;/a&gt;
"                      Enhance Boost.Thread shared mutex interface following Howard
"                      Hinnant proposal.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6224"&gt;#6224&lt;/a&gt;
"                      c++11 compliance: Add the use of standard noexcept on compilers
"                      supporting them.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6226"&gt;#6226&lt;/a&gt;
"                      c++11 compliance: Add explicit bool conversion from locks.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6228"&gt;#6228&lt;/a&gt;
"                      Add promise constructor with allocator following the standard
"                      c++11.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6230"&gt;#6230&lt;/a&gt;
"                      c++11 compliance: Follows the exception reporting mechanism
"                      as defined in the c++11.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6266"&gt;#6266&lt;/a&gt;
"                      Breaking change: thread destructor should call terminate if
"                      joinable.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6269"&gt;#6269&lt;/a&gt;
"                      Breaking change: thread move assignment should call terminate
"                      if joinable.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6272"&gt;#6272&lt;/a&gt;
"                      c++11 compliance: Add thread::id hash specialization.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6273"&gt;#6273&lt;/a&gt;
"                      c++11 compliance: Add cv_status enum class and use it on the
"                      conditions wait functions.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6231"&gt;#6231&lt;/a&gt;
"                      Add BasicLockable requirements in the documentation to follow
"                      c++11.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6342"&gt;#6342&lt;/a&gt;
"                      c++11 compliance: Adapt the one_flag to the c++11 interface.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6671"&gt;#6671&lt;/a&gt;
"                      upgrade_lock: missing mutex and release functions.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6672"&gt;#6672&lt;/a&gt;
"                      upgrade_lock:: missing constructors from time related types.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6675"&gt;#6675&lt;/a&gt;
"                      upgrade_lock:: missing non-member swap.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added missing packaged_task::result_type and packaged_task::
"                      constructor with allocator.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added packaged_task::reset()
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed Bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/2575"&gt;#2575&lt;/a&gt;
"                      Bug- Boost 1.36.0 on Itanium platform.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/4345"&gt;#4345&lt;/a&gt;
"                      thread::id and joining problem with cascade of threads.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/4921"&gt;#4921&lt;/a&gt;
"                      BOOST_THREAD_USE_DLL and BOOST_THREAD_USE_LIB are crucial and
"                      need to be documented.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/5013"&gt;#5013&lt;/a&gt;
"                      documentation: boost::thread: pthreas_exit causes terminate().
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/5173"&gt;#5173&lt;/a&gt;
"                      boost::this_thread::get_id is very slow.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/5351"&gt;#5351&lt;/a&gt;
"                      interrupt a future get boost::unknown_exception.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/5516"&gt;#5516&lt;/a&gt;
"                      Upgrade lock is not acquired when previous upgrade lock releases
"                      if another read lock is present.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/5990"&gt;#5990&lt;/a&gt;
"                      shared_future&amp;lt;T&amp;gt;::get() has wrong return type.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6174"&gt;#6174&lt;/a&gt;
"                      packaged_task doesn't correctly handle moving results.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6222"&gt;#6222&lt;/a&gt;
"                      Compile error with SunStudio: unique_future move.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6673"&gt;#6673&lt;/a&gt;
"                      shared_lock: move assign doesn't works with c++11.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6674"&gt;#6674&lt;/a&gt;
"                      shared_mutex: try_lock_upgrade_until doesn't works.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix issue signaled on the ML with task_object(task_object const&amp;amp;)
"                      in presence of task_object(task_object&amp;amp;&amp;amp;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/unordered/"&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix equality for &lt;code&gt;&lt;span class="identifier"&gt;unordered_multiset&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;unordered_multimap&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implement &lt;code&gt;&lt;span class="identifier"&gt;reserve&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/6857"&gt;#6857&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Avoid gcc's &lt;code&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;Wfloat&lt;/span&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;equal&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;Wshadow&lt;/span&gt;&lt;/code&gt;
"                warnings (&lt;a href="https://svn.boost.org/trac/boost/ticket/6190"&gt;#6190&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/6771"&gt;#6771&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix namespace issue with bcp (&lt;a href="https://svn.boost.org/trac/boost/ticket/6905"&gt;#6905&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix Sun workarounds (&lt;a href="https://svn.boost.org/trac/boost/ticket/6784"&gt;#6784&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Some internal changes to bucket allocation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the &lt;a href="https://www.boost.org/doc/html/unordered/changes.html#unordered.changes.boost_1_50_0"&gt;change
"                log&lt;/a&gt; for full details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/wave/index.html"&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Wave V2.3.2, see the &lt;a href="https://www.boost.org/libs/wave/ChangeLog"&gt;Changelog&lt;/a&gt;
"                for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/xpressive/"&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove very ugly &lt;code&gt;&lt;span class="identifier"&gt;lexical_cast&lt;/span&gt;&lt;/code&gt;
"                hack with a slightly less ugly one.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Replace MPL assert with static assert since it's problematic in C++11,
"                fixes &lt;a href="https://svn.boost.org/trac/boost/ticket/6846"&gt;#6846&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_50_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 11.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                LLVM Clang 2.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 11.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 8.0, 9.0, 10.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.1, 4.7.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.2.1, 32 and 64 bit
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC, C++0x mode: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang from subversion
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.3, 4.6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.3.4, 4.4.4, 4.5.3, 4.6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                pgCC: 11.9
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 10.1, 11.1, 12.0, 12.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual Age 10.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang from subversion
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel 11.1, 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ 8.0, 10.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ with STLport: 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++, Windows Mobile 5, with STLport: 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.0, 4.4.7, 4.5.2, 4.5.4, 4.6.4, 4.7.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x mode, mingw: 4.5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          AIX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                IBM XL C/C++ Enterprise Edition, V12.1.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC 4.2.1, 32 and 64 bit
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Solaris:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Sun 5.10
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_50_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="https://www.boost.org/users/people/beman_dawes.html"&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href="https://www.boost.org/users/people/rene_rivera.html"&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Fri, 13 Apr 2018 10:15:19 +0000
-quickbook
"feed/history/boost_1_50_0.qbk
-update_count
=1
)
(feed/history/boost_1_51_0.qbk
-item
"<item><title>Version 1.51.0</title><link>https://www.boost.org/users/history/version_1_51_0.html</link><guid>http://www.boost.org/users/history/version_1_51_0.html</guid><pubDate>Mon, 20 Aug 2012 16:00:21 -0700</pubDate><description>
"
"
"
"  &lt;div id="version_1_51_0.patches"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Patches&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://cppcms.com/files/locale/boost_locale_utf.patch"&gt;Locale
"          Patch&lt;/a&gt; - Fixes a bug which causes &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;locale&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;utf&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;utf_traits&lt;/span&gt;&lt;/code&gt;
"          to accept some invalid UTF-8 sequences, which is a possible security flaw.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_51_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"  Context switching library,
"          from Oliver Kowalke.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_51_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/algorithm/"&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;is_sorted_until&lt;/span&gt;&lt;/code&gt;
"                ; now matches the c++11 standard behavior on ranges with duplicate
"                values.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added range support for the rest of the search algorithms.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;unhex&lt;/span&gt;&lt;/code&gt; now uses Boost.Exception
"                to signal bad input.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an incompatibility between &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;tcp&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iostream&lt;/span&gt;&lt;/code&gt;
"                and C++11 (&lt;a href="https://svn.boost.org/trac/boost/ticket/7162"&gt;#7162&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Decorated GCC attribute names with underscores to prevent interaction
"                with user-defined macros (&lt;a href="https://svn.boost.org/trac/boost/ticket/6415"&gt;#6415&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added missing &lt;code&gt;&lt;span class="preprocessor"&gt;#include&lt;/span&gt;
"                &lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;cctype&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, needed for some versions of
"                MinGW.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to use &lt;tt&gt;gcc&lt;/tt&gt;'s atomic builtins on ARM CPUs,
"                when available (&lt;a href="https://svn.boost.org/trac/boost/ticket/7140"&gt;#7140&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed strand destruction to be a no-op, to allow strand objects
"                to be destroyed after their associated &lt;code&gt;&lt;span class="identifier"&gt;io_service&lt;/span&gt;&lt;/code&gt;
"                has been destroyed.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for some newer versions of glibc which provide the
"                &lt;code&gt;&lt;span class="identifier"&gt;epoll_create1&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                function but always fail with &lt;code&gt;&lt;span class="identifier"&gt;ENOSYS&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/7012"&gt;#7012&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the SSL implementation to throw an exception if SSL engine
"                initialisation fails (&lt;a href="https://svn.boost.org/trac/boost/ticket/6303"&gt;#6303&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed another regression in &lt;code&gt;&lt;span class="identifier"&gt;buffered_write_stream&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/6310"&gt;#6310&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented various minor performance improvements, primarily targeted
"                at Linux x86 and x86-64 platforms.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/config/"&gt;Config&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Deprecated a whole bunch of macros that were c++11 specific, but
"                not named to show that they were c++11 specific. Made new macros
"                with better names, and paired the old macros with the new ones. Updated
"                the documentation to list the deprecated macros.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/chrono/"&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/6918"&gt;#6918&lt;/a&gt;
"                Boost Chrono compilation failure on HP uX due to undefined pthread_getcpuclockid.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/6241"&gt;#6241&lt;/a&gt;
"                boost::chrono compilation problems without std::wstring support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/6987"&gt;#6987&lt;/a&gt;
"                Documentation &amp;amp; C++11.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/7041"&gt;#7041&lt;/a&gt;
"                time_point.hpp depends on Boost.System.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/7042"&gt;#7042&lt;/a&gt;
"                Avoiding time_point and duration dependency on time.h and CLOCK_REALTIME.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/7058"&gt;#7058&lt;/a&gt;
"                Make it work when BOOST_NO_EXCEPTIONS is defined.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/7069"&gt;#7069&lt;/a&gt;
"                Misspellings in clock_string&amp;lt;thread_clock&amp;gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/7081"&gt;#7081&lt;/a&gt;
"                WinError.h capitalization in boost/detail/win/basic_types.hpp.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                points accessed through a pointer (e.g. in a linestring) should now
"                be specialized without the pointer. In previous versions a type
"                &lt;code&gt;&lt;span class="identifier"&gt;my_point&lt;/span&gt;&lt;/code&gt; used like
"                &lt;code&gt;&lt;span class="identifier"&gt;linestring&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;my_point&lt;/span&gt;&lt;span class="special"&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                had to be specalized like: &lt;code&gt;&lt;span class="keyword"&gt;template&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="keyword"&gt;struct&lt;/span&gt;
"                &lt;span class="identifier"&gt;tag&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;my_point&lt;/span&gt;&lt;span class="special"&gt;*&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"                Now the library itself removes the pointer before calling the traits
"                class, so now it should be like: &lt;code&gt;&lt;span class="keyword"&gt;template&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt; &lt;span class="keyword"&gt;struct&lt;/span&gt;
"                &lt;span class="identifier"&gt;tag&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;my_point&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                intersection was sometimes wrong for integer points, fixed
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                documentation, order of parameters in simplify was wrong, fixed
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/7030"&gt;7030&lt;/a&gt;
"                spherical distance, fixed (by patch of Karsten Ahnert)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/graph/"&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Refactored support for internal and bundled properties in Boost.Graph-provided
"                graph types, and cleaned up named parameter functionality:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Enabled old-style (non-bundled) internal properties in &lt;code&gt;&lt;span class="identifier"&gt;compressed_sparse_row_graph&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bundled properties should work correctly for all graph types
"                      and adaptors.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugs fixed:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6993"&gt;#6993&lt;/a&gt;: Typo Bundled Properties document
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/7002"&gt;#7002&lt;/a&gt;: Problem with initialization of CSR bidirectional
"                      graph
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/7023"&gt;#7023&lt;/a&gt;: Enclose internal type graphml_reader in anonymous
"                      namespace
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Other bugs and warnings not in Trac
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/functional/hash/"&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support the standard smart pointers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;hash_value&lt;/span&gt;&lt;/code&gt; now implemented
"                using SFINAE to avoid implicit casts to built in types when calling
"                it.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated to use the new config macros.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/conversion/lexical_cast.htm"&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Better performance, less memory usage for &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;array&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;character_type&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;N&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;array&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;character_type&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;N&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; conversions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug with volatile input parameter &lt;a href="https://svn.boost.org/trac/boost/ticket/7157"&gt;#7157&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated to use the new config macros.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/msm/"&gt;MSM&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for boost::any &lt;a href="https://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s03.html#any-event"&gt;https://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s03.html#any-event&lt;/a&gt;
"                or kleene &lt;a href="https://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s04.html#kleene-event"&gt;https://www.boost.org/doc/libs/1_51_0/libs/msm/doc/HTML/ch03s04.html#kleene-event&lt;/a&gt;
"                as acceptable events
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfix: compiler error with fsm internal table and none (compound)
"                event.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfix: euml::defer_ leading to stack overflow.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/proto/"&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Proto transforms get pseudo-parameter pack expansion support for
"                unpacking expressions. See the &lt;a href="https://www.boost.org/doc/html/proto/appendices.html#boost_proto.appendices.release_notes.boost_1_51"&gt;Release
"                Notes&lt;/a&gt; for more information.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/ratio/"&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/7075"&gt;#7075&lt;/a&gt;
"                Workaround for error: the type of partial specialization template
"                parameter constant "n1" depends on another template parameter.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/regex/"&gt;Regex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated to use the new config macros.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/thread/"&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/4258"&gt;#4258&lt;/a&gt;
"                Linking with boost thread does not work on mingw/gcc 4.5.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/4885"&gt;#4885&lt;/a&gt;
"                Access violation in set_tss_data at process exit due to invalid assumption
"                about TlsAlloc.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/6931"&gt;#6931&lt;/a&gt;
"                mutex waits forwever with Intel Compiler and /debug:parallel
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/7044"&gt;#7044&lt;/a&gt;
"                boost 1.50.0 header missing.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/7052"&gt;#7052&lt;/a&gt;
"                Thread: BOOST_THREAD_PROVIDES_DEPRECATED_FEATURES_SINCE_V3_0_0 only
"                masks thread::operator==, thread::operator!= forward declarations,
"                not definitions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/7066"&gt;#7066&lt;/a&gt;
"                An attempt to fix current_thread_tls_key static initialization order.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/7074"&gt;#7074&lt;/a&gt;
"                Multiply defined symbol boost::allocator_arg.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/7078"&gt;#7078&lt;/a&gt;
"                Trivial 64-bit warning fix on Windows for thread attribute stack
"                size
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/7089"&gt;#7089&lt;/a&gt;
"                BOOST_THREAD_WAIT_BUG limits functionality without solving anything
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/unordered/"&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix construction/destruction issue when using a C++11 compiler with
"                a C++03 allocator (&lt;a href="https://svn.boost.org/trac/boost/ticket/7100"&gt;#7100&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove a &lt;code&gt;&lt;span class="keyword"&gt;try&lt;/span&gt;&lt;span class="special"&gt;..&lt;/span&gt;&lt;span class="keyword"&gt;catch&lt;/span&gt;&lt;/code&gt; to support compiling without
"                exceptions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Adjust SFINAE use to try to supprt g++ 3.4 (&lt;a href="https://svn.boost.org/trac/boost/ticket/7175"&gt;#7175&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated to use the new config macros.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/wave/"&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the &lt;a href="https://www.boost.org/libs/wave/ChangeLog"&gt;Changelog&lt;/a&gt; for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/xpressive/"&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Work around buggy wide ctype facet on cygwin and mingw.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Work around absence of __isctype on some glibc implementations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;op&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;as&lt;/span&gt;&lt;/code&gt; shouldn't assume &lt;code&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt; != &lt;code&gt;&lt;span class="keyword"&gt;char&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix assertion in &lt;code&gt;&lt;span class="identifier"&gt;cpp_regex_traits&lt;/span&gt;&lt;/code&gt;
"                on libc++, thanks to John Fletcher.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_51_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2, 4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11 mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 11.1, 12.0, 12.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                LLVM Clang 2.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11 mode: 4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 11.1, 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 8.0, 9.0, 10.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1, 32 and 64 bit
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: from subversion
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                LLVM Clang: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.4, 4.3.4, 4.4.4, 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.0, 4.7.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11 mode: 4.3.4, 4.4.4, 4.5.3, 4.6.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                pgCC: 11.9
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 10.1, 11.1, 12.0, 12.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual Age: 10.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: from subversion
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11 mode: from subversion
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 11.1, 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11 mode: 4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 8.0, 9.0, 10.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.0, 4.6.3, 4.7.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          AIX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                IBM XL C/C++ Enterprise Edition: V12.1.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1, 32 and 64 bit
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Solaris:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Sun: 5.10
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_51_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="https://www.boost.org/users/people/beman_dawes.html"&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href="https://www.boost.org/users/people/rene_rivera.html"&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Fri, 13 Apr 2018 10:15:19 +0000
-quickbook
"feed/history/boost_1_51_0.qbk
-update_count
=1
)
(feed/history/boost_1_52_0.qbk
-item
"<item><title>Version 1.52.0</title><link>http://www.boost.org/users/history/version_1_52_0.html</link><guid>http://www.boost.org/users/history/version_1_52_0.html</guid><pubDate>Mon, 5 Nov 2012 08:05:58 -0800</pubDate><description>
"
"
"
"  &lt;div id=&quot;version_1_52_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix long-standing dependency tracking bug, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7409&quot;&gt;#7409&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_SFINAE_EXPR&lt;/span&gt;&lt;/code&gt;
"                for gcc-4.4, since the support was found to be too buggy.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;New Features:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5980&quot;&gt;#5980&lt;/a&gt; Enhance chrono I/O with H. Hinnant proposal &lt;a href=&quot;http://home.roadrunner.com/~hinnant/bloomington/chrono_io.html&quot;&gt;proposal&lt;/a&gt;
"                      which has the advantage to provide I/O for system clocks using
"                      the Gregorian Calendar.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5981&quot;&gt;#5981&lt;/a&gt; Add i/o state savers for duration and time_point formatting
"                      state.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7059&quot;&gt;#7059&lt;/a&gt; Add low level i/o facilities.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Deprecated features:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The chrono i/o version included in Boost.Chrono 1.2.x has been
"                      completly refactored in version 2.0.0
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      chrono I/O: The manipulators &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_short&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_long&lt;/span&gt;&lt;/code&gt;
"                      are depreceated. You should use the parameterized form &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_fmt&lt;/span&gt;&lt;/code&gt; or the renamed
"                      manipulators &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_symbol&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_prefix&lt;/span&gt;&lt;/code&gt;
"                      instead.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      chrono I/O: The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_punct&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; facet is deprecated.
"                      You should use the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__get_duration_style&lt;/span&gt;&lt;/code&gt;
"                      free function to get the informations and use the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__duration_units&lt;/span&gt;&lt;/code&gt; facet for
"                      localization purposes.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      When &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_CHRONO_VERSION&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/code&gt;
"                      the preceding deprecated functions are not available.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7381&quot;&gt;#7381&lt;/a&gt; C++11 compliance: unresolved symbol when assigning
"                      a constexpr duration to a non-const local variable.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7479&quot;&gt;#7479&lt;/a&gt;
"                      Compile fails with compilers supporting constexpr fails if
"                      the standard library doesn't provides the constexpr interface
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Would not fix:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6871&quot;&gt;#6871&lt;/a&gt; chrono_io.hpp: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;lt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;...)&lt;/span&gt;&lt;/code&gt;
"                      modifies the state of os. The neww io interface provided in
"                      version 2 solves this issue. You should move to the new version.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;stable_vector&lt;/span&gt;&lt;/code&gt;'s
"                template code bloat and type safety.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed typedefs and reordered functions of sequence containers to
"                improve doxygen documentation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6615&quot;&gt;#6615&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7139&quot;&gt;#7139&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7215&quot;&gt;#7215&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7232&quot;&gt;#7232&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7269&quot;&gt;#7269&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7439&quot;&gt;#7439&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented LWG Issue #149 (range insertion now returns an iterator)
"                &amp;amp; cleaned up insertion code in most containers
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Corrected aliasing errors.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/date_time/&quot;&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Document &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_DATE_TIME_NO_LIB&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6077&quot;&gt;#6077&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;nth_as_str&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7022&quot;&gt;#7022&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7234&quot;&gt;#7234&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/foreach/&quot;&gt;Foreach&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix alignment warning on gcc.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/function/&quot;&gt;Function&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Move constructors and move assignment operators added (only for compilers
"                with C++11 rvalue references support) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7330&quot;&gt;#7330&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6950&quot;&gt;#6950&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7226&quot;&gt;#7226&lt;/a&gt;,&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7308&quot;&gt;#7308&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7327&quot;&gt;#7327&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7338&quot;&gt;#7338&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7341&quot;&gt;#7341&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7378&quot;&gt;#7378&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7380&quot;&gt;#7380&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7398&quot;&gt;#7398&lt;/a&gt;, and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7428&quot;&gt;#7428&lt;/a&gt;, plus others
"                not in Trac.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Restore &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt;&lt;/code&gt; support,
"                which was accidentally removed in the last version (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7437&quot;&gt;#7437&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New floating point hasher - will hash the binary representation on
"                more platforms, which should be faster.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shrink_by&lt;/span&gt;&lt;/code&gt; and
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;advise&lt;/span&gt;&lt;/code&gt; functions
"                in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;mapped_region&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;ABI breaking:&lt;/em&gt; Reimplemented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;message_queue&lt;/span&gt;&lt;/code&gt; with a circular buffer
"                index (the old behavior used an ordered array, leading to excessive
"                copies). This should greatly increase performance but breaks ABI.
"                Old behaviour/ABI can be used undefining macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_MSG_QUEUE_CIRCULAR_INDEX&lt;/span&gt;&lt;/code&gt;
"                in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;interprocess&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;workaround&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;message_queue&lt;/span&gt;&lt;/code&gt;
"                insertion time avoiding priority search for common cases (both array
"                and circular buffer configurations).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;interproces_sharable_mutex&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;interproces_condition_any&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;offset_ptr&lt;/span&gt;&lt;/code&gt;
"                performance.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added integer overflow checks.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iterator/&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5825&quot;&gt;#5825&lt;/a&gt; constructing function_input_iterator without consuming
"                      an item
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7194&quot;&gt;#7194&lt;/a&gt; Error in documentation of make_function_input_iterator
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Breaking changes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Due to the fix for &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5825&quot;&gt;#5825&lt;/a&gt;, a function_input_iterator will
"                      no longer make unnecessary invokations to the wrapped nullary
"                      function. For example, constructing an end iterator will now
"                      not trigger an invokation; and dereferencing-and-incrementing
"                      an iterator N times will trigger N invokations, not N+1 as
"                      before. User code that relied on the old behavior will need
"                      to be adjusted.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Restored compilation on MSVC-2003 (was broken in 1.51.0) &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7255&quot;&gt;#7255&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;CharType&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;
"                &lt;span class=&quot;identifier&quot;&gt;chars&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;
"                &lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; function overload. &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6663&quot;&gt;#6663&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7228&quot;&gt;#7228&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Airy functions and Jacobi Elliptic functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In several distributions (particulary the Students T) corrected moments
"                for small degrees of freedom &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7177&quot;&gt;#7177&lt;/a&gt;
"                (reported by Thomas Mang).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Corrected failure to detect bad parameters in many distributions
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6934&quot;&gt;#6934&lt;/a&gt;
"                (reported by Florian Schoppmann) by adding a function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;check_out_of_range&lt;/span&gt;&lt;/code&gt; to test many
"                possible bad parameters. This test revealed several distributions
"                where the checks for bad parameters were ineffective, and these have
"                been rectified.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issue in Hankel functions that causes incorrect values to be
"                returned for &lt;em&gt;x &amp;lt; 0&lt;/em&gt; and &lt;em&gt;ν&lt;/em&gt;
"                odd, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7135&quot;&gt;#7135&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In non-central T permitted infinite degrees of freedom &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7259&quot;&gt;#7259&lt;/a&gt;
"                implemented using the normal distribution (requested by Thomas Mang).
"                Also much enhanced accuracy for large degrees of freedom and/or large
"                non-centrality parameters by switching to use the Students t distribution
"                (or Normal distribution for infinite degrees of freedom) centered
"                at delta, when delta / (4 * v) &amp;lt; epsilon for the floating-point
"                type in use. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7259&quot;&gt;#7259&lt;/a&gt;.
"                It was also found that the incomplete beta was suffering from serious
"                cancellation errors when degrees of freedom was very large. (That
"                has now been fixed in our code, but any code based on Didonato and
"                Morris's original papers (probably every implementation out there
"                actually) will have the same issue).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed minor issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6517&quot;&gt;#6517&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6362&quot;&gt;#6362&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7053&quot;&gt;#7053&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2693&quot;&gt;#2693&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6937&quot;&gt;#6937&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7099&quot;&gt;#7099&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/phoenix/&quot;&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Make Phoenix work with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;-based
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Included Voronoi diagram extensions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Introduced new Segment concept.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation issues.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/proto/&quot;&gt;Proto&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The data parameter to primitive transforms can now optionally have
"                slots indexed by key.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Primitive transforms can now operatate on temporary expressions that
"                are non-const qualified.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add callable function object types for the free functions in &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and also for some Boost.Range
"                functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.MPL algorithms work on Proto expression nodes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;proto&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pass_through&lt;/span&gt;&lt;/code&gt; primitive transform
"                now accepts an optional &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Domain&lt;/span&gt;&lt;/code&gt;
"                template parameter for specifying the target domain of the resulting
"                expression.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Features:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Replace the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;short_name&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;long_name&lt;/span&gt;&lt;/code&gt;
"                      functions by symbol and prefix functions respectively.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Deprecated:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;short_name&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;long_name&lt;/span&gt;&lt;/code&gt;
"                      are deprecated. Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;symbol&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ratio_string&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;prefix&lt;/span&gt;&lt;/code&gt;
"                      respectively. These functions be removed in 1.55.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7478&quot;&gt;#7478&lt;/a&gt;
"                      Compiles fails with compilers supporting char16_t and char32_t
"                      fails if the library doesn't provides std::u16string and std::u32string.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/utility.htm#result_of&quot;&gt;Result_of&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Switch &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt; on compilers for which
"                support is deemed &amp;quot;good enough&amp;quot;. That means if the compiler
"                implements &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf&quot;&gt;n3276&lt;/a&gt;.
"                (For now, that only includes very recent versions of clang.)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; is now &amp;quot;sfinae-friendly&amp;quot;
"                when it uses &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;.
"                See &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2012/n3436.html&quot;&gt;n3436&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/index.html&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Deprecated Features&lt;/em&gt;: Deprecated
"                features since boost 1.50 available only until boost 1.55. These
"                deprecated features will be provided by default up to boost 1.52.
"                If you don't want to include the deprecated features you could define
"                BOOST_THREAD_DONT_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0. Since
"                1.53 these features will not be included any more by default. Since
"                this version, if you want to include the deprecated features yet
"                you could define BOOST_THREAD_PROVIDE_DEPRECATED_FEATURES_SINCE_V3_0_0.
"                These deprecated features will be only available until boost 1.55,
"                that is you have yet 1 year to move to the new features.
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Time related functions don't using the Boost.Chrono library,
"                      use the chrono overloads instead.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Breaking changes when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THREAD_VERSION&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/code&gt;
"                (Default value since Boost 1.53): There are some new features which
"                share the same interface but with different behavior. These breaking
"                features are provided by default when BOOST_THREAD_VERSION is 3,
"                but the user can however choose the version 2 behavior by defining
"                the corresponding macro. As for the deprecated features, these broken
"                features will be only available until boost 1.55.
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6229&quot;&gt;#6229&lt;/a&gt; C++11 compliance &amp;amp; Breaking change: Rename the
"                      unique_future to future following the c++11.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6266&quot;&gt;#6266&lt;/a&gt; C++11 compliance &amp;amp; Breaking change: thread destructor
"                      should call terminate if joinable.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6269&quot;&gt;#6269&lt;/a&gt; C++11 compliance &amp;amp; Breaking change: thread move
"                      assignment should call terminate if joinable.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;New Features:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4710&quot;&gt;#4710&lt;/a&gt; C++11 compliance: Missing &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7283&quot;&gt;#7283&lt;/a&gt; C++11 compliance: Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;notify_all_at_thread_exit&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7345&quot;&gt;#7345&lt;/a&gt; C++11 compliance: Add &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
"                      to recursive mutex &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;try_lock&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2361&quot;&gt;#2361&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread_specific_ptr&lt;/span&gt;&lt;/code&gt;:
"                      document nature of the key, complexity and rationale.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2797&quot;&gt;#2797&lt;/a&gt; Two problems with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;thread_specific_ptr&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5274&quot;&gt;#5274&lt;/a&gt; failed to compile &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                      with stlport 5.1.5 under msvc8.1, because of undefined class.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5431&quot;&gt;#5431&lt;/a&gt; compile error in Windows CE 6.0(interlocked).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5752&quot;&gt;#5752&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;call_once&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; is unreliable on some platforms.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7045&quot;&gt;#7045&lt;/a&gt; Thread library does not automatically compile date_time.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7173&quot;&gt;#7173&lt;/a&gt; wrong function name &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;interrupt_point&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7200&quot;&gt;#7200&lt;/a&gt; Unable to build boost.thread modularized.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7220&quot;&gt;#7220&lt;/a&gt; gcc 4.6.2 warns about inline+dllimport functions.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7238&quot;&gt;#7238&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;this_thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;sleep_for&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; does not respond to interrupt().
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7245&quot;&gt;#7245&lt;/a&gt; Minor typos on documentation related to version 3.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7272&quot;&gt;#7272&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;win32&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread_primitives&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;:
"                      (Unneccessary) Warning.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7284&quot;&gt;#7284&lt;/a&gt; Clarify that there is no access priority between lock
"                      and shared_lock on shared mutex.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7329&quot;&gt;#7329&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                      does not compile on HPUX.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7336&quot;&gt;#7336&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_THREAD_DONT_USE_SYSTEM&lt;/span&gt;&lt;/code&gt;
"                      doesn't work.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7349&quot;&gt;#7349&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;packaged_task&lt;/span&gt;&lt;/code&gt;
"                      holds reference to temporary.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7350&quot;&gt;#7350&lt;/a&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;allocator_destructor&lt;/span&gt;&lt;/code&gt;
"                      does not destroy object
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/ublas/&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                improved performance of inplace_solve (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4024&quot;&gt;#4024&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                fixed coordinate_matrix for use with gcc 4.7 (issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7363&quot;&gt;#7363&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In assignment, reuse existing nodes where possible.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bugs when erasing ranges (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7471&quot;&gt;#7471&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Some work on the implementation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/uuid/&quot;&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6118&quot;&gt;#6118&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6788&quot;&gt;#6788&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7375&quot;&gt;#7375&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7128&quot;&gt;#7128&lt;/a&gt; - fixed bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                for messages longer than 536,870,912 bytes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Make &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;sub_match&lt;/span&gt;&lt;/code&gt; work
"                with Boost.Range. Fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7237&quot;&gt;#7237&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_52_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.4, 4.3.4, 4.4.3, 4.5.3, 4.6.2, 4.7.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11 mode: 4.3.4, 4.4.3, 4.5.3, 4.6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 11.1, 12.0, 12.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                LLVM Clang: 2.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11 mode: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 11.1, 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 8.0, 9.0, 10.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1, 32 and 64 bit
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Cray: 8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: from subversion
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                LLVM Clang:
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.4, 4.3.4, 4.4.4, 4.5.3, 4.6.2, 4.6.3, 4.7.0, 4.7.1, 4.7.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11 mode: 4.3.4, 4.4.4, 4.5.3, 4.6.3, 4.7.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                pgCC: 11.9
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 10.1, 11.1, 12.0, 12.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual Age: 10.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: from subversion
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11 mode: from subversion
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 11.1, 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11 mode: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 8.0, 9.0, 10.0, 11.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ with STLport: 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++, Windows Mobile 5, with STLport: 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          AIX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                IBM XL C/C++ Enterprise Edition: V12.1.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1, 64 bit
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Solaris:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Sun: 5.10
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_52_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Mon, 05 Nov 2012 16:05:58 +0000
-quickbook
"feed/history/boost_1_52_0.qbk
)
(feed/history/boost_1_53_0.qbk
-item
"<item><title>Version 1.53.0</title><link>http://www.boost.org/users/history/version_1_53_0.html</link><guid>http://www.boost.org/users/history/version_1_53_0.html</guid><pubDate>Mon, 4 Feb 2013 10:29:19 -0800</pubDate><description>
"
"
"
"  &lt;div id=&quot;version_1_53_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"  C++11-style &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;atomic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;,
"          from Helge Bahmann, maintained by Tim Blechmann.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
"  Coroutine library,
"          from Oliver Kowalke.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lockfree/&quot;&gt;Lockfree&lt;/a&gt;:&lt;/span&gt;
"  Lockfree data structures,
"          from Tim Blechmann.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"  Extended
"          precision arithmetic types for floating point, integer and rational arithmetic
"          from John Maddock and Christopher Kormanyos.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/odeint/&quot;&gt;Odeint&lt;/a&gt;:&lt;/span&gt;
"  Solving ordinary
"          differential equations, from Karsten Ahnert and Mario Mulansky.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_53_0.news&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;News&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      This release contains a fix for ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7743&quot;&gt;#7743&lt;/a&gt;, in Boost.Locale. For more
"      details, see the &lt;a href=&quot;http://www.boost.org/users/news/boost_locale_security_notice.html&quot;&gt;security
"      notice&lt;/a&gt;.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_53_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed non-ASCII char in comment (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7781&quot;&gt;#7781&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated the Knuth-Morris-Pratt docs (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7656&quot;&gt;#7656&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/array/&quot;&gt;Array&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for boost::get and std::get (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7652&quot;&gt;#7652&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some 64-to-32-bit conversion warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7459&quot;&gt;#7459&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some small errors in documentation and comments (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7761&quot;&gt;#7761&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an error in the example embedded in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_socket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_option&lt;/span&gt;&lt;/code&gt;'s
"                documentation (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7562&quot;&gt;#7562&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to use &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;&lt;/code&gt;
"                rather than &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&lt;/code&gt; for
"                SSL_CTX options, to match OpenSSL (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7209&quot;&gt;#7209&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_snwprintf&lt;/span&gt;&lt;/code&gt;
"                to address a compile error due to the changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swprintf&lt;/span&gt;&lt;/code&gt;
"                signature in recent versions of MinGW (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7373&quot;&gt;#7373&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a deadlock that can occur on Windows when shutting down a pool
"                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt; threads
"                due to running out of work (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7552&quot;&gt;#7552&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
"                qualifier for error categories (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7797&quot;&gt;#7797&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed UNIX domain socket example to treat errors from &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;accept&lt;/span&gt;&lt;/code&gt; as non-fatal (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7488&quot;&gt;#7488&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a small block recycling optimisation to improve default memory
"                allocation behaviour.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/bimap/&quot;&gt;Bimap&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Refactor map_view_iterator to improve error messages.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed replace_(left/right/key/data) bug when using relations with
"                info.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed vector_of and list_of views &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; bug.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed vector_of views &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[](&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; functions return value.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Deprecated:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The chrono i/o version included in Boost.Chrono 1.2.x has been
"                      completly refactored in version 2.0.0
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      chrono I/O: The manipulators __duration_short, __duration_long
"                      are depreceated. You should use the parameterized form __duration_fmt
"                      or the renamed manipulators __duration_symbol and __duration_prefix
"                      instead.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      chrono I/O: The __duration_punct&amp;lt;&amp;gt; facet is depreceated.
"                      You should use the __get_duration_style free function to get
"                      the informations and use the __duration_units facet for localization
"                      purposes.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      When BOOST_CHRONO_VERSION==2 the preceding deprecated functions
"                      are not available.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7546&quot;&gt;#7546&lt;/a&gt;
"                      time_point&amp;lt;system_clock&amp;gt; output version 2 fails to compile
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7547&quot;&gt;#7547&lt;/a&gt;
"                      time_point&amp;lt;system_clock&amp;gt; input version 2 fails to compile
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7868&quot;&gt;#7868&lt;/a&gt;
"                      chrono_io parses time incorrectly (1.53 and 1.52)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7650&quot;&gt;#7650&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;'s
"                insertion performance.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed again experimental multiallocation interface for better performance
"                (still experimental).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added no exception support for those willing to disable exceptions
"                in their compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed GCC -Wshadow warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for iOS on ARM and MacOS X on x86 (32bit) added.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for SEH Overwrite Protection on Win32.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Bugfixes&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      avoid generating output polygons with interior rings below
"                      minimum size (e.g. one or two points)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;disjoint&lt;/span&gt;&lt;/code&gt; for degenerate segments
"                      (patched by Karsten Ahnert)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      problem in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;difference&lt;/span&gt;&lt;/code&gt;
"                      for missing handling tangency, reported by H2
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;for_each&lt;/span&gt;&lt;/code&gt;
"                      for use with Lambda's
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;comparable_distance&lt;/span&gt;&lt;/code&gt;
"                      point-linestring (and -range, -polygon)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Additional functionality&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      combinations for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;disjoint&lt;/span&gt;&lt;/code&gt;:
"                      point/ring, point/polygon, point/multi_polygon
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      combinations for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intersects&lt;/span&gt;&lt;/code&gt;:
"                      point/ring, point/polygon, point/multi_polygon
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Internal changes&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      updates in specializations/not_implemented for various algorithms
"                      (as in an earlier version, these changes are still going on;
"                      they take care for simplified structs, better error reporting,
"                      and automatized documentation)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      fixes in unit tests
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/gil/&quot;&gt;GIL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed self-assignment warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4919&quot;&gt;#4919&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph/&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed the following bugs from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3468&quot;&gt;#3468&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4386&quot;&gt;#4386&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5269&quot;&gt;#5269&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7428&quot;&gt;#7428&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7457&quot;&gt;#7457&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7467&quot;&gt;#7467&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7600&quot;&gt;#7600&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7648&quot;&gt;#7648&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7684&quot;&gt;#7684&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7728&quot;&gt;#7728&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7741&quot;&gt;#7741&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7766&quot;&gt;#7766&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7771&quot;&gt;#7771&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7773&quot;&gt;#7773&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7780&quot;&gt;#7780&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7787&quot;&gt;#7787&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7801&quot;&gt;#7801&lt;/a&gt;
"    plus other bugs not in Trac.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for reading from GraphML files containing multiple
"                graphs.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added versions of A* search specifically for trees, removing the
"                need for a color map when it is acceptable to visit the same vertex
"                multiple times.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added VF2 subgraph isomorphism algorithm (contributed by Flavio De
"                Lorenzi).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;int128_type&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;uint128_type&lt;/span&gt;&lt;/code&gt; where available.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On platforms that are known to have standard floating point functions,
"                don't use the automatic detection (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7221&quot;&gt;#7221&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7470&quot;&gt;#7470&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed GCC -Wshadow warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Experimental multiple allocation interface improved and changed again.
"                Still unstable.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;ABI breaking&lt;/em&gt;: changed node pool
"                allocators internals for improved efficiency.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7795&quot;&gt;#7795&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7174&quot;&gt;#7174&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7529&quot;&gt;#7529&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7815&quot;&gt;#7815&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed GCC -Wshadow warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added missing &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt;&lt;/code&gt;
"                keyword in several intrusive container constructors.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Small documentation fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New character type detection algorithm for user defined types &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6786&quot;&gt;#6786&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Documentation updates (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7582&quot;&gt;#7582&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7831&quot;&gt;#7831&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs with std::array &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7799&quot;&gt;#7799&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation with -ftrapv and numeric to numeric conversions
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7814&quot;&gt;#7814&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/locale/&quot;&gt;Locale&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Security related bug fix, some invalid UTF-8 sequences where accepted
"                as valid &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7743&quot;&gt;#7743&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Invalid Windows codepage names used &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7386&quot;&gt;#7386&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed missing documentation, caused by a error in Doxygen formatting
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7734&quot;&gt;#7734&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed missing std:: in some places &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7701&quot;&gt;#7701&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spelling, grammar, typos fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7368&quot;&gt;#7368&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7762&quot;&gt;#7762&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issues &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7325&quot;&gt;#7325&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7415&quot;&gt;#7415&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7416&quot;&gt;#7416&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7183&quot;&gt;#7183&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7649&quot;&gt;#7649&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7694&quot;&gt;#7694&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4445&quot;&gt;#4445&lt;/a&gt;
"                and &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7492&quot;&gt;#7492&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed mistake in calculating pooled standard deviation in two-sample
"                students t example &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7402&quot;&gt;#7402&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improve complex acos/asin/atan, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7290&quot;&gt;#7290&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7291&quot;&gt;#7291&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improve accuracy in some corner cases of cyl_bessel_j and gamma_p/gamma_q
"                thanks to suggestions from Rocco Romeo.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improve accuracy in Bessel J and Y with integer orders thanks to
"                suggestions from Rocco Romeo.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/minmax/&quot;&gt;MinMax&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a misuse of the comma operator (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7752&quot;&gt;#7752&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated the docs to fix broken link (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7751&quot;&gt;#7751&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Better header segregation (bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6524&quot;&gt;#6524&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Small documentation fixes
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Replaced deprecated BOOST_NO_XXXX with newer BOOST_NO_CXX11_XXX macros.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7830&quot;&gt;#7830&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7832&quot;&gt;#7832&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6366&quot;&gt;#6366&lt;/a&gt; Bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;contains&lt;/span&gt;&lt;/code&gt;
"                      for polygon_90 type.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7678&quot;&gt;#7678&lt;/a&gt; multiple definitions of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;
"                      &lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;polygon&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;belongs&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(...)&lt;/span&gt;&lt;/code&gt;
"                      by multiple &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#include&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Internal changes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      refactored point/segment/interval data/concept/traits.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      added unit tests for point and interval data/concept/traits.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      simplified &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                      to operate only in 2D.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      removed point_3d data/concept/traits.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/random/&quot;&gt;Random&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Now compiles with exceptions disabled (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5399&quot;&gt;#5399&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/range/&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Bug fixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5603&quot;&gt;#5603&lt;/a&gt; the &amp;quot;range/any_range.hpp&amp;quot; header is not
"                      self-sufficient
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6103&quot;&gt;#6103&lt;/a&gt; boost::range_detail vs. boost::range::range_detail
"                      compiler error
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Documentation fixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5160&quot;&gt;#5160&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5314&quot;&gt;#5314&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5440&quot;&gt;#5440&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5775&quot;&gt;#5775&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6212&quot;&gt;#6212&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7585&quot;&gt;#7585&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7843&quot;&gt;#7843&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7916&quot;&gt;#7916&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7926&quot;&gt;#7926&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/ratio/&quot;&gt;Ratio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7616&quot;&gt;#7616&lt;/a&gt;
"                      br_mul::nan - warning C4293: '&amp;lt;&amp;lt;' : shift count negative
"                      or too big, undefined behavior`.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
"   Fixed Issues: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7744&quot;&gt;#7744&lt;/a&gt;,
"          &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7644&quot;&gt;#7644&lt;/a&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/&quot;&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;New Features:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Glen Fernandes provided implementations of make_shared and
"                      allocate_shared for arrays. They achieve a single allocation
"                      for an array that can be initialized with constructor arguments
"                      or initializer lists as well as overloads for default initialization
"                      and no value initialization. See the '&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/make_shared_array.html&quot;&gt;make_shared
"                      and allocate_shared for arrays&lt;/a&gt;' page for more information.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;
"                      can now be used to hold a pointer to a dynamically allocated
"                      array. This is accomplished by using an array type (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt;
"                      or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;)
"                      as the template parameter.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Smart pointers now use &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;explicit&lt;/span&gt;
"                      &lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt;
"                      on C++11 compilers. This can break code that passes a smart
"                      pointer to a function taking a &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt;,
"                      or that returns a smart pointer from a function with a &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt; return type. Please use
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;!=&lt;/span&gt;
"                      &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span class=&quot;special&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;p&lt;/span&gt;&lt;/code&gt; in such cases.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/string&quot;&gt;StringAlgo&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a bug where it wouldn't find overlapping patterns (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7784&quot;&gt;#7784&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disambiguated some calls to insert (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7346&quot;&gt;#7346&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Deprecated features:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Deprecated features since boost 1.53 will be available only
"                      until boost 1.58.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      C++11 compliance: packaged_task&amp;lt;R&amp;gt; is deprecated, use
"                      instead packaged_task&amp;lt;R()&amp;gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7537&quot;&gt;#7537&lt;/a&gt;
"                      deprecate Mutex::scoped_lock and scoped_try_lock and boost::condition
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;New Features:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6270&quot;&gt;#6270&lt;/a&gt;
"                      C++11 compliance: Add thread constructor from movable callable
"                      and movable arguments
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7279&quot;&gt;#7279&lt;/a&gt;
"                      C++11 compliance: Add noexcept in system related functions
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7280&quot;&gt;#7280&lt;/a&gt;
"                      C++11 compliance: Add promise::...at_thread_exit functions
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7281&quot;&gt;#7281&lt;/a&gt;
"                      C++11 compliance: Add ArgTypes to packaged_task template.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7282&quot;&gt;#7282&lt;/a&gt;
"                      C++11 compliance: Add packaged_task::make_ready_at_thread_exit
"                      function
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7412&quot;&gt;#7412&lt;/a&gt;
"                      C++11 compliance: Add async from movable callable and movable
"                      arguments
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7413&quot;&gt;#7413&lt;/a&gt;
"                      C++11 compliance: Add async when the launch policy is deferred.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7414&quot;&gt;#7414&lt;/a&gt;
"                      C++11 compliance: future::get post-condition should be valid()==false.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7422&quot;&gt;#7422&lt;/a&gt;
"                      Provide a condition variable with zero-overhead performance
"                      penality.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7444&quot;&gt;#7444&lt;/a&gt;
"                      Async: Add make_future/make_shared_future.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7540&quot;&gt;#7540&lt;/a&gt;
"                      Threads: Add a helper class that join a thread on destruction.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7541&quot;&gt;#7541&lt;/a&gt;
"                      Threads: Add a thread wrapper class that joins on destruction.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7575&quot;&gt;#7575&lt;/a&gt;
"                      C++11 compliance: A future created by async should &amp;quot;join&amp;quot;
"                      in the destructor.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7587&quot;&gt;#7587&lt;/a&gt;
"                      Synchro: Add strict_lock and nested_strict_lock.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7588&quot;&gt;#7588&lt;/a&gt;
"                      Synchro: Split the locks.hpp in several files to limit dependencies.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7590&quot;&gt;#7590&lt;/a&gt;
"                      Synchro: Add lockable concept checkers based on Boost.ConceptCheck.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7591&quot;&gt;#7591&lt;/a&gt;
"                      Add lockable traits that can be used with enable_if.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7592&quot;&gt;#7592&lt;/a&gt;
"                      Synchro: Add a null_mutex that is a no-op and that is a model
"                      of UpgardeLockable.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7593&quot;&gt;#7593&lt;/a&gt;
"                      Synchro: Add a externally_locked class.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7590&quot;&gt;#7594&lt;/a&gt;
"                      Threads: Allow to disable thread interruptions.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7464&quot;&gt;#7464&lt;/a&gt;
"                      BOOST_TEST(n_alive == 1); fails due to race condition in a
"                      regression test tool.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7657&quot;&gt;#7657&lt;/a&gt;
"                      Serious performance and memory consumption hit if condition_variable
"                      methods condition notify_one or notify_all is used repeatedly.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7665&quot;&gt;#7665&lt;/a&gt;
"                      this_thread::sleep_for no longer uses steady_clock in thread.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7668&quot;&gt;#7668&lt;/a&gt;
"                      thread_group::join_all() should check whether its threads are
"                      joinable.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7669&quot;&gt;#7669&lt;/a&gt;
"                      thread_group::join_all() should catch resource_deadlock_would_occur.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7671&quot;&gt;#7671&lt;/a&gt;
"                      Error including boost/thread.hpp header on iOS.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7672&quot;&gt;#7672&lt;/a&gt;
"                      lockable_traits.hpp syntax error: &amp;quot;defined&amp;quot; token
"                      misspelled.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7798&quot;&gt;#7798&lt;/a&gt;
"                      boost::future set_wait_callback thread safety issues.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7808&quot;&gt;#7808&lt;/a&gt;
"                      Incorrect description of effects for this_thread::sleep_for
"                      and this_thread::sleep_until.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7812&quot;&gt;#7812&lt;/a&gt;
"                      Returns: cv_status::no_timeout if the call is returning because
"                      the time period specified by rel_time has elapsed, cv_status::timeout
"                      otherwise.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7874&quot;&gt;#7874&lt;/a&gt;
"                      compile warning: thread.hpp:342: warning: type attributes are
"                      honored only at type definition.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7875&quot;&gt;#7875&lt;/a&gt;
"                      BOOST_THREAD_THROW_IF_PRECONDITION_NOT_SATISFIED should not
"                      be enabled by default.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7882&quot;&gt;#7882&lt;/a&gt;
"                      wrong exception text from condition_variable::wait(unique_lock&amp;lt;mutex&amp;gt;&amp;amp;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7890&quot;&gt;#7890&lt;/a&gt;
"                      thread::do_try_join_until() is missing a return type.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove support for the old pre-standard variadic pair constructors,
"                and equality implementation. Both have been deprecated since Boost
"                1.48.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                More internal implementation changes, including a much simpler implementation
"                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;/code&gt;, and removed
"                more deprecated config macros.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;a href=&quot;http://www.boost.org/libs/utility/doc/html/string_ref.html&quot;&gt;string_ref&lt;/a&gt;,
"                a non-owning reference to a contiguous sequence of characters.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added rvalue constructors and rvalue assignment operators (for C++11
"                compatible compilers only). Library now can be used with move-only
"                types (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7620&quot;&gt;#7620&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7718&quot;&gt;#7718&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive/&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Accomodate recent smart pointer changes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7809&quot;&gt;#7809&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_53_0.updated_tools&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/tools/build/index.html&quot;&gt;Boost Build System&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Qt5 toolset
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                improved rcc support (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7576&quot;&gt;#7576&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_53_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.1.2, 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 11.1, 12.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                LLVM Clang: 2.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                LLVM Clang, with libc++: 3.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11 mode: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 11.1, 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 9.0, 10.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1, 32 and 64 bit
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Cray: 4.6.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: from subversion
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                LLVM Clang, with libc++: 3.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.4, 4.4.4, 4.5.3, 4.6.3, 4.7.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11 mode: 4.4.4, 4.5.3, 4.6.3, 4.7.1, 4.7.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                pgCC: 11.9
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 10.1, 11.1, 12.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++11 mode: 13.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual Age:
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: from subversion
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11 mode: from subversion
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 11.1, 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11 mode: 4.4.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 10.0, 11.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ with STLport: 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++, Windows Mobile 5, with STLport: 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          AIX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                IBM XL C/C++ Enterprise Edition: V12.1.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_53_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Mon, 04 Feb 2013 18:29:19 +0000
-quickbook
"feed/history/boost_1_53_0.qbk
)
(feed/history/boost_1_54_0.qbk
-item
"<item><title>Version 1.54.0</title><link>http://www.boost.org/users/history/version_1_54_0.html</link><guid>http://www.boost.org/users/history/version_1_54_0.html</guid><pubDate>Mon, 1 Jul 2013 10:10:02 -0700</pubDate><description>
"
"
"
"  &lt;div id=&quot;version_1_54_0.patches&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Patches&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      These are patches from library authors which were found too late to be fixed
"      in the 1.54.0 release. Be careful as they have not been through the normal
"      testing process.
"    &lt;/p&gt;
"    &lt;ol&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/001-coroutine.patch&quot;&gt;Coroutine patch&lt;/a&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/002-date-time.patch&quot;&gt;Date Time patch&lt;/a&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/003-log.patch&quot;&gt;Log patch&lt;/a&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href=&quot;http://www.boost.org/patches/1_54_0/004-thread.patch&quot;&gt;Thread patch&lt;/a&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ol&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_54_0.news&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;News&lt;/span&gt;&lt;/h3&gt;
"    &lt;div id=&quot;version_1_54_0.news.supported_cpus&quot;&gt;
"      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Supported CPUs&lt;/span&gt;&lt;/h3&gt;
"      &lt;p&gt;
"        Boost no longer supports the 80386 target CPU, the minimum x86 32-bit target
"        is i486. The 80386 target was not properly supported by &lt;a href=&quot;http://www.boost.org/libs/smart_ptr/&quot;&gt;Boost.SmartPtr&lt;/a&gt;
"        and &lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Boost.Atomic&lt;/a&gt; (as well as the libraries
"        that used them internally) even before this release. Some Boost libraries
"        may have higher requirements on the minimum target CPU (like &lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Boost.Log&lt;/a&gt;
"        for example), see the respective library documentation for details.
"      &lt;/p&gt;
"      &lt;p&gt;
"        Also by default, when building Boost for x86 32-bit targets it will compile
"        for i686 (Pentium Pro) and later CPUs. This can be changed by specifying
"        the &lt;tt&gt;instruction-set&lt;/tt&gt; property in &lt;tt&gt;b2&lt;/tt&gt;
"        or &lt;tt&gt;bjam&lt;/tt&gt; command line, for example:
"      &lt;/p&gt;
"&lt;pre&gt;b2 variant=release architecture=x86 instruction-set=i486 stage
"&lt;/pre&gt;
"      &lt;p&gt;
"        Possible values for the &lt;tt&gt;instruction-set&lt;/tt&gt; are:
"      &lt;/p&gt;
"      &lt;ul&gt;
"        &lt;li&gt;
"          &lt;div&gt;
"            Target for the host CPU: &lt;tt&gt;native&lt;/tt&gt;
"          &lt;/div&gt;
"        &lt;/li&gt;
"        &lt;li&gt;
"          &lt;div&gt;
"            Generic x86 CPUs: &lt;tt&gt;i486&lt;/tt&gt;, &lt;tt&gt;i586&lt;/tt&gt;,
"            &lt;tt&gt;i686&lt;/tt&gt;
"          &lt;/div&gt;
"        &lt;/li&gt;
"        &lt;li&gt;
"          &lt;div&gt;
"            Intel CPUs: &lt;tt&gt;pentium&lt;/tt&gt;, &lt;tt&gt;pentium-mmx&lt;/tt&gt;,
"            &lt;tt&gt;pentiumpro&lt;/tt&gt;, &lt;tt&gt;pentium2&lt;/tt&gt;, &lt;tt&gt;pentium3&lt;/tt&gt;,
"            &lt;tt&gt;pentium3m&lt;/tt&gt;, &lt;tt&gt;pentium-m&lt;/tt&gt;, &lt;tt&gt;pentium4&lt;/tt&gt;,
"            &lt;tt&gt;pentium4m&lt;/tt&gt;, &lt;tt&gt;prescott&lt;/tt&gt;, &lt;tt&gt;nocona&lt;/tt&gt;,
"            &lt;tt&gt;core2&lt;/tt&gt;, &lt;tt&gt;corei7&lt;/tt&gt;, &lt;tt&gt;corei7-avx&lt;/tt&gt;,
"            &lt;tt&gt;core-avx-i&lt;/tt&gt;, &lt;tt&gt;conroe&lt;/tt&gt;, &lt;tt&gt;conroe-xe&lt;/tt&gt;,
"            &lt;tt&gt;conroe-l&lt;/tt&gt;, &lt;tt&gt;allendale&lt;/tt&gt;, &lt;tt&gt;merom&lt;/tt&gt;,
"            &lt;tt&gt;merom-xe&lt;/tt&gt;, &lt;tt&gt;kentsfield&lt;/tt&gt;, &lt;tt&gt;kentsfield-xe&lt;/tt&gt;,
"            &lt;tt&gt;penryn&lt;/tt&gt;, &lt;tt&gt;wolfdale&lt;/tt&gt;, &lt;tt&gt;yorksfield&lt;/tt&gt;,
"            &lt;tt&gt;nehalem&lt;/tt&gt;, &lt;tt&gt;sandy-bridge&lt;/tt&gt;, &lt;tt&gt;ivy-bridge&lt;/tt&gt;,
"            &lt;tt&gt;haswell&lt;/tt&gt;, &lt;tt&gt;atom&lt;/tt&gt;
"          &lt;/div&gt;
"        &lt;/li&gt;
"        &lt;li&gt;
"          &lt;div&gt;
"            AMD CPUs: &lt;tt&gt;k6&lt;/tt&gt;, &lt;tt&gt;k6-2&lt;/tt&gt;, &lt;tt&gt;k6-3&lt;/tt&gt;,
"            &lt;tt&gt;athlon&lt;/tt&gt;, &lt;tt&gt;athlon-tbird&lt;/tt&gt;, &lt;tt&gt;athlon-4&lt;/tt&gt;,
"            &lt;tt&gt;athlon-xp&lt;/tt&gt;, &lt;tt&gt;athlon-mp&lt;/tt&gt;, &lt;tt&gt;k8&lt;/tt&gt;,
"            &lt;tt&gt;opteron&lt;/tt&gt;, &lt;tt&gt;athlon64&lt;/tt&gt;, &lt;tt&gt;athlon-fx&lt;/tt&gt;,
"            &lt;tt&gt;k8-sse3&lt;/tt&gt;, &lt;tt&gt;opteron-sse3&lt;/tt&gt;, &lt;tt&gt;athlon64-sse3&lt;/tt&gt;,
"            &lt;tt&gt;amdfam10&lt;/tt&gt;, &lt;tt&gt;barcelona&lt;/tt&gt;, &lt;tt&gt;bdver1&lt;/tt&gt;,
"            &lt;tt&gt;bdver2&lt;/tt&gt;, &lt;tt&gt;bdver3&lt;/tt&gt;, &lt;tt&gt;btver1&lt;/tt&gt;,
"            &lt;tt&gt;btver2&lt;/tt&gt;
"          &lt;/div&gt;
"        &lt;/li&gt;
"        &lt;li&gt;
"          &lt;div&gt;
"            VIA CPUs: &lt;tt&gt;c3&lt;/tt&gt;, &lt;tt&gt;c3-2&lt;/tt&gt;
"          &lt;/div&gt;
"        &lt;/li&gt;
"        &lt;li&gt;
"          &lt;div&gt;
"            IDT CPUs: &lt;tt&gt;winchip-c6&lt;/tt&gt;, &lt;tt&gt;winchip2&lt;/tt&gt;
"          &lt;/div&gt;
"        &lt;/li&gt;
"      &lt;/ul&gt;
"      &lt;p&gt;
"        Note that not all these values may be supported by a particular compiler.
"      &lt;/p&gt;
"    &lt;/div&gt;
"    &lt;div id=&quot;version_1_54_0.news.signals_deprecated&quot;&gt;
"      &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Signals deprecated&lt;/span&gt;&lt;/h3&gt;
"      &lt;p&gt;
"        Boost.Signals is no longer being actively maintained, so it has been deprecated.
"        Do not use Boost.Signals for new development (use &lt;a href=&quot;http://www.boost.org/libs/signals2/&quot;&gt;Boost.Signals2&lt;/a&gt;
"        instead). If you have existing Boost.Signals-based code, it will continue
"        to work, but consider moving to Boost.Signals2. There is &lt;a href=&quot;http://www.boost.org/doc/html/signals2/api_changes.html#signals2.porting&quot;&gt;a
"        porting guide&lt;/a&gt; in the Signals2 documentation.
"      &lt;/p&gt;
"    &lt;/div&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_54_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
"  Logging library, from Andrey
"          Semashev.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/tti/&quot;&gt;TTI&lt;/a&gt;:&lt;/span&gt;
"  Type Traits Introspection library,
"          from Edward Diener.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_erasure/&quot;&gt;Type Erasure&lt;/a&gt;:&lt;/span&gt;
"  Runtime polymorphism
"          based on concepts.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_54_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixes comment typos (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7917&quot;&gt;#7917&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Silence unused variable warnings (&lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6926&quot;&gt;#6926&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/algorithm/&quot;&gt;Algorithm&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The return types for copy_while and copy_until have been changed.
"                This is an interface change. If you were using the return values
"                from these functions, then you will have to modify your code. Instead
"                of just returning the modified &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;OutputIterator&lt;/span&gt;&lt;/code&gt;,
"                these functions now return a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;InputIterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;OutputIterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;. If this change affects your
"                code, the simplest change is to add a &lt;code&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;second&lt;/span&gt;&lt;/code&gt; to the end of the call,
"                which will get you the same behavior that you had before.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added C++14 versions of 'is_permutation', 'equal' and 'mismatch'.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added C++11 features support &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6999&quot;&gt;#6999&lt;/a&gt;:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Move assignment and move constructors.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
"                      modifiers.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new traits classes, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;handler_type&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_result&lt;/span&gt;&lt;/code&gt;,
"                that allow the customisation of the return type of an initiating
"                function.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"                function, a high-level wrapper for running stackful coroutines, based
"                on the Boost.Coroutine library. The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function enables programs to implement
"                asynchronous logic in a synchronous manner. For example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;
"                &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;my_socket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_some&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_buffer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;/code&gt; special value, which
"                provides first-class support for returning a C++11 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;/code&gt; from an asynchronous operation's
"                initiating function. For example: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;size_t&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;
"                &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;my_socket&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;async_read_some&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;my_buffer&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;);&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Promoted the stackless coroutine class and macros to be part of Asio's
"                documented interface, rather than part of the HTTP server 4 example.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a new handler hook called &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio_handler_is_continuation&lt;/span&gt;&lt;/code&gt;.
"                Asynchronous operations may represent a continuation of the asynchronous
"                control flow associated with the current executing handler. The
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio_handler_is_continuation&lt;/span&gt;&lt;/code&gt;
"                hook can be customised to return &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/code&gt;
"                if this is the case, and Asio's implementation can use this knowledge
"                to optimise scheduling of the new handler. To cover common cases,
"                Asio customises the hook for strands, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and composed asynchronous operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added four new generic protocol classes, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;datagram_protocol&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;raw_protocol&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;seq_packet_protocol&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_protocol&lt;/span&gt;&lt;/code&gt;, which implement
"                the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Protocol&lt;/span&gt;&lt;/code&gt; type
"                requirements, but allow the user to specify the address family (e.g.
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;AF_INET&lt;/span&gt;&lt;/code&gt;) and protocol
"                type (e.g. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;IPPROTO_TCP&lt;/span&gt;&lt;/code&gt;)
"                at runtime.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added C++11 move constructors that allow the conversion of a socket
"                (or acceptor) into a more generic type. For example, an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;socket&lt;/span&gt;&lt;/code&gt; can be converted into a
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_protocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;socket&lt;/span&gt;&lt;/code&gt; via move construction.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Extended the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_socket_acceptor&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; class's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_accept&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; functions to allow a new connection
"                to be accepted directly into a socket of a more generic type. For
"                example, an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tcp&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;acceptor&lt;/span&gt;&lt;/code&gt; can be used to accept
"                into a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;generic&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream_protocol&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;socket&lt;/span&gt;&lt;/code&gt; object.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Moved existing examples into a C++03-specific directory, and added
"                a new directory for C++11-specific examples. A limited subset of
"                the C++03 examples have been converted to their C++11 equivalents.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Various SSL enhancements. Thanks go to Nick Jones, on whose work
"                these changes are based.
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added support for SSL handshakes with re-use of data already
"                      read from the wire. New overloads of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; class's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;handshake&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;async_handshake&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; functions have been added.
"                      These accept a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ConstBufferSequence&lt;/span&gt;&lt;/code&gt;
"                      to be used as initial input to the ssl engine for the handshake
"                      procedure.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added support for creation of TLSv1.1 and TLSv1.2 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt; objects.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;set_verify_depth&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function to the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                      classes.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added the ability to load SSL certificate and key data from
"                      memory buffers. New functions, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;add_certificate_authority&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_certificate&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_certificate_chain&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_private_key&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_rsa_private_key&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_tmp_dh&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;, have been added to the
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt; class.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;/code&gt;
"                      to automatically disable SSL compression by default. To enable,
"                      use the new &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;clear_options&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function, as in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;my_context&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;clear_options&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ssl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;no_compression&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a potential deadlock in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;signal_set&lt;/span&gt;&lt;/code&gt;
"                implementation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an error in acceptor example in documentation &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8421&quot;&gt;#8421&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed copy-paste errors in waitable timer documentation &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8602&quot;&gt;#8602&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added assertions to satisfy some code analysis tools &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7739&quot;&gt;#7739&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a malformed &lt;code&gt;&lt;span class=&quot;preprocessor&quot;&gt;#warning&lt;/span&gt;&lt;/code&gt;
"                directive &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7939&quot;&gt;#7939&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a potential data race in the Linux &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;epoll&lt;/span&gt;&lt;/code&gt;
"                implementation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a Windows-specific bug, where certain operations might generate
"                an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt; with
"                an invalid (i.e. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;NULL&lt;/span&gt;&lt;/code&gt;)
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_category&lt;/span&gt;&lt;/code&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8613&quot;&gt;#8613&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_waitable_timer&lt;/span&gt;&lt;/code&gt;'s
"                underlying implementation so that it can handle any &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;time_point&lt;/span&gt;&lt;/code&gt; value without overflowing
"                the intermediate duration objects.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a problem with lost thread wakeups that can occur when making
"                concurrent calls to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; on the same &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
"                object &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8354&quot;&gt;#8354&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed implementation of asynchronous connect operation so that it
"                can cope with spurious readiness notifications from the reactor &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7961&quot;&gt;#7961&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8079&quot;&gt;#8079&lt;/a&gt;
"                      Chrono memory leak
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8318&quot;&gt;#8318&lt;/a&gt;
"                      BOOST_FORCEINLINE constructors of time_point and duration
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8367&quot;&gt;#8367&lt;/a&gt;
"                      chrono does not compile with clang from XCode 4.5.2 with -std=c++11
"                      -stdlib=libc++ and -arch armv7
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8370&quot;&gt;#8370&lt;/a&gt;
"                      typo in chrono reference
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8435&quot;&gt;#8435&lt;/a&gt;
"                      Can't compile Chrono on HP-UX due to no CLOCK_REALTIME macro.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8032&quot;&gt;#8032&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added experimental &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;static_vector&lt;/span&gt;&lt;/code&gt;
"                class, based on Andrew Hundt's and Adam Wulkiewicz's high-performance
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;varray&lt;/span&gt;&lt;/code&gt; class.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Speed improvements in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;vector&lt;/span&gt;&lt;/code&gt;
"                constructors/copy/move/swap, dispatching to memcpy when possible.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7227&quot;&gt;#7227&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7921&quot;&gt;#7921&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7969&quot;&gt;#7969&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8118&quot;&gt;#8118&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8294&quot;&gt;#8294&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8553&quot;&gt;#8553&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for SPARC architecture added.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for segmented stacks (stack grows on demand) added.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7805&quot;&gt;#7805&lt;/a&gt;
"                Typo
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7972&quot;&gt;#7972&lt;/a&gt;
"                GCC warnings
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7988&quot;&gt;#7988&lt;/a&gt;
"                C++11 range-for
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8023&quot;&gt;#8023&lt;/a&gt;
"                Using iterator traits
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8024&quot;&gt;#8024&lt;/a&gt;
"                Create const_iterator
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8101&quot;&gt;#8101&lt;/a&gt;
"                Postfix operator++ for iterator
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8526&quot;&gt;#8526&lt;/a&gt;
"                memory leak
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8544&quot;&gt;#8544&lt;/a&gt;
"                calling managed DLL
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Additional functionality&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      added Spatial Index, developed for Boost.Geometry by Adam Wulkiewicz.
"                      The spatial index was originally started by Federico J. Fernandez
"                      during the Google Summer of Code 2008 program, mentored by
"                      Hartmut Kaiser.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      added SVG-output, this was already in extensions for several
"                      years
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Documentation&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      small fixes of missing words
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Bugfixes&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      collinear opposite segments did sometimes (in circles) have
"                      a robustness issue, fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      fixed insertion of false intersection point (found by buffer)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      applied patch of Vladimir Petrovic for debugging traversals
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Solved tickets&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7462&quot;&gt;7462&lt;/a&gt;
"                      degenerate union result for float, fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7465&quot;&gt;7465&lt;/a&gt;
"                      wrong construtors access type in scale_transformer class, fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7802&quot;&gt;7802&lt;/a&gt;
"                      cart_intersect.hpp unused parameter warnings, fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8254&quot;&gt;8254&lt;/a&gt;
"                      faulty intersection, fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8393&quot;&gt;8393&lt;/a&gt;
"                      polygon model doesn't adhere to stated Polygon concept rules,
"                      doc updated.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8403&quot;&gt;8403&lt;/a&gt;
"                      silenced compiler warning C4127: conditional expression is
"                      constant
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8405&quot;&gt;8405&lt;/a&gt;
"                      silenced compiler warning C4189: '...' : local variable is
"                      initialized but not referenced
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Internal changes&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Made several algorithms variant-aware (append, area, clear,
"                      convert, equals, length, num_points)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/graph&quot;&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugs fixed from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6780&quot;&gt;#6780&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7016&quot;&gt;#7016&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7155&quot;&gt;#7155&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7845&quot;&gt;#7845&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7863&quot;&gt;#7863&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7877&quot;&gt;#7877&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8166&quot;&gt;#8166&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8192&quot;&gt;#8192&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8398&quot;&gt;#8398&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8411&quot;&gt;#8411&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8427&quot;&gt;#8427&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8428&quot;&gt;#8428&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8434&quot;&gt;#8434&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8490&quot;&gt;#8490&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8681&quot;&gt;#8681&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added updates to VF2 subgraph isomorphism from Jakob Lykke Andersen
"                and Flavio De Lorenzi.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added maximum adjacency search from Fernando Vilas.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added timeout support from Brammert Ottens to resource-constrained
"                shortest paths (r_c_shortest_paths) algorithm.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Various fixes to documentation and examples and removal of outdated
"                compiler workarounds.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for platform-specific flags to mapped_region (ticket
"                #8030)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7484&quot;&gt;#7484&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7598&quot;&gt;#7598&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7682&quot;&gt;#7682&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7923&quot;&gt;#7923&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7924&quot;&gt;#7924&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7928&quot;&gt;#7928&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7936&quot;&gt;#7936&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8521&quot;&gt;#8521&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8595&quot;&gt;#8595&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;ABI breaking&lt;/strong&gt;: Changed bootstamp
"                function in Windows to use EventLog service start time as system
"                bootup time. Previously used &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;LastBootupTime&lt;/span&gt;&lt;/code&gt;
"                from WMI was unstable with time synchronization and hibernation and
"                unusable in practice. If you really need to obtain pre Boost 1.54
"                behaviour define &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_BOOTSTAMP_IS_LASTBOOTUPTIME&lt;/span&gt;&lt;/code&gt;
"                from command line or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;workaround&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
"                support (bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7849&quot;&gt;#7849&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iostreams/&quot;&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;tee&lt;/span&gt;&lt;/code&gt; now works correctly
"                for std::streams (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8315&quot;&gt;#8315&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Documentation fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8385&quot;&gt;#8385&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8460&quot;&gt;#8460&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Avoid warning from Clang's &lt;code&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;Wimplicit&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;fallthrough&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8482&quot;&gt;#8482&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/conversion/lexical_cast.htm&quot;&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Converting to character pointer now triggers compile time assert
"                instead of runtime &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8334&quot;&gt;#8334&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Lexical cast is now capable of converting &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;int128_type&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;uint128_type&lt;/span&gt;&lt;/code&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7909&quot;&gt;#7909&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed internal stream buffer handling, now works with libc++ &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8267&quot;&gt;#8267&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7704&quot;&gt;#7704&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Restored getting address of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;lexical_cast&lt;/span&gt;&lt;/code&gt;
"                function that was broken in 1.53.0 &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7421&quot;&gt;#7421&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed warnings, internals and tests &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2558&quot;&gt;#2558&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7949&quot;&gt;#7949&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8162&quot;&gt;#8162&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8369&quot;&gt;#8369&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8547&quot;&gt;#8547&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Major reorganization to incorporate other Boost.Math like Integer
"                Utilities (Greatest Common Divisor and Least Common Multiple), quaternions
"                and octonions. Making new chapter headings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added many references to Boost.Multiprecision and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_dec_float_50&lt;/span&gt;&lt;/code&gt;
"                as an example of a User-defined Type (UDT).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Clang to list of supported compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed constants to use a thread-safe cache of computed values when
"                used at arbitrary precision.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added finding zeros of Bessel functions &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cyl_bessel_j_zero&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cyl_neumann_zero&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;airy_ai_zeros&lt;/span&gt;&lt;/code&gt; and
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;airy_bi_zeros&lt;/span&gt;&lt;/code&gt;(by
"                Christopher Kormanyos).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                More accuracy improvements to the Bessel J and Y functions from Rocco
"                Romeo.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed nasty cyclic dependency bug that caused some headers to not
"                compile &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7999&quot;&gt;#7999&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug in __tgamma that caused spurious overflow for arguments
"                between 142.5 and 143.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug in raise_rounding_error that caused it to return an incorrect
"                result when throwing an exception is turned off &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7905&quot;&gt;#7905&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added minimal __float128 support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug in edge-cases of poisson quantile &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8308&quot;&gt;#8308&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Adjusted heuristics used in Halley iteration to cope with inverting
"                the incomplete beta in tricky regions where the derivative is flatlining.
"                Example is computing the quantile of the Fisher F distribution for
"                probabilities smaller than machine epsilon. See ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8314&quot;&gt;#8314&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/msm/&quot;&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfix: Exit points broken for the favor_compile_time policy.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfix: copy breaks exit points of subsubmachines.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfix: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8046&quot;&gt;#8046&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7969&quot;&gt;#7969&lt;/a&gt;),
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8231&quot;&gt;#8231&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking change&lt;/strong&gt; renamed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rational_adapter&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rational_adaptor&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for &lt;a href=&quot;http://perso.ens-lyon.fr/nathalie.revol/software.html&quot;&gt;MPFI&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add logged_adaptor.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for 128-bit floats via GCC's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;__float128&lt;/span&gt;&lt;/code&gt;
"                or Intel's &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;_Quad&lt;/span&gt;&lt;/code&gt;
"                data types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for user-defined literals in cpp_int, improve &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;constexpr&lt;/span&gt;&lt;/code&gt; support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug in integer division of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
"                that results in incorrect sign of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
"                when both arguments are small enough to fit in a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;double_limb_type&lt;/span&gt;&lt;/code&gt;.
"                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8126&quot;&gt;8126&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug in subtraction of a single limb in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
"                that results in incorrect value when the result should have a 0 in
"                the last limb: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8133&quot;&gt;8133&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
"                where division of 0 by something doesn't get zero in the result:
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8160&quot;&gt;8160&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug in some transcendental functions that caused incorrect
"                return values when variables are reused, for example with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;pow&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;.
"                See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8326&quot;&gt;8326&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/polygon/&quot;&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updates and fixes to the Voronoi documentation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugs fixed from Trac: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8026&quot;&gt;#8026&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8197&quot;&gt;#8197&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8257&quot;&gt;#8257&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_map/&quot;&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;compose_property_map&lt;/span&gt;&lt;/code&gt;
"                from Guillaume Pinot.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/range/&quot;&gt;Range&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Bug fixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6944&quot;&gt;#6944&lt;/a&gt; Some Range concepts use the incorrect Iterator concept
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7407&quot;&gt;#7407&lt;/a&gt; istream_range does not compile with wcin
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7408&quot;&gt;#7408&lt;/a&gt; istream_range should not pull istream
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7731&quot;&gt;#7731&lt;/a&gt; irange doesn't end iteration properly when step_size
"                      is 3 or more
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7827&quot;&gt;#7827&lt;/a&gt; [range] cant compile r | indexed to range algorithm
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8338&quot;&gt;#8338&lt;/a&gt; Iterator range does not work with pointer to array
"                      as iterator
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8453&quot;&gt;#8453&lt;/a&gt; Incorrect configuration macro BOOST_NO_PARTIAL_TEMPLATE_SPECIALIZATION
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/signals/&quot;&gt;Signals&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                No longer actively maintained, so it is deprecated. Use &lt;a href=&quot;http://www.boost.org/libs/signals2&quot;&gt;Signals2&lt;/a&gt;
"                for new development.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;New Features:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7285&quot;&gt;#7285&lt;/a&gt;
"                      C++11 compliance: Allow to pass movable arguments for call_once.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7445&quot;&gt;#7445&lt;/a&gt;
"                      Async: Add future&amp;lt;&amp;gt;.then
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7449&quot;&gt;#7449&lt;/a&gt;
"                      Synchro: Add a synchronized value class
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4878&quot;&gt;#4878&lt;/a&gt;
"                      MinGW 4.5.0 undefined reference to bool interruptible_wait(detail::win32::handle
"                      handle_to_wait_for,detail::t imeout target_time).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/4882&quot;&gt;#4882&lt;/a&gt;
"                      Win32 shared_mutex does not handle timeouts correctly.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/5752&quot;&gt;#5752&lt;/a&gt;
"                      boost::call_once() is unreliable on some platforms
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6652&quot;&gt;#6652&lt;/a&gt;
"                      Boost.Thread shared_mutex.hpp:50:99: warning: dereferencing
"                      type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing]
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6843&quot;&gt;#6843&lt;/a&gt;
"                      [Intel C++] Compile Errors with '#include &amp;lt;atomic&amp;gt;'
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6966&quot;&gt;#6966&lt;/a&gt;
"                      future boost::future_category inconsistent dll linkage
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7720&quot;&gt;#7720&lt;/a&gt;
"                      exception lock_error while intensive locking/unlocking of mutex
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7755&quot;&gt;#7755&lt;/a&gt;
"                      Thread: deadlock with shared_mutex on Windows
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7980&quot;&gt;#7980&lt;/a&gt;
"                      Build error: msvc-11.0 and BOOST_THREAD_DONT_USE_DATETIME
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7982&quot;&gt;#7982&lt;/a&gt;
"                      pthread_delay_np() parm compile error on AIX
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8027&quot;&gt;#8027&lt;/a&gt;
"                      thread library fails to compile with Visual Studio 2003
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8070&quot;&gt;#8070&lt;/a&gt;
"                      prefer GetTickCount64 over GetTickCount
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8136&quot;&gt;#8136&lt;/a&gt;
"                      boost::this_thread::sleep_for() sleeps longer than it should
"                      in Windows
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8212&quot;&gt;#8212&lt;/a&gt;
"                      Boost thread compilation error on Solaris 10
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8237&quot;&gt;#8237&lt;/a&gt;
"                      fix documentation for 'thread_group'
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8239&quot;&gt;#8239&lt;/a&gt;
"                      barrier::wait() not marked as interruption_point
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8323&quot;&gt;#8323&lt;/a&gt;
"                      boost::thread::try_join_for/try_join_until may block indefinitely
"                      due to a combination of problems in Boost.Thread and Boost.Chrono
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8337&quot;&gt;#8337&lt;/a&gt;
"                      The internal representation of &amp;quot;std::string(this-&amp;gt;code()-&amp;gt;message())&amp;quot;
"                      escapes, but is destroyed when it exits scope.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8371&quot;&gt;#8371&lt;/a&gt;
"                      C++11 once_flag enabled when constexpr is not available
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8443&quot;&gt;#8443&lt;/a&gt;
"                      Header file inclusion order may cause crashes
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8451&quot;&gt;#8451&lt;/a&gt;
"                      Missing documented function 'boost::scoped_thread::joinable'
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8530&quot;&gt;#8530&lt;/a&gt;
"                      [Coverity] Unused variable thread_handle, uninitialized variable
"                      cond_mutex in thread/pthread/thread_data.hpp
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8596&quot;&gt;#8596&lt;/a&gt;
"                      With C++0x enabled, boost::packaged_task stores a reference
"                      to function objects, instead of a copy.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_traits/&quot;&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New type traits implemented &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8189&quot;&gt;#8189&lt;/a&gt;:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      is_nothrow_move_constructible
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      is_nothrow_move_assignable
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      has_trivial_move_assign
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      has_trivial_move_constructor
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/ublas&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6511&quot;&gt;#6511&lt;/a&gt; Division by scalar should use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;enable_if&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7297&quot;&gt;#7297&lt;/a&gt; Make the free functions 'num_columns' and 'num_rows' support
"                the uBLAS traits system and better work with expression types
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6010&quot;&gt;#6010&lt;/a&gt; fixed linkage problems in assignment.hpp
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                updated doc
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Some very basic &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
"                support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_string_ref&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;find&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8067&quot;&gt;#8067&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;string_ref&lt;/span&gt;&lt;/code&gt;'s
"                logical operators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update noncopyable for C++11 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6578&quot;&gt;#6578&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix noncopyable compiler warning when used in DLL interface (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6935&quot;&gt;#6935&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix using &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;addressof&lt;/span&gt;&lt;/code&gt; with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;function&lt;/span&gt;&lt;/code&gt;
"                on SolarisStudio compiler (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7079&quot;&gt;#7079&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disable annoying MSVC warning about operator comma (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7663&quot;&gt;#7663&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Now uses new type traits from Boost.TypeTrait to detect &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt; constructors and assignment
"                operators &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8296&quot;&gt;#8296&lt;/a&gt;. This shall increase performance of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;variant&lt;/span&gt;&lt;/code&gt; for many types in C++11.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Multivisitation implemented &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8459&quot;&gt;#8459&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Documentation updated to reflect C++11 features support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/wave/&quot;&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the &lt;a href=&quot;http://www.boost.org/libs/wave/ChangeLog&quot;&gt;Changelog&lt;/a&gt; for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/xpressive&quot;&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove unused variables, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8039&quot;&gt;#8039&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Avoid name clash with macro &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;None&lt;/span&gt;&lt;/code&gt;
"                in glx.h, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8204&quot;&gt;#8204&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Silence a gcc warning, fixes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8138&quot;&gt;#8138&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_54_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++98 mode: 4.7.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11 mode: 4.7.2, 4.7.3, 4.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.1, 3.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11 mode: 3.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 4.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11 mode: 4.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.2, 4.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 8.0, 9.0, 10.0, 11.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.1, 3.2, from Subversion
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, with libc++: 3.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.2, 4.6.3, 4.7.2, 4.7.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++98 mode: 4.7.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11 mode: 4.7.3, 4.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 4.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11 mode: 4.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: from Subversion
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11 mode: from Subversion
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.2, 4.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 9.0, 10.0, 11.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++, Windows Mobile 5, with STLport: 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          AIX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                IBM XL C/C++ Enterprise Edition: 12.1.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_54_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Mon, 01 Jul 2013 17:10:02 +0000
-quickbook
"feed/history/boost_1_54_0.qbk
)
(feed/history/boost_1_55_0.qbk
-item
"<item><title>Version 1.55.0</title><link>https://www.boost.org/users/history/version_1_55_0.html</link><guid>http://www.boost.org/users/history/version_1_55_0.html</guid><pubDate>Mon, 11 Nov 2013 11:50:20 -0800</pubDate><description>
"
"
"
"  &lt;div id="version_1_55_0.other_downloads"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Other Downloads&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="https://sourceforge.net/projects/boost/files/boost-binaries/1.55.0/"&gt;Windows
"          binaries&lt;/a&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="https://sourceforge.net/projects/boost/files/boost-docs/1.55.0/"&gt;PDF
"          documentation&lt;/a&gt; (only for BoostBook based documentation).
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_55_0.news"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;News&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Support was removed from &lt;a href="https://www.boost.org/libs/config/"&gt;Config&lt;/a&gt; for some
"      very old versions of compilers. The new minimum requirements are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Digitial Mars 8.41
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          GCC 3.3
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Intel 6.0
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Visual C++ 7.1
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      &lt;strong&gt;Note:&lt;/strong&gt; This is just the mininimum requirements
"      for Config. Some Boost libraries may have higher mininimum requirements and
"      not support all platforms or compilers.
"    &lt;/p&gt;
"    &lt;p&gt;
"      Other compilers are currently unchanged, but we are considering removing support
"      for some other old compilers. &lt;strong&gt;Candidates&lt;/strong&gt; for
"      removal are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Metroworks C++ (i.e. codewarrior)
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          SunPro 5.7 and earlier
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Borland C++ Builder 2006 (5.82) and earlier
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      If you're using any of these, please let us know on the mailing lists. We will
"      take into account any feedback received before making a decision.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_55_0.known_bugs"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Known Bugs with Visual Studio
"    2013/Visual C++ 12&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Visual Studio 2013 was released quite late in the release process, so there
"      exist several unresolved issues. These include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Serialization can't compile because of a missing include.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Using &lt;code&gt;&lt;span class="identifier"&gt;has_member_function_callable_with&lt;/span&gt;&lt;/code&gt;
"          from Boost.Container's &lt;code&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
"          causes a compile error (&lt;a href="https://svn.boost.org/trac/boost/ticket/9332"&gt;#9332&lt;/a&gt;).
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          In libraries such as Unordered and MultiIndex, calling overloaded functions
"          with initializer lists can result in a compile error, with Visual C++ claiming
"          that the overloads are ambiguous. This is a Visual C++ bug and it isn't
"          clear if there's a good workaround. This won't affect code that doesn't
"          use initializer lists, or uses an initializer list that doesn't require
"          an implicit conversion (i.e. an initializer list of the container's exact
"          value type).
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Thread: &lt;code&gt;&lt;span class="identifier"&gt;ex_scoped_thread&lt;/span&gt;&lt;/code&gt;
"          compile fails (&lt;a href="https://svn.boost.org/trac/boost/ticket/9333"&gt;#9333&lt;/a&gt;).
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_55_0.patches"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Patches&lt;/span&gt;&lt;/h3&gt;
"    &lt;ol&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="https://www.boost.org/patches/1_55_0/001-log_fix_dump_avx2.patch"&gt;Log patch&lt;/a&gt;:
"          fixes incorrect output of the &lt;a href="https://www.boost.org/doc/libs/1_55_0/libs/log/doc/html/log/detailed/utilities.html#log.detailed.utilities.manipulators.dump"&gt;dump&lt;/a&gt;
"          manipulator, when used on AVX2-enabled CPU (e.g. Intel Haswell).
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ol&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_55_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt; This library defines a
"          set of compiler, architecture, operating system, library, and other version
"          numbers from the information it can gather of C, C++, Objective C, and
"          Objective C++ predefined macros or those defined in generally available
"          headers, from Rene Rivera.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_55_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/accumulators/"&gt;Accumulators&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/7915"&gt;#7915&lt;/a&gt; Fix silly typos.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8850"&gt;#8850&lt;/a&gt; Fix MSVC warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8262"&gt;#8262&lt;/a&gt; Rename &lt;code&gt;&lt;span class="identifier"&gt;average&lt;/span&gt;&lt;/code&gt;
"                to &lt;code&gt;&lt;span class="identifier"&gt;fdiv&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/any/"&gt;Any&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;bad_any_cast&lt;/span&gt;&lt;/code&gt; exception is now visible
"                across modules &lt;a href="https://svn.boost.org/trac/boost/ticket/8751"&gt;#8751&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;clear&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                member function.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added missing &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NOEXCEPT&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issue with const rvalues &lt;a href="https://svn.boost.org/trac/boost/ticket/9215"&gt;#9215&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented a limited port to Windows Runtime. This support requires
"                that the language extensions be enabled. Due to the restricted facilities
"                exposed by the Windows Runtime API, the port also comes with the
"                following caveats:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The core facilities such as the &lt;code&gt;&lt;span class="identifier"&gt;io_service&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;strand&lt;/span&gt;&lt;/code&gt;, buffers,
"                      composed operations, timers, etc., should all work as normal.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      For sockets, only client-side TCP is supported.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Explicit binding of a client-side TCP socket is not supported.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The &lt;code&gt;&lt;span class="identifier"&gt;cancel&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; function is not supported
"                      for sockets. Asynchronous operations may only be cancelled
"                      by closing the socket.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Operations that use &lt;code&gt;&lt;span class="identifier"&gt;null_buffers&lt;/span&gt;&lt;/code&gt;
"                      are not supported.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Only &lt;code&gt;&lt;span class="identifier"&gt;tcp&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;no_delay&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;socket_base&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;keep_alive&lt;/span&gt;&lt;/code&gt; options are supported.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Resolvers do not support service names, only numbers. I.e.
"                      you must use "80" rather than "http".
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Most resolver query flags have no effect.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a regression (introduced in Boost 1.54) where, on some platforms,
"                errors from &lt;code&gt;&lt;span class="identifier"&gt;async_connect&lt;/span&gt;&lt;/code&gt;
"                were not correctly propagated through to the completion handler (&lt;a href="https://svn.boost.org/trac/boost/ticket/8795"&gt;#8795&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a Windows-specific regression (introduced in Boost 1.54) that
"                occurs when multiple threads are running an &lt;code&gt;&lt;span class="identifier"&gt;io_service&lt;/span&gt;&lt;/code&gt;.
"                When the bug occurs, the result of an asynchronous operation (error
"                and bytes transferred) is incorrectly discarded and zero values used
"                instead. For TCP sockets this results in spurious end-of-file notifications
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/8933"&gt;#8933&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a bug in handler tracking, where it was not correctly printing
"                out some handler IDs (&lt;a href="https://svn.boost.org/trac/boost/ticket/8808"&gt;#8808&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed the comparison used to test for successful synchronous accept
"                operations so that it works correctly with unsigned socket descriptors
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/8752"&gt;#8752&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured the signal number is correctly passed to the completion handler
"                when starting an &lt;code&gt;&lt;span class="identifier"&gt;async_wait&lt;/span&gt;&lt;/code&gt;
"                on a signal that is already raised (&lt;a href="https://svn.boost.org/trac/boost/ticket/8738"&gt;#8738&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Suppressed a g++ 4.8+ warning about unused typedefs (&lt;a href="https://svn.boost.org/trac/boost/ticket/8980"&gt;#8980&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled the move optimisation for handlers that use the default invocation
"                hook (&lt;a href="https://svn.boost.org/trac/boost/ticket/8624"&gt;#8624&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clarified that programs must not issue overlapping &lt;code&gt;&lt;span class="identifier"&gt;async_write_at&lt;/span&gt;&lt;/code&gt; operations (&lt;a href="https://svn.boost.org/trac/boost/ticket/8669"&gt;#8669&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the Windows &lt;code&gt;&lt;span class="identifier"&gt;HANDLE&lt;/span&gt;&lt;/code&gt;
"                backend to treat &lt;code&gt;&lt;span class="identifier"&gt;ERROR_MORE_DATA&lt;/span&gt;&lt;/code&gt;
"                as a non-fatal error when returned by &lt;code&gt;&lt;span class="identifier"&gt;GetOverlappedResult&lt;/span&gt;&lt;/code&gt;
"                for a synchronous read (&lt;a href="https://svn.boost.org/trac/boost/ticket/8722"&gt;#8722&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++ language extensions use &lt;code&gt;&lt;span class="identifier"&gt;generic&lt;/span&gt;&lt;/code&gt;
"                as a keyword. Added a workaround that renames the namespace to &lt;code&gt;&lt;span class="identifier"&gt;cpp_generic&lt;/span&gt;&lt;/code&gt; when those language
"                extensions are in effect.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some asynchronous operations that missed out on getting &lt;code&gt;&lt;span class="identifier"&gt;async_result&lt;/span&gt;&lt;/code&gt; support in Boost 1.54.
"                In particular, the buffered stream templates have been updated so
"                that they adhere to current handler patterns (&lt;a href="https://svn.boost.org/trac/boost/ticket/9000"&gt;#9000&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/9001"&gt;#9001&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled move support for Microsoft Visual Studio 2012 (&lt;a href="https://svn.boost.org/trac/boost/ticket/8959"&gt;#8959&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;use_future&lt;/span&gt;&lt;/code&gt;
"                support for Microsoft Visual Studio 2012.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed a use of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;min&lt;/span&gt;&lt;/code&gt;
"                in the Windows IOCP backend to avoid a dependency on the &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;algorithm&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; header (&lt;a href="https://svn.boost.org/trac/boost/ticket/8758"&gt;#8758&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Eliminated some unnecessary handler copies.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed various minor and cosmetic issues in code and documentation
"                (including &lt;a href="https://svn.boost.org/trac/boost/ticket/8347"&gt;#8347&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/8950"&gt;#8950&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/8953"&gt;#8953&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/8965"&gt;#8965&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/8997"&gt;#8997&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for 64-bit atomic operations on x86 target for GCC,
"                MSVC and compatible compilers. The support is enabled when it is
"                known at compile time that the target CPU supports required instructions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for 128-bit atomic operations on x86-64 target for
"                GCC and compatible compilers. The support is enabled when it is known
"                at compile time that the target CPU supports required instructions.
"                The support can be tested for with the new &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ATOMIC_INT128_LOCK_FREE&lt;/span&gt;&lt;/code&gt;
"                macro.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a more efficient implementation of &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; based on GCC &lt;code&gt;&lt;span class="identifier"&gt;__atomic&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt;
"                intrinsics available since GCC 4.7.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for more ARM v7 CPUs, improved detection of Thumb 2.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for x32 (i.e. 64-bit x86 with 32-bit pointers) target
"                on GCC and compatible compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed dependency on Boost.Thread.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Internal lock pool now includes proper padding and alignment to avoid
"                false sharing.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation with Intel compiler on Windows. Removed internal
"                macro duplication when compiled on Windows.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Some code refactoring to use C++11 features when available.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/chrono/"&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/7868"&gt;#7868&lt;/a&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;chrono_io&lt;/span&gt;&lt;/code&gt; parses
"                      time incorrectly (1.53 and 1.52)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/9028"&gt;#9028&lt;/a&gt;
"                      Typo in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;chrono&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;stopwatches&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;formatters&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;base_formatter&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/9147"&gt;#9147&lt;/a&gt;
"                      uninitialized &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;tm&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/circular_buffer/"&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for rvalue references and rvalue references emulation
"                using Boost.Move. Values are moved only if value type has noexcept
"                move constructor and noexcept move assignment operator &lt;a href="https://svn.boost.org/trac/boost/ticket/7888"&gt;#7888&lt;/a&gt;.
"                Now Circular Buffer is usable with move-only types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Much better documentation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/5362"&gt;#5362&lt;/a&gt;
"                circular_buffer does not compile with &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/7025"&gt;#7025&lt;/a&gt;
"                circular buffer reports warning: " type qualifiers ignored on
"                function return type" while compile.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/7950"&gt;#7950&lt;/a&gt;
"                Eliminate W4-warnings under VS2005 - warning C4913: user defined
"                binary operator ',' exists but no overload could convert all operands,
"                default built-in binary operator ',' used.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/config/"&gt;Config&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking change:&lt;/strong&gt; Removed support
"                for some older compilers. The new minimum compiler versions are:
"              &lt;/div&gt;
"              &lt;ul&gt;
"                &lt;li&gt;
"                  &lt;div&gt;
"                    Digitial Mars 8.41
"                  &lt;/div&gt;
"                &lt;/li&gt;
"                &lt;li&gt;
"                  &lt;div&gt;
"                    GCC 3.3
"                  &lt;/div&gt;
"                &lt;/li&gt;
"                &lt;li&gt;
"                  &lt;div&gt;
"                    Intel 6.0
"                  &lt;/div&gt;
"                &lt;/li&gt;
"                &lt;li&gt;
"                  &lt;div&gt;
"                    Visual C++ 7.1
"                  &lt;/div&gt;
"                &lt;/li&gt;
"              &lt;/ul&gt;
"              &lt;div&gt;
"                Other compilers are unchanged.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/container/"&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented &lt;span class="link"&gt;SCARY
"                iterators&lt;/span&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href="https://svn.boost.org/trac/boost/ticket/8269"&gt;#8269&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8473"&gt;#8473&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8892"&gt;#8892&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/9009"&gt;#9009&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/9064"&gt;#9064&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/9092"&gt;#9092&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/9108"&gt;#9108&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/8650"&gt;#8650&lt;/a&gt;
"                SSE2 intrinsics
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/coroutine/"&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New interface (unidirectional data transfer).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/8782"&gt;#8782&lt;/a&gt;
"                no best alternative
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/8801"&gt;#8801&lt;/a&gt;
"                auto-linking
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed Android compilation &lt;a href="https://svn.boost.org/trac/boost/ticket/8706"&gt;#8706&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fusion/"&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8759"&gt;#8759&lt;/a&gt; specialization of &lt;code&gt;&lt;span class="identifier"&gt;convert_impl&lt;/span&gt;&lt;/code&gt;
"                for &lt;code&gt;&lt;span class="identifier"&gt;map_tag&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/index.html"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Additional functionality&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added centroid for segment type
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added intersects() and disjoints() for Segment-Box and Linestring-Box
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added rtree creation using packing algorithm
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added contains() and covers() spatial query predicates
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added iterative queries
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Bugfixes&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      In some cases .back() or .clear() was called, violating the
"                      usage of Concepts. Fixed for the reported cases
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Solved tickets&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6958"&gt;6958&lt;/a&gt;
"                      Intersection generates self-intersection. Caused by spike,
"                      fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/8364"&gt;8364&lt;/a&gt;
"                      Invalid input exception, caused by spikes in previous steps,
"                      fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/8365"&gt;8365&lt;/a&gt;
"                      Invalid input exception, caused by spikes in previous steps,
"                      fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/8969"&gt;8969&lt;/a&gt;
"                      boost::geometry::model::point single argument constructor should
"                      be explicit
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/8825"&gt;8825&lt;/a&gt;
"                      Patch adding member variable documentation to doxygen_xml2qbk
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/8652"&gt;8652&lt;/a&gt;
"                      Intersection fails for triangle-triangle intersection. Caused
"                      by spike, fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/9047"&gt;9047&lt;/a&gt;
"                      Boost files that include themselves (strategies/intersection.hpp),
"                      fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/graph/index.html"&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;/code&gt; is no longer allowed
"                as a bundled property type (for example, in the VertexProperties
"                template parameters to graph types); it did not work reliably before,
"                but a static assertion now forbids it entirely. Use &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;no_property&lt;/span&gt;&lt;/code&gt; instead.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for &lt;code&gt;&lt;span class="identifier"&gt;finish_edge&lt;/span&gt;&lt;/code&gt;
"                visitor event point in depth-first search; the change should be backward-compatible
"                with visitors that do not have that member function.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disabled building of tests on Sun compiler.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Multiple source vertices are supported in non-named-parameter versions
"                of &lt;code&gt;&lt;span class="identifier"&gt;breadth_first_visit&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;breadth_first_search&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;dijkstra_shortest_paths&lt;/span&gt;&lt;/code&gt;,
"                and &lt;code&gt;&lt;span class="identifier"&gt;dijkstra_shortest_paths_no_init&lt;/span&gt;&lt;/code&gt;.
"                This feature is not yet documented; to use it, replace the single
"                parameter for the source vertex in each of these functions by two
"                input iterators of the same type containing the source vertices to
"                use.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Hawick circuits algorithm; contributed by Louis Dionne.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added edge coloring algorithm; contributed by Maciej Piechotka.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added min-cost max-flow algorithm; contributed by Piotr Wygocki.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugs and feature requests from Trac fixed: &lt;a href="https://svn.boost.org/trac/boost/ticket/5269"&gt;#5269&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/8317"&gt;#8317&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8433"&gt;#8433&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/8791"&gt;#8791&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/8877"&gt;#8877&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/8986"&gt;#8986&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/9012"&gt;#9012&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/9080"&gt;#9080&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/functional/hash/"&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Simplify a SFINAE check so that it will hopefully work on Sun 5.9
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/8822"&gt;#8822&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Suppress Visual C++ infinite loop warning (&lt;a href="https://svn.boost.org/trac/boost/ticket/8568"&gt;#8568&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/interprocess/"&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href="https://svn.boost.org/trac/boost/ticket/7156"&gt;#7156&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/7164"&gt;#7164&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8277"&gt;#8277&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8976"&gt;#8976&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/9065"&gt;#9065&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/9073"&gt;#9073&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/9008"&gt;#9008&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/intrusive/"&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Source breaking&lt;/strong&gt;: Deprecated &lt;code&gt;&lt;span class="identifier"&gt;xxx_dont_splay&lt;/span&gt;&lt;/code&gt; functions from splay
"                containers. Deprecated &lt;code&gt;&lt;span class="identifier"&gt;splay_set_hook&lt;/span&gt;&lt;/code&gt;
"                from splay containers, use &lt;code&gt;&lt;span class="identifier"&gt;bs_set_hook&lt;/span&gt;&lt;/code&gt;
"                instead. Both will be removed in Boost 1.56.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;ABI breaking&lt;/strong&gt;: Hash containers' end
"                iterator was implemented pointing to one-past the end of the bucket
"                array (see &lt;a href="https://svn.boost.org/trac/boost/ticket/8698"&gt;#8698&lt;/a&gt;)
"                causing severe bugs when values to be inserted where allocated next
"                to the bucket array. End iterator implementation was changed to point
"                to the beginning of the bucket array.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Big refactoring in order to reduce template and debug symbol bloat.
"                Test object files have been slashed to half in MSVC compilers in
"                Debug mode. Toolchains without Identical COMDAT Folding (ICF) should
"                notice size improvements.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented &lt;span class="link"&gt;SCARY iterators&lt;/span&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/conversion/lexical_cast.htm"&gt;Lexical cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;bad_alloc&lt;/span&gt;&lt;/code&gt; exceptions are now are
"                not converted to &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;bad_lexical_cast&lt;/span&gt;&lt;/code&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8966"&gt;#8966&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added static assert that checks for &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;numeric_limits&lt;/span&gt;&lt;/code&gt;
"                specializations if they are required for conversion. Use &lt;code&gt;&lt;span class="identifier"&gt;BOOST_HAS_INT128&lt;/span&gt;&lt;/code&gt; for detecting
"                128 bit integers support &lt;a href="https://svn.boost.org/trac/boost/ticket/8790"&gt;#8790&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Documentation improved and more usage examples added.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                General changes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a new configuration macro &lt;code&gt;&lt;span class="identifier"&gt;BOOST_LOG_WITHOUT_DEFAULT_FACTORIES&lt;/span&gt;&lt;/code&gt;.
"                      By defining this macro the user can disable compilation of
"                      the default filter and formatter factories used by settings
"                      parsers. This can substantially reduce binary sizes while still
"                      retaining support for settings parsers.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Rewritten some of the parsers to reduce the compiled binary
"                      size. The rewritten parsers are more robust in detecting ambiguous
"                      and incorrect input.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The following headers are deprecated: &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;log&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;utility&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;intrusive_ref_counter&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;log&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;utility&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;explicit_operator_bool&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;log&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;utility&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;empty_deleter&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
"                      These headers will be removed in future releases. The contents
"                      of these headers were moved to other libraries.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed &lt;code&gt;&lt;span class="identifier"&gt;timer&lt;/span&gt;&lt;/code&gt;
"                      attribute generating incorrect time readings on Windows on
"                      heavy thread contention when &lt;code&gt;&lt;span class="identifier"&gt;QueryPerformanceCounter&lt;/span&gt;&lt;/code&gt;
"                      API was used.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed a bug in the filter parser that prevented using parsed
"                      filters with some attributes.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed thread id formatting discrepancies between the default
"                      sink and formatters.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Closed tickets: &lt;a href="https://svn.boost.org/trac/boost/ticket/8815"&gt;#8815&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/8819"&gt;#8819&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/8915"&gt;#8915&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/8917"&gt;#8917&lt;/a&gt;,
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/9139"&gt;#9139&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/9140"&gt;#9140&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/9153"&gt;#9153&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/9155"&gt;#9155&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Suppress numerous warnings (mostly from GCC-4.8 and MSVC) &lt;a href="https://svn.boost.org/trac/boost/ticket/8384"&gt;#8384&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8855"&gt;#8855&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/9107"&gt;#9107&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/9109"&gt;#9109&lt;/a&gt;..
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed PGI compilation issue &lt;a href="https://svn.boost.org/trac/boost/ticket/8333"&gt;#8333&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed PGI constant value initialization issue that caused erf to
"                generate incorrect results &lt;a href="https://svn.boost.org/trac/boost/ticket/8621"&gt;#8621&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Prevent macro expansion of some C99 macros that are also C++ functions
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8732"&gt;#8732&lt;/a&gt;
"                and &lt;a href="https://svn.boost.org/trac/boost/ticket/8733"&gt;#8733&lt;/a&gt;..
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed Student's T distribution to behave correctly with huge degrees
"                of freedom (larger than the largest representable integer) &lt;a href="https://svn.boost.org/trac/boost/ticket/8837"&gt;#8837&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Make some core functions usable with &lt;code&gt;&lt;span class="keyword"&gt;long&lt;/span&gt;
"                &lt;span class="keyword"&gt;double&lt;/span&gt;&lt;/code&gt; even when the platform
"                has no standard library &lt;code&gt;&lt;span class="keyword"&gt;long&lt;/span&gt;
"                &lt;span class="keyword"&gt;double&lt;/span&gt;&lt;/code&gt; support &lt;a href="https://svn.boost.org/trac/boost/ticket/8940"&gt;#8940&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix error handling of distributions to catch invalid scale and location
"                parameters when the random variable is infinite &lt;a href="https://svn.boost.org/trac/boost/ticket/9042"&gt;#9042&lt;/a&gt;
"                and &lt;a href="https://svn.boost.org/trac/boost/ticket/9126"&gt;#9126&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add workaround for broken &amp;lt;tuple&amp;gt; in Intel C++ 14 &lt;a href="https://svn.boost.org/trac/boost/ticket/9087"&gt;#9087&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improve consistency of argument reduction in the elliptic integrals
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/9104"&gt;#9104&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bug in inverse incomplete beta that results in cancellation errors
"                when the beta function is really an arcsine or Student's T distribution.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix issue in Bessel I and K function continued fractions that causes
"                spurious over/underflow.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add improvement to non-central chi squared distribution quantile
"                due to Thomas Luu.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/move/"&gt;Move&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs &lt;a href="https://svn.boost.org/trac/boost/ticket/7952"&gt;#7952&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8764"&gt;#8764&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8765"&gt;#8765&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8842"&gt;#8842&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8979"&gt;#8979&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/msm/"&gt;Meta State Machine&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New feature: interrupt states now support a sequence of events to
"                end the interruption.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed Trac &lt;a href="https://svn.boost.org/trac/boost/ticket/8686"&gt;#8686&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multiprecision/"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for Boost.Serialization.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Suppressed some GCC warnings. See &lt;a href="https://svn.boost.org/trac/boost/ticket/8872"&gt;8872&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug in pow for large integer arguments. See &lt;a href="https://svn.boost.org/trac/boost/ticket/8809"&gt;8809&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug in pow for calculation of 0[super N]. See &lt;a href="https://svn.boost.org/trac/boost/ticket/8798"&gt;8798&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug in fixed precision cpp_int IO code that causes conversion
"                to string to fail when the bit count is very small (less than CHAR_BIT).
"                See &lt;a href="https://svn.boost.org/trac/boost/ticket/8745"&gt;8745&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug in cpp_int that causes left shift to fail when a fixed
"                precision type would overflow. See &lt;a href="https://svn.boost.org/trac/boost/ticket/8741"&gt;8741&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some cosmetic warnings from cpp_int. See &lt;a href="https://svn.boost.org/trac/boost/ticket/8748"&gt;8748&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed calls to functions which are required to be macros in C99.
"                See &lt;a href="https://svn.boost.org/trac/boost/ticket/8732"&gt;8732&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug that causes construction from INT_MIN, LONG_MIN etc to
"                fail in cpp_int. See &lt;a href="https://svn.boost.org/trac/boost/ticket/8711"&gt;8711&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/index.html"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.MultiIndex has been brought to a higher level of compliance
"                with C++11.
"              &lt;/div&gt;
"              &lt;ul&gt;
"                &lt;li&gt;
"                  &lt;div&gt;
"                    &lt;code&gt;&lt;span class="identifier"&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;
"                    is now efficiently movable.
"                  &lt;/div&gt;
"                &lt;/li&gt;
"                &lt;li&gt;
"                  &lt;div&gt;
"                    Initializer lists supported.
"                  &lt;/div&gt;
"                &lt;/li&gt;
"                &lt;li&gt;
"                  &lt;div&gt;
"                    Emplace functions provided.
"                  &lt;/div&gt;
"                &lt;/li&gt;
"                &lt;li&gt;
"                  &lt;div&gt;
"                    Non-copyable elements (such as &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;unique_ptr&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;) supported. This includes
"                    insertion of a range [&lt;code&gt;&lt;span class="identifier"&gt;first&lt;/span&gt;&lt;/code&gt;,&lt;code&gt;&lt;span class="identifier"&gt;last&lt;/span&gt;&lt;/code&gt;) where the iterators point
"                    to a type that is convertible to that of the element: no copy
"                    construction happens in the process.
"                  &lt;/div&gt;
"                &lt;/li&gt;
"                &lt;li&gt;
"                  &lt;div&gt;
"                    Random access indices provide &lt;code&gt;&lt;span class="identifier"&gt;shrink_to_fit&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
"                  &lt;/div&gt;
"                &lt;/li&gt;
"              &lt;/ul&gt;
"              &lt;div&gt;
"                Refer to the &lt;a href="https://www.boost.org/libs/multi_index/doc/compiler_specifics.html"&gt;compiler
"                specifics&lt;/a&gt; section for limitations on pre-C++11 compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The following classes are deprecated:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#member_offset"&gt;&lt;code&gt;&lt;span class="identifier"&gt;member_offset&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit"&gt;&lt;code&gt;&lt;span class="identifier"&gt;const_mem_fun_explicit&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#const_mem_fun_explicit"&gt;&lt;code&gt;&lt;span class="identifier"&gt;mem_fun_explicit&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_equal_to"&gt;&lt;code&gt;&lt;span class="identifier"&gt;composite_key_result_equal_to&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_less"&gt;&lt;code&gt;&lt;span class="identifier"&gt;composite_key_result_less&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_greater"&gt;&lt;code&gt;&lt;span class="identifier"&gt;composite_key_result_greater&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#composite_key_result_hash"&gt;&lt;code&gt;&lt;span class="identifier"&gt;composite_key_result_hash&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/mpi/"&gt;MPI&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Replaced calls to deprecated MPI functions
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for multi-threaded initialization
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added in-place collectives
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/phoenix/"&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/9049"&gt;#9049&lt;/a&gt; &lt;code&gt;&lt;span class="identifier"&gt;phoenix&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;function&lt;/span&gt;&lt;/code&gt;
"                constructor is constexpr.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/polygon/"&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated CGAL part of the Voronoi benchmark with patches from Sebastien
"                Loriot. Updated documentation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added polygon decomposition capability to polygon_90_set_data container
"                (patch from Intel). Updated documentation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugs fixed from Trac: &lt;a href="https://svn.boost.org/trac/boost/ticket/8197"&gt;#8197&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/property_map/index.html"&gt;PropertyMap&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                dynamic_properties objects can now be built by non-destructively
"                chaining &lt;code&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;property&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;pm&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; calls. Example:
"              &lt;/div&gt;
"&lt;pre&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dynamic_properties&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;
"  &lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;property&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"color"&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;color_map&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;
"  &lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;property&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"pos"&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;position_map&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;
"&lt;/pre&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The use of raw pointers as property maps is deprecated; it often
"                failed on Visual Studio in the past. This usage has been removed
"                from all tests and examples in Boost.Graph. The replacement to use
"                for vertex properties in graphs (the most common use for this feature)
"                is:
"              &lt;/div&gt;
"&lt;pre&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;make_iterator_property_map&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;
"  &lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;pointer&lt;/span&gt; &lt;span class="keyword"&gt;or&lt;/span&gt; &lt;span class="identifier"&gt;container&lt;/span&gt; &lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;begin&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt; &lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;,&lt;/span&gt;
"  &lt;span class="identifier"&gt;get&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;vertex_index&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;graph&lt;/span&gt; &lt;span class="identifier"&gt;object&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;))&lt;/span&gt;
"&lt;/pre&gt;
"              &lt;div&gt;
"                (Note: the lack of namespace qualification on get() in this code
"                is necessary for generic code). Outside a graph context, the closest
"                equivalent is:
"              &lt;/div&gt;
"&lt;pre&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;make_iterator_property_map&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;
"  &lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;pointer&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;,&lt;/span&gt;
"  &lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;typed_identity_property_map&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;size_t&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;())&lt;/span&gt;
"&lt;/pre&gt;
"              &lt;div&gt;
"                There are commented-out static assertions on lines 151 and 159 of
"                &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;property_map&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;property_map&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; that can be un-commented to find
"                deprecated uses of pointers in user code.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/rational"&gt;Rational&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;lowest&lt;/span&gt;&lt;/code&gt; and
"                &lt;code&gt;&lt;span class="identifier"&gt;max_digits10&lt;/span&gt;&lt;/code&gt;, members
"                of std::numeric_limits added in C++11, to the unit-test code. Needed
"                since Boost.Test refers to one of them when compiled in C++11 mode.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed initialization of some internal variables to something that
"                cannot be a narrowing conversion, which fixes issue &lt;a href="https://svn.boost.org/trac/boost/ticket/5855"&gt;#5855&lt;/a&gt;. Needed
"                since narrowing conversions are an error in C++11.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/smart_ptr/index.html"&gt;SmartPtr&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;smart_ptr&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;intrusive_ref_counter&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; header, extracted from Boost.Log.
"                The header implements a mixin base class that adds support for &lt;code&gt;&lt;span class="identifier"&gt;intrusive_ptr&lt;/span&gt;&lt;/code&gt; to user's classes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/thread/"&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;New Features:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/8519"&gt;#8519&lt;/a&gt;
"                      Synchro: Update class barrier with a completion function.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/8515"&gt;#8515&lt;/a&gt;
"                      Async: Add &lt;code&gt;&lt;span class="identifier"&gt;shared_future&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;then&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/8519"&gt;#8519&lt;/a&gt;
"                      Synchro: Update class barrier with a completion function
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/8615"&gt;#8615&lt;/a&gt;
"                      Async: Replace make_future/make_shared_future by make_ready_future.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/8627"&gt;#8627&lt;/a&gt;
"                      Async: Add future&amp;lt;&amp;gt;::unwrap and unwrapping constructor.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/8677"&gt;#8677&lt;/a&gt;
"                      Async: Add future&amp;lt;&amp;gt;::get_or.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/8678"&gt;#8678&lt;/a&gt;
"                      Async: Add future&amp;lt;&amp;gt;::fallback_to.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/8891"&gt;#8891&lt;/a&gt;
"                      upgrade_to_unique_lock: missing mutex() function.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/8955"&gt;#8955&lt;/a&gt;
"                      Request for more efficient way to get exception_ptr from future.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/7461"&gt;#7461&lt;/a&gt;
"                      detail::win32::ReleaseSemaphore may be called with count_to_release
"                      equal to 0
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/8070"&gt;#8070&lt;/a&gt;
"                      prefer GetTickCount64 over GetTickCount
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/8768"&gt;#8768&lt;/a&gt;
"                      win32 condition_variable::wait_until infinite wait in rare
"                      cases.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/8817"&gt;#8817&lt;/a&gt;
"                      Boost Thread Windows CE _createthreadex handling breaks mingw
"                      w64.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/8943"&gt;#8943&lt;/a&gt;
"                      Failed to compile code using boost::call_once with Intel C++
"                      Composer XE 2013 on Windows.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/8931"&gt;#8931&lt;/a&gt;
"                      Typos in external_locking reference.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/9029"&gt;#9029&lt;/a&gt;
"                      Misprint in documentation.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/9037"&gt;#9037&lt;/a&gt;
"                      gcc -Wshadow gives warnings in condition_variable{,_fwd}.hpp.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/9041"&gt;#9041&lt;/a&gt;
"                      Boost.Thread DSO's may need to link with Boost.Atomic.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/9048"&gt;#9048&lt;/a&gt;
"                      boost::scoped_thread useless ctor with variadic template arguments.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/9079"&gt;#9079&lt;/a&gt;
"                      Condition variable will wait forever for some timepoint values
"                      (Win).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/timer/"&gt;Timer&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation on Intel compiler &lt;a href="https://svn.boost.org/trac/boost/ticket/8956"&gt;#8956&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_traits/"&gt;Type Traits&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;is_copy_contructible&lt;/span&gt;&lt;/code&gt;
"                trait &lt;a href="https://svn.boost.org/trac/boost/ticket/8802"&gt;#8802&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/unordered/"&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Avoid some warnings (&lt;a href="https://svn.boost.org/trac/boost/ticket/8851"&gt;#8851&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/8874"&gt;#8874&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Avoid exposing some detail functions via. ADL on the iterators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Work around variadic parameter bug in Visual Studio 2013. The compiler
"                still has problems with initializer lists, but it might not be possible
"                to work around those.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/utility/index.html"&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;result_of&lt;/span&gt;&lt;/code&gt; can be set to use TR1
"                protocol by default and fall back to &lt;code&gt;&lt;span class="keyword"&gt;decltype&lt;/span&gt;&lt;/code&gt;
"                if the function object does not support it (like C++11 lambda functions,
"                for example). Define &lt;code&gt;&lt;span class="identifier"&gt;BOOST_RESULT_OF_USE_TR1_WITH_DECLTYPE_FALLBACK&lt;/span&gt;&lt;/code&gt;
"                configuration macro to enable this mode.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved support for C++11 in the &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;base_from_member&lt;/span&gt;&lt;/code&gt;
"                class template. The class implements perfect forwarding for the constructor
"                arguments, if the compiler supports rvalue references, variadic templates
"                and function template default arguments.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;utility&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;explicit_operator_bool&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;utility&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;empty_deleter&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                headers, which were extracted from Boost.Log. The headers implement
"                utilities for defining explicit conversion operators to &lt;code&gt;&lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;/code&gt; and a deleter function object
"                that does nothing, respectively.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation of constructor and assignment operator with const
"                rvalues input parameters &lt;a href="https://svn.boost.org/trac/boost/ticket/8988"&gt;#8988&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation of move assignment operator for situations when
"                one of the variant template classes has nothrow copy constructor
"                and throwing move constructor &lt;a href="https://svn.boost.org/trac/boost/ticket/8772"&gt;#8772&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix compilation on exception-disabled environments &lt;a href="https://svn.boost.org/trac/boost/ticket/8717"&gt;#8717&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix unreachable code warnings &lt;a href="https://svn.boost.org/trac/boost/ticket/8665"&gt;#8665&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed duplicate code &lt;a href="https://svn.boost.org/trac/boost/ticket/7601"&gt;#7601&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/wave/"&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the &lt;a href="https://www.boost.org/libs/wave/ChangeLog"&gt;Changelog&lt;/a&gt; for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/xpressive"&gt;xpressive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8843"&gt;#8843&lt;/a&gt; throw instead of assert at incomplete charset
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8880"&gt;#8880&lt;/a&gt; remove unused local typedef
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8882"&gt;#8882&lt;/a&gt; use RAII instead of try/catch in sequence_stack.hpp
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/8474"&gt;#8474&lt;/a&gt; make xpressive play nice with clang's -Wimplicit-fallthrough
"                diagnostic
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_55_0.updated_tools"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/tools/quickbook"&gt;Quickbook&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Quickbook 1.6 finalized, see the &lt;a href="https://www.boost.org/doc/html/quickbook/versions.html#language_versions.1_6"&gt;Quickbook
"                documentation for details&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_55_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.3, 3.2, 3.1, 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11, libc++: 3.4, 3.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.8.1, 4.7.3, 4.6.3, 4.5.3, 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++98: 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 5.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 5.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 11.0, 10.0, 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 5.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 5.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: trunk
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: trunk
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.3, 3.2, 3.1, 3.0, trunk
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11, libc++: 3.4, 3.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9.0 (experimental), 4.8.1, 4.7.3, 4.6.4, 4.5.3, 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++98: 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 13.0.1, 12.1.6
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.8.0, 4.7.2, 4.6.3, 4.5.4, 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 11.0, 10.0, 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_55_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="https://www.boost.org/users/people/beman_dawes.html"&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href="https://www.boost.org/users/people/rene_rivera.html"&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Fri, 13 Apr 2018 10:15:19 +0000
-quickbook
"feed/history/boost_1_55_0.qbk
-update_count
=1
)
(feed/history/boost_1_56_0.qbk
-item
"<item><title>Version 1.56.0</title><link>http://www.boost.org/users/history/version_1_56_0.html</link><guid>http://www.boost.org/users/history/version_1_56_0.html</guid><pubDate>Thu, 7 Aug 2014 09:08:22 -0700</pubDate><description>
"
"
"
"  &lt;div id=&quot;version_1_56_0.other_downloads&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Other Downloads&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href=&quot;https://sourceforge.net/projects/boost/files/boost-binaries/1.56.0/&quot;&gt;Windows
"          binaries&lt;/a&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_56_0.modularization&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Modularization&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost version control has migrated to a system using git submodules. This shouldn't
"      make too much of a difference to users, although the directory structure is
"      now a bit different.
"    &lt;/p&gt;
"    &lt;p&gt;
"      Parts of some libraries have been moved into different modules, and several
"      new modules have been extracted from existing code. All header paths should
"      remain the same. The new modules are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/assert/&quot;&gt;Assert&lt;/a&gt;:&lt;/span&gt;
"  Customizable assert macros.
"          Maintained by Peter Dimov.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/core/&quot;&gt;Core&lt;/a&gt;:&lt;/span&gt;
"  Core utilities used by other
"          libraries, with minimal dependencies. Maintained by Peter Dimov, Glen Fernandes
"          and Andrey Semashev.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical_Cast&lt;/a&gt;:&lt;/span&gt;
"  General literal
"          text conversions, such as an int represented a string, or vice-versa, from
"          Kevlin Henney.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/throw_exception/&quot;&gt;Throw_Exception&lt;/a&gt;:&lt;/span&gt;
"  A common
"          infrastructure for throwing exceptions from Boost libraries, from Emil
"          Dotchevski.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;Winapi:&lt;/span&gt;
"  Windows API declarations without &amp;lt;windows.h&amp;gt;, for internal
"          Boost use.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_56_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/align/&quot;&gt;Align&lt;/a&gt;:&lt;/span&gt;
"  Memory alignment functions,
"          allocators, and adaptors, from Glen Fernandes.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_index/&quot;&gt;Type_Index&lt;/a&gt;:&lt;/span&gt;
"  Runtime/Compile
"          time copyable type info, from Antony Polukhin.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_56_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/accumulators/&quot;&gt;Acumulators&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New accumulators &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_variance&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;rolling_moment&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed rvalue references related issues (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9215&quot;&gt;#9215&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9462&quot;&gt;#9462&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Dropped support of antique compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"                to work correctly with new Boost.Coroutine interface (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9442&quot;&gt;#9442&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9928&quot;&gt;#9928&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured that incomplete &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; coroutines are correctly unwound
"                when cleaned up by the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
"                destructor (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9731&quot;&gt;#9731&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed delegation of continuation hook for handlers produced by &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;wrap&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9741&quot;&gt;#9741&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the Windows I/O completion port backend to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ConnectEx&lt;/span&gt;&lt;/code&gt;, if available, for connection-oriented
"                IP sockets.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
"                backend for non-Windows (and non-IOCP Windows) platforms to use a
"                single condition variable per &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;/code&gt;
"                instance. This addresses a potential race condition when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;run_one&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"                is used from multiple threads.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Prevented integer overflow when computing timeouts based on some
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chrono&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;chrono&lt;/span&gt;&lt;/code&gt;
"                clocks (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9662&quot;&gt;#9662&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9778&quot;&gt;#9778&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Made further changes to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;EV_CLEAR&lt;/span&gt;&lt;/code&gt;
"                handling in the kqueue backend, to address other cases where the
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"                system call may hang on Mac OS X.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed infinite recursion in implementation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;resolver_query_base&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;~&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9548&quot;&gt;#9548&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Made the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;select&lt;/span&gt;&lt;/code&gt; reactor
"                more efficient on Windows for large numbers of sockets (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9528&quot;&gt;#9528&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a Windows-specific type-aliasing issue reported by &lt;tt&gt;gcc&lt;/tt&gt;
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9550&quot;&gt;#9550&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Prevented execution of compile-time-only buffer test to avoid triggering
"                an address sanitiser warning (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8295&quot;&gt;#8295&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disabled the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;GetQueuedCompletionStatus&lt;/span&gt;&lt;/code&gt;
"                timeout workaround on recent versions of Windows.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for string-based scope IDs when using link-local multicast
"                addresses.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed IPv6 multicast group join to use the address's scope ID as
"                the interface, if an interface is not explicitly specified.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed multicast test failure on Mac OS X and the BSDs by using a
"                link-local multicast address.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Worked around a &lt;tt&gt;gcc&lt;/tt&gt; problem to do with anonymous
"                enums (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10042&quot;&gt;#10042&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reverted the Windows &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;HANDLE&lt;/span&gt;&lt;/code&gt;
"                backend change to ignore &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;ERROR_MORE_DATA&lt;/span&gt;&lt;/code&gt;.
"                Instead, the error will be propagated as with any other (i.e. in
"                an &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt; or
"                thrown as a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;system_error&lt;/span&gt;&lt;/code&gt;),
"                and the number of bytes transferred will be returned. For code that
"                needs to handle partial messages, the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;error_code&lt;/span&gt;&lt;/code&gt;
"                overload should be used (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10034&quot;&gt;#10034&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an off-by-one error in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;signal_set&lt;/span&gt;&lt;/code&gt;
"                implementation's signal number check (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9324&quot;&gt;#9324&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to use SSE2 intrinsics rather than inline assembly, to allow
"                the Cray compiler to work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Stopped using certain Winsock functions that are marked as deprecated
"                in the latest Visual C++ and Windows SDK.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a workaround for building the unit tests with &lt;tt&gt;gcc&lt;/tt&gt;
"                on AIX.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Various minor documentation improvements (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8295&quot;&gt;#8295&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9605&quot;&gt;#9605&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9771&quot;&gt;#9771&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/assign/&quot;&gt;Assign&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Resolve some C++11 ambiguities (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3073&quot;&gt;#3073&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/atomic/&quot;&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The library has been redesigned. Besides internal refactoring, various
"                bugs were fixed, including incorrect values of feature test macros
"                and integer overflow handling.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed values of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;memory_order&lt;/span&gt;&lt;/code&gt;
"                enumeration. The concrete values are not part of the interface, but
"                this change may potentially break ABI, if the enum is used in user's
"                interfaces.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented support for 128-bit atomic operations on Windows x64
"                with MSVC. The library assumes presence of the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;cmpxchg16b&lt;/span&gt;&lt;/code&gt;
"                instruction in the target CPUs. Some early AMD CPUs don't support
"                this instruction. To target those define the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ATOMIC_NO_CMPXCHG16B&lt;/span&gt;&lt;/code&gt;
"                macro.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented experimental support for Windows ARM target with MSVC.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented experimental support for DEC Alpha target with GCC.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved support for ARMv6 and later with GCC. Implemented all atomic
"                operations as assembler blocks instead of CAS-based loops. 64-bit
"                operations are supported with ARMv7.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented optional support for the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ATOMIC_FLAG_INIT&lt;/span&gt;&lt;/code&gt;
"                macro and static initialization of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;atomic_flag&lt;/span&gt;&lt;/code&gt;.
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8158&quot;&gt;#8158&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation for SPARCv9 target. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9446&quot;&gt;#9446&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation for PowerPC target. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9447&quot;&gt;#9447&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed several compatibility problems with Clang on x86 and x86-64.
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9610&quot;&gt;#9610&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9842&quot;&gt;#9842&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed specialized code for Windows on IA64 platform.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer/&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9970&quot;&gt;#9970&lt;/a&gt;,&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9334&quot;&gt;#9334&lt;/a&gt; Support for the C++11 allocator model.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Dropped support of antique compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/concept_check/&quot;&gt;Concept Check&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fewer warnings (includes &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5012&quot;&gt;#5012&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added DlMalloc-based Extended Allocators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved configurability of tree-based ordered associative containers.
"                AVL, Scapegoat and Splay trees are now available to implement &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;set&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multiset&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;map&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multimap&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9338&quot;&gt;#9338:
"                      &lt;em&gt;&amp;quot;VS2005 compiler errors in swap() definition
"                      after including container/memory_util.hpp&amp;quot;&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9637&quot;&gt;#9637:
"                      &lt;em&gt;&amp;quot;Boost.Container vector::resize() performance
"                      issue&amp;quot;&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9648&quot;&gt;#9648:
"                      &lt;em&gt;&amp;quot;string construction optimization - char_traits::copy
"                      could be used ...&amp;quot;&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9801&quot;&gt;#9801:
"                      &lt;em&gt;&amp;quot;I can no longer create and iterator_range from
"                      a stable_vector&amp;quot;&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9915&quot;&gt;#9915:
"                      &lt;em&gt;&amp;quot;Documentation issues regarding vector constructors
"                      and resize methods - value/default initialization&amp;quot;&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9916&quot;&gt;#9916:
"                      &lt;em&gt;&amp;quot;Allocator propagation incorrect in the assignment
"                      operator of most&amp;quot;&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9931&quot;&gt;#9931:
"                      &lt;em&gt;&amp;quot;flat_map::insert(ordered_unique_range_t...)
"                      fails with move_iterators&amp;quot;&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9955&quot;&gt;#9955:
"                      &lt;em&gt;&amp;quot;Using memcpy with overlapped buffers in vector&amp;quot;&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                fcontext_t is opaque pointer to context-data
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                changed signature of make_fcontext()
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8826&quot;&gt;#8826&lt;/a&gt; no executable stack
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9437&quot;&gt;#9437&lt;/a&gt; catch exceptions on iOS and Windows Phone 8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9445&quot;&gt;#9445&lt;/a&gt; support for x32 ABIs
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9522&quot;&gt;#9522&lt;/a&gt; support for powerpc_64le
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9743&quot;&gt;#9743&lt;/a&gt; bugfix for powerpc_64 le/be
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9774&quot;&gt;#9774&lt;/a&gt; bugfix for x86 on Mac OS X + clang
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                support of symmetric coroutines
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9355&quot;&gt;#9355&lt;/a&gt; fix race condition in protected_stack_allocator
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9551&quot;&gt;#9551&lt;/a&gt; list of supported architectures
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9734&quot;&gt;#9734&lt;/a&gt; wrong check of mmap() return value
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9735&quot;&gt;#9735&lt;/a&gt; no memset() for protected_stack_allocator
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9760&quot;&gt;#9760&lt;/a&gt; coroutine iterator need const operator==
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10070&quot;&gt;#10070&lt;/a&gt; mmap() return value
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10157&quot;&gt;#10157&lt;/a&gt; file descriptor not required in protected_stack_allocator
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/dynamic_bitset/&quot;&gt;Dynamic Bitset&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for C++11 move constructors
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Warning fixes on MSVC 2013
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for C++11 minimal allocators
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add noexcept specifications
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/chrono/&quot;&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6918&quot;&gt;#6918&lt;/a&gt;
"                Boost Chrono compilation failure on HP uX due to undefined pthread_getcpuclockid
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8006&quot;&gt;#8006&lt;/a&gt;
"                Boost::Chrono Assertion at startup - steady_clock::now() - Windows
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9337&quot;&gt;#9337&lt;/a&gt;
"                chrono::process_cpu_clock time points wrong by factor 1000 on Linux
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9342&quot;&gt;#9342&lt;/a&gt;
"                Regression on process_cpu_clock::timepoint io on V2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9419&quot;&gt;#9419&lt;/a&gt;
"                boost::chrono::floor()/round() and negative durations is wrong
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9698&quot;&gt;#9698&lt;/a&gt;
"                boost::chrono::thread_clock not declared in OSX
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9720&quot;&gt;#9720&lt;/a&gt;
"                boost::this_thread::sleep_for() sometimes returns immediately on
"                win32
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9859&quot;&gt;#9859&lt;/a&gt;
"                Remove references to gcc-mingw
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9918&quot;&gt;#9918&lt;/a&gt;
"                chrono compilation error on Solaris, funciton timegm
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9811&quot;&gt;#9811&lt;/a&gt;
"                boost/boost/chrono/duration.hpp:355:56: error: call to non-constexpr
"                function 'static std::numeric_limits&amp;lt;float&amp;gt;::_Ty std::numeric_limits&amp;lt;float&amp;gt;::max()'
"                /home/zosun/input_service/inputservices-core-service/other/boost/boost/chrono/duration.hpp:
"                In static member function 'static constexpr double boost::chrono::detail::chrono_numeric_limits&amp;lt;double,
"                true&amp;gt;::lowest()':
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10069&quot;&gt;#10069&lt;/a&gt;
"                Overflow in chrono clocks on 32bit
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10151&quot;&gt;#10151&lt;/a&gt;
"                timegm function not available on QNX
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/flyweight/index.html&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In compilers with variadic template support, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;flyweight&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; now provides a perfectly forwarding
"                constructor to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;/code&gt;
"                (previously an emulation was used).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;flyweight&lt;/span&gt;&lt;/code&gt; now replicates
"                the initializer-list constructors and assignment operators of its
"                underlying type.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed intermodule static initialization problem (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9553&quot;&gt;#9553&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fusion is enabled for use on GPU
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Additional functionality
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New algorithm buffer for inflating/deflating geometries (buffer
"                      itself already existed but that was only to enlarge a box)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New algorithm remove_spikes, algorithm to remove spikes from
"                      a ring, polygon or multi_polygon.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New algorithm point_on_surface, generating a point lying on
"                      the surface (interior) of the polygon
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New algorithm is_simple, returning true if a geometry is simple
"                      according to the OGC standard
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New algorithm is_valid, returning true if a geometry is valid
"                      according to the OGC standard
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New algorithm crosses for checking this spatial relation according
"                      to the OGC standard
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The set operation algorithms (difference, intersection, sym_difference
"                      and union_) now support as input pairs of pointlike or linear
"                      geometries
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The distance and comparable_distance algorithms now support
"                      all pairs of geometry combinations
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The spatial relations which didn't support it (covered_by,
"                      touches, within, etc.) now support as input linear and/or areal
"                      geometries
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The support for boost::variants as input geometries in various
"                      algorithms
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The rtree support for indexing segments
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The rtree nearest() predicate support for arbitrary geometries
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved tickets
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8310&quot;&gt;8310&lt;/a&gt;
"                      Wrong results with overlapping polygons (fixed using point_on_surface
"                      for disjoint)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8375&quot;&gt;8375&lt;/a&gt;
"                      sym_difference of non-closed polygons returns closed polygon
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8376&quot;&gt;8376&lt;/a&gt;
"                      difference of non-closed polygons returns closed polygon
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9081&quot;&gt;9081&lt;/a&gt;
"                      Booleans create self-intersecting polygons from non-self-intersecting
"                      polygons
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9245&quot;&gt;9245&lt;/a&gt;
"                      Check for process errors in make_qbk.py
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9563&quot;&gt;9563&lt;/a&gt;
"                      (Sym)difference not successful, fixed by rescaling to robust
"                      type
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9628&quot;&gt;9628&lt;/a&gt;
"                      Wrong result of within() due to the winding strategy not working
"                      correctly for nearly-horizontal segments
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9871&quot;&gt;9871&lt;/a&gt;
"                      Remove spike in polygon with only a spike
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9947&quot;&gt;9947&lt;/a&gt;
"                      Missing info about WKT in documentation
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9759&quot;&gt;9759&lt;/a&gt;
"                      Invalid results of R-tree knn queries for non-cartesian coordinate
"                      systems
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10019&quot;&gt;10019&lt;/a&gt;
"                      Difference of Linestring and Box returns their intersection
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10077&quot;&gt;10077&lt;/a&gt;
"                      Wrong types in concept checks in boost/geometry/arithmetic/arithmetic.hpp
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      intersects(polygon) could return a self-intersection-point
"                      for its closing point, fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      equals() could return invalid results for non-simple linear
"                      geometries according to the OGC standard, fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      touches() didn't work properly for CCW areal geomtries, fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      rtree nearest queries returned wrong elements for non-cartesian
"                      coordinate systems, fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      rtree crashed in some cases when used with Interprocess allocator,
"                      fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/functional/hash/&quot;&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed some Visual C++ 6 workarounds.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ongoing work on improving &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;hash_combine&lt;/span&gt;&lt;/code&gt;,
"                this changes the previously documented algorithm for the function.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9221&quot;&gt;Trac
"                      #9221 (&lt;em&gt;&amp;quot;message_queue deadlock on linux&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9226&quot;&gt;Trac
"                      #9226 (&lt;em&gt;&amp;quot;On some computers, Common Appdata is
"                      empty in registry, so boost interprocess cannot work&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9284&quot;&gt;Trac
"                      #9284 (&lt;em&gt;&amp;quot;WaitForSingleObject(mutex) must handle
"                      WAIT_ABANDONED&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9285&quot;&gt;Trac
"                      #9285 (&lt;em&gt;&amp;quot;CreateMutex returns NULL if fails&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9288&quot;&gt;Trac
"                      #9288 (&lt;em&gt;&amp;quot;timed_wait does not check if it has
"                      expired&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9408&quot;&gt;Trac
"                      #9408 (&lt;em&gt;&amp;quot;Android does not support XSI_SHARED_MEMORY_OBJECTS&amp;quot;&lt;/em&gt;&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9729&quot;&gt;Trac
"                      #9729 (&lt;em&gt;&amp;quot;crash on managed_external_buffer object
"                      construction&amp;quot;&lt;/em&gt;&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9767&quot;&gt;Trac
"                      #9767 (&lt;em&gt;&amp;quot;bootstamp generation causes error in
"                      case of corrupt Windows Event Log&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9835&quot;&gt;Trac
"                      #9835 (&lt;em&gt;&amp;quot;Boost Interprocess fails to compile
"                      with Android NDK GCC 4.8, -Werror=unused-variable&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9911&quot;&gt;Trac
"                      #9911 (&lt;em&gt;&amp;quot;get_tmp_base_dir(...) failure&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9946&quot;&gt;Trac
"                      #9946 (&lt;em&gt;&amp;quot;ret_ptr uninitialized in init_atomic_func,
"                      fini_atomic_func&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10011&quot;&gt;Trac
"                      #10011 (&lt;em&gt;&amp;quot;segment_manager::find( unique_instance_t*
"                      ) fails to compile&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10021&quot;&gt;Trac
"                      #10021 (&lt;em&gt;&amp;quot;Interprocess and BOOST_USE_WINDOWS_H&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/2&quot;&gt;GitHub
"                      #2 (&lt;em&gt;&amp;quot;Provide support for the Cray C++ compiler.
"                      The Cray compiler defines __GNUC__&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/3&quot;&gt;GitHub
"                      #3 (&lt;em&gt;&amp;quot;Fix/mingw interprocess_exception throw
"                      in file_wrapper::priv_open_or_create&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;ABI breaking&lt;/strong&gt;: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9221&quot;&gt;#9221&lt;/a&gt;
"                showed that &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_MSG_QUEUE_CIRCULAR_INDEX&lt;/span&gt;&lt;/code&gt;
"                option of message queue, was completely broken so an ABI break was
"                necessary to have a working implementation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Simplified, refactored and unified (timed_)lock code based on try_lock().
"                There were several bugs when handling timeout expirations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the implementation of condition variables' destructors to
"                allow POSIX semantics (the condition variable can be destroyed after
"                all waiting threads have been woken up)..
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_INTERPROCESS_SHARED_DIR_PATH&lt;/span&gt;&lt;/code&gt;
"                option to define the shared directory used to place shared memory
"                objects when implemented as memory mapped files.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_USE_WINDOWS_H&lt;/span&gt;&lt;/code&gt;.
"                When this macro is defined Interprocess does not declare used Windows
"                API function and types, includes all needed windows SDK headers and
"                uses types and functions declared by the Windows SDK.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get_size&lt;/span&gt;&lt;/code&gt; to
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;windows_shared_memory&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved Doxygen generated reference and updated and fixed forward-declaration
"                header.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;ABI breaking&lt;/strong&gt;: Fixed ABI regression
"                introduced in Boost 1.55 version, mainly noticeable on MSVC compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Source breaking&lt;/strong&gt;: Removed previously
"                deprecated &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;xxx_dont_splay&lt;/span&gt;&lt;/code&gt;
"                functions from splay containers, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splay_set_base_hook&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splay_set_member_hook&lt;/span&gt;&lt;/code&gt;from
"                splay containers and &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;
"                &lt;span class=&quot;identifier&quot;&gt;splay&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;=&lt;/span&gt;
"                &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/code&gt; extra parameter in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;splaytree_algorithms&lt;/span&gt;&lt;/code&gt; functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8468&quot;&gt;#8468:
"                      Compile error on visual studio 2010/2012 using vector with
"                      custom allocator and aligned types&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9332&quot;&gt;#9332:
"                      &lt;em&gt;&amp;quot;has_member_function_callable_with.hpp compile
"                      error on msvc-12.0&amp;quot;&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9650&quot;&gt;#9650:
"                      &lt;em&gt;&amp;quot;intrusive list with stateful value traits&amp;quot;&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9746&quot;&gt;#9746:
"                      Modern Sun CC compiler detects error in intrusive library header&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9940&quot;&gt;#9940:
"                      bad bug in intrusive list with safe_link (or auto_unlink) hooks&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9948&quot;&gt;#9948:
"                      remove use of const_cast in intrusive containers&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9949&quot;&gt;#9949:
"                      clear header node hooks upon intrusive container destruction&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9961&quot;&gt;#9961:
"                      tests for hooks not derived frorm generic_hook&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Optimized tree rebalancing code to avoid redundant assignments.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added 64 bit prime values for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;suggested_upper_bucket_count&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;suggested_lower_bucket_count&lt;/span&gt;&lt;/code&gt; in
"                64 bit platforms.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Deleted workarounds for old SUN_CC compilers, those are now unsupported
"                as modern SunPro compilers are standard-corforming enough.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;try_lexical_convert&lt;/span&gt;&lt;/code&gt;
"                function, that retuns &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;false&lt;/span&gt;&lt;/code&gt;
"                in case of failed conversion and does not require output parameter
"                to be Default Constructable (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6700&quot;&gt;#6700&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed conversion of string values with leading zeroes to &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;&lt;/code&gt; (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9659&quot;&gt;#9659&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Code was changed to produce a smaller binaries and simplify compiler's
"                work (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9046&quot;&gt;#9046&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.LexicalCast library was separated from the Boost.Conversion
"                library.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8991&quot;&gt;#8991&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/index.html&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                General changes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      For Windows targets, the library now compiles for Windows XP
"                      by default.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added indexing operators with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_name&lt;/span&gt;&lt;/code&gt;
"                      arguments to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;record&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;record_view&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added operators for non-const object output to &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_formatting_ostream&lt;/span&gt;&lt;/code&gt;.
"                      (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9389&quot;&gt;#9389&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added support for putting function names and source file names
"                      of named scopes into the formatted strings. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9263&quot;&gt;#9263&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added support for incomplete and empty markers to the named
"                      scope formatter. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9123&quot;&gt;#9123&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The default presentation for incomplete named scope lists has
"                      changed: trailing scope delimiter is omitted.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a support header for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;regex&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      By default Boost.Log uses Boost.Regex internally as the regular
"                      expressions backend. The backend can be changed by defining
"                      configuration macros.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;dump&lt;/span&gt;&lt;/code&gt;
"                      manipulator output on AVX2-enabled CPUs (e.g. Intel Haswell).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed compilation of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get_attribute&lt;/span&gt;&lt;/code&gt;
"                      method of loggers.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed a possible race in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;locked_backend&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; function implementation of
"                      synchronous and asynchronous sink frontends.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed a possible infinite block of the logging threads in the
"                      asynchronous sink enqueue methods when &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;block_on_overflow&lt;/span&gt;&lt;/code&gt;
"                      strategy was used.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href=&quot;http://www.boost.org/libs/log/doc/html/log/changelog.html&quot;&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/index.html&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking change&lt;/strong&gt;: moved a number
"                of non-core headers that are predominantly used for internal maintenance
"                into &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;include_private&lt;/span&gt;&lt;/code&gt;. The headers effected
"                are &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;test_data&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;remez&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;constants&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;solve&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tools&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;. You can continue to use these
"                headers by adding &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;libs&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;include_private&lt;/span&gt;&lt;/code&gt;
"                to your compiler's include path.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking change&lt;/strong&gt;: A number of distributions
"                and special functions were returning the maximum finite value rather
"                than raising an overflow_error, this has now been fixed, which means
"                these functions now behave as documented. However, since the default
"                behavior on raising an overflow_error is to throw a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;overflow_error&lt;/span&gt;&lt;/code&gt; exception, applications
"                which have come to reply rely on these functions not throwing may
"                experience exceptions where they did not before. The special functions
"                involved are gamma_p_inva, gamma_q_inva, ibeta_inva, ibetac_inva,
"                ibeta_invb, ibetac_invb, gamma_p_inv, gamma_q_inv. The distributions
"                involved are pareto_distrib, beta_distrib, geometric_distrib, negative_binomial_distrib,
"                binomial_distrib, chi_squared_distrib, gamma_distrib, inverse_chi_squared_distrib,
"                inverse_gamma_distrib. See &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10111&quot;&gt;#10111&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix round and trunc functions so they can be used with integer arguments,
"                see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10066&quot;&gt;#10066&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix Halley iteration to handle zero derivative (with non-zero second
"                derivative), see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10046&quot;&gt;#10046&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix Geometric distribution use of Policies, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9833&quot;&gt;#9833&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix corner cases in the negative binomial distribution, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9834&quot;&gt;#9834&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix compilation failures on Mac OS.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added bernoulli_numbers, changed arbitrary precision tgamma/lgamma
"                to use Sterling's approximation (from Nikhar Agrawal).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added first derivatives of the Bessel functions: cyl_bessel_j_prime,
"                cyl_neumann_prime, cyl_bessel_i_prime, cyl_bessel_k_prime, sph_bessel_prime
"                and sph_neumann_prime (from Anton Bikineev).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed buggy Student's t example code, along with docs for testing
"                sample means for equivalence.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Documented &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;max_iter&lt;/span&gt;&lt;/code&gt;
"                parameter in root finding code better, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9225&quot;&gt;#9225&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add option to explicitly enable/disable use of __float128 in constants
"                code, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9240&quot;&gt;#9240&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Cleaned up handling of negative values in Bessel I0 and I1 code (removed
"                dead code), see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9512&quot;&gt;#9512&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed handling of very small values passed to tgamma and lgamma so
"                they don't generate spurious overflows (thanks to Rocco Romeo).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9672&quot;&gt;#9672 PDF
"                and CDF of a Laplace distribution throwing domain_error&lt;/a&gt; Random
"                variate can now be infinite.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed several corner cases in rising_factorial, falling_factorial
"                and tgamma_delta_ratio with thanks to Rocco Romeo.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed constant &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pow23_four_minus_pi&lt;/span&gt;
"                &lt;/code&gt; whose value did not match the name (and was unused by Boost.Math),
"                see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9712&quot;&gt;#9712&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;BOOST_MOVE_RET&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9482&quot;&gt;#9482:
"                &lt;em&gt;&amp;quot;MSVC macros not undefined in boost/move/detail/config_end.hpp&amp;quot;&lt;/em&gt;&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9045&quot;&gt;#9045:
"                &lt;em&gt;&amp;quot;Wrong macro name on docs&amp;quot;&lt;/em&gt;&lt;/a&gt;,
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8420&quot;&gt;#8420:
"                &lt;em&gt;&amp;quot;move's is_convertible does not compile with aligned
"                data&amp;quot;&lt;/em&gt;&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/mpl/&quot;&gt;MPL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mpl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;for_each&lt;/span&gt;&lt;/code&gt; is enabled for use on
"                GPU
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_array/index.html&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5664&quot;&gt;#5664&lt;/a&gt; operator() checks for Collection concept but requires RandomAccessCollection
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4874&quot;&gt;#4874&lt;/a&gt; compile errors using Visual C++ 2010 in debug mode
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3581&quot;&gt;#3581&lt;/a&gt; MultiArray storage order example incorrect for fortran_storage_ordering
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4032&quot;&gt;#4032&lt;/a&gt; Move MultiArray concepts out of detail namespace
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9212&quot;&gt;#9212&lt;/a&gt; Broken links to C++ standard papers
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8368&quot;&gt;#8368&lt;/a&gt; GCC -Wundef warning about BOOST_MULTI_ARRAY_NO_GENERATORS
"                in multi_array
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
"                member function of hashed indices used to have poor performance under
"                low load conditions due to the requirement that an iterator to the
"                next element must be returned (see ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4264&quot;&gt;#4264&lt;/a&gt;). In accordance
"                with the resolution of &lt;a href=&quot;http://lwg.github.io/issues/lwg-closed.html#579&quot;&gt;LWG
"                issue #579&lt;/a&gt;, this problem has been fixed while maintaining
"                the interface of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;erase&lt;/span&gt;&lt;/code&gt;,
"                at the expense of using one more word of memory per element. In fact,
"                C++ complexity requirements on unordered associative containers have
"                been improved for hashed indices so that
"              &lt;/div&gt;
"              &lt;ul&gt;
"                &lt;li&gt;
"                  &lt;div&gt;
"                    deletion of a given element is unconditionally constant-time,
"                  &lt;/div&gt;
"                &lt;/li&gt;
"                &lt;li&gt;
"                  &lt;div&gt;
"                    worst-case performance is not &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;O&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; but &lt;code&gt;O(n&lt;sub&gt;dist&lt;/sub&gt;)&lt;/code&gt;, where &lt;code&gt;n&lt;sub&gt;dist&lt;/sub&gt;&lt;/code&gt; is the number of
"                    non-equivalent elements in the index.
"                  &lt;/div&gt;
"                &lt;/li&gt;
"              &lt;/ul&gt;
"              &lt;div&gt;
"                Due to the fact that hashed indices rely on a new data structure,
"                the internal representation of their iterators and local iterators
"                have changed, which affects serialization: their corresponding serialization
"                &lt;a href=&quot;http://www.boost.org/libs/serialization/doc/tutorial.html#versioning&quot;&gt;class
"                version&lt;/a&gt; has been bumped from 0 to 1. Old archives involving
"                hashed index (local) iterators can be loaded by Boost 1.56 version
"                of Boost.MultiIndex, but not the other way around.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Hashed indices now provide &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;reserve&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Hashed indices can now be checked for equality and inequality following
"                the (suitably adapted) C++ standard specification in &lt;strong&gt;[unord.req]&lt;/strong&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The public interface of Boost.MultiIndex provide &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
"                specifications where appropriate (for compliant compilers).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved performance of failed insertions into a &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Much internal code aimed at supporting MSVC++ 7.0 and prior has been
"                removed. Compilation times without this legacy code might be slightly
"                faster.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a bug with insertion via iterators dereferencing to rvalues
"                (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9665&quot;&gt;#9665&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Made Boost.MultiIndex compatible with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_BIND_NO_PLACEHOLDERS&lt;/span&gt;&lt;/code&gt;
"                (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9798&quot;&gt;#9798&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Change floating point to rational conversions to be implicit, see
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10082&quot;&gt;10082&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix definition of checked_cpp_rational typedef.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bug in assignment from string in cpp_int, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9936&quot;&gt;9936&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new cpp_bin_float backend for binary floating point.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bug in assignment from string in cpp_int, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9936&quot;&gt;9936&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added MSVC-specific #include for compiler intrinsics, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9336&quot;&gt;9336&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed various typos in docs, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9432&quot;&gt;9432&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed gmp_rational to allow move-copy from an already copied-from
"                object, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9497&quot;&gt;9497&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added list of values for numeric_limits.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/odeint/&quot;&gt;Odeint&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added algebra and operations dispatcher for automatic detection of
"                appropriate algebras and operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for Eigen, Boost.Multiarray, Boost.Mpi, Boost.Compute,
"                Blaze, and NT2.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed algebra interface to use algebra.norm_inf function.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added iterators for iterating through the solution of the ODEs, hence
"                an alternative to the integrate functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the Velocity-Verlet method.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Minor bug fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/optional/&quot;&gt;Optional&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for rvalue references. Now &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; works with moveable but non-copyable
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;/code&gt;'s.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;/code&gt; (now
"                uses move operations).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;emplace&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;. This is the last of the requests
"                from &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/1841&quot;&gt;#1841&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;&lt;/code&gt; is moveable,
"                including conditional &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;noexcept&lt;/span&gt;&lt;/code&gt;
"                specifications, which make it &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_if_noexcept&lt;/span&gt;&lt;/code&gt;-friendly.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Using explicit operator bool() on platforms that support it (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4227&quot;&gt;#4227&lt;/a&gt;)
"                (breaking change).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Forward declaration of &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;lt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;ostream&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;,&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;optional&lt;/span&gt;
"                &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;amp;)&lt;/span&gt;&lt;/code&gt;
"                to prevent inadvertent incorrect serialization of optional objects.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed depprecated function &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;reset&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; from examples (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9005&quot;&gt;#9005&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Equality comparison with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;none&lt;/span&gt;&lt;/code&gt;
"                does not require that &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;/code&gt;
"                be EqualityComparable.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Optional rvalue references are explicitly disallowed.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Binding temporaries to optional references is explicitly disallowed
"                (breaking change).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                More ways to access the contained value, functions &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_or&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;value_or_eval&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated and reorganized documentation, added tutorial and quick guide
"                sections.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/predef/&quot;&gt;Predef&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Addition of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_PLAT_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;*&lt;/span&gt;&lt;/code&gt; platform definitions for MinGW and
"                Windows platform variants.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Detection of ARM architecture for Windows compilers to target mobile
"                devices of Windows 8.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved ARM detection for 64 bit ARM.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added detection of iOS as an operating system.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved detection of endianess on some platforms.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Addition of exclusive plus emulated definitions for platform and
"                compiler detection.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/preprocessor/&quot;&gt;Preprocessor&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                When using variadic macros tuple functionality was added to match
"                all the array functionality.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/program_options/&quot;&gt;Program Options&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Columns in the &lt;code&gt;&lt;span class=&quot;special&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;help&lt;/span&gt;&lt;/code&gt;
"                output are now aligned across all option groups (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6114&quot;&gt;#6114&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Option names with dashes are no longer truncated in error messages
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8009&quot;&gt;#8009&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/regex/index.html&quot;&gt;Regex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking change:&lt;/strong&gt; corrected behavior
"                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_regex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;mark_count&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"                to match existing documentation, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;basic_regex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;subexpression&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; changed to match, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9227&quot;&gt;#9227&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issue &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8903&quot;&gt;#8903&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed documentation typos from &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9283&quot;&gt;#9283&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug in collation code that failed if the locale generated collation
"                strings with embedded nul's, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9451&quot;&gt;#9451&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apply patch for unusual thread usage (no statically initiallized
"                mutexes), see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9461&quot;&gt;#9461&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added better checks for invalid UTF-8 sequences, see &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9473&quot;&gt;#9473&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/smart_ptr/&quot;&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated the overloads of &lt;a href=&quot;http://www.boost.org/libs/smart_ptr/make_shared_array.html&quot;&gt;make_shared&lt;/a&gt;
"                and &lt;a href=&quot;http://www.boost.org/libs/smart_ptr/make_shared_array.html&quot;&gt;allocate_shared&lt;/a&gt;
"                of array types (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[]&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;]&lt;/span&gt;&lt;/code&gt;) to conform to the specification
"                in C++ standard paper &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2014/n3939.html&quot;&gt;N3939&lt;/a&gt;
"                and significantly reduced the spatial overhead of the internal bookkeeping
"                structures.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated the implementations of make_shared and allocate_shared for
"                scalar types and array types, respectively, to resolve C++ standard
"                library defect report &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-active.html#2070&quot;&gt;#2070&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;New Experimental Features:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7446&quot;&gt;#7446&lt;/a&gt;
"                      Async: Add when_any.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7447&quot;&gt;#7447&lt;/a&gt;
"                      Async: Add when_all.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7448&quot;&gt;#7448&lt;/a&gt;
"                      Async: Add async taking a scheduler parameter.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8274&quot;&gt;#8274&lt;/a&gt;
"                      Synchro: Add concurrent queue
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8513&quot;&gt;#8513&lt;/a&gt;
"                      Async: Add a basic thread_pool executor.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8518&quot;&gt;#8518&lt;/a&gt;
"                      Synchro: Add a latch class.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8516&quot;&gt;#8516&lt;/a&gt;
"                      Async: Add future/shared_future::then taking a scheduler as
"                      parameter.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9058&quot;&gt;#9058&lt;/a&gt;
"                      with_lock_guard function
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9571&quot;&gt;#9571&lt;/a&gt;
"                      Add a dynamic executor and an executor adaptor
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/8070&quot;&gt;#8070&lt;/a&gt;
"                      prefer GetTickCount64 over GetTickCount
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9333&quot;&gt;#9333&lt;/a&gt;
"                      ex_scoped_thread compile fails on msvc-12.0
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9341&quot;&gt;#9341&lt;/a&gt;
"                      compile error scoped_thread(move semantics) intel-linux-14.0.1
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9366&quot;&gt;#9366&lt;/a&gt;
"                      async(Executor, ...) fails to compile with msvc-10,11,12
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9402&quot;&gt;#9402&lt;/a&gt;
"                      test_excutor regression on msvc-10,11,12
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9404&quot;&gt;#9404&lt;/a&gt;
"                      ex_make_future regression error
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9471&quot;&gt;#9471&lt;/a&gt;
"                      Synchronization documentation nits
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9535&quot;&gt;#9535&lt;/a&gt;
"                      Missing exception safety might result in crash
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9618&quot;&gt;#9618&lt;/a&gt;
"                      try_join_for problem: program is not terminate.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9625&quot;&gt;#9625&lt;/a&gt;
"                      Please rewrite boost::thread::~thread() reference section
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9632&quot;&gt;#9632&lt;/a&gt;
"                      public method start_thread in boost::thread class
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9673&quot;&gt;#9673&lt;/a&gt;
"                      thread compilation with MingW/gcc on Windows gives errors
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9708&quot;&gt;#9708&lt;/a&gt;
"                      boost::condition_variable::timed_wait unexpectedly wakes up
"                      while should wait infinite
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9711&quot;&gt;#9711&lt;/a&gt;
"                      future continuation called twice
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9867&quot;&gt;#9867&lt;/a&gt;
"                      Remove references to gcc-mingw
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10008&quot;&gt;#10008&lt;/a&gt;
"                      Boost Synchronization documentation typos (futures)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10058&quot;&gt;#10058&lt;/a&gt;
"                      Null pointer access in once
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10125&quot;&gt;#10125&lt;/a&gt;
"                      call_once: compile errors in variadic version with rvalue reference
"                      emulation
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10126&quot;&gt;#10126&lt;/a&gt;
"                      call_once: deprecate (Function, once_flag&amp;amp;) overload
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10147&quot;&gt;#10147&lt;/a&gt;
"                      pthread_delay_np() parameters different on AIX even with gcc
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10155&quot;&gt;#10155&lt;/a&gt;
"                      thread::physical_concurrency() always returns 0 on PowerPC
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10184&quot;&gt;#10184&lt;/a&gt;
"                      Future: multiply defined symbols
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/tr1/index.html&quot;&gt;TR1&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This library is now deprecated.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/tti/&quot;&gt;TTI&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9441&quot;&gt;#9441&lt;/a&gt;: Added better support for Sun Solaris Studio C++
"                compiler.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9444&quot;&gt;#9444&lt;/a&gt;: Handle all situations where the enclosing class
"                is not a class type.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Minor documentation and warning fixes (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9377&quot;&gt;#9377&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9719&quot;&gt;#9719&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Always use prime number of buckets for integers. Fixes performance
"                regression when inserting consecutive integers (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9282&quot;&gt;#9282&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Only construct elements using allocators, as specified in C++11 standard.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/index.html&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Some components were moved to the new Boost.Core library.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;/code&gt; is
"                deprecated in favor of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_deleter&lt;/span&gt;&lt;/code&gt;
"                from Boost.Core. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;/code&gt;
"                is an alias for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;null_deleter&lt;/span&gt;&lt;/code&gt;,
"                it will be removed in future releases.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;base_from_member&lt;/span&gt;&lt;/code&gt;
"                utility now supports lvalue reference member types. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7577&quot;&gt;#7577&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/uuid/index.html&quot;&gt;UUID&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added basic support for C++11 features.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented SSE-optimized versions of some functions of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;uuid&lt;/span&gt;&lt;/code&gt;, including comparison operators
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;/code&gt;. The support
"                for different versions of SSE is automatically detected at compile
"                time for most compilers, but can also be explicitly enabled or disabled
"                with &lt;a href=&quot;http://www.boost.org/libs/uuid/uuid.html#Configuration&quot;&gt;configuration
"                macros&lt;/a&gt;. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8509&quot;&gt;#8509&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Silenced some compiler warnings. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8495&quot;&gt;#8495&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8697&quot;&gt;#8697&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking change:&lt;/strong&gt; Variant now uses
"                variadic templates if they are supported by compiler. This leads
"                to smaller binaries and better compilation times but in some cases
"                may break metaprogramming functions, especially if &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/BOOST_VARIANT_ENUM_PARAMS.html&quot;&gt;BOOST_VARIANT_ENUM_PARAMS&lt;/a&gt;
"                and &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/BOOST_VARIANT_ENUM_SHIFTED_PARAMS.html&quot;&gt;BOOST_VARIANT_ENUM_SHIFTED_PARAMS&lt;/a&gt;
"                are not used. Usage of variadic templates &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/BOOST_VARIANT_DO_NOT_USE_VARIADIC_TEMPLATES.html&quot;&gt;may
"                be disabled&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;http://www.boost.org/libs/variant/doc/html/variant/reference.html#header.boost.variant.polymorphic_get_hpp&quot;&gt;Added&lt;/a&gt;
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_get&lt;/span&gt;&lt;/code&gt; function
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9479&quot;&gt;#9479&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Move-only classes now can be returned by visitors.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Optimized variant::swap() and fixed ambiguity in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_swap&lt;/span&gt;&lt;/code&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2839&quot;&gt;#2839&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added conditional noexcepts to move assignments, default and move
"                constructors making &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;variant&lt;/span&gt;&lt;/code&gt;
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_if_noexcept&lt;/span&gt;&lt;/code&gt;-friendly
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7911&quot;&gt;#7911&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Exceptions are now visible across modules even with -fvisibility=hidden
"                flags.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Dropped support of antique compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some warnings (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3020&quot;&gt;#3020&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_56_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.4, 3.3, 3.2, 3.1, 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++98: 3.3.16
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11, libc++: 3.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1y: 3.3.16
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++98: 4.9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.8.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++1y: 4.9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 13.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 5.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 5.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.9.0, 4.8.2, 4.7.3, 4.7.2, 4.6.3, 4.5.4, 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 12.0, 11.0, 10.0, 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.4, 3.3, 3.2, 3.1, 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++98: 3.3.16
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11, libc++: 3.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1y: 3.3.16
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14, libc++: trunk
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.8.2, 4.8.1, 4.7.3, 4.6.4, 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++98: 4.9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.9.0, 4.8.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++1y: 4.9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 13.1, 13.0, 12.1, 11.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 5.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11:
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: trunk
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: trunk
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.9.0, 4.8.2, 4.7.2, 4.6.3, 4.5.4, 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 12.0, 11.0, 10.0, 9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC, ARM: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC, x86: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_56_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Thu, 07 Aug 2014 16:08:22 +0000
-quickbook
"feed/history/boost_1_56_0.qbk
)
(feed/history/boost_1_57_0.qbk
-item
"<item><title>Version 1.57.0</title><link>http://www.boost.org/users/history/version_1_57_0.html</link><guid>http://www.boost.org/users/history/version_1_57_0.html</guid><pubDate>Mon, 3 Nov 2014 15:55:36 -0600</pubDate><description>
"
"
"
"  &lt;div id=&quot;version_1_57_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/any/&quot;&gt;Any&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                RTTI is not required any more (&lt;a href=&quot;http://www.boost.org/libs/type_index&quot;&gt;TypeIndex&lt;/a&gt;
"                library is used for RTTI emulation)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8958&quot;&gt;#8958&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/asio/&quot;&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed the &lt;tt&gt;kqueue&lt;/tt&gt; reactor so that it works on FreeBSD
"                (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10606&quot;&gt;#10606&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an issue in the &lt;tt&gt;kqueue&lt;/tt&gt; reactor which resulted
"                in spinning when using serial ports on Mac OS (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10496&quot;&gt;#10496&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;tt&gt;kqueue&lt;/tt&gt; reactor support for read-only file
"                descriptors (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10367&quot;&gt;#10367&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a compile error when using the &lt;tt&gt;/dev/poll&lt;/tt&gt;
"                reactor (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10350&quot;&gt;#10350&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10572&quot;&gt;#10572&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the Windows backend to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;WSASocketW&lt;/span&gt;&lt;/code&gt;,
"                as &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;WSASocketA&lt;/span&gt;&lt;/code&gt; has
"                been deprecated (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10534&quot;&gt;#10534&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some warnings reported by Visual C++ 2013 (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10376&quot;&gt;#10376&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed integer type used in the WinRT version of the byte-order conversion
"                functions (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10539&quot;&gt;#10539&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed documentation to indicate that &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;use_future&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"                are not made available when including the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                convenience header (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10567&quot;&gt;#10567&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Explicitly marked &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;/code&gt;
"                as deprecated. Use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;asio&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;io_service&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;strand&lt;/span&gt;&lt;/code&gt;
"                instead.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/circular_buffer/&quot;&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some warnings and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_if_noexcept&lt;/span&gt;&lt;/code&gt;
"                from Boost.Move is used &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7888&quot;&gt;#7888&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/config/&quot;&gt;Config&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HAS_PRAGMA_DETECT_MISMATCH&lt;/span&gt;&lt;/code&gt;
"                macro was added
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;initializer_list&lt;/span&gt;&lt;/code&gt;.
"                Contributed by Robert Matusewicz.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed double destruction bugs in vector and backward expansion capable
"                allocators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10263&quot;&gt;Trac
"                      #10263 (&lt;em&gt;&amp;quot;AIX 6.1 bug with sched_yield() function
"                      out of scope&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://github.com/boostorg/container/pull/16&quot;&gt;GitHub
"                      #16: &lt;em&gt;Fix iterators of incomplete type containers&lt;/em&gt;&lt;/a&gt;.
"                      Thanks to Mikael Persson.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                optionally register stacks with valgrind
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10386&quot;&gt;#10386&lt;/a&gt; MSVC link error in asymmetric_coroutine.hpp: symbol already
"                defined
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10536&quot;&gt;#10536&lt;/a&gt; call to 'begin(...pull_coroutine&amp;lt; R &amp;gt; &amp;amp; c)'
"                is ambiguous
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/flyweight/&quot;&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added serialization support via &lt;a href=&quot;http://www.boost.org/libs/serialization/&quot;&gt;Boost
"                Serialization&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;flyweight&lt;/span&gt;&lt;/code&gt; default
"                constructor was made explicit in Boost 1.56, which introduces a regression
"                in some initialization scenarios. The former non-explicit default
"                constructor has been restored (ticket &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10439&quot;&gt;#10439&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Improvements&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The support of parameters convertible to value_type in rtree
"                      insert(), remove() and count() functions
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Solved tickets&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8402&quot;&gt;8402&lt;/a&gt;
"                      Implicit conversion warnings
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9354&quot;&gt;9354&lt;/a&gt;
"                      Bug in winding strategy affecting within() and covered_by()
"                      for non-cartesian coordinate systems
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10177&quot;&gt;10177&lt;/a&gt;
"                      Missing include
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10345&quot;&gt;10345&lt;/a&gt;
"                      Distance fails to compile for some coordinate types
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10398&quot;&gt;10398&lt;/a&gt;
"                      Wrong neighbour check in buffer, calculating turns
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10421&quot;&gt;10421&lt;/a&gt;
"                      Invalid Point-Box distance for spherical CS
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10615&quot;&gt;10615&lt;/a&gt;
"                      Rtree constructor feature request
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10643&quot;&gt;10643&lt;/a&gt;
"                      Invalid point_on_surface() result for big coordinates
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10668&quot;&gt;10668&lt;/a&gt;
"                      Implicit conversion warnings (duplicated 8402)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Bugfixes&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Several fixes of bugs in algorithm buffer
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in point_on_surface() for CCW Polygons (extreme_points())
"                      and numerical issue (thanks to Matt Amos)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in disjoint() for A/A fixed by replacement of point_on_surface()
"                      with point_on_border() (thanks to Matt Amos)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The result of convex_hull(), duplicated Point in open output,
"                      too small number of Points for 1- and 2-Point input
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Imprecision for big coordinates in centroid(), fixed by Points
"                      translation (related with ticket 10643)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      for_each_segment() not taking into account the last segment
"                      of open Geometry
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;/code&gt;,
"                now forwards boost::interprocess::unique_ptr to the general purpose
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;movelib&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;/code&gt; class from &lt;strong&gt;Boost.Move&lt;/strong&gt;. This implementation is closer
"                to the standard &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;/code&gt;
"                implementation and it's better maintained.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10262&quot;&gt;Trac
"                      #10262 (&lt;em&gt;&amp;quot;AIX 6.1 bug with variable definition
"                      hz&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10229&quot;&gt;Trac
"                      #10229 (&lt;em&gt;&amp;quot;Compiling errors in interprocess\detail\os_file_functions.hpp&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10506&quot;&gt;Trac
"                      #10506 (&lt;em&gt;&amp;quot;Infinite loop in create_or_open_file&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/11&quot;&gt;GitHub
"                      Pull #11 (&lt;em&gt;&amp;quot;Compile fix for BOOST_USE_WINDOWS_H&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reorganized Doxygen marks to obtain a better header reference.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Experimental version of node checkers, contributed by Matei David.
"                Many thanks!
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented &lt;a href=&quot;http://www.open-std.org/JTC1/sc22/WG21/docs/papers/2013/n3644.pdf&quot;&gt;N3644:
"                Null Forward Iterators&lt;/a&gt; from C++14.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://github.com/boostorg/intrusive/pull/12&quot;&gt;GitHub
"                      Pull #12: &lt;em&gt;Fix MSVC14 warning C4456: declaration of
"                      'x_parent_right' hides previous local declaration&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10520&quot;&gt;Boost
"                      Trac #10520: &lt;em&gt;Conversion warning in intrusive/detail/utilities.hpp&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10469&quot;&gt;Boost
"                      Trac #10469: &lt;em&gt;Erasing from intrusive unordered_multiset
"                      with optimize_multikey goes into an infinite loop&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/iterator/&quot;&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Most components of the library were moved into the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;iterators&lt;/span&gt;&lt;/code&gt; namespace. For backward
"                compatibility the components are also accessible in the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;/code&gt; namespace.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Iterator operators are now conditionally defined based on the iterator
"                category.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Some of the internal components of the library were made public (&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;minimum_category&lt;/span&gt;&lt;/code&gt;, for example).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Some internal changes, library now consist of multiple headers instead
"                of a single one &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10391&quot;&gt;#10391&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10173&quot;&gt;#10173&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/math/&quot;&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Hyperexponential Distribution.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix some spurious overflows in the incomplete gamma functions (with
"                thanks to Rocco Romeo).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bug in derivative of incomplete beta when a = b = 0.5 - this
"                also effects several non-central distributions, see issue 10480.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some corner cases in function round.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Don't support 80-bit floats in cstdfloat.hpp if standard library
"                support is broken.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;/code&gt; smart
"          pointer. Thanks to Howard Hinnant for his excellent unique_ptr emulation
"          code and testsuite.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Added &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;move_if_noexcept&lt;/span&gt;&lt;/code&gt;
"          utility. Thanks to Antony Polukhin for the implementation.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Fixed bugs:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9785&quot;&gt;Trac #9785:
"                &lt;em&gt;&amp;quot;Compiler warning with intel icc in boost/move/core.hpp&amp;quot;&lt;/em&gt;&lt;/a&gt;,
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10460&quot;&gt;Trac #10460:
"                &lt;em&gt;&amp;quot;Compiler error due to looser throw specifier&amp;quot;&lt;/em&gt;&lt;/a&gt;,
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://github.com/boostorg/move/pull/3&quot;&gt;Git Pull #3:
"                &lt;em&gt;&amp;quot;Don't delete copy constructor when rvalue references
"                are disabled&amp;quot;&lt;/em&gt;&lt;/a&gt;,
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_array/&quot;&gt;MultiArray&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a friend-declaration related warning for clang (thanks to Marcel
"                Raad).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multiprecision/&quot;&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed rational to float conversions to exactly round to nearest.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added improved generic float to rational conversions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed rare bug in exponent function for cpp_bin_float.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed various minor documentation issues.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                When &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tuple&lt;/span&gt;&lt;/code&gt;s are available, these can
"                be used for lookup operations in indices equipped with composite
"                keys. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;tuple&lt;/span&gt;&lt;/code&gt;s are also supported for backwards
"                compatibility.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/preprocessor/&quot;&gt;Preprocessor&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added is_begin_parens and remove_parens.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added tuple functionality to parallel all array functionality.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed VC++ problems with empty tuple data.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated internal is_empty to use superior variadic version when variadic
"                macros are supported.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated clang to have same variadic support as gcc.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated doc for new functionality.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/thread/&quot;&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;New Experimental Features:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6227&quot;&gt;#6227&lt;/a&gt;
"                      Synchro: Use of variadic templates on Generic Locking Algorithms
"                      on compilers providing them
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10298&quot;&gt;#10298&lt;/a&gt;
"                      Synchro: Added queue views.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10300&quot;&gt;#10300&lt;/a&gt;
"                      Async: Added generic_executor_ref.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10552&quot;&gt;#10552&lt;/a&gt;
"                      Add make_valid_future
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6782&quot;&gt;#6782&lt;/a&gt;
"                      call_once uses incorrect barrier intrinsic on Visual Studio
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/6787&quot;&gt;#6787&lt;/a&gt;
"                      boost::thread::sleep() hangs if system time is rolled back
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/7665&quot;&gt;#7665&lt;/a&gt;
"                      this_thread::sleep_for no longer uses steady_clock in thread
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9307&quot;&gt;#9307&lt;/a&gt;
"                      future::fallback_to assert with ERRORRRRR boost: mutex lock
"                      failed in pthread_mutex_lock: Invalid argument
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9308&quot;&gt;#9308&lt;/a&gt;
"                      future::async fails with terminate called throwing an exception
"                      when called with a lambda - clang-darwin-asan11
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9310&quot;&gt;#9310&lt;/a&gt;
"                      test_4648_lib fails on clang-darwin-asan11
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9425&quot;&gt;#9425&lt;/a&gt;
"                      Boost promise &amp;amp; future does not use supplied allocator
"                      for value storage
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9558&quot;&gt;#9558&lt;/a&gt;
"                      future continuations unit test hangs in get()/pthread_cond_wait()
"                      on Mac 10.7/32-bit/x86/darwin-4.2.1
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9787&quot;&gt;#9787&lt;/a&gt;
"                      [windows] Small duration value passed down to basic_timed_mutex::try_lock_until
"                      and condition_variable::wait_until can cause infinite or near
"                      infinite wait for win32
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/9880&quot;&gt;#9880&lt;/a&gt;
"                      [windows] boost::condition_variable.timed_wait() exception
"                      if system time &amp;lt; 1970
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10159&quot;&gt;#10159&lt;/a&gt;
"                      GCC 4.4 error sorry, unimplemented
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10196&quot;&gt;#10196&lt;/a&gt;
"                      thread_specific_ptr does not support void*
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10296&quot;&gt;#10296&lt;/a&gt;
"                      Boost.Thread 1.56 rc1 does not compile on Mingw
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10297&quot;&gt;#10297&lt;/a&gt;
"                      Boost.Thread 1.56 rc1 hangs when built with clang on armhf
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10340&quot;&gt;#10340&lt;/a&gt;
"                      No boost::promise&amp;lt;T&amp;gt;::set_value(const T&amp;amp;) overload
"                      present in C++03 mode
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10425&quot;&gt;#10425&lt;/a&gt;
"                      Missing documentation for when_all/when_any.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10426&quot;&gt;#10426&lt;/a&gt;
"                      Take in account the deferred futures in when_all.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10427&quot;&gt;#10427&lt;/a&gt;
"                      Take in account the deferred and ready futures in when_any.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10428&quot;&gt;#10428&lt;/a&gt;
"                      Adapt to new unique_ptr interface in Boost.Move
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10465&quot;&gt;#10465&lt;/a&gt;
"                      Missing implementation of when_all/when_any when the result
"                      is a tuple.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10476&quot;&gt;#10476&lt;/a&gt;
"                      classes using BOOST_THREAD_MOVABLE_ONLY&amp;lt;T&amp;gt; dont satisfy
"                      is_copy_constructible&amp;lt;T&amp;gt;::value == false
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10478&quot;&gt;#10478&lt;/a&gt;
"                      Data race in boost/thread/future.hpp
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10529&quot;&gt;#10529&lt;/a&gt;
"                      The pthread/condition_variable_any constructor reports incorrect
"                      error code for pthread_cond_init
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;http://svn.boost.org/trac/boost/ticket/10563&quot;&gt;#10563&lt;/a&gt;
"                      shared_future&amp;lt;R&amp;gt;::then should be const
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_index/&quot;&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_HAS_PRAGMA_DETECT_MISMATCH&lt;/span&gt;&lt;/code&gt;
"                is now used to detect ODR violations &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10404&quot;&gt;#10404&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Typos fixed &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10294&quot;&gt;#10294&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_traits/&quot;&gt;TypeTraits&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new traits is_copy_assignable and is_final.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/units/&quot;&gt;Units&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New unit system &amp;lt;boost/units/systems/information.hpp&amp;gt; units
"                for: bit, byte, nat, hartley and shannon,
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add scale units for binary prefixes kibi, mebi, gibi, tebi, pebi,
"                zebi and yobi IEC prefixes
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix output of NaN on msvc-14
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for C++11 numeric_limits::max_digits10 and ::lowest
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                warning fixes
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/unordered/&quot;&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;pointer&lt;/span&gt;&lt;/code&gt; typedef
"                in iterators (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10672&quot;&gt;#10672&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix Coverity warning (&lt;a href=&quot;https://github.com/boostorg/unordered/pull/2&quot;&gt;GitHub
"                #2&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/utility/&quot;&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;prior&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"                functions taking distance arguments were reworked. The code now work
"                correctly when the distance is unsigned or both arguments are integers.
"                The new code relies on the availability of operators supported by
"                the first argument to select the correct implementation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/numeric/ublas/&quot;&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                added two new types: matrix_row and matrix_column facades . With
"                them, it is possible to access to the matrices as an array of rows
"                and an array of columns, respectively.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                added fixed_vector/fixed_matrix classes to represent small - fixed
"                size containers. Requires c++11 because it is using std::array
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                fixed the long standing banded matrix bug (https://svn.boost.org/trac/boost/ticket/7549).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                the interface of matrices and vectors has been extended with cbegin,
"                cend, crbegin and crend member functions, as defined in c++11.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                removed doxygen documentation to make the distribution lighter
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                removed warnings with MSVC for unused parameters
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                changed the uBlas development folder structure (will not affect users
"                of the library)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                performed a very large overhaul with respect to warnings and errors
"                on various compilers. Apart for some hard to resolve warnings and
"                older compiler incompatibilities, compilations with uBlas will be
"                much cleaner now.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_57_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.1, 3.2, 3.3, 3.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.4, 4.7.3, 4.8.1, 4.8.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++98: 4.9.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7, 4.8.2, 4.8.3, 4.9.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 4.9.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 13.1, 14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++11: 13.1, 14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 6.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 6.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 6.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1, 4.9.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.0, 4.4.7. 4.5.4, 4.6.3, 4.7.2, 4.7.3, 4.8.0, 4.8.2,
"                4.9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.1, 3.2, 3.3, 3.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, trunk
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.6.4, 4.7.3, 4.8.1, 4.8.2, 5.0 &lt;em&gt;(experimental)&lt;/em&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7, 4.8.2, 4.8.3, 4.9.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 4.9.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 11.1, 12.1, 13.0, 13.1, 14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++11: 13.1, 14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 6.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 6.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 6.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: trunk
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: trunk
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1, 4.9.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.0, 4.4.7, 4.5.4, 4.6.3, 4.7.3, 4.8.0, 4.8.2, 4.9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_57_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Mon, 03 Nov 2014 21:55:36 +0000
-quickbook
"feed/history/boost_1_57_0.qbk
)
(feed/history/boost_1_58_0.qbk
-item
"<item><title>Version 1.58.0</title><link>http://www.boost.org/users/history/version_1_58_0.html</link><guid>http://www.boost.org/users/history/version_1_58_0.html</guid><pubDate>Fri, 17 Apr 2015 08:53:58 +0100</pubDate><description>
"
"
"
"  &lt;div id="version_1_58_0.known_issue"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Known Issue&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Boost.Python will fail to build if it is compiled against a version of
"          python that is one of: 3.0.X, 3.1.X, 3.2.X, 3.3.X. Versions 2.X and 3.4+
"          are not affected. This is fixed in &lt;a href="https://github.com/boostorg/python/commit/3e405b6fd5db5615bbef241763de070118222ca7"&gt;git&lt;/a&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Boost.Fusion has a regression with non-constexpr types. &lt;a href="https://svn.boost.org/trac/boost/ticket/11211"&gt;#11211&lt;/a&gt;
"  This
"          is fixed in some PRs: &lt;a href="https://github.com/boostorg/fusion/pull/70"&gt;Github
"          PR #70&lt;/a&gt;, &lt;a href="https://github.com/boostorg/fusion/pull/71"&gt;Github
"          PR #71&lt;/a&gt;, &lt;a href="https://github.com/boostorg/fusion/pull/72"&gt;Github
"          PR #72&lt;/a&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Patches:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://www.boost.org/patches/1_58_0/0001-Fix-exec_file-for-Python-3-3.4.patch"&gt;0001-Fix-exec_file-for-Python-3-3.4.patch&lt;/a&gt;
"          (for libs/python).
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;a href="http://www.boost.org/patches/1_58_0/0002-Fix-a-regression-with-non-constexpr-types.patch"&gt;0002-Fix-a-regression-with-non-constexpr-types.patch&lt;/a&gt;
"          (for libs/fusion).
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_58_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/endian"&gt;Endian&lt;/a&gt;:&lt;/span&gt;
"  Types and conversion functions
"          for correct byte ordering and more regardless of processor endianness.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/sort/"&gt;Sort&lt;/a&gt;:&lt;/span&gt;
"  Includes spreadsort, a general-case
"          hybrid radix sort that is faster than O(n*log(n))
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_58_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured errors generated by Windows' &lt;code&gt;&lt;span class="identifier"&gt;ConnectEx&lt;/span&gt;&lt;/code&gt;
"                function are mapped to their portable equivalents (&lt;a href="https://svn.boost.org/trac/boost/ticket/10744"&gt;#10744&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new macro &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_DISABLE_CONNECTEX&lt;/span&gt;&lt;/code&gt;
"                to allow use of &lt;code&gt;&lt;span class="identifier"&gt;ConnectEx&lt;/span&gt;&lt;/code&gt;
"                to be explicitly disabled.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a race condition in &lt;code&gt;&lt;span class="identifier"&gt;windows&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;object_handle&lt;/span&gt;&lt;/code&gt;
"                when there are pending wait operations on destruction (&lt;a href="https://svn.boost.org/trac/boost/ticket/10624"&gt;#10624&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed IPv6 address parsing on FreeBSD, where a trailing scope ID
"                would cause conversion to fail with &lt;code&gt;&lt;span class="identifier"&gt;EINVAL&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Worked around shared library visibility issues by ensuring Asio types
"                use default visibility (&lt;a href="https://svn.boost.org/trac/boost/ticket/9465"&gt;#9465&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11070"&gt;#11070&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the SSL wrapper to call the password callback when loading
"                an in-memory key (&lt;a href="https://svn.boost.org/trac/boost/ticket/10828"&gt;#10828&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed false SSL error reports by ensuring that the SSL error queue
"                is cleared prior to each operation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stream&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                bug that may result in spurious 'short read' errors.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed a redundant null pointer check in the SSL engine (&lt;a href="https://svn.boost.org/trac/boost/ticket/10088"&gt;#10088&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added options for disabling TLS v1.1 and v1.2 (&lt;a href="https://svn.boost.org/trac/boost/ticket/10690"&gt;#10690&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed use of deprecated OpenSSL function &lt;code&gt;&lt;span class="identifier"&gt;ERR_remove_state&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed detection of various C++11 features with Clang (&lt;a href="https://svn.boost.org/trac/boost/ticket/8835"&gt;#8835&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/10884"&gt;#10884&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed detection of C++11 &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;addressof&lt;/span&gt;&lt;/code&gt;
"                with &lt;tt&gt;g++&lt;/tt&gt; (&lt;a href="https://svn.boost.org/trac/boost/ticket/10982"&gt;#10982&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed multicast test to treat certain &lt;code&gt;&lt;span class="identifier"&gt;join_group&lt;/span&gt;&lt;/code&gt;
"                failures as non-fatal.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Decoupled Asio unit tests from Boost.Test (&lt;a href="https://svn.boost.org/trac/boost/ticket/11116"&gt;#11116&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the tutorial to use &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;endl&lt;/span&gt;&lt;/code&gt;
"                to ensure output is flushed.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an unsigned integer overflow reported by Clang's integer sanitizer.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for move-only return types when using a &lt;code&gt;&lt;span class="identifier"&gt;yield_context&lt;/span&gt;&lt;/code&gt; object with asynchronous
"                operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed &lt;code&gt;&lt;span class="identifier"&gt;yield_context&lt;/span&gt;&lt;/code&gt;
"                to allow reentrant calls to the completion handler from an initiating
"                function.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated detection of Windows Runtime to work with latest Windows
"                SDK.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/chrono/"&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Version&lt;/em&gt; 2.0.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10778"&gt;#10778&lt;/a&gt;
"                      VC14 CTP4 Atomic don't compile with boost::chrono durations
"                      which are not TriviallyCopyable
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10840"&gt;#10840&lt;/a&gt;
"                      Missing std:: qualifier for puts call in test_7868.cpp
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10851"&gt;#10851&lt;/a&gt;
"                      Missing std:: qualifier for puts call in time_point_output.cpp
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10893"&gt;#10893&lt;/a&gt;
"                      Minor doc typo in Boost.Chrono
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10992"&gt;#10992&lt;/a&gt;
"                      Chrono IO state savers inconsistent with Boost.IO state savers
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10995"&gt;#10995&lt;/a&gt;
"                      duration_put::put_value truncates fractional part
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/11006"&gt;#11006&lt;/a&gt;
"                      Impossible to instantiate time_fmt_io_saver due to several
"                      errors.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/11012"&gt;#11012&lt;/a&gt;
"                      chrono_io v2 fail to compile with boost::chrono::duration&amp;lt;
"                      boost::rational&amp;lt;int&amp;gt; &amp;gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/container/"&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Experimental &lt;code&gt;&lt;span class="identifier"&gt;small_vector&lt;/span&gt;&lt;/code&gt;
"                container.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Massive dependency reorganization. Now &lt;em&gt;Boost.Container&lt;/em&gt;
"                depends on very basic utilities like Boost.Core and &lt;em&gt;Boost.Intrusive&lt;/em&gt;.
"                Preprocessed code size have decreased considerably and compilation
"                times have improved.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;nth&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;index_of&lt;/span&gt;&lt;/code&gt; functions to containers
"                with random-access iterators (except &lt;code&gt;&lt;span class="identifier"&gt;basic_string&lt;/span&gt;&lt;/code&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added C++17's &lt;code&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;Allocator&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_always_equal&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated containers to implement new constructors as specified in
"                &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/lwg-defects.html#2210"&gt;2210.
"                Missing allocator-extended constructor for allocator-aware containers&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/9931"&gt;#9931:
"                      &lt;em&gt;"flat_map::insert(ordered_unique_range_t...)
"                      fails with move_iterators"&lt;/em&gt;&lt;/a&gt; (reopened).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11076"&gt;#11076:
"                      &lt;em&gt;"Unqualified calls to memmove/memcpy in container/detail/copy_move_algo.hpp"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10790"&gt;Trac
"                      #10790 (&lt;em&gt;long long errors from container"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10808"&gt;Trac
"                      #10808 (&lt;em&gt;compare equal operator of vector is broken"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Source Breaking&lt;/em&gt;: &lt;code&gt;&lt;span class="identifier"&gt;scoped_allocator_adaptor&lt;/span&gt;&lt;/code&gt;'s
"                &lt;code&gt;&lt;span class="identifier"&gt;propagate_on_container_copy_assignment&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;propagate_on_container_move_assignment&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;propagate_on_container_swap&lt;/span&gt;&lt;/code&gt;
"                are no longer &lt;code&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;integral_constant&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="keyword"&gt;true&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="keyword"&gt;false&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; types. The dependency reorganization
"                needed to break with those classes to avoid MPL dependencies, and
"                interoperability with &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;integral_constant&lt;/span&gt;&lt;/code&gt;
"                was not guaranteed. Code assumming &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;true_type&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;false_type&lt;/span&gt;&lt;/code&gt;
"                on this will not compile. As a workaround, use the guaranteed internal
"                &lt;code&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;value&lt;/span&gt;&lt;/code&gt;
"                constant: &lt;code&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;integral_constant&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;scoped_allocator_adaptor&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;Allocator&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;propagate_on_container_move_assignment&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;value&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                support for ARM/iOS (32+64 bit)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                class execution_context (C++14)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/conversion/"&gt;Conversion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;polymorphic_pointer_downcast&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;polymorphic_pointer_cast&lt;/span&gt;&lt;/code&gt;
"                functions were added (thanks to Boris Rasin) &lt;a href="https://svn.boost.org/trac/boost/ticket/10780"&gt;#10780&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                All the functions now throw exceptions using &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;throw_exception&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Documnetation update
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/date_time/"&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Restored &lt;code&gt;&lt;span class="identifier"&gt;to_time_t&lt;/span&gt;&lt;/code&gt;
"                function.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Renamed variable v_type to var_type so it longer conflicts with an
"                AIX system variable.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Documnetation fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/flyweight/"&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added hash support both with &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt;
"                and &lt;a href="http://www.boost.org/doc/html/hash.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
"                This can be optionally &lt;a href="http://www.boost.org/libs/flyweight/doc/reference/flyweight.html#disable_hash_support"&gt;disabled&lt;/a&gt;
"                to avoid clashes with legacy code where this support has already
"                been defined by the user.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/function/"&gt;Function&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for functions accepting C++11 rvalues and Boost.Move
"                rvalues &lt;a href="https://svn.boost.org/trac/boost/ticket/10585"&gt;#10585&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/functional/factory/"&gt;Functional/Factory&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Minor breaking change: the default template parameter to indicate
"                that it shouldn't use an allocator is now &lt;code&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;/code&gt;,
"                instead of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;none_t&lt;/span&gt;&lt;/code&gt;.
"                For details, see the &lt;a href="http://www.boost.org/libs/functional/factory/doc/html/#boost_functional_factory.changes"&gt;changelog&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/fusion/"&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Automatic hash creation function (&lt;a href="https://github.com/boostorg/fusion/pull/12"&gt;Github
"                PR #12&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New ADAPT_STRUCT, ADAPT_ADT, ADAPT_ASSOC_ that deduce the members
"                types (&lt;a href="https://svn.boost.org/trac/boost/ticket/9516"&gt;#9516&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add convert implementation for Boost.Tuple and std::tuple.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add mpl::clear implementation for Boost.Tuple and std::tuple.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use boost::declval instead of std::declval, (&lt;a href="https://svn.boost.org/trac/boost/ticket/10190"&gt;#10190&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove use of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;blank&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/8622"&gt;#8622&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add result_of::{copy,move} (&lt;a href="https://svn.boost.org/trac/boost/ticket/5886"&gt;#5886&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Better constexpr and noexcept support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved SFINAE Friendliness of many metafunctions (&lt;a href="https://svn.boost.org/trac/boost/ticket/10676"&gt;#10676&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/10443"&gt;#10443&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                result_of::size::value and result_of::size::type::value are the same
"                type now (&lt;a href="https://svn.boost.org/trac/boost/ticket/7304"&gt;#7304&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                result_of::at&amp;lt;Seq, N&amp;gt;::type is now defined when sizeof of sequence
"                is less than N (&lt;a href="https://svn.boost.org/trac/boost/ticket/6507"&gt;#6507&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/7651"&gt;#7651&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix missing includes (&lt;a href="https://svn.boost.org/trac/boost/ticket/8457"&gt;#8457&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Many documentation fixes &amp;amp; improvements (&lt;a href="https://svn.boost.org/trac/boost/ticket/6090"&gt;#6090&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/5324"&gt;#5324&lt;/a&gt;,
"                &lt;a href="https://github.com/boostorg/fusion/pull/33"&gt;GitHub PR
"                #33&lt;/a&gt;, &lt;a href="https://github.com/boostorg/fusion/pull/53"&gt;GitHub
"                PR #53&lt;/a&gt;, &lt;a href="https://github.com/boostorg/fusion/pull/56"&gt;GitHub
"                PR #56&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Additional functionality:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New algorithm num_segments, returning the number of segments
"                      of a geometry
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New overload for is_valid algorithm, that takes a string reference
"                      as a second argument and fills it with a message related to
"                      the validity or invalidity of the geometry
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New overload for is_valid algorithm, that takes an enum reference
"                      as a second argument and fills it with a value related to the
"                      validity or invalidity of the geometry
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Disjoint and intersects support the following geometry combinations:
"                      point/multipoint, multipoint/multipoint, multipoint/segment,
"                      multipoint/box
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Improvements:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Buffer now supports flat-ends for linestrings with a bend close
"                      to the start (such that buffered segment crosses flat-end).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Buffer performance is improved significantly
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Partition performance is improved significantly for polygons,
"                      potentially enhancing all overlay operations
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Solved tickets:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/8379"&gt;#8379&lt;/a&gt;
"                      Invalid comparison of the result of determinant
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10108"&gt;#10108&lt;/a&gt;
"                      Error in overlay operations in specific cases where geometries
"                      touch at one point
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10201"&gt;#10201&lt;/a&gt;
"                      Suggestion to use different function to compare coordinates
"                      [wontfix]
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10467"&gt;#10467&lt;/a&gt;
"                      Template parameter name coliding with B0 macro name defined
"                      in termios.h
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10640"&gt;#10640&lt;/a&gt;
"                      Invalid result of buffer() for CCW Polygons.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10666"&gt;#10666&lt;/a&gt;
"                      MSVC compiler warning C4127: conditional expression is constant
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10747"&gt;#10747&lt;/a&gt;
"                      Error in rescaling causing errors in areal/areal set operations
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10770"&gt;#10770&lt;/a&gt;
"                      Buffer fails for large distances, or rough round joins, where
"                      concavities where not intersected properly
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10658"&gt;#10658&lt;/a&gt;
"                      sym_difference yields bad result for int polygons
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10835"&gt;#10835&lt;/a&gt;
"                      Difference of multilinestring and polygon yields wrong result
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10861"&gt;#10861&lt;/a&gt;
"                      Rtree failing to compile for Value being a pair or a tuple
"                      containing pointer to Geometry and the default equal_to&amp;lt;&amp;gt;
"                      used
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10863"&gt;#10863&lt;/a&gt;
"                      Template parameter name coliding with B0 macro name defined
"                      in termios.h (duplicate of 10467)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10887"&gt;#10887&lt;/a&gt;
"                      Invalid result of within() and relate() for Linear/MultiPolygon
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10890"&gt;#10890&lt;/a&gt;
"                      Invalid result of disjoint() for Point/Segment.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10904"&gt;#10904&lt;/a&gt;
"                      Invalid calculation of most significant Dimension of a segment
"                      in relate_cartesian_segments strategy
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10912"&gt;#10912&lt;/a&gt;
"                      Invalid result of within() and relate() for Areal/Areal
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10951"&gt;#10951&lt;/a&gt;
"                      Tests failing on windows with intel compiler due to lack of
"                      /bigobj flag.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10957"&gt;#10957&lt;/a&gt;
"                      Assertion failure and invalid results of various relational
"                      operations.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10958"&gt;#10958&lt;/a&gt;
"                      Invalid results of disjoint() L/L and L/A.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10959"&gt;#10959&lt;/a&gt;
"                      Assertion failure in get_turns() used with no_rescale_policy.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10960"&gt;#10960&lt;/a&gt;
"                      Invalid result of get_turns() for L/A, missing turn.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10961"&gt;#10961&lt;/a&gt;
"                      Invalid result of get_turns() for L/A, invalid turn for a Linear
"                      spike.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11112"&gt;#11112&lt;/a&gt;
"                      Compilation failure on Solaris due to a CS name clash (used
"                      for a macro on this platform)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11121"&gt;#11121&lt;/a&gt;
"                      Invalid result of difference() for integral coordinates
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Bugfixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in multipoint/polygon multipoint/multipolygon distance
"                      computation (wrong detection of points inside the areal geometry)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in flatten_iterator's assignment operator causing an access
"                      violation
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in Cartesian segment-segment intersection strategy when
"                      one segment degenerates to a point and is collinear to the
"                      other non-degenerate segment
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in centroid(), non-deterministic result if calculated for
"                      e.g. a Polygon with zero-area.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in buffers for joins with a limited number of points
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in buffers for round joins with limited number of points
"                      around sharp corners
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in buffers for joins with large buffer distances
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in buffers for round ends with an odd number of points
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in buffers for flat ends with large buffer distances
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in buffers for interior rings with large negative buffer
"                      distances
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in closing_iterator not working properly when the input
"                      range is empty
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in is_simple, not handling properly closed simple linestrings
"                      within multilinestrings
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in rtree constructors taking a pair of Iterators or a Range
"                      (packing algorithm), the use of reference to destroyed temporary
"                      when Iterator's reference is not true reference, e.g. for some
"                      of the Range Adaptors. It also affects distance() and comparable_distance().
"                      This bug may cause unexpected behavior of the rtree or distance()
"                      algorithm, e.g. an assertion failure or a SEGFAULT.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug in rtree count() member function, the use of reference
"                      to destroyed temporary when object of type convertible but
"                      not the same as value_type or indexable_type is passed. If
"                      this happens, wrong result may be returned, in most cases 0.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bugs related to the handling of Ranges, preventing compilation
"                      of Geometries using non-Container Ranges in some algorithms
"                      (thanks to Samuel Debionne)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/functional/hash/"&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed strict aliasing violation (&lt;a href="https://github.com/boostorg/functional/pull/3"&gt;GitHub
"                #3&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/interprocess/"&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reduced some compile-time dependencies. Updated to Boost.Container
"                changes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/pull/13"&gt;GitHub
"                      Pull #13 (&lt;em&gt;"haiku: we don't have XSI shared memory,
"                      so don't try to use it"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/intrusive/"&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reduced compile-time dependencies, headers, and the use of Boost.Preprocessor,
"                specially for hooks and iterators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6720"&gt;Boost
"                      Trac #6720: &lt;em&gt;intrusive::unordered_set::clear_and_dispose
"                      does not compile on VC11 Beta when passed a stateless lambda&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10771"&gt;Boost
"                      Trac #10771: &lt;em&gt;remove_if is broken for slist&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10853"&gt;Boost
"                      Trac #10853: &lt;em&gt;problem with detection of const_cast_from&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10987"&gt;Boost
"                      Trac #10987: &lt;em&gt;bug in any_xxx_node_traits, returning
"                      by reference&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/lexical_cast/"&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Now std::stream is used for conversions to float numbers &lt;a href="https://svn.boost.org/trac/boost/ticket/5660"&gt;#5660&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/6975"&gt;#6975&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/10639"&gt;#10639&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed thread id formatting.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed process id formatting. (&lt;a href="https://svn.boost.org/trac/boost/ticket/10926"&gt;#10926&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed build failure on GNU Hurd.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed incorrect behavior of text file sink backend in case
"                      if free space on the file system gets exhausted. The sink will
"                      no longer create lots of empty files in attempt to recover.
"                      (&lt;a href="https://svn.boost.org/trac/boost/ticket/11016"&gt;#11016&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed incorrect behavior of &lt;code&gt;&lt;span class="identifier"&gt;attribute_set&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;insert&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; in some cases. The inserted
"                      elements could have made some previously inserted elements
"                      not findable. (&lt;a href="https://svn.boost.org/trac/boost/ticket/11106"&gt;#11106&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed incorrect behavior of &lt;code&gt;&lt;span class="identifier"&gt;attribute_value_set&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;size&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; if a large number of attribute
"                      values are inserted into the set. (&lt;a href="https://svn.boost.org/trac/boost/ticket/11148"&gt;#11148&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="http://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added two new special functions - trigamma and polygamma.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Large update to the Elliptic integral code to use Carlson's latest
"                algorithms - these should be more stable, more accurate and slightly
"                faster than before. Also added support for Carlson's RG integral.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added ellint_d, jacobi_zeta and heuman_lambda elliptic integrals.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed namespace scope constants so they are constexpr on conforming
"                compilers, see &lt;a href="https://svn.boost.org/trac/boost/ticket/10901"&gt;#10901&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed various cases of spurious under/overflow in the incomplete
"                beta and gamma functions, plus the elliptic integrals, with thanks
"                to Rocco Romeo.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix 3-arg legendre_p and legendre_q functions to not call the policy
"                based overload if the final argument is not actually a policy.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Cleaned up some dead code in the incomplete beta function, see &lt;a href="https://svn.boost.org/trac/boost/ticket/10985"&gt;#10985&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed extreme-value pdf for large valued inputs, see &lt;a href="https://svn.boost.org/trac/boost/ticket/10938"&gt;#10938&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Switched documentation to use SVG rather than PNG graphs and equations
"                - browsers seem to have finally caught up!
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/move/"&gt;Move&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;BOOST_MOVE_BASE&lt;/span&gt;&lt;/code&gt;
"                utility.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;adl_move_swap&lt;/span&gt;&lt;/code&gt;
"                utility.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reduced dependencies on other Boost libraries to make the library
"                a bit more lightweight.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11044"&gt;Trac
"                      #11044: &lt;em&gt;"boost::rv inherits off union, when
"                      such passed as template argument"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/multi_index/index.html"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The efficiency of lookup operations has improved in situations where
"                they involve the generation of temporary values of &lt;code&gt;&lt;span class="identifier"&gt;key_type&lt;/span&gt;&lt;/code&gt;. Consider for instance
"                the following code:
"              &lt;/div&gt;
"&lt;pre&gt;&lt;span class="keyword"&gt;typedef&lt;/span&gt; &lt;span class="identifier"&gt;multi_index_container&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;
"  &lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt;
"  &lt;span class="identifier"&gt;indexed_by&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;
"    &lt;span class="identifier"&gt;ordered_unique&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;identity&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt; &lt;span class="special"&gt;&amp;gt;&lt;/span&gt;
"  &lt;span class="special"&gt;&amp;gt;&lt;/span&gt;
"&lt;span class="special"&gt;&amp;gt;&lt;/span&gt; &lt;span class="identifier"&gt;multi_t&lt;/span&gt;&lt;span class="special"&gt;;&lt;/span&gt;
"&lt;span class="special"&gt;...&lt;/span&gt;
"&lt;span class="identifier"&gt;multi_t&lt;/span&gt; &lt;span class="identifier"&gt;m&lt;/span&gt;&lt;span class="special"&gt;=...;&lt;/span&gt;
"&lt;span class="identifier"&gt;m&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;find&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"boost"&lt;/span&gt;&lt;span class="special"&gt;);&lt;/span&gt; &lt;span class="comment"&gt;// passed a const char*, not a std::string    &lt;/span&gt;
"&lt;/pre&gt;
"              &lt;div&gt;
"                In previous versions of the library, the &lt;code&gt;&lt;span class="identifier"&gt;find&lt;/span&gt;&lt;/code&gt;
"                operation generates several temporary &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;/code&gt;s
"                (one every time an internal comparison is made). In sufficiently
"                advanced compilers, this is now avoided so that only one temporary
"                is created.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/multiprecision/"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed &lt;code&gt;&lt;span class="identifier"&gt;frexp&lt;/span&gt;&lt;/code&gt; to
"                always be non-expression template generating, see: &lt;a href="https://svn.boost.org/trac/boost/ticket/10993"&gt;10993&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved support of cpp_dec_float on Cygwin and other platforms with
"                missing long double support, see &lt;a href="https://svn.boost.org/trac/boost/ticket/10924"&gt;10924&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved noexcept support and added some more tests, see &lt;a href="https://svn.boost.org/trac/boost/ticket/10990"&gt;10990&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Various workarounds applied for Intel-15.0 and Solaris-12.4 compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/optional/"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved documentation; documented IO operations and header files.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;none_t&lt;/span&gt;&lt;/code&gt; is no longer convertible
"                      from literal 0. This avoids a bug where &lt;code&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;rational&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword"&gt;int&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="identifier"&gt;oi&lt;/span&gt;
"                      &lt;span class="special"&gt;=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="special"&gt;;&lt;/span&gt;&lt;/code&gt; would initialize an optional
"                      object with no contained value.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a way to manually disable move semantics: just define
"                      macro &lt;code&gt;&lt;span class="identifier"&gt;BOOST_OPTIONAL_CONFIG_NO_RVALUE_REFERENCES&lt;/span&gt;&lt;/code&gt;.
"                      This can be used to work around &lt;a href="http://svn.boost.org/trac/boost/ticket/10399"&gt;#10399&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10825"&gt;#10825&lt;/a&gt;
"                      Improved the trick that prevents streaming out &lt;code&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;/code&gt; without header
"                      &lt;code&gt;&lt;span class="identifier"&gt;optional_io&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                      by using safe-bool idiom.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/11087"&gt;#11087&lt;/a&gt;
"                      It is no longer possible to assign &lt;code&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;U&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; when &lt;code&gt;&lt;span class="identifier"&gt;U&lt;/span&gt;&lt;/code&gt;
"                      is not assignable or convertible to &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10839"&gt;#10839&lt;/a&gt;
"                      Value accessors now work correctly on rvalues of &lt;code&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;amp;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/phoenix/"&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Version 3.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;New Features:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Phoenix now has a &lt;em&gt;lazy list&lt;/em&gt; implementation
"                      as an optional extension.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;New Example:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      A new example &lt;em&gt;bind_goose&lt;/em&gt; shows the compatibility
"                      between &lt;em&gt;boost bind&lt;/em&gt; and &lt;em&gt;boost
"                      phoenix bind&lt;/em&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10927"&gt;#10927&lt;/a&gt;
"                      Missing &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;/code&gt; qualifier for &lt;code&gt;&lt;span class="identifier"&gt;fabs&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class="identifier"&gt;phoenix&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;test&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;stdlib&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;cmath&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;cpp&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/11085"&gt;#11085&lt;/a&gt;
"                      Missing qualifier for pow call in &lt;code&gt;&lt;span class="identifier"&gt;phoenix&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;test&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;function&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;function_tests&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;cpp&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixes for a number of cases failing with &lt;em&gt;bind&lt;/em&gt;,
"                      &lt;em&gt;lambda&lt;/em&gt; and &lt;em&gt;let&lt;/em&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Version 1.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Visual Studio 2015 detection.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added detection of Haiku OS.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix Android endian detection.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;predef_check&lt;/span&gt;&lt;/code&gt;
"                program and BBv2 integration for build configuration checks.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/random/"&gt;Random&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added non_central_chi_squared_distribution.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/thread/"&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Version&lt;/em&gt; 4.5.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;New Experimental Features:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/9600"&gt;#9600&lt;/a&gt;
"                      Async: Add task_region
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10611"&gt;#10611&lt;/a&gt;
"                      Add emplace promise::set_value and emplace make_ready_future
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10826"&gt;#10826&lt;/a&gt;
"                      Add scheduled executor operations
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/11048"&gt;#11048&lt;/a&gt;
"                      Add a serial_executor based on continuations
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixed Bugs:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/6787"&gt;#6787&lt;/a&gt;
"                      boost::thread::sleep() hangs if system time is rolled back
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10734"&gt;#10734&lt;/a&gt;
"                      Submit method work differently on different executors, some
"                      throw exception and some silently ignore error (thread_executor
"                      and inline_executor)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10736"&gt;#10736&lt;/a&gt;
"                      Task exceptions silently ignored. I think std::terminate solution
"                      from N3785 and std::thread is better choice and more consistent.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10737"&gt;#10737&lt;/a&gt;
"                      In serial_executor we have infinite wait if task throw exception.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10822"&gt;#10822&lt;/a&gt;
"                      Boost.Thread fails to compile on Android
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10824"&gt;#10824&lt;/a&gt;
"                      Boost.Thread 1.57 breaks Windows XP compatibility for SP2 and
"                      below.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10963"&gt;#10963&lt;/a&gt;
"                      future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::then Has No Implementation
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10964"&gt;#10964&lt;/a&gt;
"                      future&amp;lt;future&amp;lt;T&amp;gt;&amp;gt;::unwrap().then() Deadlocks
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10968"&gt;#10968&lt;/a&gt;
"                      The futures returned by async() and future::then() are not
"                      blocking.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10971"&gt;#10971&lt;/a&gt;
"                      shared_future::get()/get_or() must be const
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10972"&gt;#10972&lt;/a&gt;
"                      shared_future::then() can be called multiple times.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10979"&gt;#10979&lt;/a&gt;
"                      Support T&amp;amp; type deduction when the make_ready_future parameter
"                      is reference_wrapper&amp;lt;T&amp;gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10996"&gt;#10996&lt;/a&gt;
"                      Thread physical_concurrency() is failing on Windows
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/11035"&gt;#11035&lt;/a&gt;
"                      BOOST_HAS_PTHREAD_MUTEXATTR_SETTYPE not defined for Android
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/11053"&gt;#11053&lt;/a&gt;
"                      The attached code results in a R6025 - pure virtual function
"                      call in run_thread_exit_callbacks
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/type_erasure/"&gt;TypeErasure&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation with MSVC 12.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/type_index/"&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Link time assertions added on platforms that support it
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/units"&gt;Units&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix for base units with arbitrary dimensions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/unordered"&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix move assignment with stateful, propagate_on_container_move_assign
"                allocators (&lt;a href="https://svn.boost.org/trac/boost/ticket/10777"&gt;#10777&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix potential overflow when calculating number of buckets to allocate
"                (&lt;a href="https://github.com/boostorg/unordered/pull/4"&gt;GitHub
"                #4&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Other minor changes, see &lt;a href="http://www.boost.org/doc/html/unordered/changes.html"&gt;changelog&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking change:&lt;/strong&gt; Compile time checked
"                getter is now used by default in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;get&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;U&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="identifier"&gt;VariantT&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;polymorphic_get&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;U&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="identifier"&gt;VariantT&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;. New getter asserts that type &lt;code&gt;&lt;span class="identifier"&gt;U&lt;/span&gt;&lt;/code&gt; is one of the types that can
"                be stored in &lt;code&gt;&lt;span class="identifier"&gt;VariantT&lt;/span&gt;&lt;/code&gt;.
"                Define &lt;code&gt;&lt;span class="identifier"&gt;BOOST_VARIANT_USE_RELAXED_GET_BY_DEFAULT&lt;/span&gt;&lt;/code&gt;
"                to change default behavior. See &lt;a href="http://www.boost.org/doc/html/variant/reference.html#header.boost.variant.get_hpp"&gt;get.hpp&lt;/a&gt;
"                and &lt;a href="http://www.boost.org/doc/html/variant/reference.html#header.boost.variant.polymorphic_get_hpp"&gt;polymorphic_get.hpp&lt;/a&gt;
"                descriptions for more info &lt;a href="https://svn.boost.org/trac/boost/ticket/547"&gt;#547&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added missing comparison operators to variant &lt;a href="https://svn.boost.org/trac/boost/ticket/8620"&gt;#8620&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/10811"&gt;#10811&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Multiple documentations fixes &lt;a href="https://svn.boost.org/trac/boost/ticket/10273"&gt;#10273&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/10653"&gt;#10653&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Variadic templats enabled on Clang &lt;a href="https://svn.boost.org/trac/boost/ticket/10832"&gt;#10832&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Autodetection of return types for visitors in C++14, which makes
"                it possible to use &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;apply_visitor&lt;/span&gt;&lt;/code&gt;
"                with generic lambdas &lt;a href="https://svn.boost.org/trac/boost/ticket/10837"&gt;#10837&lt;/a&gt;:
"              &lt;/div&gt;
"&lt;pre&gt;&lt;span class="keyword"&gt;auto&lt;/span&gt; &lt;span class="identifier"&gt;str&lt;/span&gt; &lt;span class="special"&gt;=&lt;/span&gt; &lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;apply_visitor&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;
"    &lt;span class="special"&gt;[](&lt;/span&gt;&lt;span class="keyword"&gt;auto&lt;/span&gt; &lt;span class="identifier"&gt;v&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt; &lt;span class="special"&gt;{&lt;/span&gt;
"        &lt;span class="keyword"&gt;return&lt;/span&gt; &lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;lexical_cast&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="identifier"&gt;v&lt;/span&gt;&lt;span class="special"&gt;);&lt;/span&gt;
"    &lt;span class="special"&gt;},&lt;/span&gt;
"    &lt;span class="identifier"&gt;variant_instance&lt;/span&gt;
"&lt;span class="special"&gt;);&lt;/span&gt;
"&lt;/pre&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved swap functions &lt;a href="https://svn.boost.org/trac/boost/ticket/10882"&gt;#10882&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Many improvements to variadic templates, even more methods support
"                variadics.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Multiple bugfixes and testing improvements including Coveralls integration
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_58_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5, 3.6
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.9.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++98: 4.8.1, 4.8.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7, 4.8.4, 4.9.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 4.9.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.7, 4.5.4, 4.6.3, 4.7.3, 4.8.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.1, 3.2, 3.3, 3.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5, 3.6
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.6.4, 4.7.3, 4.8.1, 4.9.2, 5.0.0 (experimental)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7, 4.8.4, 4.9.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 4.9.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, mingw: 4.4.7, 4.5.4, 4.6.4, 4.7.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.4, 3.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.8, 4.9
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_58_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="http://www.boost.org/users/people/beman_dawes.html"&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href="http://www.boost.org/users/people/rene_rivera.html"&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Sun, 30 Oct 2016 19:43:30 +0000
-quickbook
"feed/history/boost_1_58_0.qbk
)
(feed/history/boost_1_59_0.qbk
-item
"<item><title>Version 1.59.0</title><link>http://www.boost.org/users/history/version_1_59_0.html</link><guid>http://www.boost.org/users/history/version_1_59_0.html</guid><pubDate>Thu, 13 Aug 2015 08:23:03 -0700</pubDate><description>
"
"
"
"  &lt;div id=&quot;version_1_59_0.known_issue&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Known Issue&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Boost.Log contains has a regression that prevents some of the logging statements
"          from compiling (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11549&quot;&gt;#11549&lt;/a&gt;). This is fixed in &lt;a href=&quot;https://github.com/boostorg/log/commit/7da193fde1a9c1bc925ee980339f4df2e1a66fa7&quot;&gt;git&lt;/a&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_59_0.new_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/convert/&quot;&gt;Convert&lt;/a&gt;:&lt;/span&gt;
"  An extendible and configurable
"          type-conversion framework, from Vladimir Batov.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine2/&quot;&gt;Coroutine2&lt;/a&gt;:&lt;/span&gt;
"  (C++14) Coroutine
"          library, from Oliver Kowalke.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_59_0.updated_libraries&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/container/&quot;&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://github.com/boostorg/container/pull/26&quot;&gt;GitHub
"                #26: &lt;em&gt;Fix bug in stable_vector::capacity()&lt;/em&gt;&lt;/a&gt;.
"                Thanks to timsong-cpp/Arindam Mukerjee.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://github.com/boostorg/container/pull/27&quot;&gt;GitHub
"                #27: &lt;em&gt;fix stable_vector's index_of's doxygen comment&lt;/em&gt;&lt;/a&gt;.
"                Thanks to kariya-mitsuru.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11380&quot;&gt;Trac #11380:
"                &lt;em&gt;&amp;quot;Container library std forward declarations incorrect
"                in std_fwd.hpp on libc++ with gcc&amp;quot;&lt;/em&gt;&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11388&quot;&gt;Trac #11388:
"                &lt;em&gt;&amp;quot;boost::container::list::emplace_back broken on Visual
"                Studio 2010&amp;quot;&lt;/em&gt;&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11339&quot;&gt;Trac #11339:
"                &lt;em&gt;&amp;quot;VC12 LNK2005 error with boost::container::adaptive_pool&amp;quot;&lt;/em&gt;&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/context/&quot;&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11223&quot;&gt;#11223&lt;/a&gt; check support for std::integer_sequence
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                execution_context uses internally Windows Fibers with BOOST_USE_WINFIBERS
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                support of assember for MinGW on Windows (32bit)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/coroutine/&quot;&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10978&quot;&gt;#10978&lt;/a&gt; remove additional semicolons
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11230&quot;&gt;#11230&lt;/a&gt; coroutine_error returns dangling exception message pointer
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11234&quot;&gt;#11234&lt;/a&gt; doesn't compile when used with boost::range::algorithms
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11356&quot;&gt;#11356&lt;/a&gt; coroutines segfaults with BOOST_USE_SEGMENTED_STACKS
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/fusion/&quot;&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add a new concept, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Unbounded&lt;/span&gt;
"                &lt;span class=&quot;identifier&quot;&gt;Sequence&lt;/span&gt;&lt;/code&gt; for sequence and
"                &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Unbounded&lt;/span&gt; &lt;span class=&quot;identifier&quot;&gt;Iterator&lt;/span&gt;&lt;/code&gt;
"                for iterator. Currently, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Unbounded&lt;/span&gt;
"                &lt;span class=&quot;identifier&quot;&gt;Sequence&lt;/span&gt;&lt;/code&gt; affects the behaviour
"                of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;at&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;_c&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;value_&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;at_key&lt;/span&gt;&lt;/code&gt;. &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;Unbounded&lt;/span&gt;
"                &lt;span class=&quot;identifier&quot;&gt;Iterator&lt;/span&gt;&lt;/code&gt; has no effect
"                (reserved for future release). For more details, see &lt;a href=&quot;http://www.boost.org/users/history/libs/fusion/doc/html/fusion/sequence/concepts/unbounded_sequence.html&quot;&gt;Unbounded
"                Sequence&lt;/a&gt; and &lt;a href=&quot;http://www.boost.org/libs/fusion/doc/html/fusion/iterator/concepts/unbounded_iterator.html&quot;&gt;Unbounded
"                Iterator&lt;/a&gt;. (&lt;a href=&quot;https://github.com/boostorg/fusion/pull/85&quot;&gt;pull-request
"                85&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support C++11 variadic templates for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;fusion&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;list&lt;/span&gt;&lt;/code&gt;.
"                (&lt;a href=&quot;https://github.com/boostorg/fusion/pull/84&quot;&gt;pull-request
"                84&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixed bugs:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix missing include &lt;code&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"                      (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11161&quot;&gt;#11161&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Revert some constexpr support, regression in 1.58.0. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11211&quot;&gt;#11211&lt;/a&gt;,
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11267&quot;&gt;#11267&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix compile error with fold due to missing include. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11249&quot;&gt;#11249&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix compile error with adapting an empty struct, regression
"                      in 1.58.0. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11269&quot;&gt;#11269&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Remove use of obsolete (and incorrect) workaround for sequence
"                      comparison, it affects MSVC-8 and earlier. (&lt;a href=&quot;https://github.com/boostorg/fusion/pull/78&quot;&gt;pull-request
"                      78&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix compile error while copying a sequece which derived from
"                      fusion::list, regression in 1.58.0. (&lt;a href=&quot;https://github.com/boostorg/fusion/pull/87&quot;&gt;pull-request
"                      87&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix compile error on copying a fusion::tuple. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11140&quot;&gt;#11140&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add workarounds for GCC 4.6 with constexpr. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11517&quot;&gt;#11517&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/geometry/&quot;&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Additional functionality:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added rtree const_iterator, begin(), end() and the support
"                      for Boost.Range.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The support for C++11 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;initializer_list&lt;/span&gt;&lt;/code&gt;
"                      in geometries models.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Disjoint and intersects support the following geometry combinations:
"                      multipoint/linestring, multipoint/multilinestring.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added relate() and relation() algorithms.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Intersection has been implemented for combinations of pointlike
"                      and linear geometries
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added implementation for difference(pointlike, linear)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New algorithm is_empty, returning true if the geometry represents
"                      the empty set
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The envelope algorithm supports pointlike and linear geometries
"                      in the spherical equatorial coordinate system
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The envelope algorithm supports pointlike geometries in the
"                      geographic coordinate system
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Improvements:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Upgraded rtree const_query_iterator category to ForwardIterator.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Buffer performance of buffers around multi-points is improved
"                      significantly
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Breaking changes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      buffer side strategy now returns error_code instead of bool.
"                      If you have your own custom side strategy, it should be adapted
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Solved tickets:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11113&quot;&gt;#11113&lt;/a&gt;
"                      Support easy enumeration of all elements with BOOST_FOREACH
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11232&quot;&gt;#11232&lt;/a&gt;
"                      Feature request - relate()
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11236&quot;&gt;#11236&lt;/a&gt;
"                      Invalid result of centroid() for integer coordinate type
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11268&quot;&gt;#11268&lt;/a&gt;
"                      Regression in boost::geometry::intersection interface with
"                      multi_linestring and box -- does not compile on 1.57 VS 1.55
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11332&quot;&gt;#11332&lt;/a&gt;
"                      Assertion failure in buffer for extreme coordinate differences
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11346&quot;&gt;#11346&lt;/a&gt;
"                      Segment iterator does not work with ranges returning values
"                      instead of references
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11436&quot;&gt;#11436&lt;/a&gt;
"                      sym_difference(py1, py2, mpy) returns invalid multipolygon
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Bugfixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Buffer: use a more robust way to calculate the side of an intersection,
"                      this fixes several errors in buffer generation
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix in selection of segment to which calculate from IP from,
"                      in intersection of two segments. Now is selected the one close
"                      to a segment-point point, or else the one on the shortest segment.
"                      This avoids (rarely occuring) generation of tiny triangles
"                      making output polygons invalid
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      In rescaling round instead of truncate to the integer grid
"                      (this fix and the previous mentioned can have some impact on
"                      output geometries)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix potential infinite loop in detail::has_spikes (the loop
"                      can happen if the points passed have NaN coordinates)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/interprocess/&quot;&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5139&quot;&gt;( Trac
"                #5139 ( (&lt;em&gt;&amp;quot;Initial Stream Position in Boost.Interprocess.Vectorstream&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://github.com/boostorg/interprocess/pull/19&quot;&gt;GitHub
"                Pull #19 (&lt;em&gt;&amp;quot;Fix exception visibility&amp;quot;&lt;/em&gt;)&lt;/a&gt;.
"                Thanks to Romain-Geissler.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/intrusive/&quot;&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented &lt;span class=&quot;link&quot;&gt;map and multimap-like
"                interfaces&lt;/span&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Refactored hashtable containers to reduce template instantiations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/lexical_cast/&quot;&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed warnings
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Simplified metaprogramming (thanks to Edward Diener)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/log/&quot;&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                General changes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      On systems with &lt;a href=&quot;https://gcc.gnu.org/wiki/Visibility&quot;&gt;symbol
"                      visibility&lt;/a&gt; support (e.g. Linux) the library is now
"                      built with all internal symbols hidden.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;strong&gt;Breaking change:&lt;/strong&gt; The library
"                      has been ported to Boost.TypeIndex for its underlying type
"                      info management tool. This affected the following public interfaces:
"                      &lt;ul&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;invalid_type&lt;/span&gt;&lt;/code&gt;
"                            exceptions thrown by the library now have &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;typeindex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;type_index&lt;/span&gt;&lt;/code&gt; attached
"                            as the description of the offending type. The type was
"                            previously identified by &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_info_wrapper&lt;/span&gt;&lt;/code&gt;.
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            Boost.Exception &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_info_info&lt;/span&gt;&lt;/code&gt;
"                            error information now contains &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;typeindex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;type_index&lt;/span&gt;&lt;/code&gt;
"                            instead of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_info_wrapper&lt;/span&gt;&lt;/code&gt;.
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; now returns &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;typeindex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;type_index&lt;/span&gt;&lt;/code&gt; instead
"                            of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_info_wrapper&lt;/span&gt;&lt;/code&gt;.
"                            User-defined attribute value implementations should be
"                            similarly changed (the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_value&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;get_type&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; virtual method now
"                            also returns &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;typeindex&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;type_index&lt;/span&gt;&lt;/code&gt;).
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                      &lt;/ul&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;type_info_wrapper&lt;/span&gt;&lt;/code&gt;
"                      component has been deprecated and will be removed in future
"                      releases. Boost.TypeIndex is recommended as a replacement.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Removed the previously deprecated headers: &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;intrusive_ref_counter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;explicit_operator_bool&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utility&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;empty_deleter&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;hpp&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added support for building the library for OpenBSD. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11446&quot;&gt;#11446&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improved internal implementation of the event synchronization
"                      primitive used for asynchronous logging. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11398&quot;&gt;#11398&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed incorrect behavior of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_value_set&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;attribute_value_set&lt;/span&gt;&lt;/code&gt;
"                      constructor in some cases. (&lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11190&quot;&gt;#11190&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href=&quot;http://www.boost.org/libs/log/doc/html/log/changelog.html&quot;&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/move/&quot;&gt;Move&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;unique_ptr&lt;/span&gt;&lt;/code&gt;'s
"                converting constructor taking the source by value in C++03 compilers
"                to allow simple conversions from convertible types returned by value.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11229&quot;&gt;Trac #11229:
"                &lt;em&gt;&amp;quot;vector incorrectly copies move-only objects using
"                memcpy&amp;quot;&lt;/em&gt;&lt;/a&gt;,
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/multi_index/index.html&quot;&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;a href=&quot;http://www.boost.org/libs/multi_index/doc/tutorial/indices.html#rnk_indices&quot;&gt;ranked
"                indices&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/predef/&quot;&gt;Predef&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix many problems with &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;predef_check&lt;/span&gt;&lt;/code&gt;
"                functionality.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update SunPro detection to accomodate latest version of compiler
"                from Oracle.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt;&lt;/code&gt; logical operators for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;predef_check&lt;/span&gt;&lt;/code&gt; expression on the
"                Boost Build side.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_ARCH_PARISC&lt;/span&gt;&lt;/code&gt;
"                to correctly spelled name.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;MAKE_YYYYM&lt;/span&gt;&lt;/code&gt; macros
"                to correctly limit the month.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/program_options/&quot;&gt;Program Options&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix compilation errors, missing dllexport and warnings with MSVC
"                and MinGW (Daniela Engert, Marcel Raad).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix unintialized fields (Zoey Greer).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Stop options with implicit value from consuming separate tokens (Michael
"                John Decker).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Make multitoken limit be max int, not 32K (Hans Hohenfeld).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Code formatting and documentation fixes (Jurko Gospodnetić, Lauri
"                Nurmi).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Minimal support for no-rtti build (Minmin Gong)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Don't increment environment pointer past the end (Vladimir Prus)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/property_tree/&quot;&gt;Property Tree&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                A new JSON parser with full Unicode support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking change:&lt;/strong&gt; The new parser
"                does not support comments or string concatenation in JSON files.
"                These features were non-standard extensions of the old parser but
"                their removal could break code which was relying on them.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/test/&quot;&gt;Boost.Test v3&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Major new features
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;BOOST_TEST&lt;/span&gt;&lt;/code&gt;
"                      generic assertion
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      data driven test cases
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      test units can now have &lt;em&gt;attributes&lt;/em&gt; for
"                      finer control over tests behavior (logical grouping, test dependencies,
"                      test enabling/disabling)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      CLI learned &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;colour_output&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;list_content&lt;/span&gt;&lt;/code&gt;,
"                      extended unit test filtering (negation, labels)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      refactored and rewritten documentation using quickbook
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Addressed issues:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2018&quot;&gt;#2018&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2450&quot;&gt;#2450&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2600&quot;&gt;#2600&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2717&quot;&gt;#2717&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/2759&quot;&gt;#2759&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3182&quot;&gt;#3182&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3316&quot;&gt;#3316&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3392&quot;&gt;#3392&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3402&quot;&gt;#3402&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3445&quot;&gt;#3445&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3463&quot;&gt;#3463&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3542&quot;&gt;#3542&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3481&quot;&gt;#3481&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3495&quot;&gt;#3495&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3592&quot;&gt;#3592&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3595&quot;&gt;#3595&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3623&quot;&gt;#3623&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3664&quot;&gt;#3664&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3784&quot;&gt;#3784&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3785&quot;&gt;#3785&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3811&quot;&gt;#3811&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3834&quot;&gt;#3834&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3896&quot;&gt;#3896&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3932&quot;&gt;#3932&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3938&quot;&gt;#3938&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3964&quot;&gt;#3964&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3978&quot;&gt;#3978&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/3979&quot;&gt;#3979&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4161&quot;&gt;#4161&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4275&quot;&gt;#4275&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4389&quot;&gt;#4389&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4434&quot;&gt;#4434&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4587&quot;&gt;#4587&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4806&quot;&gt;#4806&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4911&quot;&gt;#4911&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4923&quot;&gt;#4923&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4924&quot;&gt;#4924&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/4982&quot;&gt;#4982&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5008&quot;&gt;#5008&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5036&quot;&gt;#5036&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5262&quot;&gt;#5262&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5374&quot;&gt;#5374&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5412&quot;&gt;#5412&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5563&quot;&gt;#5563&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5582&quot;&gt;#5582&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5599&quot;&gt;#5599&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5718&quot;&gt;#5718&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5729&quot;&gt;#5729&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5870&quot;&gt;#5870&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/5972&quot;&gt;#5972&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6002&quot;&gt;#6002&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6071&quot;&gt;#6071&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6074&quot;&gt;#6074&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6161&quot;&gt;#6161&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6766&quot;&gt;#6766&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6712&quot;&gt;#6712&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/6748&quot;&gt;#6748&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7046&quot;&gt;#7046&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7136&quot;&gt;#7136&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7410&quot;&gt;#7410&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7894&quot;&gt;#7894&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8201&quot;&gt;#8201&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8272&quot;&gt;#8272&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8467&quot;&gt;#8467&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8862&quot;&gt;#8862&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/8895&quot;&gt;#8895&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9179&quot;&gt;#9179&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9272&quot;&gt;#9272&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9390&quot;&gt;#9390&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9409&quot;&gt;#9409&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9537&quot;&gt;#9537&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9539&quot;&gt;#9539&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9581&quot;&gt;#9581&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/9960&quot;&gt;#9960&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10318&quot;&gt;#10318&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10394&quot;&gt;#10394&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/10888&quot;&gt;#10888&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11054&quot;&gt;#11054&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11347&quot;&gt;#11347&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11358&quot;&gt;#11358&lt;/a&gt; &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11359&quot;&gt;#11359&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/type_index/&quot;&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed dependencies on some of the Boost libraries to improve compilation
"                times and modularity
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Warnings fixed in tests and other maintainance improvements were
"                done.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;http://www.boost.org/libs/variant/&quot;&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed missing include in element_index.hpp &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11196&quot;&gt;#11196&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11283&quot;&gt;#11283&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;apply_visitor&lt;/span&gt;&lt;/code&gt; usage with C++14
"                and const references &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11251&quot;&gt;#11251&lt;/a&gt;, &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/11285&quot;&gt;#11285&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Relaxed compile time checks for all the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;reference&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;variant_variable&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;)&lt;/span&gt;&lt;/code&gt; functions (thanks to Nicolas Cornu)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_59_0.compilers_tested&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.6
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.8.2, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 15.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.8, 4.9
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          SunOS:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Sun: 6.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.1, 3.2, 3.3, 3.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.6, 3.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.4, 4.7.3, 4.8.1, 5.1.0, 6.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 4.9.3, 5.1.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 15.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.8, 4.9
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.4.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.8.5, 5.1.0, 6.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;version_1_59_0.acknowledgements&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;http://www.boost.org/users/people/beman_dawes.html&quot;&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href=&quot;http://www.boost.org/users/people/rene_rivera.html&quot;&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Thu, 13 Aug 2015 15:23:03 +0000
-quickbook
"feed/history/boost_1_59_0.qbk
)
(feed/history/boost_1_60_0.qbk
-item
"<item><title>Version 1.60.0</title><link>http://www.boost.org/users/history/version_1_60_0.html</link><guid>http://www.boost.org/users/history/version_1_60_0.html</guid><pubDate>Thu, 17 Dec 2015 07:52:06 -0800</pubDate><description>
"
"
"
"  &lt;div id="version_1_60_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/vmd/"&gt;VMD&lt;/a&gt;:&lt;/span&gt;
"  Variadic Macro Data library,
"          from Edward Diener.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_60_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enforced proper alignment of &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; storage. This should fix
"                possible issues on platforms that support atomic operations on data
"                units larger than the native word size. This may also change binary
"                layout of user's data structures that have &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; members.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation for PowerPC with IBM XL C++ compiler. Corrected
"                memory barriers in PowerPC assembler.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation with MSVC-8 for ARM.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation with gcc 4.4 for x86-64, when 128-bit atomic operations
"                were used. (&lt;a href="https://svn.boost.org/trac/boost/ticket/10994"&gt;#10994&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Optimized some gcc assembler blocks for x86/x86-64 to reduce the
"                number of used registers. This may require binutils 2.10 or later.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/chrono/"&gt;Chrono - 2.0.5&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Fixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10778"&gt;#10778&lt;/a&gt;
"                      VC14 CTP4 Atomic don't compile with boost::chrono durations
"                      which are not TriviallyCopyable
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10840"&gt;#10840&lt;/a&gt;
"                      Missing std:: qualifier for puts call in test_7868.cpp
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10851"&gt;#10851&lt;/a&gt;
"                      Missing std:: qualifier for puts call in time_point_output.cpp
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10893"&gt;#10893&lt;/a&gt;
"                      Minor doc typo in Boost.Chrono
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10992"&gt;#10992&lt;/a&gt;
"                      Chrono IO state savers inconsistent with Boost.IO state savers
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/10995"&gt;#10995&lt;/a&gt;
"                      duration_put::put_value truncates fractional part
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/11006"&gt;#11006&lt;/a&gt;
"                      Impossible to instantiate time_fmt_io_saver due to several
"                      errors.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/11012"&gt;#11012&lt;/a&gt;
"                      chrono_io v2 fail to compile with boost::chrono::duration&amp;lt;
"                      boost::rational&amp;lt;int&amp;gt; &amp;gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/container/"&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented &lt;span class="link"&gt;Polymorphic
"                Memory Resources&lt;/span&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add more BOOST_ASSERT checks to test preconditions in some operations
"                (like &lt;code&gt;&lt;span class="identifier"&gt;pop_back&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;pop_front&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;back&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;front&lt;/span&gt;&lt;/code&gt;,
"                etc.)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added C++11 &lt;code&gt;&lt;span class="identifier"&gt;back&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;front&lt;/span&gt;&lt;/code&gt; operations to &lt;code&gt;basic_string&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11627"&gt;Trac
"                      #11627: &lt;em&gt;"small_vector&amp;lt;T,n&amp;gt;::swap() appears
"                      to be broken"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11628"&gt;Trac
"                      #11628: &lt;em&gt;"small_vector&amp;lt;int,n&amp;gt; iterates
"                      over elements in destructor"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11697"&gt;Trac
"                      #11697: &lt;em&gt;"Wrong initialization order in tuple
"                      copy-constructor"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11698"&gt;Trac
"                      #11698: &lt;em&gt;"Missing return statement in static_storage_allocator"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/pull/29"&gt;GitHub
"                      #29: &lt;em&gt;Doc fixes for flap_map complexity requirements&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/pull/31"&gt;GitHub
"                      #31: &lt;em&gt;DL_SIZE_IMPL also dereference addr&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/11603"&gt;#11603&lt;/a&gt; typo in PPC32/MACH-O asm
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                support for CYGWIN
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In symbol demangling tools, added support for gabi++ ABI implementation
"                used in Android NDK.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a new &lt;code&gt;&lt;span class="identifier"&gt;enable_if_has_type&lt;/span&gt;&lt;/code&gt;
"                tool for performing SFINAE checks for presence of a nested type.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;New Features:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added functions &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#lex-normal"&gt;&lt;code&gt;&lt;span class="identifier"&gt;lexically_normal&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                      &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#lex-relative"&gt;&lt;code&gt;&lt;span class="identifier"&gt;lexically_relative&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                      &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#op-relative"&gt;&lt;code&gt;&lt;span class="identifier"&gt;relative&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, and &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#weakly_canonical"&gt;&lt;code&gt;&lt;span class="identifier"&gt;weakly_canonical&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
"                      Many thanks to Jamie Allsop for his help and perseverance.
"                      Resolves tickets &lt;a href="https://svn.boost.org/trac/boost/ticket/1976"&gt;#1976&lt;/a&gt;,
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/5897"&gt;#5897&lt;/a&gt;,
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6249"&gt;#6249&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Class &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;
"                      added types &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-iterators"&gt;&lt;code&gt;&lt;span class="identifier"&gt;reverse_iterator&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"                      and &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-iterators"&gt;&lt;code&gt;&lt;span class="identifier"&gt;const_reverse_iterator&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                      and added functions &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-iterators"&gt;&lt;code&gt;&lt;span class="identifier"&gt;rbegin&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;,
"                      and &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-iterators"&gt;&lt;code&gt;&lt;span class="identifier"&gt;rend&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      C++11 &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt;
"                      supplied as specified in the Filesystem TS if supported by
"                      the compiler.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      C++11 move constructors and move assignments supplied as specified
"                      in the Filesystem TS if supported by the compiler. Resolves
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10291"&gt;#10291&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Existing functions whose names changed in the Filesystem TS
"                      are now supported under both the old and new names.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-size"&gt;&lt;code&gt;&lt;span class="identifier"&gt;size&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"                      function to class &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;.
"                      Resolves &lt;a href="https://svn.boost.org/trac/boost/ticket/6874"&gt;#6874&lt;/a&gt;,
"                      Path should have a &lt;code&gt;&lt;span class="identifier"&gt;size&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; member function.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Tickets:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/11733"&gt;#11733&lt;/a&gt;,
"                      Missing unistd.h include in boost/libs/filesystem/src/unique_path.cpp,
"                      by apply a patch from Idar Tollefsen.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/5706"&gt;#5706&lt;/a&gt;,
"                      unique_path Fails on Windows for Temporary User Profiles, by
"                      applying &lt;a href="https://github.com/boostorg/filesystem/pull/15"&gt;pull
"                      request #15&lt;/a&gt; from Sebastian Redl to fix a race condition
"                      in &lt;code&gt;&lt;span class="identifier"&gt;unique_path&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/10591"&gt;#10591&lt;/a&gt;,
"                      boost::filesystem does not build on iOS 8, by applying a patch
"                      submitted by Daniel Seither.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/9454"&gt;#9454&lt;/a&gt;,
"                      Boost Filesystem [library build] not compiling when BOOST_FILESYSTEM_NO_DEPRECATED
"                      is defined, by applying a patch submitted by Makesim.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/11447"&gt;#11447&lt;/a&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;__OpenBSD__&lt;/span&gt;&lt;/code&gt;
"                      macro name misspelled, by applying a patch submitted by Jasper
"                      Lievisse Adriaanse.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/11288"&gt;#11288&lt;/a&gt;,
"                      A patch to avoid redundant string allocations, by applying
"                      a patch submitted by Yevhen Ivannikov.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Resolve &lt;a href="https://svn.boost.org/trac/boost/ticket/11175"&gt;#11175&lt;/a&gt;,
"                      out-of-date documentation causing users to incorrectly expect
"                      that the library could be used with exceptions disabled.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Resolve &lt;a href="https://svn.boost.org/trac/boost/ticket/11166"&gt;#11166&lt;/a&gt;,
"                      by mitigating (i.e. reducing the likelihood of) a possible
"                      external file system race in &lt;code&gt;&lt;span class="identifier"&gt;remove&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix &lt;a href="https://svn.boost.org/trac/boost/ticket/7258"&gt;#7258&lt;/a&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;create_directories&lt;/span&gt;&lt;/code&gt;
"                      returns false if the path ends with a slash. Also fix related
"                      issues if path contains dot or dot-dot elements, and added
"                      test cases to the test suite.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Resolve &lt;a href="https://svn.boost.org/trac/boost/ticket/10766"&gt;#10766&lt;/a&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;parent_path&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; with redundant separator
"                      returns wrong value, by adding examples and notes to the reference
"                      documentation to show why the returned value is in fact correct,
"                      and to provide rationale for that behavior. See &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-iterators"&gt;path.itr&lt;/a&gt;,
"                      and &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-decomposition"&gt;path.decompose&lt;/a&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;parent_path&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;filename&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; sections of the reference
"                      docs.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Close &lt;a href="https://svn.boost.org/trac/boost/ticket/7607"&gt;#7607&lt;/a&gt;,
"                      path should not infer an invisible "." at the end
"                      of a path that ends with a slash, as resolved by &lt;a href="https://svn.boost.org/trac/boost/ticket/7258"&gt;#7258&lt;/a&gt;
"                      and &lt;a href="https://svn.boost.org/trac/boost/ticket/10766"&gt;#10766&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Close &lt;a href="https://svn.boost.org/trac/boost/ticket/11061"&gt;#11061&lt;/a&gt;,
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11062"&gt;#11062&lt;/a&gt;,
"                      Impossible to traverse the path of the reverse iterator, as
"                      effectively resolved by the addition of the class &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt; reverse iteration feature.
"                      The reference documentation has also been updated with a &lt;a href="http://www.boost.org/libs/filesystem/doc/reference.html#path-iterators"&gt;note&lt;/a&gt;
"                      warning about the limitations of class &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;
"                      iterators.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Other fixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Clear several spurious GCC warnings.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix bug in &lt;code&gt;&lt;span class="identifier"&gt;file_status&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="identifier"&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;:
"                      C++ turns an explicit constructor with all arguments except
"                      first defaulted into non-explicit single argument constructor.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Apply Reference docs editorial cleanups: Use same style sheet
"                      as the rest of the documentation. Tweak tab font size. Fix
"                      excessively long lines in tables, synopsis.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Minor fixes, including pull requests from Jonathan Wakely and
"                      Marcel Raad.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/flyweight/index.html"&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/fusion/"&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                All of fusion containers and generators now support C++11 variadic
"                templates. (&lt;a href="https://github.com/boostorg/fusion/pull/89"&gt;pull-request
"                89&lt;/a&gt;, &lt;a href="https://github.com/boostorg/fusion/pull/97"&gt;pull-request
"                97&lt;/a&gt;, &lt;a href="https://github.com/boostorg/fusion/pull/100"&gt;pull-request
"                100&lt;/a&gt;)
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;strong&gt;Special notice for &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;vector&lt;/span&gt;&lt;/code&gt;&lt;/strong&gt;
"                      &lt;ul&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            Due to implementation limitation, numbered form (i.e.
"                            &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;vectorN&lt;/span&gt;&lt;/code&gt;)
"                            is provided via C++11 aliasing templates and deprecated
"                            in C++11 or later. In this case, you should check &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FUSION_HAS_VARIADIC_VECTOR&lt;/span&gt;&lt;/code&gt;
"                            macro and switch usage because some partial specialization
"                            would become compile error (e.g. &lt;a href="https://github.com/boostorg/spirit/pull/158/files#diff-250ce096dee927d2b7eb5a4e24afb8cd"&gt;pull-request
"                            for Spirit&lt;/a&gt;).
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                      &lt;/ul&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;nview&lt;/span&gt;&lt;/code&gt; now support C++11 variadic
"                templates. (&lt;a href="https://github.com/boostorg/fusion/pull/90"&gt;pull-request
"                90&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;fold&lt;/span&gt;&lt;/code&gt; is now SFINAE-friendly. (&lt;a href="https://github.com/boostorg/fusion/pull/102"&gt;pull-request 102&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Bug fixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The generic fusion sequence convert to a deque fails with a
"                      compiler error. (&lt;a href="https://svn.boost.org/trac/boost/ticket/11572"&gt;#11572&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      (doc) Return type of functions incorrect. (&lt;a href="https://svn.boost.org/trac/boost/ticket/3358"&gt;#3358&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Solved tickets:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10803"&gt;#10803&lt;/a&gt;
"                      Union algorithm returning invalid geometry
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11522"&gt;#11522&lt;/a&gt;
"                      Namespace clash in buffer for traits::detail
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11533"&gt;#11533&lt;/a&gt;
"                      Assert failure in rtree caused by a bug in remove() if min
"                      elements number is 1
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11607"&gt;#11607&lt;/a&gt;
"                      Private geometry::exception::what()
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11709"&gt;#11709&lt;/a&gt;
"                      is_simple segfault
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11710"&gt;#11710&lt;/a&gt;
"                      is_simple - empty geometry logic
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11711"&gt;#11711&lt;/a&gt;
"                      is_simple and is_valid - Points that are NaN or Infinity
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Bugfixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix colocations of touching interior ring / exterior ring,
"                      where it also touches another polygon
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix removing values from an empty rtree - no effect and 0 returned
"                      instead of assertion failure
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix segfault in centroid for multi geometries containing empty
"                      single geometries (thanks to Jiri Drbalek)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix liang_barsky strategy for integral coordinates (thanks
"                      to Dane Springmeyer)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/interprocess/"&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved &lt;code&gt;offset_ptr&lt;/code&gt;
"                performance and removed any undefined behaviour. No special cases
"                needed for different compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11699"&gt;Trac
"                      #11699 (&lt;em&gt;"Forward declarations of std templates
"                      causes stack corruption under Visual Studio 2015"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/intrusive/"&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;span class="link"&gt;Advanced lookup
"                and insertions&lt;/span&gt; in ordered associative containers now support
"                comparison functions that are not required to offer the same strict
"                weak ordering as &lt;code&gt;&lt;span class="identifier"&gt;key_compare&lt;/span&gt;&lt;/code&gt;,
"                the container must be partitioned in regards to the passed comparison
"                object.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11701"&gt;Boost
"                      Trac #11701: &lt;em&gt;Regression in boost::intrusive::set::equal_range&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11765"&gt;Boost
"                      Trac #11765: &lt;em&gt;sgtree.hpp:830: bad if test ?&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/lexical_cast/"&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed usage of &lt;code&gt;&lt;span class="identifier"&gt;lexical_cast&lt;/span&gt;&lt;/code&gt;
"                with move only types &lt;a href="https://svn.boost.org/trac/boost/ticket/11570"&gt;#11570&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed crash when &lt;code&gt;&lt;span class="identifier"&gt;BOOST_LCAST_NO_COMPILE_TIME_PRECISION&lt;/span&gt;&lt;/code&gt;
"                is defined &lt;a href="https://svn.boost.org/trac/boost/ticket/11669"&gt;#11669&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Suppress some of the warning reported in &lt;a href="https://svn.boost.org/trac/boost/ticket/11570"&gt;#11570&lt;/a&gt; and &lt;a href="https://svn.boost.org/trac/boost/ticket/4946"&gt;#4946&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/locale"&gt;Locale&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented generic codecvt facet and add general purpose utf8_codecvt
"                facet
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added posix locale support for FreeBSD 10.0 and above
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issues &lt;a href="https://svn.boost.org/trac/boost/ticket/10017"&gt;#10017&lt;/a&gt; (sun redefinition on SunOS), &lt;a href="https://svn.boost.org/trac/boost/ticket/11163"&gt;#11163&lt;/a&gt; (set_default_messages_domain
"                incorrect behavior), &lt;a href="https://svn.boost.org/trac/boost/ticket/11673"&gt;#11673&lt;/a&gt; build issues
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Some warning cleanup
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed tests for latest ICU versions
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added workaround for &lt;code&gt;&lt;span class="identifier"&gt;libc&lt;/span&gt;&lt;span class="special"&gt;++&lt;/span&gt;&lt;/code&gt; issues
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new defines &lt;code&gt;&lt;span class="identifier"&gt;BOOST_LOCALE_ENABLE_CHAR16_T&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_LOCALE_ENABLE_CHAR32_T&lt;/span&gt;&lt;/code&gt;
"                to enable C++11 &lt;code&gt;&lt;span class="keyword"&gt;char16_t&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="keyword"&gt;char32_t&lt;/span&gt;&lt;/code&gt; instead
"                of deprecated ones
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                General changes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      On Windows, the configuration macro &lt;code&gt;&lt;span class="identifier"&gt;BOOST_LOG_USE_WINNT6_API&lt;/span&gt;&lt;/code&gt;
"                      is no longer used by the library. The target Windows version
"                      should be configured by defining macro &lt;code&gt;&lt;span class="identifier"&gt;BOOST_USE_WINAPI_VERSION&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed compilation for Android using Google NDK. (&lt;a href="https://svn.boost.org/trac/boost/ticket/11559"&gt;#11559&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed compilation of some logging statements, where the first
"                      object to be put into stream is not directly supported by
"                      &lt;code&gt;&lt;span class="identifier"&gt;formatting_ostream&lt;/span&gt;&lt;/code&gt;.
"                      (&lt;a href="https://svn.boost.org/trac/boost/ticket/11549"&gt;#11549&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a workaround for Solaris Studio 12.4, which should fix
"                      the compilation of &lt;code&gt;&lt;span class="identifier"&gt;formatting_ostream&lt;/span&gt;&lt;/code&gt;.
"                      (&lt;a href="https://svn.boost.org/trac/boost/ticket/11545"&gt;#11545&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed compilation when native &lt;code&gt;&lt;span class="keyword"&gt;wchar_t&lt;/span&gt;&lt;/code&gt;
"                      type is disabled. (&lt;a href="https://svn.boost.org/trac/boost/ticket/11541"&gt;#11541&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed exporting symbols from the &lt;code&gt;&lt;span class="identifier"&gt;boost_log_setup&lt;/span&gt;&lt;/code&gt;
"                      library on POSIX-like systems.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed compilation of character decorators.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a workaround for incorrect file name generation in text
"                      file sink backend, when the file name contains date/time placeholders.
"                      (&lt;a href="https://svn.boost.org/trac/boost/ticket/11691"&gt;#11691&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="http://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/move/"&gt;Move&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug &lt;a href="https://svn.boost.org/trac/boost/ticket/11615"&gt;Trac
"                #11615: &lt;em&gt;"Boost.Move should use the qualified name
"                for std::size_t in type_traits.hpp"&lt;/em&gt;&lt;/a&gt;,
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/multi_index/index.html"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an interoperability problem with &lt;a href="http://www.qt.io/"&gt;Qt&lt;/a&gt;
"                due to the optional definition of a macro with name &lt;code&gt;&lt;span class="identifier"&gt;foreach&lt;/span&gt;&lt;/code&gt; in this framework.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/numeric/odeint"&gt;odeint&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added functionality to throw an exception if too many ODE steps
"                      are performed.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added possibility to limit maximal step size in adaptive methods.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                several Bug fixes, see https://github.com/headmyshoulder/odeint-v2/issues
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/optional/"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the implementation of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;none&lt;/span&gt;&lt;/code&gt;
"                again. Now it is a const object with internal linkage (as any other
"                tag). This fixes &lt;a href="https://svn.boost.org/trac/boost/ticket/11203"&gt;#11203&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add detection of SIMD hardware.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="http://www.boost.org/libs/predef/doc/html/predef/history.html#predef.history.1_4"&gt;history&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.test v3.1 see the '&lt;a href="http://www.boost.org/doc/libs/1_60_0/libs/test/doc/html/boost_test/change_log.html"&gt;Change
"                log&lt;/a&gt;' section for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New features
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improved Command Line Interface
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improved dataset API
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/3384"&gt;#3384&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/3897"&gt;#3897&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/6032"&gt;#6032&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/6859"&gt;#6859&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/7257"&gt;#7257&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/9228"&gt;#9228&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/10317"&gt;#10317&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11279"&gt;#11279&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11478"&gt;#11478&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11571"&gt;#11571&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11623"&gt;#11623&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11624"&gt;#11624&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11625"&gt;#11625&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/thread/"&gt;Thread - 4.6.0&lt;/a&gt;:&lt;/span&gt;
"  &lt;em&gt;New
"          Experimental Features:&lt;/em&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11231"&gt;#11231&lt;/a&gt;
"                Allow to set continuation future's destructor behavior to non-blocking
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11424"&gt;#11424&lt;/a&gt;
"                Provide shared_timed_mutex as an alternative name for shared_mutex
"                and deprecate the use of shared_mutex as a timed mutex
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11734"&gt;#11734&lt;/a&gt;
"                future::then(Cont) should be able to execute the contination on undetermined
"                thread
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11736"&gt;#11736&lt;/a&gt;
"                Allow to use launch::executor on future::then(launch::executor, cont)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11737"&gt;#11737&lt;/a&gt;
"                Add a launch::inherit policy that can be used on ::then() to use
"                the policy of the parent future &lt;em&gt;Fixed Bugs:&lt;/em&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/3926"&gt;#3926&lt;/a&gt;
"                thread_specific_ptr + dlopen library causes a SIGSEGV.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/6377"&gt;#6377&lt;/a&gt;
"                Condition variable blocks when changing time
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/6787"&gt;#6787&lt;/a&gt;
"                boost::thread::sleep() hangs if system time is rolled back
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/7665"&gt;#7665&lt;/a&gt;
"                this_thread::sleep_for no longer uses steady_clock in thread
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/7720"&gt;#7720&lt;/a&gt;
"                exception lock_error while intensive locking/unlocking of mutex
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/9309"&gt;#9309&lt;/a&gt;
"                test_latch fails often on clang-darwin-tot11
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/10788"&gt;#10788&lt;/a&gt;
"                GetLogicalProcessor isn't available for Windows platform less or
"                equals to 0x0502
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11090"&gt;#11090&lt;/a&gt;
"                ex_future_unwrap- ThreadSanitizer: lock-order-inversion (potential
"                deadlock)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11158"&gt;#11158&lt;/a&gt;
"                Pthread thread deadlock when faketime used
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11174"&gt;#11174&lt;/a&gt;
"                boost::condition_variable::timed_wait with predicate unexpectedly
"                wakes up while should wait infinite
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11185"&gt;#11185&lt;/a&gt;
"                Incorrect URL redirection
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11192"&gt;#11192&lt;/a&gt;
"                boost::future&amp;lt;&amp;gt;::then() with an executor doesn't compile when
"                the callback returns a future
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11250"&gt;#11250&lt;/a&gt;
"                future made from make_exceptional fails on assertion in destructor
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11256"&gt;#11256&lt;/a&gt;
"                future&amp;lt;&amp;gt;::is_ready() == false in continuation function
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11261"&gt;#11261&lt;/a&gt;
"                bad use of scoped threads in basic_thread_pool
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11262"&gt;#11262&lt;/a&gt;
"                bad use of direct pointer in shared_state_nullary_task
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11263"&gt;#11263&lt;/a&gt;
"                lock already locked lock
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11266"&gt;#11266&lt;/a&gt;
"                boost::packaged_task has invalid variadic signature
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11302"&gt;#11302&lt;/a&gt;
"                boost thread doesn't build with BOOST_THREAD_PATCH.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11322"&gt;#11322&lt;/a&gt;
"                sleep_for() nanoseconds overload will always return too early on
"                windows
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11329"&gt;#11329&lt;/a&gt;
"                using declarative for GetProcessHeap, .... fails
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11368"&gt;#11368&lt;/a&gt;
"                boost thread's usage of CreateWaitableTimer wakes PC from sleep (doh)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11377"&gt;#11377&lt;/a&gt;
"                Boost condition variable always waits for system clock deadline
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11435"&gt;#11435&lt;/a&gt;
"                gcc compiler warning in future.hpp
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11555"&gt;#11555&lt;/a&gt;
"                devector.hpp assumes allocator_traits_type is always present
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11562"&gt;#11562&lt;/a&gt;
"                Timer (using steady_clock) expires after computer time is set forward
"                on Ubuntu 64-bit
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11672"&gt;#11672&lt;/a&gt;
"                Thread: Should use unique_ptr, not auto_ptr
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11688"&gt;#11688&lt;/a&gt;
"                thread::try_join_until: Avoid busy wait if system clock changes
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11672"&gt;#11716&lt;/a&gt;
"                ::then(f) should inherit the parent Executor
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/uuid/"&gt;UUID&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a workaround for MSVC codegen bug that could cause crashes
"                when comparing UUIDs.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added detection of AVX being enabled with MSVC compiler switches.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_60_0.news"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;News&lt;/span&gt;&lt;/h3&gt;
"    &lt;div id="version_1_60_0.news.notes_for_windows_users"&gt;
"      &lt;h3&gt;&lt;span class="link"&gt;Notes for
"      Windows users&lt;/span&gt;&lt;/h3&gt;
"      &lt;p&gt;
"        This release of Boost will by default compile for Windows Vista/Windows Server
"        2008, if the compiler supports a recent enough Windows SDK, and for Windows
"        XP otherwise. Binaries compiled with default options may not run on the older
"        Windows versions.
"      &lt;/p&gt;
"      &lt;p&gt;
"        It is still possible to explicitly specify target Windows version by defining
"        &lt;code&gt;&lt;span class="identifier"&gt;BOOST_USE_WINAPI_VERSION&lt;/span&gt;&lt;/code&gt;
"        to a numeric version of Windows API. For example, building Boost for Windows
"        XP can be done with the following command:
"      &lt;/p&gt;
"&lt;pre&gt;    b2 release define=BOOST_USE_WINAPI_VERSION=0x0501
"&lt;/pre&gt;
"      &lt;p&gt;
"        The list of Windows API version numbers can be seen on &lt;a href="https://msdn.microsoft.com/en-us/library/6sehtctf.aspx"&gt;this&lt;/a&gt;
"        page.
"      &lt;/p&gt;
"      &lt;p&gt;
"        This change only concerns libraries that use the common Windows API abstraction
"        layer. Currently, these libraries are: Boost.Chrono, Boost.Dll, Boost.Log,
"        Boost.UUID. This will also affect all dependent libraries.
"      &lt;/p&gt;
"    &lt;/div&gt;
"    &lt;div id="version_1_60_0.news.release_of_hana_postponed"&gt;
"      &lt;h3&gt;&lt;span class="link"&gt;Release
"      of Hana postponed&lt;/span&gt;&lt;/h3&gt;
"      &lt;p&gt;
"        Due to time constraints, the release of &lt;a href="https://github.com/boostorg/hana"&gt;Hana&lt;/a&gt;
"        will be postponed to a later release of Boost. This will also allow some
"        known issues to be addressed properly before releasing the library officially
"        as a part of Boost. More information can be found on the &lt;a href="http://article.gmane.org/gmane.comp.lib.boost.devel/263964"&gt;mailing
"        list&lt;/a&gt;.
"      &lt;/p&gt;
"    &lt;/div&gt;
"    &lt;div id="version_1_60_0.news.release_of_boost_dll_library_pos"&gt;
"      &lt;h3&gt;&lt;span class="link"&gt;Release
"      of Boost.DLL library postponed&lt;/span&gt;&lt;/h3&gt;
"      &lt;p&gt;
"        In order to provide superior support of uncommon toolsets and platforms,
"        the release of Boost.DLL was postponed to a later release of Boost. This
"        also allows to test better a recently added ability to copy construct and
"        copy assign instances of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;shared_library&lt;/span&gt;&lt;/code&gt; and provide examples on
"        importing functions with non default calling conventions. Latest version
"        and developer documentation of the library could be found at &lt;a href="https://github.com/boostorg/dll"&gt;GitHub
"        repo&lt;/a&gt;.
"      &lt;/p&gt;
"    &lt;/div&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_60_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.4, 3.6
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.8.4, 4.9.3, 5.1.0, 5.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++03, mingw: 3.4.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14, mingw: 4.9.3, 5.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6, 3.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9.0, 5.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          SunOS:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio: 12.4, 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.1, 3.2, 3.3, 3.4.2, 3.6.0, 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.7.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.4, 4.7.3, 4.8.1, 4.9.3, 5.1.0, 6.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 4.9.3, 5.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                IBM XL C++: 13.1.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 16.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 7.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 5.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++03, mingw: 3.4.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11, mingw: 4.7.3, 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14, mingw: 4.9.3, 5.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6, 3.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9.0, 5.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.4.1, 3.7.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.8.5, 5.2.0, 6.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          SunOS:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio: 12.4, 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_60_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="http://www.boost.org/users/people/beman_dawes.html"&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href="http://www.boost.org/users/people/rene_rivera.html"&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Thu, 17 Dec 2015 15:52:06 +0000
-quickbook
"feed/history/boost_1_60_0.qbk
)
(feed/history/boost_1_61_0.qbk
-item
"<item><title>Version 1.61.0</title><link>http://www.boost.org/users/history/version_1_61_0.html</link><guid>http://www.boost.org/users/history/version_1_61_0.html</guid><pubDate>Thu, 12 May 2016 21:58:28 -0500</pubDate><description>
"
"
"
"  &lt;div id="version_1_61_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/compute/"&gt;Compute&lt;/a&gt;:&lt;/span&gt;
"  Parallel/GPU-computing
"          library
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
"  Library for comfortable work
"          with DLL and DSO. Library provides a portable across platforms way to:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                load libraries
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                import any native functions and variables
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                make alias names for C++ mangled functions and symbols
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                query libraries for sections and exported symbols
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                self loading and self querying
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                getting program and module location by exported symbol
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/hana/"&gt;Hana&lt;/a&gt;:&lt;/span&gt;
"  A modern C++ metaprogramming
"          library. It provides high level algorithms to manipulate heterogeneous
"          sequences, allows writing type-level computations with a natural syntax,
"          provides tools to introspect user-defined types and much more.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/metaparse/"&gt;Metaparse&lt;/a&gt;:&lt;/span&gt;
"  A library for generating
"          compile time parsers parsing embedded DSL code as part of the C++ compilation
"          process. The library is similar to Spirit, however while parsers built
"          with Spirit parse at run-time, parsers built with Metaparse parse at compile-time.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_61_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/any/"&gt;Any&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                More tests and maintainance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/container/"&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;small_vector&lt;/span&gt;&lt;/code&gt; supports
"                more constructors and assignments.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11820"&gt;Trac
"                      #11820 : &lt;em&gt;"compiler error when using operator[]
"                      of map"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11856"&gt;Trac
"                      #11856 : &lt;em&gt;"pool_resource.cpp error: declaration
"                      changes meaning"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11866"&gt;Trac
"                      #11866 : &lt;em&gt;"small_vector does not have range constructor"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11867"&gt;Trac
"                      #11867 : &lt;em&gt;"small_vector should have constructor
"                      and assignment operator taking other small_vector"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11912"&gt;Trac
"                      #11912 : &lt;em&gt;"flat_map use of vector::priv_forward_range_insert_expand_backwards
"                      may cause move with same source"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11957"&gt;Trac
"                      #11957 : &lt;em&gt;"static_vector::max_size() is higher
"                      than the capacity"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12014"&gt;Trac
"                      #12014 : &lt;em&gt;"boost::container::set can not insert
"                      const (ref) range"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/pull/33"&gt;GitHub
"                      #33: &lt;em&gt;Make sure std::string constructor is available&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/11246"&gt;#11246&lt;/a&gt; fails to build for mingw because of undefined symbols
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/11365"&gt;#11365&lt;/a&gt; execution_context.hpp gives errors when building with
"                VS2015RC
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/11652"&gt;#11652&lt;/a&gt; checking __cpp_lib_integer_sequence
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/11946"&gt;#11946&lt;/a&gt; crashes on x86_64/MinGW
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                fcontext_t: no longer part of public API
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                support for WinFiber API removed
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                execution_context: relaxed to C++11
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                execution_context: type-safe transfer of data
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                execution_context: execute function on top of stack
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                execution_context: improved performance
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                execution_context: static member-fn &lt;code&gt;&lt;span class="identifier"&gt;current&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; removed
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                execution_context: new call semantic
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/coroutine/"&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                attribute related to FPU-env removed
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/coroutine2/"&gt;Coroutine2&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                attribute related to FPU-env removed
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                improved performance
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                relaxed to C++11
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/fusion/"&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Mitigate massive warnings about use of &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PP_IS_EMPTY&lt;/span&gt;&lt;/code&gt;
"                on MSVC8. &lt;a href="https://svn.boost.org/trac/boost/ticket/11157"&gt;#11157&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Container's conversion ctor and SFINAE. &lt;a href="https://svn.boost.org/trac/boost/ticket/11766"&gt;#11766&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Drop trailing &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;void_&lt;/span&gt;&lt;/code&gt;
"                support from C++11 &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;vector&lt;/span&gt;&lt;/code&gt;.
"                &lt;a href="https://github.com/boostorg/fusion/pull/120"&gt;pull-request
"                120&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Workarounds for GCC 4.0 and 4.1 ICE. &lt;a href="https://svn.boost.org/trac/boost/ticket/5808"&gt;#5808&lt;/a&gt; &lt;a href="https://svn.boost.org/trac/boost/ticket/7229"&gt;#7229&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Workaround for ambiguous call of &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;convert&lt;/span&gt;&lt;/code&gt;
"                on GCC 3.4. &lt;a href="https://github.com/boostorg/fusion/pull/130"&gt;pull-request
"                130&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/geometry"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Additional functionality:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Support within and covered_by for Box/Box in spherical and
"                      geographic coordinate systems.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Improvements:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Overlay: handle_tangencies replaced by clusters, fixing many
"                      cases with colocated turns
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Solved tickets:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/9162"&gt;#9162&lt;/a&gt;
"                      Invalid result of relational operations for non-cartesian Point/Areal.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/10866"&gt;#10866&lt;/a&gt;
"                      union_ doesn't work in 1.56 and 1.57.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11018"&gt;#11018&lt;/a&gt;
"                      Invalid geometry intersection
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11576"&gt;#11576&lt;/a&gt;
"                      Intersection gives wrong results.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11637"&gt;#11637&lt;/a&gt;
"                      Unused parameter warning.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11725"&gt;#11725&lt;/a&gt;
"                      union_ fails to create holes
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11789"&gt;#11789&lt;/a&gt;
"                      Assertion failure or invalid result of set operations for spherical_equatorial
"                      coordinate system.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11917"&gt;#11917&lt;/a&gt;
"                      Andoyer distance strategy returns 0 for antipodal points (default
"                      geographic distance).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11928"&gt;#11928&lt;/a&gt;
"                      Improvement of the accuracy of surveyor area strategy.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11966"&gt;#11966&lt;/a&gt;
"                      Compilation error in svg() for box and non-int coordinate type.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11984"&gt;#11984&lt;/a&gt;
"                      union_() generates self-intersecting polygon
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11987"&gt;#11987&lt;/a&gt;
"                      rtree::remove() not compiling for geographic CS.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12000"&gt;#12000&lt;/a&gt;
"                      Uninitialized reference in (unused) constructor of relate's
"                      mask_handler.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12106"&gt;#12106&lt;/a&gt;
"                      Invalid assertion failure in envelope() for non-cartesian very
"                      short segments.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Bugfixes:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix intersects and disjoint for Segment/Box in cartesian coordinate
"                      system when Segment is parallel to Box's face.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix relation operations for Point/Areal in spherical and geographic
"                      coordinate systems for edge cases.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix intersects and disjoint for Point/Box and Box/Box in spherical
"                      and geographic coordinate systems for some cases.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix within and covered_by for Point/Box in spherical and geographic
"                      coordinate systems for some cases.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/interprocess/"&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/pull/23"&gt;GitHub
"                      Pull #23 (&lt;em&gt;"Fixed case sensetive for linux mingw"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/intrusive/"&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11832"&gt;Boost
"                      Trac #11832: &lt;em&gt;clang-cl + boost intrusive = miscompile&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11865"&gt;Boost
"                      Trac #11865: &lt;em&gt;Intrusive list explicit ctor error with
"                      Clang 3.6 (C++11/14)&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11992"&gt;Boost
"                      Trac #11992: &lt;em&gt;Add an overload of insert_check taking
"                      a key_type&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/intrusive/pull/19"&gt;GitHub
"                      Pull #19: &lt;em&gt;ebo_functor_holder: compile fix for copy
"                      constructor&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/lexical_cast/"&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed Sun Studio related issues
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                General changes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The support for &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_string_ref&lt;/span&gt;&lt;/code&gt;
"                      and its specializations is deprecated; users are encouraged
"                      to switch to &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_string_view&lt;/span&gt;&lt;/code&gt;.
"                      The support for &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_string_ref&lt;/span&gt;&lt;/code&gt;
"                      will be removed in future releases.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added support for limiting the number of stored log files in
"                      the target directory of the file collector. Thanks to Erich
"                      Keane for the patch. (&lt;a href="https://svn.boost.org/trac/boost/ticket/8746"&gt;#8746&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed various compilation problems for Windows CE.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed compilation problems on Solaris.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a workaround for MSVC-10 generating broken code for formatters
"                      in some cases. (&lt;a href="https://svn.boost.org/trac/boost/ticket/12025"&gt;#12025&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="http://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Polynomial arithmetic added to tools.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/move/"&gt;Move&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Experimental: asymptotically optimal bufferless merge and sort algorithms:
"                adaptive_merge and adaptive_sort.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11758"&gt;Trac
"                      #11758: &lt;em&gt;"BOOST_MOVABLE_BUT_NOT_COPYABLE doesn't
"                      reset private access with rvalue ref version"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/multiprecision/"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug in stream input for integer types, see &lt;a href="https://svn.boost.org/trac/boost/ticket/11857"&gt;#11857&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some ambiguous conversions involving expression templates see
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/11922"&gt;#11922&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add expression template aware min/max overloads see &lt;a href="https://svn.boost.org/trac/boost/ticket/11149"&gt;#11149&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bug in right shifting negative small integers in cpp_int see
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/11999"&gt;#11999&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use memmove for bitshifts in cpp_int when possible see &lt;a href="https://svn.boost.org/trac/boost/ticket/9233"&gt;#9233&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use memcpy for data import into cpp_int where possible, see &lt;a href="https://svn.boost.org/trac/boost/ticket/9235"&gt;#9235&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed &lt;code&gt;&lt;span class="identifier"&gt;cpp_bin_float&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;convert_to&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword"&gt;double&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;()&lt;/span&gt;&lt;/code&gt; to a function template rather
"                than proceding via &lt;code&gt;&lt;span class="keyword"&gt;long&lt;/span&gt; &lt;span class="keyword"&gt;double&lt;/span&gt;&lt;/code&gt; to avoid double-rounding bug,
"                see &lt;a href="https://svn.boost.org/trac/boost/ticket/12039"&gt;#12039&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed conversions from NaN's and Infinities, see &lt;a href="https://svn.boost.org/trac/boost/ticket/12112"&gt;#12112&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled better support for Clang on Windows.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed handling of NaN's and Infinities in basic arithmetic for cpp_dec_float
"                and cpp_bin_float, see &lt;a href="https://svn.boost.org/trac/boost/ticket/12090"&gt;#12090&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed fencepost error in cpp_bin_float subtraction.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed double-rounding in conversion to float routines for cpp_bin_float,
"                see &lt;a href="https://svn.boost.org/trac/boost/ticket/12039"&gt;#12039&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Make float128 denorm aware, see &lt;a href="https://svn.boost.org/trac/boost/ticket/12075"&gt;#12075&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Allow the library and tests to be used without exception handling
"                support, see &lt;a href="https://svn.boost.org/trac/boost/ticket/12070"&gt;#12070&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed buggy comparison operator overloads for boost::rational.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added some workarounds for Oracle C++.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some missing typecasts for cases where cpp_int's limb_type
"                is wider than unsigned.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/optional/"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Now &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;/code&gt; is specialized for reference
"                parameters. This addresses a couple of issues:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      the &lt;code&gt;&lt;span class="keyword"&gt;sizeof&lt;/span&gt;&lt;/code&gt; of
"                      optional reference is that of a pointer,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      some bugs connected to copying optional references are gone,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      all run-time bugs caused by incorrect reference binding on
"                      some compilers are now turned into compile-time errors,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      you can swap optional references: it is like swapping pointers:
"                      shalow, underlying objects are not affected,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      optional references to abstract types work.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Documented nested typedefs (&lt;a href="https://svn.boost.org/trac/boost/ticket/5193"&gt;Trac
"                #5193&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Made the perfect-forwarding constructor SFINAE-friendly, which fixes
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/12002"&gt;Trac #12002&lt;/a&gt;.
"                However, this only works in the newer platforms that correctly implement
"                C++11 &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;type_traits&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;a href="https://svn.boost.org/trac/boost/ticket/10445"&gt;Trac
"                #10445&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/regex/"&gt;Regex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Change to lockfree implementation of memory cache, see &lt;a href="https://github.com/boostorg/regex/pull/23"&gt;PR#23&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.test v3.2 see the '&lt;a href="http://www.boost.org/doc/libs/1_61_0/libs/test/doc/html/boost_test/change_log.html"&gt;Change
"                log&lt;/a&gt;' section for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New features
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      dataset driven test-cases learned to support fixtures and variadic
"                      number of arguments
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      dataset driven test-cases sample types now honor move semantics
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/6767"&gt;#6767&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/8905"&gt;#8905&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/9443"&gt;#9443&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11854"&gt;#11854&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11887"&gt;#11887&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11889"&gt;#11889&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11983"&gt;#11983&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintainance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_61_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.7.1, 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.3, 4.8.4, 4.8.5, 4.9.3, 5.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.2.1, 5.3.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 16.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++03, mingw: 3.4.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14, mingw: 4.9.3, 5.1, 5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6, 3.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9, 5.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.4.1, 3.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.8.5, 5.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Haiku:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.8.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          SunOS:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio: 12.4, 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio, C++11: 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, c++14: 3.7.1, 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.3, 4.8.5, 4.9.3, 5.3.0, 5.3.1, 6.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 16.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 7.0.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                G++: 5.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++03, mingw: 3.4.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14, mingw: 4.9.3, 5.1, 5.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, cygwin: 5.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6, 3.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9, 5.3, 6.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.41, 3.7.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.8.5, 5.3.0, 6.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 6.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Haiku:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.8.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          SunOS:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio: 12.4, 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio, C++11: 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_61_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="http://www.boost.org/users/people/beman_dawes.html"&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href="http://www.boost.org/users/people/rene_rivera.html"&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Fri, 13 May 2016 02:58:28 +0000
-quickbook
"feed/history/boost_1_61_0.qbk
)
(feed/history/boost_1_62_0.qbk
-item
"<item><title>Version 1.62.0</title><link>http://www.boost.org/users/history/version_1_62_0.html</link><guid>http://www.boost.org/users/history/version_1_62_0.html</guid><pubDate>Wed, 28 Sep 2016 10:17:52 -0500</pubDate><description>
"
"
"
"  &lt;div id="version_1_62_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/fiber/"&gt;Fiber&lt;/a&gt;:&lt;/span&gt;
"  Framework for userland-threads/fibers,
"          from Oliver Kowalke.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/qvm/doc/index.html"&gt;QVM&lt;/a&gt;:&lt;/span&gt;
"  Boost QVM is a
"          generic library for working with quaternions, vectors and matrices of static
"          size with the emphasis on 2, 3 and 4-dimensional operations needed in graphics,
"          video games and simulation applications, from Emil Dotchevski.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_62_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved support for Oracle Studio and SPARC. The library now provides
"                native atomic operations on SPARCv8+.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/chrono/"&gt;Chrono&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11330"&gt;#11330&lt;/a&gt;
"                boost::chrono::duration default constructor doesn't initialize rep_
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11618"&gt;#11618&lt;/a&gt;
"                Chrono IO V2 doc ios_state.hpp does not exist
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/11631"&gt;#11631&lt;/a&gt;
"                boost chrono io v2 does not let you support custom clocks
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/circular_buffer/"&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Debug implementation is no longer used by default in debug mode.
"                Debug implementation does not have the same thread safety guarantees
"                as the normal (release) implementation or other containers. As a
"                result of this change &lt;code&gt;&lt;span class="identifier"&gt;BOOST_CB_DISABLE_DEBUG&lt;/span&gt;&lt;/code&gt;
"                macro is no longer used. &lt;code&gt;&lt;span class="identifier"&gt;BOOST_CB_ENABLE_DEBUG&lt;/span&gt;&lt;span class="special"&gt;=&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;/code&gt;
"                should be defined instead to enable debug support. (&lt;a href="https://svn.boost.org/trac/boost/ticket/6277"&gt;#6277&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/container/"&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/9481"&gt;Trac
"                      #9481: &lt;em&gt;"Minor comment typo in Boost.Container"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/9689"&gt;Trac
"                      #9689: &lt;em&gt;"Add piecewise_construct to boost::container"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11170"&gt;Trac
"                      #11170: &lt;em&gt;"Doc slip for index_of"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11802"&gt;Trac
"                      #11802: &lt;em&gt;"Incorrect ordering after using insert()
"                      with ordered_range_t on a flat_multiset with a non-default
"                      sort order"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12117"&gt;Trac
"                      #12117: &lt;em&gt;"flat_set constructor with ordered_unique_range"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12177"&gt;Trac
"                      #12177: &lt;em&gt;"vector::priv_merge uses unqualified
"                      uintptr_t"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12183"&gt;Trac
"                      #12183: &lt;em&gt;"GCC 6.1 thinks boost::container::string
"                      violates strict aliasing"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12256"&gt;Trac
"                      #12256: &lt;em&gt;"set&amp;lt;std::pair&amp;lt;int,int&amp;gt;&amp;gt;::insert
"                      cause compilation error in debug configuration in Visual Studio
"                      2012"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12273"&gt;Trac
"                      #12273: &lt;em&gt;"static_vector max_size() and capacity()
"                      should be constant expressions"&lt;/em&gt;&lt;/a&gt;. Added
"                      constant &lt;code&gt;&lt;span class="identifier"&gt;static_vector&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;static_capacity&lt;/span&gt;&lt;/code&gt;
"                      to use the configured capacity in constant expressions.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12286"&gt;Trac
"                      #12286: &lt;em&gt;"PMR flat_map from Boost Container does
"                      not compile"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12296"&gt;Trac
"                      #12296: &lt;em&gt;"{deque,string} combine for a memory
"                      leak"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12319"&gt;Trac
"                      #12319: &lt;em&gt;"&lt;code&gt;&lt;span class="identifier"&gt;flat_set&lt;/span&gt;&lt;/code&gt;
"                      should be nothrow move constructible"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Revised noexcept expressions of default and move constructors in
"                all containers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented C++17 &lt;code&gt;&lt;span class="identifier"&gt;insert_or_assign&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;try_emplace&lt;/span&gt;&lt;/code&gt; for &lt;code&gt;map&lt;/code&gt;
"                and &lt;code&gt;flat_map&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented C++17 &lt;code&gt;&lt;span class="identifier"&gt;extract&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;insert&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;node&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;
"                for &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;multimap&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;multiset&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/12215"&gt;#12215&lt;/a&gt; all stack corrupted on Windows using default fixedsize_stack
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/12242"&gt;#12242&lt;/a&gt; build issue with Intel C++ compiler for MacOS
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                fix stack unwinding for execution_context_v1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/coroutine/"&gt;Coroutine&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                deprecated in favour of Coroutine2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/coroutine2/"&gt;Coroutine2&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/12221"&gt;#12221&lt;/a&gt; coroutine&amp;lt;&amp;gt;::push_type function starts without pushing
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                do not swallow exceptions thrown at coroutine&amp;lt;&amp;gt;::push_type
"                construction
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Mangled symbols and classes loading was implemented by Klemens Morgenstern
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Suppress a 'unused parameter' warning in detail::aggressive_ptr_cast
"                &lt;a href="https://github.com/apolukhin/Boost.DLL/pull/9"&gt;pull-request
"                9&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Allowed to query non-existant sections &lt;a href="https://github.com/apolukhin/Boost.DLL/pull/32"&gt;pull-request
"                32&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                More tests and docs
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/functional/forward/"&gt;Functional/Forward&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix C++11 compile error.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/geometry"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Improvements:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Union: take care that output is valid (with some exceptions),
"                      also with self-tangent polygons or shared edges
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      SVG: support boost::variant of geometries
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      SVG: coordinates are now written as double (by default) to
"                      svg
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Rename namespace concept to concepts to avoid conflicts with
"                      the newest compilers
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New spherical intersection strategy used in relational and
"                      set operations for spherical and geographic Geometries (previously
"                      cartesian intersection strategy was used for all coordinate
"                      systems).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Solved tickets:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12189"&gt;#12189&lt;/a&gt;
"                      Relational operations not compiling when point types of inputs
"                      are different
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12287"&gt;#12287&lt;/a&gt;
"                      Invalid result of rtree.query() for contains() predicate
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/interprocess/"&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug &lt;a href="https://github.com/boostorg/interprocess/pull/27"&gt;GitHub
"                Pull #27 (&lt;em&gt;"Fix undefined behavior"&lt;/em&gt;)&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/intrusive/"&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11476"&gt;Boost
"                      Trac #11476: &lt;em&gt;has_member_function_callable_with.hpp
"                      is massively broken with BOOST_NO_CXX11_DECLTYPE&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11994"&gt;Boost
"                      Trac #11994: &lt;em&gt;Support intrusive container key extractors
"                      that return the key by value&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12184"&gt;Boost
"                      Trac #12184: &lt;em&gt;clang -Wdocumentation warning&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12190"&gt;Boost
"                      Trac #12190: &lt;em&gt;Intrusive List + Flat Map combination
"                      crashes&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12229"&gt;Boost
"                      Trac #12229: &lt;em&gt;intrusive::unordered_set&amp;lt;T&amp;gt;::rehash()
"                      broken&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12245"&gt;Boost
"                      Trac #12245: &lt;em&gt;bstree uses a shared static size_traits
"                      for constant_time_size&amp;lt;false&amp;gt;&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/lexical_cast/"&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix incorrect static assertion &lt;a href="https://svn.boost.org/trac/boost/ticket/11759"&gt;#11759&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added new tools for inter-process logging on a local machine.
"                      The implementation includes a resource name wrapper, an inter-process
"                      message queue and a sink backend.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a new character decorator called &lt;code&gt;&lt;span class="identifier"&gt;max_size_decor&lt;/span&gt;&lt;/code&gt;.
"                      The new decorator allows to limit the output of its adopted
"                      formatter up to the specified length.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed that logging streams could retain formatting settings
"                      across different log records. (&lt;a href="https://svn.boost.org/trac/boost/ticket/12178"&gt;#12178&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="http://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New Features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Enabled all the special function code to work correctly with
"                      types whose precision can change at runtime: for example type
"                      &lt;code&gt;&lt;span class="identifier"&gt;mpfr_float&lt;/span&gt;&lt;/code&gt;
"                      from Boost.Multiprecision.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Patches:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix &lt;code&gt;&lt;span class="identifier"&gt;tgamma_delta_ratio&lt;/span&gt;&lt;/code&gt;
"                      for cases where the delta is small compared to the base.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix misc GCC-4.4 test failures.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/optional/"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;a href="https://svn.boost.org/trac/boost/ticket/12179"&gt;Trac
"                #12179&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/phoenix/"&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix compilation for MSVC 10. &lt;a href="https://github.com/boostorg/phoenix/pull/18"&gt;pull-request
"                18&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove unused preprocessed files. &lt;a href="https://github.com/boostorg/phoenix/pull/28"&gt;pull-request
"                28&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix erroneous doc for switch_ statement. &lt;a href="https://svn.boost.org/trac/boost/ticket/8156"&gt;#8156&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Cleanup config unordered. &lt;a href="https://github.com/boostorg/phoenix/pull/33"&gt;pull-request
"                33&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Suppress unused placeholder warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix too few arguments error on binary math functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/regex/"&gt;Regex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix buffer over-run error when parsing certain invalid regexes, see
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/12222"&gt;#12222&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix detection of ICU in library build, see &lt;a href="https://svn.boost.org/trac/boost/ticket/12152"&gt;#12152&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bug in case sensitivity change, see &lt;a href="https://svn.boost.org/trac/boost/ticket/11940"&gt;#11940&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Allow types wider than int in &lt;code&gt;&lt;span class="special"&gt;\&lt;/span&gt;&lt;span class="identifier"&gt;x&lt;/span&gt;&lt;span class="special"&gt;{}&lt;/span&gt;&lt;/code&gt;
"                expressions (for char32_t etc), see &lt;a href="https://svn.boost.org/trac/boost/ticket/11988"&gt;#11988&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.test v3.3 see the &lt;a href="http://www.boost.org/doc/libs/1_62_0/libs/test/doc/html/boost_test/change_log.html"&gt;Change
"                log&lt;/a&gt; section for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New features
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      dataset driven test-cases have now a unique name and all sample
"                      tests of a dataset live inside the same test suite
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Boost.test learned a new command line switch, &lt;code&gt;&lt;span class="special"&gt;--&lt;/span&gt;&lt;span class="identifier"&gt;logger&lt;/span&gt;&lt;/code&gt;
"                      for setting a test logger as well as its parameter in one command
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Boost.test learned to have several loggers at the same time,
"                      each of which having their own log level and output stream
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Boost.test learned a new logger, &lt;code&gt;&lt;span class="identifier"&gt;JUNIT&lt;/span&gt;&lt;/code&gt;,
"                      that is able to output Junit/xUnit compatible streams
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      It is now possible to specify several test filters through
"                      the environment variable &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_RUN_FILTERS&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Trac tickets &lt;a href="https://svn.boost.org/trac/boost/ticket/8707"&gt;#8707&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/8834"&gt;#8834&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11128"&gt;#11128&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11845"&gt;#11845&lt;/a&gt;,
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11859"&gt;#11859&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12024"&gt;#12024&lt;/a&gt;,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Trac tickets &lt;a href="https://svn.boost.org/trac/boost/ticket/12093"&gt;#12093&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12103"&gt;#12103&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12224"&gt;#12224&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12241"&gt;#12241&lt;/a&gt;,
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12257"&gt;#12257&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12378"&gt;#12378&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Pull request &lt;a href="https://github.com/boostorg/test/pull/81"&gt;PR81&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/thread/"&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/12102"&gt;#12102&lt;/a&gt;
"                condition_variable_fwd.hpp fails to compile when BOOST_THREAD_PROVIDES_INTERRUPTIONS
"                is disabled
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/12120"&gt;#12120&lt;/a&gt;
"                Performance improvement in thread/barrier.hpp
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/12146"&gt;#12146&lt;/a&gt;
"                make_exceptional_future is not mentioned in the docs
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/12202"&gt;#12202&lt;/a&gt;
"                shared_lock should be in shared_mutex header
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="http://svn.boost.org/trac/boost/ticket/12371"&gt;#12371&lt;/a&gt;
"                boost thread/future.hpp fails to build
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #88 fix typos in boost::upgrade_lock
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #89 fix a bug in upgrade_to_unique_lock&amp;lt;&amp;gt;::operator=()
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #90 fix a bug in try_lock_wrapper&amp;lt;&amp;gt;::operator=()
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #91 Add shared_lock_guard to the included lock types
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #92 Fixed compilation with MSVC-8.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #93 Fix variable shadowing warnings (Clang)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #94 fix bugs in boost::barrier
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #95 fix a mistake in boost::completion_latch
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #96 rename async_func.hpp to invoker.hpp.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #97 fix a mistake in sync_timed_queue&amp;lt;&amp;gt;::pull_until()
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/type_index/"&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;ctti_type_index&lt;/span&gt;&lt;/code&gt; was
"                made constexpr in C++14. Now it is possible to retrieve actual name
"                of the type as &lt;code&gt;&lt;span class="keyword"&gt;const&lt;/span&gt; &lt;span class="keyword"&gt;char&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt;
"                at compile time. So we can do a lot of interesting things at &lt;strong&gt;compile time&lt;/strong&gt;: check namespace of a type, sort
"                types according to their lexical representation, check that type
"                is a template type and so on... A few examples were provided.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issue with &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt;
"                on MSVC in type names and issue with space in type name (pulled from
"                klemens-morgenstern/develop)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed typos &lt;a href="https://github.com/boostorg/type_index/pull/7"&gt;pull-request
"                7&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved CI testing
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/unordered/"&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove use of deprecated &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an exception safety issue in assignment of &lt;code&gt;&lt;span class="identifier"&gt;unordered_multiset&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;unordered_multimap&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the &lt;a href="http://www.boost.org/doc/html/unordered/changes.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="http://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed variant construction from classes derived from variant &lt;a href="https://svn.boost.org/trac/boost/ticket/7120"&gt;#7120&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/10278"&gt;#10278&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12155"&gt;#12155&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Variant constructors and assignment operators now do not participate
"                in overload resolutions if variant can not hold the input type &lt;a href="https://svn.boost.org/trac/boost/ticket/5871"&gt;#5871&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/11602"&gt;#11602&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed the issue with implicit conversion operator in C++11 &lt;a href="https://svn.boost.org/trac/boost/ticket/8555"&gt;#8555&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed comparisons when variant holds non-const reference &lt;a href="https://svn.boost.org/trac/boost/ticket/11751"&gt;#11751&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed noexcept for variant's move-assignment &lt;a href="https://svn.boost.org/trac/boost/ticket/11696"&gt;#11696&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed double quotes in includes &lt;a href="https://svn.boost.org/trac/boost/ticket/12057"&gt;#12057&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Dropped BOOST_VARIANT_NO_REFERENCE_SUPPORT macro and dropped support
"                for compilers without SFINAE &lt;a href="https://svn.boost.org/trac/boost/ticket/12250"&gt;#12250&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Suppress implicit instantiation of MPL end iterator
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Multiple minor fixes (typos, missing includes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_62_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5, 3.6, 3.7, 3.8.0, 3.8.1, 3.9.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.2.0, 6.1.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.3, 5.2.0, 6.1.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.2.0, 5.3.0, 5.4.1, 6.1.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 16.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++11: 16.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 16.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14, mingw: 6.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6, 3.7, 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9, 5.4, 6.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.4.1, 3.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.8.5, 5.4.0, 6.1.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          SunOS:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio: 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio, C++11: 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, c++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, c++14: 3.5, 3.6, 3.7, 3.8, 3.9
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.8.4, 5.2.0, 6.1.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.3, 5.2.0, 6.1.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.2.0, 5.3.0, 5.4.1, 6.1.1, 7.0.0 (experimental)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 16.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++11: 16.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 16.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                G++: 6.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14, mingw: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, cygwin: 5.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6, 3.7, 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9, 5.4, 6.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.4.1, 3.7.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.8.5. 5.4.0, 6.1.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Haiku:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 5.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          SunOS:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio: 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio, C++11: 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_62_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="http://www.boost.org/users/people/beman_dawes.html"&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href="http://www.boost.org/users/people/rene_rivera.html"&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Tue, 13 Dec 2016 01:03:47 +0000
-quickbook
"feed/history/boost_1_62_0.qbk
)
(feed/history/boost_1_63_0.qbk
-item
"<item><title>Version 1.63.0</title><link>https://www.boost.org/users/history/version_1_63_0.html</link><guid>http://www.boost.org/users/history/version_1_63_0.html</guid><pubDate>Mon, 26 Dec 2016 23:43:57 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_63_0.post_release_patches"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Post-release Patches&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Using 64-bit atomic operations on 32-bit x86 with gcc versions older
"                than 4.7 and compatible compilers can result in generation of incorrect
"                code. This problem is fixed in &lt;a href="https://github.com/boostorg/atomic/commit/a67cc1b055cf09f371e2eca544884634a1ccc886"&gt;this&lt;/a&gt;
"                commit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_63_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the static constant &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_always_lock_free&lt;/span&gt;&lt;/code&gt;
"                for conformance with C++17. The constant indicates that the given
"                specialization always provides lock-free implementation of atomic
"                operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved support of Oracle Studio on x86 targets.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/container/"&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12534"&gt;Trac
"                      #12534: &lt;em&gt;"flat_map fails to compile if included
"                      after type_traits is instantiated under gcc"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12577"&gt;Trac
"                      #12577: &lt;em&gt;"Null reference in pair.hpp triggers
"                      runtime warning with -fsanitize=undefined"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/pull/40"&gt;GitHub
"                      #40: &lt;em&gt;Fix parameter types in copy_move_algo.hpp: iterator_traits::difference_type
"                      -&amp;gt; allocator_traits::size_type&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/pull/41"&gt;GitHub
"                      #41: &lt;em&gt;Avoid -Wunreachable-code in do_allocate()&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/11687"&gt;#11687&lt;/a&gt; Xcode (Apple clang) and thread_local
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/12114"&gt;#12114&lt;/a&gt; context does not preserve fpu context on ios arm64 devices
"                (fixed for other architecturs too)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/12411"&gt;#12411&lt;/a&gt; fpu registers not preserved with O2 optimizations in Visual
"                Studio (fixed for other architecturs too)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/12551"&gt;#12551&lt;/a&gt; building boost on arm64 causes error: unknown directive
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                reduced signatur for ontop-functions
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                unit-test for private fcontext-API
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                performance-test for ucontext and fcontext fixed
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fiber/"&gt;Fiber&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                unbounded_channel and bounded_channel marked as deprecated
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                new classes buffered_channel and unbuffered_channel
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                performance improved
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fusion/"&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;vector&lt;/span&gt;&lt;/code&gt; buggy constructors (Thanks
"                to Lee Clagett).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FUSION_ADAPT&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FUSION_DEFINE&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; now allow empty structures. (&lt;a href="https://svn.boost.org/trac/boost/ticket/6592"&gt;#6592&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FUSION_DEFINE&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; allows move constructor and assignment.
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/10099"&gt;#10099&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Adaptor for &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;array&lt;/span&gt;&lt;/code&gt; (Thanks to Mateusz Łoskot).
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/8241"&gt;#8241&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed returning temporary variable warnings on MSVC.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Improvements:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Intersection: take care that output is valid (work in progres,
"                      not yet finished - but more is valid)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;em&gt;Solved tickets:&lt;/em&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12289"&gt;#12289&lt;/a&gt;
"                      Avoid warning/compilation error for std::cout
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12412"&gt;#12412&lt;/a&gt;
"                      Invalid result of covered_by() with geographic Points and Boxes
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12413"&gt;#12413&lt;/a&gt;
"                      rtree::remove() not working properly with geographic Points
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/functional/hash"&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/interprocess/"&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12499"&gt;Trac
"                      #12499 (&lt;em&gt;"Memory allocation fails"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/pull/30"&gt;GitHub
"                      Pull #30 (&lt;em&gt;"Provide extension point so library
"                      user can provide default temp folder"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/pull/31"&gt;GitHub
"                      Pull #31 (&lt;em&gt;"Add xsi_key(key_t) constructor"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/intrusive/"&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12556"&gt;Boost
"                      Trac #12556: &lt;em&gt;member_value_traits.hpp has a missing
"                      #include&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lexical_cast/"&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issue found by &lt;code&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;fsanitize&lt;/span&gt;&lt;span class="special"&gt;=&lt;/span&gt;&lt;span class="identifier"&gt;undefined&lt;/span&gt;&lt;/code&gt; &lt;a href="https://github.com/boostorg/lexical_cast/issues/21"&gt;#21&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                General changes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Removed the previously deprecated &lt;code&gt;&lt;span class="identifier"&gt;type_info_wrapper&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a way to access the current file name from the text file
"                      sink backend. The file name can be obtained with the &lt;code&gt;&lt;span class="identifier"&gt;get_current_file_name&lt;/span&gt;&lt;/code&gt; method.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed compilation errors for Android API prior to version 21.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Streaming operators now take scalar types and enums by value.
"                      This allows to output static constants and bitfields directly
"                      into formatting stream and record stream. (&lt;a href="https://svn.boost.org/trac/boost/ticket/11998"&gt;#11998&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed auto-detection of native syslog API. (&lt;a href="https://svn.boost.org/trac/boost/ticket/12600"&gt;#12600&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      In UDP socket based syslog backend implementation, changed
"                      the syslog message format for better compliance with RFC3164.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      File close handler installed in text file sink backend is no
"                      longer called if the file is not open yet.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/metaparse/"&gt;Metaparse&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved the implementation of &lt;code&gt;&lt;span class="identifier"&gt;BOOST_METAPARSE_STRING&lt;/span&gt;&lt;/code&gt;
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The maximal string length limit has been increased to 2048
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The maximal string length limit can be extended beyond 2048
"                      by regenerating some of the Boost headers using a script (part
"                      of the library)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The string length limit can be changed within a compilation
"                      unit
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/move/"&gt;Move&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved experimental adaptive sort algorithm performance
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Activate BOOST_MOVE_FORCEINLINE
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/optional/"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added two new in-place constructors. They work similarly to &lt;code&gt;&lt;span class="identifier"&gt;emplace&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                functions: they initialize the contained value by perfect-forwarding
"                the obtained arguments. One constructor always initializes the contained
"                value, the other based on a boolean condition.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Syntax &lt;code&gt;&lt;span class="identifier"&gt;o&lt;/span&gt; &lt;span class="special"&gt;=&lt;/span&gt;
"                &lt;span class="special"&gt;{}&lt;/span&gt;&lt;/code&gt; now correctly un-initializes
"                an &lt;code&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;/code&gt;, just
"                like in &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&amp;amp;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                initialization. (&lt;a href="https://svn.boost.org/trac/boost/ticket/12203"&gt;#12203&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Optional constructors are sfinae-friendly. This fixes interaction
"                with &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;tuple&lt;/span&gt;&lt;/code&gt;. (&lt;a href="https://svn.boost.org/trac/boost/ticket/12563"&gt;#12563&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/phoenix/"&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Most of modules now support C++11 variadic templates.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed type deduction failure with result type.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Suppress unused warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed too few arguments error on binary math functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added workarounds for older compiler.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/python/"&gt;Python&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added (basic) support for C++11 (std::shared_ptr, std::unique_ptr)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Incorporated an extension API to wrap &lt;a href="http://www.numpy.org/"&gt;NumPy&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed obsolete bits and pieces
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.test v3.4 see the &lt;a href="https://www.boost.org/doc/libs/1_63_0/libs/test/doc/html/boost_test/change_log.html"&gt;Change
"                log&lt;/a&gt; section for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New feature: &lt;code&gt;&lt;span class="identifier"&gt;per_element&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;lexicographic&lt;/span&gt;&lt;/code&gt;
"                modifiers of &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST&lt;/span&gt;&lt;/code&gt;
"                can also be applied to string comparison
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Breaking change: colons that appear in test case names are replaced
"                with underscores
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Trac tickets &lt;a href="https://svn.boost.org/trac/boost/ticket/11756"&gt;#11756&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11907"&gt;#11907&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12339"&gt;#12339&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12506"&gt;#12506&lt;/a&gt;,
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12507"&gt;#12507&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12530"&gt;#12530&lt;/a&gt;,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Trac tickets &lt;a href="https://svn.boost.org/trac/boost/ticket/12531"&gt;#12531&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Pull request &lt;a href="https://github.com/boostorg/test/pull/103"&gt;PR103&lt;/a&gt;,
"                      &lt;a href="https://github.com/boostorg/test/pull/104"&gt;PR104&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_index/"&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;runtime_cast&lt;/span&gt;&lt;/code&gt;
"                to the library as an emulation of &lt;code&gt;&lt;span class="keyword"&gt;dynamic_cast&lt;/span&gt;&lt;/code&gt;.
"                Thanks to Chris Glover for the implementation. See &lt;a href="https://www.boost.org/doc/html/boost_typeindex_header_reference.html#header.boost.type_index.runtime_cast_hpp"&gt;runtime_cast
"                reference&lt;/a&gt; for more info.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Internals of the CTTI were made more platform independant, due to
"                change of the &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;size_t&lt;/span&gt;&lt;/code&gt;
"                type to &lt;code&gt;&lt;span class="keyword"&gt;unsigned&lt;/span&gt; &lt;span class="keyword"&gt;int&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/units/"&gt;Units&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix inspection warnings
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                updated physico-chemical constants to CODATA 2014 values
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                define biot correctly as 10 Ampere
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/unordered/"&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix an exception safety issue in assignment.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt; where available,
"                and support modern style rebind (&lt;a href="https://svn.boost.org/trac/boost/ticket/12459"&gt;#12459&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add some allocator aware constructors.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use the hint iterator in &lt;code&gt;&lt;span class="identifier"&gt;emplace_hint&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the &lt;a href="https://www.boost.org/doc/html/unordered/changes.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_63_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5, 3.6, 3.7, 3.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 3.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.2.0, 6.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.3, 5.2.0, 6.1.1, 6.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.2.0, 5.3.0, 6.1.1, 6.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 16.0, 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++11: 16.0, 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 16.0, 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 7.0.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 7.0.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14, mingw: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6, 3.7, 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9, 5.4, 6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          SunOS:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio: 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio, C++11: 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5, 3.6, 3.7, 3.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 3.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.2.0, 6.1.1, 6.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.3, 5.2.0, 6.1.1, 6.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.2.0, 5.3.0, 6.1.1, 6.2.0, 7.0.0 (experimental)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++1z: 6.1.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 16.0, 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++11: 16.0, 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 16.0, 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 7.0.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 7.0.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14, mingw: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6, 3.7, 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9, 5.4, 6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC,C++14: 6.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          SunOS:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio: 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio, C++11: 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_63_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="https://www.boost.org/users/people/beman_dawes.html"&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href="https://www.boost.org/users/people/rene_rivera.html"&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Tue, 27 Apr 2021 03:13:52 +0000
-quickbook
"feed/history/boost_1_63_0.qbk
-update_count
=2
)
(feed/history/boost_1_64_0.qbk
-item
"<item><title>Version 1.64.0</title><link>https://www.boost.org/users/history/version_1_64_0.html</link><guid>http://www.boost.org/users/history/version_1_64_0.html</guid><pubDate>Wed, 19 Apr 2017 17:42:32 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_64_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/process/"&gt;Process&lt;/a&gt;:&lt;/span&gt;
"  Process library by Klemens
"          D. Morgenstern, that provides cross platorm ways to allows you to:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              create child processes
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              setup streams for child processes
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              communicate with child processes through streams (synchronously or
"              asynchronously)
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              wait for processes to exit (synchronously or asynchronously)
"            &lt;/div&gt;
"          &lt;/li&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              terminate processes
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"        &lt;div&gt;
"          Broken feature:
"        &lt;/div&gt;
"        &lt;ul&gt;
"          &lt;li&gt;
"            &lt;div&gt;
"              &lt;a href="https://github.com/klemens-morgenstern/boost-process/issues/67"&gt;GitHub
"              #67: &lt;em&gt;"group.wait() does not return"&lt;/em&gt;&lt;/a&gt;.
"            &lt;/div&gt;
"          &lt;/li&gt;
"        &lt;/ul&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_64_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/any/"&gt;Any&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Suppressed false warnings about returning reference to temporary
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;addressof&lt;/span&gt;&lt;/code&gt; is now used instead of
"                directly taking the address &lt;a href="https://svn.boost.org/trac/boost/ticket/12615"&gt;#12615&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Headers are not included using double quotes any more &lt;a href="https://svn.boost.org/trac/boost/ticket/12053"&gt;#12053&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                CI tests now run with &lt;code&gt;&lt;span class="identifier"&gt;address&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;leak&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class="identifier"&gt;undefined&lt;/span&gt;&lt;/code&gt; sanitizers
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added more test
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed possible incorrect code generation in 64-bit atomic operations
"                on 32-bit x86 with gcc versions older than 4.7 and compatible compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/config/"&gt;Config&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_CXX11_SFINAE_EXPR&lt;/span&gt;&lt;/code&gt;
"                defect detection.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/container/"&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12749"&gt;Trac
"                      #12749: &lt;em&gt;"container::pmr::polymorphic_allocator
"                      compilation error"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11333"&gt;Trac
"                      #11333: &lt;em&gt;"boost::basic_string_ref should interop
"                      with boost::container::basic_string"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/pull/45"&gt;GitHub
"                      #45: &lt;em&gt;"emplace_back must return reference to
"                      back(), not to *end()"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                new API: call/cc
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                deprecated API:execution-context
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                stack manipulation on MIPS fixed
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/12719"&gt;#12719&lt;/a&gt; segmentation fault when built with mingw-w64
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/12948"&gt;#12948&lt;/a&gt; Unexpected snprintf result is on Android ARM
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #38: context_entry() crashes on macOS
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #39: Unknown directive .cpu on aarch64 with Clang 3.8 on Android
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #41: std::bind() fails with invoke()
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #46: "rename of continuation member functions" missed a
"                spot
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #50: bad assembly for fcontext on ppc64/sysv/elf
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/conversion/"&gt;Conversion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Docs were ported to Quickbook (thanks to Mikhail Maksimov for the
"                port)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a memory leak in test (thanks to Mikhail Maksimov for the fix)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                CI tests now run with &lt;code&gt;&lt;span class="identifier"&gt;address&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;leak&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class="identifier"&gt;undefined&lt;/span&gt;&lt;/code&gt; sanitizers
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;addressof&lt;/span&gt;&lt;/code&gt; on compilers
"                that support C++11 &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
"                and SFINAE expressions (Glen Fernandes). &lt;code&gt;&lt;span class="identifier"&gt;BOOST_CORE_NO_CONSTEXPR_ADDRESSOF&lt;/span&gt;&lt;/code&gt;
"                macro indicates when &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;addressof&lt;/span&gt;&lt;/code&gt; is not
"                available.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In &lt;code&gt;&lt;span class="identifier"&gt;lightweight_test&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;,
"                added new macros &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_ALL_EQ&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_ALL_WITH&lt;/span&gt;&lt;/code&gt;
"                for testing container contents (Bjorn Reese).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/coroutine2/"&gt;Coroutine2&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #4: coroutine2&amp;lt;&amp;gt; does not accept std::bind
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed WinCE compilation
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;symbol_location_ptr&lt;/span&gt;&lt;/code&gt; function for
"                getting location of a symbol by pointer that could not be dereferenced
"                (&lt;code&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;/code&gt; pointer for example)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed UB in &lt;code&gt;&lt;span class="identifier"&gt;detail&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;aggressive_ptr_cast&lt;/span&gt;&lt;/code&gt;
"                for member pointers
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed leaks in experimental smart imports
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed warnings
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                CI tests now run with &lt;code&gt;&lt;span class="identifier"&gt;address&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;leak&lt;/span&gt;&lt;/code&gt; sanitizers
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fiber/"&gt;Fiber&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                (un)bounded_channel&amp;lt;&amp;gt; removed
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #100: ASIO: unbuffered_channel / scheduler notify issue
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #105: skynet variants crash on windows
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #106: Passing a fixed_stack allocator to async/packaged_task doesn't
"                compile
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #110: Compile error on ARMv6
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #111: endless-loop in buffered_channel::try_value_pop()
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                #114: buffered_channel::try_push&lt;code&gt; &lt;span class="identifier"&gt;does&lt;/span&gt;
"                &lt;span class="keyword"&gt;not&lt;/span&gt; &lt;span class="identifier"&gt;wake&lt;/span&gt;
"                &lt;span class="identifier"&gt;fibers&lt;/span&gt; &lt;span class="identifier"&gt;in&lt;/span&gt;
"                &lt;/code&gt;pop`
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      matrix transformation is now based on Boost.QVM instead of
"                      Boost.Ublas
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Breaking changes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      ublas_transformer is renamed to matrix_transformer
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      explicit modifier is added to constructors of rtree index::dynamic_*
"                      parameters
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      strategy::area::huiller replaced by strategy::area::spherical
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved issues:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/363"&gt;363&lt;/a&gt;
"                      Missing includes in geometry/index/parameters.hpp
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/364"&gt;364&lt;/a&gt;
"                      within(Linear, Areal) compilation error when arguments use
"                      different point types
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/370"&gt;370&lt;/a&gt;
"                      Buffer Seg Faults with Ring as Input
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved tickets:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11899"&gt;11899&lt;/a&gt;
"                      boost::geometry::equals doesn't handle open polygons
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11930"&gt;11930&lt;/a&gt;
"                      Inaccuracy of area::huiller strategy
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/11931"&gt;11931&lt;/a&gt;
"                      Wrong spherical area with pole encircling polygons
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12410"&gt;12410&lt;/a&gt;
"                      Lack of support of geographic coordinate system in correct()
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12566"&gt;12566&lt;/a&gt;
"                      Ambiguous template instantiation in equal_to&amp;lt;&amp;gt; when pair
"                      value contains raw pointer
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12861"&gt;12861&lt;/a&gt;
"                      Segmentation fault in stdlibc++ (gcc 4.8.2) affecting rtree
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12885"&gt;12885&lt;/a&gt;
"                      Use BOOST_THROW_EXCEPTION instead of throw
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix distance_measure in get_turn_info
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/functional/hash/"&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Stop using &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;unary_function&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;binary_function&lt;/span&gt;&lt;/code&gt; when they're not
"                available.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/interprocess/"&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12617"&gt;Trac
"                      #12617 (&lt;em&gt;"clock_gettime not available on OS X
"                      10.11"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12744"&gt;Trac
"                      #12744 (&lt;em&gt;"winapi::set_timer_resolution inadvertently
"                      changes timer resolution (Windows)"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/pull/32"&gt;GitHub
"                      Pull #32 (&lt;em&gt;"Conform to std::pointer_traits requirements"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/pull/33"&gt;GitHub
"                      Pull #33 (&lt;em&gt;"explicit cast to derived class"
"                      and "64/32 bit processes sharing"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/pull/34"&gt;GitHub
"                      Pull #34 (&lt;em&gt;"Update example to use multi_index::member
"                      instead of BOOST_MULTI_INDEX_MEMBER"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/pull/35"&gt;GitHub
"                      Pull #35 (&lt;em&gt;"Fixed options for cross-compilation"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New experimental option &lt;code&gt;&lt;span class="identifier"&gt;BOOST_INTERPROCESS_BOOTSTAMP_IS_SESSION_MANAGER_BASED&lt;/span&gt;&lt;/code&gt;
"                from Windows systems. This option derives the unique bootstamp used
"                to name the folder where shared memory is placed from registry values
"                associated with the session manager. This option only works on Vista
"                and later systems and might be more stable than the default version.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/intrusive/"&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12745"&gt;Boost
"                      Trac #12745: &lt;em&gt;key_nodeptr_comp broken if the key type
"                      is void*&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12761"&gt;Boost
"                      Trac #12761: &lt;em&gt;intrusive::set::swap doesn't swap the
"                      comparison function*&lt;/em&gt;&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lexical_cast/"&gt;LexicalCast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed multiple warnings &lt;a href="https://svn.boost.org/trac/boost/ticket/11842"&gt;#11842&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                CI tests now run with &lt;code&gt;&lt;span class="identifier"&gt;address&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;leak&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class="identifier"&gt;undefined&lt;/span&gt;&lt;/code&gt; sanitizers
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Big push to ensure all functions in also in C99 are compatible with
"                Annex F.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved accuracy of the Bessel functions I0, I1, K0 and K1, see
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/12066"&gt;12066&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/index.html"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a bug related to ambiguous references in the presence of more
"                than one ranked index (ticket &lt;a href="https://svn.boost.org/trac/boost/ticket/12955"&gt;#12955&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multiprecision/"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In &lt;code&gt;&lt;span class="identifier"&gt;cpp_bin_float&lt;/span&gt;&lt;/code&gt;
"                prevent double rounding when converting to a denormalized float.
"                See &lt;a href="https://svn.boost.org/trac/boost/ticket/12527"&gt;#12527&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bug in integer sqrt for very small integers. See &lt;a href="https://svn.boost.org/trac/boost/ticket/12559"&gt;#12559&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix conversion to signed-zero in &lt;code&gt;&lt;span class="identifier"&gt;cpp_bin_float&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Change &lt;code&gt;&lt;span class="identifier"&gt;cpp_bin_float&lt;/span&gt;&lt;/code&gt;
"                rounding code to round at arbitrary location so we can use it for
"                conversions, see &lt;a href="https://svn.boost.org/trac/boost/ticket/12527"&gt;#12527&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improve performance of 128-bit bit-scan operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix subtraction of very small quantities in &lt;code&gt;&lt;span class="identifier"&gt;cpp_bin_float&lt;/span&gt;&lt;/code&gt;.
"                See: &lt;a href="https://svn.boost.org/trac/boost/ticket/12580"&gt;#12580&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bring error handling into line with C99 Annex F. See &lt;a href="https://svn.boost.org/trac/boost/ticket/12581"&gt;#12581&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bitwise export of trivial &lt;code&gt;&lt;span class="identifier"&gt;cpp_int&lt;/span&gt;&lt;/code&gt;'s,
"                see &lt;a href="https://svn.boost.org/trac/boost/ticket/12627"&gt;#12627&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;code&gt;&lt;span class="identifier"&gt;ilogb&lt;/span&gt;&lt;/code&gt; (and code
"                that uses it) to consistently return the smallest value of the exponent
"                type when the argument is zero, see &lt;a href="https://svn.boost.org/trac/boost/ticket/12625"&gt;#12625&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Allow conversion from &lt;code&gt;&lt;span class="identifier"&gt;__float128&lt;/span&gt;&lt;/code&gt;
"                to &lt;code&gt;&lt;span class="identifier"&gt;cpp_bin_float&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bug in left shift of &lt;code&gt;&lt;span class="identifier"&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
"                which would result in bit-loss, see &lt;a href="https://svn.boost.org/trac/boost/ticket/12790"&gt;#12790&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs in bounded but variable precision &lt;code&gt;&lt;span class="identifier"&gt;cpp_int&lt;/span&gt;&lt;/code&gt;'s
"                caused by over-aggressive constexpr optimization, see &lt;a href="https://svn.boost.org/trac/boost/ticket/12798"&gt;#12798&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix Intel C/C++ compiler version specification.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class="identifier"&gt;BOOST_VERSION_NUMBER_MAJOR&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_VERSION_NUMBER_MINOR&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_VERSION_NUMBER_PATCH&lt;/span&gt;&lt;/code&gt;
"                macros to extract components from valid version numbers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Change VS version numbering. Versions after VS2015 will use the compiler
"                version instead of the varied product versions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/regex/"&gt;Regex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Compiling with Oracle C++ toolset is no longer restricted to static
"                linking.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Big effort to de-fuzz the library using libFuzzer and fix identified
"                issues, see: &lt;a href="https://svn.boost.org/trac/boost/ticket/12818"&gt;#12818&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/smart_ptr/"&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Rewrite of &lt;code&gt;&lt;span class="identifier"&gt;allocate_shared&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;make_shared&lt;/span&gt;&lt;/code&gt; for
"                arrays for a more optimal and more maintainable implementation (Glen
"                Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Pointer cast functions with move semantics (Chris Glover)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.test v3.5 see the &lt;a href="https://www.boost.org/doc/libs/1_64_0/libs/test/doc/html/boost_test/change_log.html"&gt;Change
"                log&lt;/a&gt; section for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New feature:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Now Boost.Test provides &lt;strong&gt;customization
"                      points&lt;/strong&gt; for logging user defined types
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      JUnit output format can now have a &lt;em&gt;log-level&lt;/em&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      JUnit output format has not better performances when the test
"                      modules have a lot of checks
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Trac tickets &lt;a href="https://svn.boost.org/trac/boost/ticket/11756"&gt;#11756&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12540"&gt;#12540&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12712"&gt;#12712&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12748"&gt;#12748&lt;/a&gt;,
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12778"&gt;#12778&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Pull request &lt;a href="https://github.com/boostorg/test/pull/107"&gt;PR107&lt;/a&gt;,
"                      &lt;a href="https://github.com/boostorg/test/pull/108"&gt;PR108&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_index/"&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TYPE_INDEX_IMPLEMENT_RUNTIME_CAST&lt;/span&gt;&lt;/code&gt;,
"                which implements the functionality for &lt;code&gt;&lt;span class="identifier"&gt;runtime_cast&lt;/span&gt;&lt;/code&gt;
"                but does not include the &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TYPE_INDEX_REGISTER_CLASS&lt;/span&gt;&lt;/code&gt;
"                macro (thanks to Chris Glover for imlpementing it)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed undefined macro warning in stl_type_index.hpp &lt;a href="https://svn.boost.org/trac/boost/ticket/12739"&gt;#12739&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                CI tests now run with &lt;code&gt;&lt;span class="identifier"&gt;address&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;leak&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class="identifier"&gt;undefined&lt;/span&gt;&lt;/code&gt; sanitizers
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_traits/"&gt;TypeTraits&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new traits &lt;code&gt;&lt;span class="identifier"&gt;make_void&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;void_t&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/unordered/"&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Initial support for new C++17 member functions: &lt;code&gt;&lt;span class="identifier"&gt;insert_or_assign&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;try_emplace&lt;/span&gt;&lt;/code&gt; in
"                &lt;code&gt;&lt;span class="identifier"&gt;unordered_map&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;merge&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;extract&lt;/span&gt;&lt;/code&gt;
"                in all containers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed construction of variant from &lt;code&gt;&lt;span class="identifier"&gt;recursive_variant_&lt;/span&gt;&lt;/code&gt;
"                (thanks to Mikhail Maksimov for the fix) &lt;a href="https://svn.boost.org/trac/boost/ticket/12508"&gt;#12508&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12645"&gt;#12645&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Do not enable variadic templates for MSVC2015Update1 as it still
"                has issues &lt;a href="https://svn.boost.org/trac/boost/ticket/12236"&gt;#12236&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Workaround GCC6 crash (thanks to Mikhail Maksimov for the workaround)
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/12680"&gt;#12680&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/7120"&gt;#7120&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Made &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;polymorphic_&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;span class="identifier"&gt;get&lt;/span&gt;&lt;/code&gt; to work as &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::*&lt;/span&gt;&lt;span class="identifier"&gt;get&lt;/span&gt;&lt;/code&gt;
"                in undocumented border cases and fixed tests &lt;a href="https://svn.boost.org/trac/boost/ticket/11950"&gt;#11950&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                CI tests now run with &lt;code&gt;&lt;span class="identifier"&gt;address&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;leak&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class="identifier"&gt;undefined&lt;/span&gt;&lt;/code&gt; sanitizers
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_64_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1, 3.9.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1, 3.9.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5, 3.6, 3.7.1, 3.8.1, 3.9.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 3.9.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 6.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 6.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.1, 6.2.0, 6.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++1z: 6.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 16.0, 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++11: 16.0, 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 16.0, 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 7.0.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 7.0.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11, mingw: 4.6.4, 4.7.3, 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14, mingw: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6, 3.7, 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9, 5.4, 6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          SunOS:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio: 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio, C++11: 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1, 3.9.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.8.1, 3.9.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.4, 3.5, 3.6, 3.7. 3.8, 3.8.1, 3.9.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 3.9.1, 4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 6.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 6.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.1, 6.2.0, 6.3.0, 7.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++1z: 6.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 16.0, 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++11: 16.0, 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 16.0, 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 7.0.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++03, mingw: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6, 3.7, 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9, 5.4, 6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++98: 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          SunOS:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio: 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio, C++11: 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_64_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="https://www.boost.org/users/people/beman_dawes.html"&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href="https://www.boost.org/users/people/rene_rivera.html"&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Tue, 27 Apr 2021 03:13:52 +0000
-quickbook
"feed/history/boost_1_64_0.qbk
-update_count
=13
)
(feed/history/boost_1_65_0.qbk
-item
"<item><title>Version 1.65.0</title><link>https://www.boost.org/users/history/version_1_65_0.html</link><guid>http://www.boost.org/users/history/version_1_65_0.html</guid><pubDate>Mon, 21 Aug 2017 20:50:17 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_65_0.known_issues"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Known Issues&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      These are patches from library authors which were found too late to be fixed
"      in the release. Be careful as they have not been through the normal testing
"      process.
"    &lt;/p&gt;
"    &lt;p&gt;
"      Combined patch for fixes to issues: &lt;a href="https://www.boost.org/patches/1_65_0/boost_1_65_0.patch"&gt;boost_1_65_0.patch&lt;/a&gt;.
"      Use &lt;code&gt;&lt;span class="identifier"&gt;patch&lt;/span&gt; &lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;p1&lt;/span&gt; &lt;span class="special"&gt;&amp;lt;&lt;/span&gt; &lt;span class="identifier"&gt;boost_1_65_0&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;patch&lt;/span&gt;&lt;/code&gt; from the root of the boost repo to
"      apply. Or you can apply the patches individually below.
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Context and Fiber don't return continuations when they should:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/patches/1_65_0/0001-context-function-executed-by-resume_with-has-to-retu.patch"&gt;Context
"                patch&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/patches/1_65_0/0002-fiber-resume_with-requires-tor-return-a-continuation.patch"&gt;Fiber
"                patch&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Thread: Bug in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;condition_variable&lt;/span&gt;&lt;/code&gt; on Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/patches/1_65_0/0003-thread-130-Bug-in-boost-condition_variable-on-Window.patch"&gt;Thread
"                patch 1&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/patches/1_65_0/0004-thread-130-Bug-in-boost-condition_variable-on-Window.patch"&gt;Thread
"                patch 2&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_65_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
"  Fast
"          containers of polymorphic objects, from Joaquín M López Muñoz.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
"  Gather, store,
"          copy and print backtraces, from Antony Polukhin.
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Note: Library has &lt;a href="https://github.com/boostorg/stacktrace/issues/14"&gt;issue
"                with MinGW&lt;/a&gt; and may produce empty backtraces with that compiler.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_65_0.removed_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Removed Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          TR1
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_65_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to require &lt;tt&gt;g++&lt;/tt&gt; versions &amp;gt;= 4.7 to use
"                standard atomics, to fix a linker error when using &lt;tt&gt;g++&lt;/tt&gt;
"                4.6 (&lt;a href="https://svn.boost.org/trac/boost/ticket/13121"&gt;#13121&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled use of &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
"                and variadic templates with recent MSVC versions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a race condition in the Linux epoll backend, which may occur
"                when a socket or descriptor is closed while another thread is blocked
"                on epoll.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Eliminated use of deprecated &lt;code&gt;&lt;span class="identifier"&gt;auto_ptr&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed misplaced use of &lt;code&gt;&lt;span class="identifier"&gt;asio_handler_is_continuation&lt;/span&gt;&lt;/code&gt;
"                result in reactive &lt;code&gt;&lt;span class="identifier"&gt;async_accept&lt;/span&gt;&lt;/code&gt;
"                implementation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to use &lt;code&gt;&lt;span class="identifier"&gt;poll&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;h&lt;/span&gt;&lt;/code&gt;
"                rather than &lt;code&gt;&lt;span class="identifier"&gt;sys&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;poll&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;h&lt;/span&gt;&lt;/code&gt; on some modern POSIX platforms
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/12419"&gt;#12419&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed MSVC intellisense detection.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disabled use of the &lt;code&gt;&lt;span class="identifier"&gt;__thread&lt;/span&gt;&lt;/code&gt;
"                keyword extension for android/clang/x86 targets.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      call/cc supports ucontext-API (swapcontext)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      call/cc supports Windows-Fiber-API
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      call/cc supports on demand growing (segmented/split) stacks
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12719"&gt;#12719&lt;/a&gt;: context test cases and examples segmentation fault
"                      when built with mingw-w64 toolchain
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      #52: Failing to build callcc test with g++-4.9
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                important:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      required bug fix &lt;a href="https://github.com/boostorg/context/commit/420554fe9ac01482990e8ae314f4f7ba81010c9a"&gt;420554fe9ac01482990e8ae314f4f7ba81010c9a&lt;/a&gt;
"                      not included in 1.65
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/config/"&gt;Config&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_CXX11_POINTER_TRAITS&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_CXX17_FOLD_EXPRESSIONS&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_CXX17_INLINE_VARIABLES&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_CXX17_STRUCTURED_BINDINGS&lt;/span&gt;&lt;/code&gt;
"                defect detection.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                BOOST_FALLTHROUGH support for GCC 7 and above. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented &lt;code&gt;&lt;span class="identifier"&gt;pointer_traits&lt;/span&gt;&lt;/code&gt;
"                for C++03 and higher, that implements &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0653r0.html"&gt;P0653r0&lt;/a&gt;
"                (Glen Fernandes). This implementation is now used by Align, Circular
"                Buffer, Fiber, Geometry, among other libraries.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_GT&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_GE&lt;/span&gt;&lt;/code&gt;
"                to Lightweight Test.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/coroutine2/"&gt;Coroutine2&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                supports ucontext-API (swapcontext)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                supports Windows-Fiber-API
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/13064"&gt;#13064&lt;/a&gt;: different behavior coroutine and coroutine2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix PE parsing on non Windows platforms.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fiber/"&gt;Fiber&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      hardware transactional memory (Intel TSX) supported
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      NUMA supported
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      ucontext-API (swapcontext) supported
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Windows-Fiber-API supported
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      on demand growing stacks
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      #121: failing to build static lib with GCC 4.8 and C++11
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      #123: assertion failure in schedule_from_remote
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      #125: erratic crashes in testsuite
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      #126: incorrect std::memory_order value in compare_exchange_strong?
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                important:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      required bug fix &lt;a href="https://github.com/boostorg/fiber/commit/63f1041f0e484e64dec437a0fa780ea2463abda2"&gt;63f1041f0e484e64dec437a0fa780ea2463abda2&lt;/a&gt;
"                      not included in 1.65
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fusion/"&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                MSVC 14.1 supports variadic containers, such as &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;vector&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;deque&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;map&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;set&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;tuple&lt;/span&gt;&lt;/code&gt;.
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/12986"&gt;#12986&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add correct() overload taking area strategy
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add is_convex() overload taking side strategy
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add missing relational operations (covered_by, crosses, equals,
"                      etc.) for MultiPoint/AnyGeometry
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved issues:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12410"&gt;12410&lt;/a&gt;
"                      Lack of support of geographic coordinate system in correct()
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/13035"&gt;13035&lt;/a&gt;
"                      Wrong result of non-cartesian intersection strategies for segments
"                      near poles.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/13057"&gt;13057&lt;/a&gt;
"                      Wrong result of intersects() for linestrings caused by numerical
"                      issue in disjoint() for boxes.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix is_valid which could return false for multipolygons where
"                      an interior ring touches another interior ring
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix is_valid which could return false for multipolygons where
"                      a polygon was located in an interior ring, all touching each
"                      other
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix union which could produce invalid results (for some cases,
"                      this needs to define BOOST_GEOMETRY_INCLUDE_SELF_TURNS)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix intersection (idem), but some cases are still not yet valid
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix difference (idem), but some cases are still not yet valid
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix propagation of area strategy into the internals of various
"                      algorithms from intersection strategy
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix uninitialized variable in relate and reference to temporary
"                      in overlay
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix error in disjoint for geographic Segment/Box
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix handling of non-cartesian geometries in various algorithms
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/functional/hash/"&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for &lt;code&gt;&lt;span class="keyword"&gt;char16_t&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="keyword"&gt;char32_t&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;u16string&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;u32string&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                General changes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improved compatibility with Solaris.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/phoenix/"&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Corrected some documentation. (&lt;a href="https://github.com/boostorg/phoenix/pull/50"&gt;PR#50&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;phoenix&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;erase&lt;/span&gt;&lt;/code&gt; with associative container
"                returns iterator in C++11 mode. (&lt;a href="https://svn.boost.org/trac/boost/ticket/7423"&gt;#7423&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;set&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;multiset&lt;/span&gt;&lt;/code&gt;
"                should be worked with predefined lazy functions. (&lt;a href="https://github.com/boostorg/phoenix/pull/52"&gt;PR#52&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disable &lt;code&gt;&lt;span class="identifier"&gt;phoenix&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;random_shuffle&lt;/span&gt;&lt;/code&gt; in C++17. (&lt;a href="https://github.com/boostorg/phoenix/pull/53"&gt;PR#53&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Don't forward declare, include instead. (&lt;a href="https://svn.boost.org/trac/boost/ticket/11875"&gt;#11875&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix Intel C/C++ version 9999 detection to be 12.1.0.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Addition of &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PREDEF_WORKAROUND&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PREDEF_TESTED_AT&lt;/span&gt;&lt;/code&gt;
"                macros for defect workarounds and detection.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add ARM64 MSVC SIMD detection. (from Minmin Gong)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add detection of iOS simulator vs device as a platform choice. (from
"                Ruslan Baratov)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix MinGW incorrect header guard. (from Ruslan Baratov)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/program_options/"&gt;Program Options&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for storing values into &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;/code&gt;,
"                thanks to Ed Catmur (&lt;a href="https://svn.boost.org/trac/boost/ticket/7495"&gt;#7495&lt;/a&gt;,
"                &lt;a href="https://github.com/boostorg/program_options/pull/18"&gt;PR#18&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Parsing of implicit options can now use the value from the next token.
"                Since 1.59, unless the value of implicit option was specified in
"                the same token as the option itself, the implicit value was used.
"                That proved inconvenient, and now we again check the next token and
"                use it as value if it's not an option itself. (&lt;a href="https://github.com/boostorg/program_options/issues/25"&gt;#25&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/python/"&gt;Python&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;eval&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;exec&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;,
"                and &lt;code&gt;&lt;span class="identifier"&gt;exec_statement&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; now allow &lt;code&gt;&lt;span class="keyword"&gt;char&lt;/span&gt;
"                &lt;span class="keyword"&gt;const&lt;/span&gt; &lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt;
"                arguments, in addition to &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;python&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;str&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;python&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;numeric&lt;/span&gt;&lt;/code&gt; API has been removed, as
"                it is being obsoleted by &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;python&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;numpy&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix some build issues when using Python3 with MSVC.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/smart_ptr/"&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New class template&lt;code&gt;&lt;span class="identifier"&gt;atomic_shared_ptr&lt;/span&gt;&lt;/code&gt;,
"                that provides thread-safe atomic pointer operations over &lt;code&gt;&lt;span class="identifier"&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;. (Peter Dimov)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New class template &lt;code&gt;&lt;span class="identifier"&gt;local_shared_ptr&lt;/span&gt;&lt;/code&gt;,
"                where the reference count is updated with non-atomic operations.
"                (Peter Dimov)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                More optimizations in &lt;code&gt;&lt;span class="identifier"&gt;allocate_shared&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;make_shared&lt;/span&gt;&lt;/code&gt; for
"                arrays. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Documentation has been completely rewritten in Asciidoc format.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.test v3.6 see the &lt;a href="https://www.boost.org/doc/libs/1_65_0/libs/test/doc/html/boost_test/change_log.html"&gt;Change
"                log&lt;/a&gt; section for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New feature:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      C++17 compatibility (tested on VS2017), thanks to &lt;a href="https://github.com/DanielaE"&gt;Daniela
"                      Engert&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Direct comparison of C-arrays in &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Better global fixtures mechanism, and spitting of responsibilities
"                      with &lt;a href="https://www.boost.org/doc/libs/1_65_0/libs/test/doc/html/boost_test/utf_reference/test_org_reference/test_org_boost_test_global_fixture.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_GLOBAL_FIXTURE&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"                      for global fixtures and &lt;a href="https://www.boost.org/doc/libs/1_65_0/libs/test/doc/html/boost_test/utf_reference/link_references/link_boost_test_global_configuration.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_GLOBAL_CONFIGURATION&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"                      for global initialization (compile time configuration).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improved support for fixtures (&lt;code&gt;&lt;span class="identifier"&gt;setup&lt;/span&gt;&lt;/code&gt;
"                      / &lt;code&gt;&lt;span class="identifier"&gt;teardown&lt;/span&gt;&lt;/code&gt;
"                      member function) which enables better teardown time checks
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Breaking changes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Some API changes for the loggers
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Deprecating &lt;code&gt;&lt;span class="identifier"&gt;BOOST_GLOBAL_FIXTURE&lt;/span&gt;&lt;/code&gt;
"                      in favor of &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_GLOBAL_FIXTURE&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_GLOBAL_CONFIGURATION&lt;/span&gt;&lt;/code&gt;
"                      (see above)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Trac tickets &lt;a href="https://svn.boost.org/trac/boost/ticket/5282"&gt;#5282&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/5563"&gt;#5563&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11471"&gt;#11471&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11962"&gt;#11962&lt;/a&gt;,
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12228"&gt;#12228&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Trac tickets &lt;a href="https://svn.boost.org/trac/boost/ticket/12631"&gt;#12631&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13011"&gt;#13011&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Pull request &lt;a href="https://github.com/boostorg/test/pull/106"&gt;PR106&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/thread/"&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Important Regression on Windows:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/issues/130"&gt;#130&lt;/a&gt;
"                      windows: Bug in boost::condition_variable on Windows Please,
"                      merge these two patches
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/commit/fdc0cbcd8ce8f34a19c7cdaf6f1fa679f0a49657"&gt;https://github.com/boostorg/thread/commit/fdc0cbcd8ce8f34a19c7cdaf6f1fa679f0a49657&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/commit/395e3d786bc1dce9c60eb84da85f5845a2c1fb3d"&gt;https://github.com/boostorg/thread/commit/395e3d786bc1dce9c60eb84da85f5845a2c1fb3d&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/6787"&gt;#6787&lt;/a&gt;
"                      boost::thread::sleep() hangs if system time is rolled back
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/12519"&gt;#12519&lt;/a&gt;
"                      boost::thread::try_join_for does not return after timeout
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/12874"&gt;#12874&lt;/a&gt;
"                      future&amp;lt;&amp;gt; extension constructor must be under BOOST_THREAD_PROVIDES_FUTURE_UNWRAP
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/12888"&gt;#12888&lt;/a&gt;
"                      Linking with boost thread does not work on mingw/gcc 4.4
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/12958"&gt;#12958&lt;/a&gt;
"                      sync_bounded_queue::wait_pull_front( lve ) might throw
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/13077"&gt;#13077&lt;/a&gt;
"                      Linking to static 64bit libboost_thread fails DLL initialization
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/13155"&gt;#13155&lt;/a&gt;
"                      log doesn't build on a system with pthreads
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/issues/121"&gt;#121&lt;/a&gt;
"                      on_tls_prepare is broken under VS2017
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_index/"&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Include &amp;lt;boost/functional/hash.hpp&amp;gt; if required, thanks to
"                Ed Catmur &lt;a href="https://svn.boost.org/trac/boost/ticket/13009"&gt;#13009&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use native &lt;code&gt;&lt;span class="identifier"&gt;hash_code&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; when possible on GCC-like compilers
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/13027"&gt;#13027&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;code&gt;&lt;span class="identifier"&gt;ctti_type_index&lt;/span&gt;&lt;/code&gt;
"                for GCC 7 and later, thanks to Benjamin Buch &lt;a href="https://github.com/boostorg/type_index/pull/16"&gt;PR16&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/typeof/"&gt;Typeof&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix compilation error with clang-cl &lt;a href="https://svn.boost.org/trac10/ticket/11821"&gt;ticket
"                11821&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/unordered/"&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use the same data structure for &lt;code&gt;&lt;span class="identifier"&gt;unordered_set&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;unordered_multiset&lt;/span&gt;&lt;/code&gt;,
"                and for&lt;code&gt;&lt;span class="identifier"&gt;unordered_map&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;unordered_multimap&lt;/span&gt;&lt;/code&gt;.
"                This is required for C++17, so that nodes can be merged and extracted
"                between compatible containers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add deprecated attributes to long deprecated functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved use of &lt;code&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;construct&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;destroy&lt;/span&gt;&lt;/code&gt; on C++11 compilers, using
"                piecewise pair construction when appropriate.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fewer workarounds on newer Oracle compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Avoid dereferencing pointers to uninitialized memory (&lt;a href="https://github.com/boostorg/unordered/pull/5"&gt;PR
"                #5&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/utility/"&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved compatibility of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;next&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;prior&lt;/span&gt;&lt;/code&gt; with SFINAE-unfriendly iterators.
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/10847"&gt;#10847&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13002"&gt;#13002&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                r-value overload for &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;get&lt;/span&gt;&lt;/code&gt;
"                was added by Albert Sverdlov &lt;a href="https://svn.boost.org/trac/boost/ticket/13018"&gt;#13018&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Missing include fro &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;variant&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;polymorphic_get&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                header was added by Adam Badura &lt;a href="https://svn.boost.org/trac/boost/ticket/13037"&gt;#13037&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;make_variant_over&lt;/span&gt;&lt;/code&gt; was fixed and
"                now works with views and other Forward Sequences (thanks to Mikhail
"                Maksimov for the fix) &lt;a href="https://svn.boost.org/trac/boost/ticket/8554"&gt;#8554&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/10041"&gt;#10041&lt;/a&gt;, &lt;a href="https://github.com/boostorg/variant/pull/35"&gt;PR#35&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_65_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.8.1, 3.9.1, 4.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 7.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.4.1, 6.3.0, 7.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++1z: 6.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 16.0, 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++11: 16.0, 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 16.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.6.4, 4.7.3, 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6, 3.7, 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9, 5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC, C++11: 4.7.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          SunOS:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio: 12.5_next, 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio, C++11: 12.5_next, 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 3.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.8.1, 3.9.1, 4.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 7.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.1, 6.2.0, 6.3.0, 7.1.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++1z: 6.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++11: 16.0, 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 16.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.6.4, 4.7.3, 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6, 3.7, 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9, 5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          SunOS:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio: 12.5_next, 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio, C++11: 12.5_next, 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_65_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="https://www.boost.org/users/people/beman_dawes.html"&gt;Beman Dawes&lt;/a&gt;, Eric Niebler,
"      &lt;a href="https://www.boost.org/users/people/rene_rivera.html"&gt;Rene Rivera&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Tue, 27 Apr 2021 03:13:52 +0000
-quickbook
"feed/history/boost_1_65_0.qbk
-update_count
=16
)
(feed/history/boost_1_65_1.qbk
-item
"<item><title>Version 1.65.1</title><link>https://www.boost.org/users/history/version_1_65_1.html</link><guid>http://www.boost.org/users/history/version_1_65_1.html</guid><pubDate>Thu, 07 Sep 2017 17:31:22 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_65_1.fixes_in_1_65_1"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Fixes in 1.65.1&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/config/"&gt;Config&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Version macro changes for CUDA.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update last known MSVC version.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                MSVC 14.11 supports structured bindings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Return a continuation from functions executed by &lt;code&gt;&lt;span class="identifier"&gt;resume_with&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fiber/"&gt;Fiber&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Return a continuation from functions executed by &lt;code&gt;&lt;span class="identifier"&gt;resume_with&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/smart_ptr/"&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix Visual C++ version checks.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix compilation for NVCC with host compiler clang.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update build testing file to detail with a MinGW issue.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Change preprocessor file extensions to work with the installation
"                system.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support FreeBSD and other OSs that do not define &lt;code&gt;&lt;span class="identifier"&gt;_GNU_SOURCE&lt;/span&gt;&lt;/code&gt;
"                but have &lt;code&gt;&lt;span class="identifier"&gt;_Unwind_Backtrace&lt;/span&gt;&lt;/code&gt;
"                function.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/thread/"&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bug in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;condition_variable&lt;/span&gt;&lt;/code&gt;
"                on Windows (&lt;a href="https://github.com/boostorg/thread/issues/130"&gt;#130&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_65_1.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 4.0.1, 5.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 5.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.4.7, 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++1z: 6.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 17.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.6.4, 4.7.3, 4.8.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 4.9.3, 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0,
"                7.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6, 3.7, 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9, 5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 3.8.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC, C++11: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          SunOS:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio: 12.5_next, 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Oracle Solaris Studio, C++11: , 12.5_next, 12.5
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_65_1.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="https://www.boost.org/users/people/beman_dawes.html"&gt;Beman Dawes&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_65_1.new_libraries_in_1_65_0"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries in
"    1.65.0&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
"  Fast
"          containers of polymorphic objects, from Joaquín M López Muñoz.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
"  Gather, store,
"          copy and print backtraces, from Antony Polukhin.
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Note: Library has &lt;a href="https://github.com/boostorg/stacktrace/issues/14"&gt;issue
"                with MinGW&lt;/a&gt; and may produce empty backtraces with that compiler.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_65_1.removed_libraries_in_1_65_0"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Removed Libraries
"    in 1.65.0&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          TR1
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_65_1.updated_libraries_in_1_65_0"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries
"    in 1.65.0&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to require &lt;tt&gt;g++&lt;/tt&gt; versions &amp;gt;= 4.7 to use
"                standard atomics, to fix a linker error when using &lt;tt&gt;g++&lt;/tt&gt;
"                4.6 (&lt;a href="https://svn.boost.org/trac/boost/ticket/13121"&gt;#13121&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled use of &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
"                and variadic templates with recent MSVC versions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a race condition in the Linux epoll backend, which may occur
"                when a socket or descriptor is closed while another thread is blocked
"                on epoll.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Eliminated use of deprecated &lt;code&gt;&lt;span class="identifier"&gt;auto_ptr&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed misplaced use of &lt;code&gt;&lt;span class="identifier"&gt;asio_handler_is_continuation&lt;/span&gt;&lt;/code&gt;
"                result in reactive &lt;code&gt;&lt;span class="identifier"&gt;async_accept&lt;/span&gt;&lt;/code&gt;
"                implementation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to use &lt;code&gt;&lt;span class="identifier"&gt;poll&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;h&lt;/span&gt;&lt;/code&gt;
"                rather than &lt;code&gt;&lt;span class="identifier"&gt;sys&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;poll&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;h&lt;/span&gt;&lt;/code&gt; on some modern POSIX platforms
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/12419"&gt;#12419&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed MSVC intellisense detection.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disabled use of the &lt;code&gt;&lt;span class="identifier"&gt;__thread&lt;/span&gt;&lt;/code&gt;
"                keyword extension for android/clang/x86 targets.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      call/cc supports ucontext-API (swapcontext)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      call/cc supports Windows-Fiber-API
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      call/cc supports on demand growing (segmented/split) stacks
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12719"&gt;#12719&lt;/a&gt;: context test cases and examples segmentation fault
"                      when built with mingw-w64 toolchain
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      #52: Failing to build callcc test with g++-4.9
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                important:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      required bug fix &lt;a href="https://github.com/boostorg/context/commit/420554fe9ac01482990e8ae314f4f7ba81010c9a"&gt;420554fe9ac01482990e8ae314f4f7ba81010c9a&lt;/a&gt;
"                      not included in 1.65
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/config/"&gt;Config&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_CXX11_POINTER_TRAITS&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_CXX17_FOLD_EXPRESSIONS&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_CXX17_INLINE_VARIABLES&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_CXX17_STRUCTURED_BINDINGS&lt;/span&gt;&lt;/code&gt;
"                defect detection.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                BOOST_FALLTHROUGH support for GCC 7 and above. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented &lt;code&gt;&lt;span class="identifier"&gt;pointer_traits&lt;/span&gt;&lt;/code&gt;
"                for C++03 and higher, that implements &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0653r0.html"&gt;P0653r0&lt;/a&gt;
"                (Glen Fernandes). This implementation is now used by Align, Circular
"                Buffer, Fiber, Geometry, among other libraries.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_GT&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_GE&lt;/span&gt;&lt;/code&gt;
"                to Lightweight Test.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/coroutine2/"&gt;Coroutine2&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                supports ucontext-API (swapcontext)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                supports Windows-Fiber-API
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/13064"&gt;#13064&lt;/a&gt;: different behavior coroutine and coroutine2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix PE parsing on non Windows platforms.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fiber/"&gt;Fiber&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      hardware transactional memory (Intel TSX) supported
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      NUMA supported
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      ucontext-API (swapcontext) supported
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Windows-Fiber-API supported
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      on demand growing stacks
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      #121: failing to build static lib with GCC 4.8 and C++11
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      #123: assertion failure in schedule_from_remote
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      #125: erratic crashes in testsuite
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      #126: incorrect std::memory_order value in compare_exchange_strong?
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                important:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      required bug fix &lt;a href="https://github.com/boostorg/fiber/commit/63f1041f0e484e64dec437a0fa780ea2463abda2"&gt;63f1041f0e484e64dec437a0fa780ea2463abda2&lt;/a&gt;
"                      not included in 1.65
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fusion/"&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                MSVC 14.1 supports variadic containers, such as &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;vector&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;deque&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;map&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;set&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;tuple&lt;/span&gt;&lt;/code&gt;.
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/12986"&gt;#12986&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add correct() overload taking area strategy
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add is_convex() overload taking side strategy
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add missing relational operations (covered_by, crosses, equals,
"                      etc.) for MultiPoint/AnyGeometry
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved issues:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12410"&gt;12410&lt;/a&gt;
"                      Lack of support of geographic coordinate system in correct()
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/13035"&gt;13035&lt;/a&gt;
"                      Wrong result of non-cartesian intersection strategies for segments
"                      near poles.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/13057"&gt;13057&lt;/a&gt;
"                      Wrong result of intersects() for linestrings caused by numerical
"                      issue in disjoint() for boxes.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix is_valid which could return false for multipolygons where
"                      an interior ring touches another interior ring
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix is_valid which could return false for multipolygons where
"                      a polygon was located in an interior ring, all touching each
"                      other
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix union which could produce invalid results (for some cases,
"                      this needs to define BOOST_GEOMETRY_INCLUDE_SELF_TURNS)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix intersection (idem), but some cases are still not yet valid
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix difference (idem), but some cases are still not yet valid
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix propagation of area strategy into the internals of various
"                      algorithms from intersection strategy
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix uninitialized variable in relate and reference to temporary
"                      in overlay
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix error in disjoint for geographic Segment/Box
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fix handling of non-cartesian geometries in various algorithms
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/functional/hash/"&gt;Hash&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for &lt;code&gt;&lt;span class="keyword"&gt;char16_t&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="keyword"&gt;char32_t&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;u16string&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;u32string&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                General changes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improved compatibility with Solaris.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/phoenix/"&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Corrected some documentation. (&lt;a href="https://github.com/boostorg/phoenix/pull/50"&gt;PR#50&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;phoenix&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;erase&lt;/span&gt;&lt;/code&gt; with associative container
"                returns iterator in C++11 mode. (&lt;a href="https://svn.boost.org/trac/boost/ticket/7423"&gt;#7423&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;set&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;multiset&lt;/span&gt;&lt;/code&gt;
"                should be worked with predefined lazy functions. (&lt;a href="https://github.com/boostorg/phoenix/pull/52"&gt;PR#52&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disable &lt;code&gt;&lt;span class="identifier"&gt;phoenix&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;random_shuffle&lt;/span&gt;&lt;/code&gt; in C++17. (&lt;a href="https://github.com/boostorg/phoenix/pull/53"&gt;PR#53&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Don't forward declare, include instead. (&lt;a href="https://svn.boost.org/trac/boost/ticket/11875"&gt;#11875&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix Intel C/C++ version 9999 detection to be 12.1.0.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Addition of &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PREDEF_WORKAROUND&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PREDEF_TESTED_AT&lt;/span&gt;&lt;/code&gt;
"                macros for defect workarounds and detection.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add ARM64 MSVC SIMD detection. (from Minmin Gong)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add detection of iOS simulator vs device as a platform choice. (from
"                Ruslan Baratov)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix MinGW incorrect header guard. (from Ruslan Baratov)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/program_options/"&gt;Program Options&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for storing values into &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;/code&gt;,
"                thanks to Ed Catmur (&lt;a href="https://svn.boost.org/trac/boost/ticket/7495"&gt;#7495&lt;/a&gt;,
"                &lt;a href="https://github.com/boostorg/program_options/pull/18"&gt;PR#18&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Parsing of implicit options can now use the value from the next token.
"                Since 1.59, unless the value of implicit option was specified in
"                the same token as the option itself, the implicit value was used.
"                That proved inconvenient, and now we again check the next token and
"                use it as value if it's not an option itself. (&lt;a href="https://github.com/boostorg/program_options/issues/25"&gt;#25&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/python/"&gt;Python&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;eval&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;exec&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;,
"                and &lt;code&gt;&lt;span class="identifier"&gt;exec_statement&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; now allow &lt;code&gt;&lt;span class="keyword"&gt;char&lt;/span&gt;
"                &lt;span class="keyword"&gt;const&lt;/span&gt; &lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt;
"                arguments, in addition to &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;python&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;str&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;python&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;numeric&lt;/span&gt;&lt;/code&gt; API has been removed, as
"                it is being obsoleted by &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;python&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;numpy&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix some build issues when using Python3 with MSVC.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/smart_ptr/"&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New class template&lt;code&gt;&lt;span class="identifier"&gt;atomic_shared_ptr&lt;/span&gt;&lt;/code&gt;,
"                that provides thread-safe atomic pointer operations over &lt;code&gt;&lt;span class="identifier"&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;. (Peter Dimov)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New class template &lt;code&gt;&lt;span class="identifier"&gt;local_shared_ptr&lt;/span&gt;&lt;/code&gt;,
"                where the reference count is updated with non-atomic operations.
"                (Peter Dimov)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                More optimizations in &lt;code&gt;&lt;span class="identifier"&gt;allocate_shared&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;make_shared&lt;/span&gt;&lt;/code&gt; for
"                arrays. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Documentation has been completely rewritten in Asciidoc format.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.test v3.6 see the &lt;a href="https://www.boost.org/doc/libs/1_65_0/libs/test/doc/html/boost_test/change_log.html"&gt;Change
"                log&lt;/a&gt; section for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New feature:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      C++17 compatibility (tested on VS2017), thanks to &lt;a href="https://github.com/DanielaE"&gt;Daniela
"                      Engert&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Direct comparison of C-arrays in &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Better global fixtures mechanism, and spitting of responsibilities
"                      with &lt;a href="https://www.boost.org/doc/libs/1_65_0/libs/test/doc/html/boost_test/utf_reference/test_org_reference/test_org_boost_test_global_fixture.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_GLOBAL_FIXTURE&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"                      for global fixtures and &lt;a href="https://www.boost.org/doc/libs/1_65_0/libs/test/doc/html/boost_test/utf_reference/link_references/link_boost_test_global_configuration.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_GLOBAL_CONFIGURATION&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"                      for global initialization (compile time configuration).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improved support for fixtures (&lt;code&gt;&lt;span class="identifier"&gt;setup&lt;/span&gt;&lt;/code&gt;
"                      / &lt;code&gt;&lt;span class="identifier"&gt;teardown&lt;/span&gt;&lt;/code&gt;
"                      member function) which enables better teardown time checks
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Breaking changes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Some API changes for the loggers
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Deprecating &lt;code&gt;&lt;span class="identifier"&gt;BOOST_GLOBAL_FIXTURE&lt;/span&gt;&lt;/code&gt;
"                      in favor of &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_GLOBAL_FIXTURE&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_GLOBAL_CONFIGURATION&lt;/span&gt;&lt;/code&gt;
"                      (see above)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Trac tickets &lt;a href="https://svn.boost.org/trac/boost/ticket/5282"&gt;#5282&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/5563"&gt;#5563&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11471"&gt;#11471&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/11962"&gt;#11962&lt;/a&gt;,
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/12228"&gt;#12228&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Trac tickets &lt;a href="https://svn.boost.org/trac/boost/ticket/12631"&gt;#12631&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13011"&gt;#13011&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Pull request &lt;a href="https://github.com/boostorg/test/pull/106"&gt;PR106&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/thread/"&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Important Regression on Windows:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/issues/130"&gt;#130&lt;/a&gt;
"                      windows: Bug in boost::condition_variable on Windows Please,
"                      merge these two patches
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/commit/fdc0cbcd8ce8f34a19c7cdaf6f1fa679f0a49657"&gt;https://github.com/boostorg/thread/commit/fdc0cbcd8ce8f34a19c7cdaf6f1fa679f0a49657&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/commit/395e3d786bc1dce9c60eb84da85f5845a2c1fb3d"&gt;https://github.com/boostorg/thread/commit/395e3d786bc1dce9c60eb84da85f5845a2c1fb3d&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/6787"&gt;#6787&lt;/a&gt;
"                      boost::thread::sleep() hangs if system time is rolled back
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/12519"&gt;#12519&lt;/a&gt;
"                      boost::thread::try_join_for does not return after timeout
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/12874"&gt;#12874&lt;/a&gt;
"                      future&amp;lt;&amp;gt; extension constructor must be under BOOST_THREAD_PROVIDES_FUTURE_UNWRAP
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/12888"&gt;#12888&lt;/a&gt;
"                      Linking with boost thread does not work on mingw/gcc 4.4
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/12958"&gt;#12958&lt;/a&gt;
"                      sync_bounded_queue::wait_pull_front( lve ) might throw
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/13077"&gt;#13077&lt;/a&gt;
"                      Linking to static 64bit libboost_thread fails DLL initialization
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/13155"&gt;#13155&lt;/a&gt;
"                      log doesn't build on a system with pthreads
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/issues/121"&gt;#121&lt;/a&gt;
"                      on_tls_prepare is broken under VS2017
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_index/"&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Include &amp;lt;boost/functional/hash.hpp&amp;gt; if required, thanks to
"                Ed Catmur &lt;a href="https://svn.boost.org/trac/boost/ticket/13009"&gt;#13009&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use native &lt;code&gt;&lt;span class="identifier"&gt;hash_code&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; when possible on GCC-like compilers
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/13027"&gt;#13027&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;code&gt;&lt;span class="identifier"&gt;ctti_type_index&lt;/span&gt;&lt;/code&gt;
"                for GCC 7 and later, thanks to Benjamin Buch &lt;a href="https://github.com/boostorg/type_index/pull/16"&gt;PR16&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/typeof/"&gt;Typeof&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix compilation error with clang-cl &lt;a href="https://svn.boost.org/trac10/ticket/11821"&gt;ticket
"                11821&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/unordered/"&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use the same data structure for &lt;code&gt;&lt;span class="identifier"&gt;unordered_set&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;unordered_multiset&lt;/span&gt;&lt;/code&gt;,
"                and for&lt;code&gt;&lt;span class="identifier"&gt;unordered_map&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;unordered_multimap&lt;/span&gt;&lt;/code&gt;.
"                This is required for C++17, so that nodes can be merged and extracted
"                between compatible containers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add deprecated attributes to long deprecated functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved use of &lt;code&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;construct&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;destroy&lt;/span&gt;&lt;/code&gt; on C++11 compilers, using
"                piecewise pair construction when appropriate.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fewer workarounds on newer Oracle compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Avoid dereferencing pointers to uninitialized memory (&lt;a href="https://github.com/boostorg/unordered/pull/5"&gt;PR
"                #5&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/utility/"&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved compatibility of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;next&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;prior&lt;/span&gt;&lt;/code&gt; with SFINAE-unfriendly iterators.
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/10847"&gt;#10847&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13002"&gt;#13002&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                r-value overload for &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;get&lt;/span&gt;&lt;/code&gt;
"                was added by Albert Sverdlov &lt;a href="https://svn.boost.org/trac/boost/ticket/13018"&gt;#13018&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Missing include fro &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;variant&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;polymorphic_get&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                header was added by Adam Badura &lt;a href="https://svn.boost.org/trac/boost/ticket/13037"&gt;#13037&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;make_variant_over&lt;/span&gt;&lt;/code&gt; was fixed and
"                now works with views and other Forward Sequences (thanks to Mikhail
"                Maksimov for the fix) &lt;a href="https://svn.boost.org/trac/boost/ticket/8554"&gt;#8554&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/10041"&gt;#10041&lt;/a&gt;, &lt;a href="https://github.com/boostorg/variant/pull/35"&gt;PR#35&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Tue, 27 Apr 2021 03:13:52 +0000
-quickbook
"feed/history/boost_1_65_1.qbk
-update_count
=5
)
(feed/history/boost_1_66_0.qbk
-item
"<item><title>Version 1.66.0</title><link>https://www.boost.org/users/history/version_1_66_0.html</link><guid>http://www.boost.org/users/history/version_1_66_0.html</guid><pubDate>Mon, 18 Dec 2017 13:58:14 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_66_0.note_about_the_new_visual_studio"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Note about
"    the new Visual Studio release&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Visual Studio 15.5 was released too late for us to test this release with it.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_66_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
"  Portable HTTP, WebSocket,
"          and network operations using only C++11 and Boost.Asio, from Vinnie Falco.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/callable_traits/"&gt;CallableTraits&lt;/a&gt;:&lt;/span&gt;
"  A spiritual
"          successor to Boost.FunctionTypes, Boost.CallableTraits is a header-only
"          C++11 library for the compile-time inspection and manipulation of all 'callable'
"          types. Additional support for C++17 features, from Barrett Adair.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/mp11/"&gt;Mp11&lt;/a&gt;:&lt;/span&gt;
"  A C++11 metaprogramming library,
"          from Peter Dimov.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_66_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented interface changes to reflect the Networking TS (&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4656.pdf"&gt;N4656&lt;/a&gt;).
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      See the &lt;a href="https://www.boost.org/doc/libs/1_66_0/doc/html/boost_asio/net_ts.html"&gt;list&lt;/a&gt;
"                      of new interfaces and, where applicable, the corresponding
"                      old interfaces that have been superseded.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The service template parameters, and the corresponding classes,
"                      are disabled by default. For example, instead of &lt;code&gt;&lt;span class="identifier"&gt;basic_socket&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;Protocol&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt;
"                      &lt;span class="identifier"&gt;SocketService&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                      we now have simply &lt;code&gt;&lt;span class="identifier"&gt;basic_socket&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;Protocol&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;. The old interface can
"                      be enabled by defining the &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_ENABLE_OLD_SERVICES&lt;/span&gt;&lt;/code&gt;
"                      macro.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed previously deprecated functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for customised handler tracking.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added reactor-related (i.e. descriptor readiness) events to handler
"                tracking.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added special "concurrency hint" values that may be used
"                to disable locking on a per &lt;code&gt;&lt;span class="identifier"&gt;io_context&lt;/span&gt;&lt;/code&gt;
"                basis.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled perfect forwarding for the first &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stream&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; constructor argument.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added ability to release ownership of the underlying native socket.
"                (Requires Windows 8.1 or later when using the I/O completion port
"                backend.)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented a set of experimental extended atomic operations for
"                integral types:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;fetch_negate&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;fetch_complement&lt;/span&gt;&lt;/code&gt;
"                      - atomically replaces the value with a negated or binary complemented
"                      value and returns the original value
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;opaque_&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;op&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                      - equivalent to &lt;code&gt;&lt;span class="identifier"&gt;fetch_&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;op&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; except that it doesn't
"                      return the original value
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;op&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;span class="identifier"&gt;_and_test&lt;/span&gt;&lt;/code&gt;
"                      - atomically applies &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;op&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                      and returns &lt;code&gt;&lt;span class="keyword"&gt;true&lt;/span&gt;&lt;/code&gt;
"                      if the result is zero. &lt;strong&gt;Note:&lt;/strong&gt;
"                      The result of these operations will change to the opposite
"                      in Boost 1.67. The code that uses these functions will need
"                      to be updated.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;bit_test_and_set&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;bit_test_and_reset&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;bit_test_and_complement&lt;/span&gt;&lt;/code&gt;
"                      - atomically sets, resets or complements the specified bit
"                      and returns the original value of the bit
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Following C++17 (&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0558r1.pdf"&gt;P0558R1&lt;/a&gt;),
"                arithmetic operations for pointers to non-object types are no longer
"                provided.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Also following C++17 exposed &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;value_type&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;difference_type&lt;/span&gt;&lt;/code&gt; member typedefs,
"                where applicable, to the user's code.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved compatibility with gcc 7. In particular, using 128-bit operations
"                on x86-64 should no longer require linking with libatomic (the compiler-supplied
"                library).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/date_time/"&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The library has been converted to use Boost.WinAPI as the abstraction
"                layer for Windows SDK.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an integral overflow that could cause incorrect results when
"                adding or subtracting many years from a date (see &lt;a href="https://stackoverflow.com/questions/45537280/boost-datetime-issue-with-adding-long-year-durations"&gt;here&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fiber/"&gt;Fiber&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                synchronization with CUDA streams
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                synchronization with ROCm/HIP streams
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/format/"&gt;Format&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Accept new conversion specifiers:
"                      &lt;ul&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            &lt;a href="https://github.com/boostorg/format/pull/41"&gt;&lt;code&gt;&lt;span class="identifier"&gt;a&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;: sets flags
"                            &lt;code&gt;&lt;span class="identifier"&gt;fixed&lt;/span&gt; &lt;span class="special"&gt;|&lt;/span&gt; &lt;span class="identifier"&gt;scientific&lt;/span&gt;&lt;/code&gt;
"                            (i.e. &lt;code&gt;&lt;span class="identifier"&gt;hexfloat&lt;/span&gt;&lt;/code&gt;)
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            &lt;a href="https://github.com/boostorg/format/pull/43"&gt;&lt;code&gt;&lt;span class="identifier"&gt;b&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;: sets flag
"                            &lt;code&gt;&lt;span class="identifier"&gt;boolalpha&lt;/span&gt;&lt;/code&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            &lt;a href="https://github.com/boostorg/format/pull/41"&gt;&lt;code&gt;&lt;span class="identifier"&gt;A&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;: same as
"                            &lt;code&gt;&lt;span class="identifier"&gt;a&lt;/span&gt;&lt;/code&gt; plus
"                            flag &lt;code&gt;&lt;span class="identifier"&gt;uppercase&lt;/span&gt;&lt;/code&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            &lt;a href="https://github.com/boostorg/format/pull/41"&gt;&lt;code&gt;&lt;span class="identifier"&gt;F&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;: same as
"                            &lt;code&gt;&lt;span class="identifier"&gt;f&lt;/span&gt;&lt;/code&gt; plus
"                            flag &lt;code&gt;&lt;span class="identifier"&gt;uppercase&lt;/span&gt;&lt;/code&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                      &lt;/ul&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/format/pull/42"&gt;42&lt;/a&gt;
"                      Accept new argument types &lt;code&gt;&lt;span class="identifier"&gt;j&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="identifier"&gt;z&lt;/span&gt;&lt;/code&gt; from
"                      ISO C99 (parsed and ignored like all others).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/format/pull/44"&gt;44&lt;/a&gt;
"                      Accept new argument types &lt;code&gt;&lt;span class="identifier"&gt;I&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;I32&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;I64&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class="identifier"&gt;w&lt;/span&gt;&lt;/code&gt;
"                      from Microsoft (parsed and ignored like all others).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/format/issues/33"&gt;33&lt;/a&gt;
"                      Added a development tool called &lt;code&gt;&lt;span class="identifier"&gt;format_matrix&lt;/span&gt;&lt;/code&gt;
"                      that exercises as many different combinations of format strings
"                      as possible and logs them to a file:
"                      &lt;ul&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            helps prevent regressions in between boost releases
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            allows for comparison against &lt;code&gt;&lt;span class="identifier"&gt;snprintf&lt;/span&gt;&lt;/code&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                      &lt;/ul&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/format/issues/36"&gt;36&lt;/a&gt;
"                      Safely allow volatile arguments to be used with operator%
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac10/ticket/4636"&gt;4636&lt;/a&gt;
"                      Explicit clamping provided to allow MSVC /RTCc to succeed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac10/ticket/7477"&gt;7477&lt;/a&gt;
"                      Fix compatibility with MSVC /Za
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac10/ticket/10324"&gt;10324&lt;/a&gt;
"                      Const-correct cast issue resolved
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac10/ticket/11632"&gt;11632&lt;/a&gt;
"                      Fix &lt;code&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;fsanitize&lt;/span&gt;&lt;span class="special"&gt;=&lt;/span&gt;&lt;span class="identifier"&gt;undefined&lt;/span&gt;&lt;/code&gt;
"                      issue in &lt;code&gt;&lt;span class="identifier"&gt;alt_sstream&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fusion/"&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fusion/pull/149"&gt;PR#149&lt;/a&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;isspace&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;c&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;
"                is not a macro in Dinkum clib for VxWorks, thanks to Brian Kuhl(@kuhlenough).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fusion/pull/150"&gt;PR#150&lt;/a&gt;
"                Remove circular preprocessor include, thanks to Gregor Jasny(@gjasny).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fusion/pull/151"&gt;PR#151&lt;/a&gt;
"                Change base of &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;tuple&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fusion/pull/153"&gt;PR#153&lt;/a&gt;
"                Fixed compile error with &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;array&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fusion/pull/154"&gt;PR#154&lt;/a&gt;
"                Fixed bugs nesting and copying on c++03.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add distance for geographic PointLike/AnyGeometry.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixes in results of union/intersection/difference which could
"                      be incorrect in very complex cases
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixes in validity of union/intersection/difference/buffer
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixes in set and relational operations for non-cartesian coordinate
"                      systems.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/iterator/"&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;next&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;prior&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                functions now support user's iterators that don't specify nested
"                types such as &lt;code&gt;&lt;span class="identifier"&gt;iterator_category&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;difference_type&lt;/span&gt;&lt;/code&gt;,
"                etc. and instead specialize &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator_traits&lt;/span&gt;&lt;/code&gt;
"                to define those types. The compiler must support C++17-compatible
"                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator_traits&lt;/span&gt;&lt;/code&gt; for this to work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed a bug in &lt;code&gt;&lt;span class="identifier"&gt;file_collector&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;scan_for_files&lt;/span&gt;&lt;/code&gt;
"                      that could cause incorrectly named log files in the target
"                      directory after the user's application restart.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New Features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add Gauss and Gauss-Kronrod quadrature routines.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add double-exponential (tanh-sinh, exp-sinh and sinh-sinh)
"                      quadrature routines.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add Chebyshev polynomial evaluation, roots, integration, differentiation,
"                      and interpolation routines.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/index.html"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Made &lt;code&gt;&lt;span class="identifier"&gt;modify&lt;/span&gt;&lt;/code&gt; and
"                &lt;code&gt;&lt;span class="identifier"&gt;modify_key&lt;/span&gt;&lt;/code&gt; more robust
"                so that the modified element is erased if the modifier throws or
"                the rollback functor does not properly restore the element (full
"                discussion at ticket &lt;a href="https://svn.boost.org/trac/boost/ticket/12542"&gt;#12542&lt;/a&gt;). This is technically backwards
"                incompatible; for instance, the following code:
"              &lt;/div&gt;
"&lt;pre&gt;&lt;span class="identifier"&gt;c&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;modify&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;c&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;begin&lt;/span&gt;&lt;span class="special"&gt;(),[](&lt;/span&gt;&lt;span class="keyword"&gt;auto&lt;/span&gt;&lt;span class="special"&gt;&amp;amp;){&lt;/span&gt;&lt;span class="keyword"&gt;throw&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="special"&gt;;});&lt;/span&gt;
"&lt;/pre&gt;
"              &lt;div&gt;
"                keeps the container &lt;code&gt;&lt;span class="identifier"&gt;c&lt;/span&gt;&lt;/code&gt;
"                untouched in former versions of Boost whereas now &lt;code&gt;&lt;span class="identifier"&gt;c&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;begin&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; is erased. Thanks to Jon Kalb for
"                raising the issue.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/optional/index.html"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On newer compilers &lt;code&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;/code&gt;
"                is now trivially-copyable for scalar &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;/code&gt;s.
"                This uses a different storage (just &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;/code&gt;
"                rather than &lt;code&gt;&lt;span class="identifier"&gt;aligned_storage&lt;/span&gt;&lt;/code&gt;).
"                We require the compiler to support defaulted functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the implementation of &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;==&lt;/span&gt;&lt;/code&gt; to get rid of the &lt;code&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;Wmaybe&lt;/span&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;uninitialized&lt;/span&gt;&lt;/code&gt;
"                false-positive warning from GCC.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.PolyCollection has been backported to GCC 4.8 to 4.9 and Clang
"                3.3 to 3.6. The version of libstdc++-v3 shipped with GCC 4.8 (which
"                can also be used by Clang) has deficiencies that result in the following
"                limitations when using Boost.PolyCollection:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Stateful allocators are not properly supported.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Allocator-extended move construction decays to allocator-extended
"                      copy construction.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Copy construction crashes if an exception is thrown during
"                      element copying.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved Windows Universal Platform detection. (from James E. King,
"                III)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add detection for CloudABI with cloudlibc. (from James E. King, III)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Various other bug fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/regex/"&gt;Regex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Numerous small fixes for security issues discovered by de-fuzzing.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Now works out-of-the-box on MinGW-w64.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Now works on MinGW (without &lt;code&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;w64&lt;/span&gt;&lt;/code&gt;) if &lt;code&gt;&lt;span class="identifier"&gt;libbacktrace&lt;/span&gt;&lt;/code&gt;
"                is properly installed. See "MinGW specific notes" section
"                in documentation for more info.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/thread/"&gt;Thread&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugs Fixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/12323"&gt;#12323&lt;/a&gt;
"                      windows - boost/thread/win32/mfc_thread_init.hpp has wrong
"                      signature for _pRawDllMainOrig
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/12730"&gt;#12730&lt;/a&gt;
"                      windows - static threads library is incompatible with MSVC
"                      2017 RC
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/12976"&gt;#12976&lt;/a&gt;
"                      Boost Thread Executors documentation mistakes
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/12949"&gt;#12949&lt;/a&gt;
"                      using sleep_for in a thread context without including boost/thread/thread.hpp
"                      yields incorrect behaviour when BOOST_THREAD_HAS_CONDATTR_SET_CLOCK_MONOTONIC
"                      is defined
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/13019"&gt;#13019&lt;/a&gt;
"                      ABI compatibility for BOOST_THREAD_PROVIDES_INTERRUPTIONS incomplete
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/13069"&gt;#13069&lt;/a&gt;
"                      Boost unit test "sync_pq_multi_thread_p_lib.exe"
"                      hung in thread library
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/13163"&gt;#13163&lt;/a&gt;
"                      boost::detail::heap_new does not have a variadic variant
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="http://svn.boost.org/trac/boost/ticket/13226"&gt;#13226&lt;/a&gt;
"                      getpagesize() is deprecated since 199506L
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/issues/132"&gt;#132&lt;/a&gt;
"                      VS 2017.4 Preview deadlocks on Test 10964
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/issues/133"&gt;#133&lt;/a&gt;
"                      windows - Spurious timing test failures on windows
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/issues/134"&gt;#134&lt;/a&gt;
"                      VS 2017.4 Preview deadlock in sync_pq_multi_thread_p_lib.exe
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/issues/135"&gt;#135&lt;/a&gt;
"                      VS 2017.4 Preview test_scheduled_tp_p.exe deadlock
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/issues/136"&gt;#136&lt;/a&gt;
"                      VS 2017.4 Preview test_scheduler_p.exe deadlock
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/issues/137"&gt;#137&lt;/a&gt;
"                      VS 2017.4 Preview executor_ex.exe deadlock
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/issues/143"&gt;#143&lt;/a&gt;
"                      Failures on msvc-12.0
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/issues/145"&gt;#145&lt;/a&gt;
"                      Clang build error with BOOST_THREAD_ATTRIBUTE_MAY_ALIAS
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New Experimental Feature
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/thread/issues/116"&gt;#116&lt;/a&gt;
"                      [Proposal] Add APIs for deferred set_value/exception
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/utility/"&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;next_prior&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; has been moved to Boost.Iterator.
"                No changes needed to the user's code.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/uuid/"&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/uuid/issues/26"&gt;26&lt;/a&gt;
"                      Refactored &lt;code&gt;&lt;span class="identifier"&gt;name_generator&lt;/span&gt;&lt;/code&gt;
"                      to support a configurable hash provider concept and provide
"                      an optional MD5 hash implementation per RFC-4122. This will
"                      make it easier to support whatever becomes the next standard
"                      hash algorithm.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/uuid/issues/34"&gt;34&lt;/a&gt;
"                      Added RFC-4122 namespaces in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;uuids&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;ns&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac10/ticket/8630"&gt;8630&lt;/a&gt;
"                      &lt;a href="https://svn.boost.org/trac10/ticket/11482"&gt;11482&lt;/a&gt;
"                      &lt;a href="https://svn.boost.org/trac10/ticket/12253"&gt;12253&lt;/a&gt;
"                      Various deficiencies in &lt;code&gt;&lt;span class="identifier"&gt;string_generator&lt;/span&gt;&lt;/code&gt;
"                      were resolved.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac10/ticket/10665"&gt;10665&lt;/a&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;name_generator&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; is now const, matching docs.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Detail headers were moved into the detail subdirectory. No
"                      changes needed to user's code, however you may get build warnings
"                      if you use the old header location.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;apply_visitor&lt;/span&gt;&lt;/code&gt; now does perfect
"                forwarding of visitables &lt;a href="https://svn.boost.org/trac/boost/ticket/6971"&gt;#6971&lt;/a&gt;. Great thanks to Levon Tarakchyan
"                for implementing this feature.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_66_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 4.0.1, 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.2, 4.7.3, 4.8.5, 4.9.4, 6.4.0, 7.1.0, 7.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.2.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6, 3.7, 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9, 5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC, C++0x: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC, C++11: 4.7.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1, 4.0.1, 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 5.4.0, 7.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.2, 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 7.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.2.1, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 7.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Android:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.6, 3.7, 3.8
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.9, 5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 6.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          QNX:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC, C++0x: 4.4.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                QCC, C++11: 4.7.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_66_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="https://www.boost.org/users/people/beman_dawes.html"&gt;Beman Dawes&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Tue, 27 Apr 2021 03:13:52 +0000
-quickbook
"feed/history/boost_1_66_0.qbk
-update_count
=11
)
(feed/history/boost_1_67_0.qbk
-item
"<item><title>Version 1.67.0</title><link>https://www.boost.org/users/history/version_1_67_0.html</link><guid>http://www.boost.org/users/history/version_1_67_0.html</guid><pubDate>Sat, 14 Apr 2018 20:37:12 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_67_0.known_issues"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Known Issues&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      These are patches from library authors which were found too late to be fixed
"      in the release. Be careful as they have not been through the normal testing
"      process.
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Fix compiling with FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/patches/1_67_0/0001-Fiber-Use-pthread_setaffinity_np-on-FreeBSD-as-well.patch"&gt;/patches/1_67_0/0001-Fiber-Use-pthread_setaffinity_np-on-FreeBSD-as-well.patch&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/patches/1_67_0/0002-Wave-Avoid-using-wrong-T_DIVIDE-on-BSDs.patch"&gt;/patches/1_67_0/0002-Wave-Avoid-using-wrong-T_DIVIDE-on-BSDs.patch&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Fix Python auto-linking:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/patches/1_67_0/0003-Python-Fix-auto-linking-logic-Windows-only.patch"&gt;/patches/1_67_0/0003-Python-Fix-auto-linking-logic-Windows-only.patch&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_67_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/contract/"&gt;Contract&lt;/a&gt;:&lt;/span&gt;
"  Contract programming
"          for C++. All contract programming features are supported: Subcontracting,
"          class invariants, postconditions (with old and return values), preconditions,
"          customizable actions on assertion failure (e.g., terminate or throw), optional
"          compilation and checking of assertions, etc, from Lorenzo Caminiti.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/hof/"&gt;HOF&lt;/a&gt;:&lt;/span&gt;
"  Higher-order functions for C++,
"          from Paul Fultz II.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_67_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added missing const qualifier to &lt;code&gt;&lt;span class="identifier"&gt;basic_socket_acceptor&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;get_option&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Worked around a parsing error that occurs with some versions of gcc.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed broken code samples in tutorial.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new experimental features. (Note that "experimental"
"                features may be changed without notice in subsequent releases.)
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;detached&lt;/span&gt;&lt;/code&gt;
"                      completion token.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;redirect_error&lt;/span&gt;&lt;/code&gt;
"                      completion token.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;co_spawn&lt;/span&gt;&lt;/code&gt;
"                      facility for integration with the coroutines technical specification.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Updated timeout examples to use latest features.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Used &lt;code&gt;&lt;span class="identifier"&gt;asio&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;steady_timer&lt;/span&gt;&lt;/code&gt; rather than
"                      &lt;code&gt;&lt;span class="identifier"&gt;asio&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;deadline_timer&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Used &lt;code&gt;&lt;span class="identifier"&gt;asio&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dynamic_buffer&lt;/span&gt;&lt;/code&gt; rather than
"                      &lt;code&gt;&lt;span class="identifier"&gt;asio&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;streambuf&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Used timed &lt;code&gt;&lt;span class="identifier"&gt;asio&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;io_context&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;run_for&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; function for blocking clients.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added example showing a custom completion token for blocking
"                      with timeouts.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed unit tests to compile when &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_NO_DEPRECATED&lt;/span&gt;&lt;/code&gt;
"                is defined.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed socket iostreams to use chrono by default, to fix compatibility
"                with the Networking TS. Define &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_USE_BOOST_DATE_TIME_FOR_SOCKET_IOSTREAM&lt;/span&gt;&lt;/code&gt;
"                to enable the old Boost.Date_Time interface in &lt;code&gt;&lt;span class="identifier"&gt;basic_socket_streambuf&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;basic_socket_iostream&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated examples to use chrono rather than Boost.Date_Time.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an incorrect member function detector in the &lt;code&gt;&lt;span class="identifier"&gt;is_dynamic_buffer&lt;/span&gt;&lt;/code&gt; trait.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an &lt;code&gt;&lt;span class="identifier"&gt;async_result&lt;/span&gt;&lt;/code&gt;
"                incompatibility with deprecated &lt;code&gt;&lt;span class="identifier"&gt;handler_type&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a missing move optimisation in the SSL stream implementation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed incorrect &lt;code&gt;&lt;span class="identifier"&gt;basic_resolver_results&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;value_type&lt;/span&gt;&lt;/code&gt;
"                typedef.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a compile error with some OpenSSL versions when &lt;code&gt;&lt;span class="identifier"&gt;SSL_OP_NO_COMPRESSION&lt;/span&gt;&lt;/code&gt; is defined.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed &lt;code&gt;&lt;span class="identifier"&gt;add_certificate_authority&lt;/span&gt;&lt;/code&gt;
"                to process multiple certificates in a bundle.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Eliminated deprecation warning with MSVC by using &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;invoke_result&lt;/span&gt;&lt;/code&gt;
"                rather than &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;result_of&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to use &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string_view&lt;/span&gt;&lt;/code&gt;
"                for C++17 or later, and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string_view&lt;/span&gt;&lt;/code&gt;
"                for C++14. Define the preprocessor macro &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_DISABLE_STD_STRING_VIEW&lt;/span&gt;&lt;/code&gt;
"                to force the use of std::experimental::string_view (assuming it is
"                available) when compiling in C++17 mode.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured &lt;code&gt;&lt;span class="identifier"&gt;DynamicBuffer&lt;/span&gt;&lt;/code&gt;
"                template arguments are decayed before using in &lt;code&gt;&lt;span class="identifier"&gt;enable_if&lt;/span&gt;&lt;/code&gt;
"                tests.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed documentation to distinguish legacy completion handlers (which
"                are still required to be CopyConstructible) from new MoveConstructible
"                handlers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Suppressed a discarded return value warning in the buffer debugging
"                support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;basic_yield_context&lt;/span&gt;&lt;/code&gt;
"                to work with completion signatures containing reference parameters.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured that stackful coroutines launched using &lt;code&gt;&lt;span class="identifier"&gt;spawn&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; correctly store decayed copies
"                of their function and handler arguments.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some compatibility issues with Android.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added cross-compilation support to Jamfiles.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some minor portability issues in examples.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking change:&lt;/strong&gt; Changed the result
"                of the &lt;code&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;op&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;span class="identifier"&gt;_and_test&lt;/span&gt;&lt;/code&gt;
"                operations added in Boost 1.66 to the opposite - the functions now
"                return &lt;code&gt;&lt;span class="keyword"&gt;true&lt;/span&gt;&lt;/code&gt; if the operation
"                result is non-zero. This is consistent with other &lt;code&gt;&lt;span class="identifier"&gt;test&lt;/span&gt;&lt;/code&gt;
"                methods in Boost.Atomic and the C++ standard library. Users can define
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ATOMIC_DETAIL_HIGHLIGHT_OP_AND_TEST&lt;/span&gt;&lt;/code&gt;
"                when compiling their code to emit warnings on every use of the changed
"                functions. This way users can locate the code that needs to be updated.
"                (&lt;a href="https://github.com/boostorg/atomic/issues/11"&gt;#11&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update for C++2a. On C++11 compilers that support scoped enums, the
"                &lt;code&gt;&lt;span class="identifier"&gt;memory_order&lt;/span&gt;&lt;/code&gt; enumeration
"                is now scoped and contains constants with shorter names like &lt;code&gt;&lt;span class="identifier"&gt;acquire&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;release&lt;/span&gt;&lt;/code&gt;
"                or &lt;code&gt;&lt;span class="identifier"&gt;seq_cst&lt;/span&gt;&lt;/code&gt; (i.e.
"                users can use &lt;code&gt;&lt;span class="identifier"&gt;memory_order&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;acquire&lt;/span&gt;&lt;/code&gt;
"                instead of &lt;code&gt;&lt;span class="identifier"&gt;memory_order_acquire&lt;/span&gt;&lt;/code&gt;).
"                The old constants are also provided for backward compatibility. (&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0439r0.html"&gt;P0439R0&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update for C++2a. Added experimental support for atomic operations
"                on floating point types. In addition to general operations, &lt;code&gt;&lt;span class="identifier"&gt;add&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;sub&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;negate&lt;/span&gt;&lt;/code&gt; operations
"                and their &lt;code&gt;&lt;span class="identifier"&gt;fetch_&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;op&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;opaque_&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;op&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; versions are supported. Lock-free
"                property can be tested with the new macros &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ATOMIC_FLOAT&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;DOUBLE&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;LONG_DOUBLE_LOCK_FREE&lt;/span&gt;&lt;/code&gt;.
"                The support for floating point types is optional and can be disabled
"                by defining &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ATOMIC_NO_FLOATING_POINT&lt;/span&gt;&lt;/code&gt;.
"                (&lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0020r6.html"&gt;P0020R6&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new experimental operations:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;negate_and_test&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="identifier"&gt;complement_and_test&lt;/span&gt;&lt;/code&gt;
"                      which perform negation or bitwise complement and return &lt;code&gt;&lt;span class="keyword"&gt;true&lt;/span&gt;&lt;/code&gt; if the result is not zero.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;add&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;sub&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;negate&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;bitwise_and&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;bitwise_or&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;bitwise_xor&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;bitwise_complement&lt;/span&gt;&lt;/code&gt;
"                      operations which perform the operation and return its result.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                For generic &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; specialization, the default constructor
"                is now trivial if &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;/code&gt;'s
"                default constructor is.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The internal implementation of &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; has been updated to avoid undefined
"                behavior that stems from signed integer overflows. As required by
"                the C++ standard, the library uses two's complement representation
"                of signed integers internally and accroding rules of overflow. Currently,
"                the library requires the native signed integer types to also use
"                two's complement representation (but no defined overflow semantics).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved Clang support. In particular, fixed DCAS not being lock-free
"                and fixed possible incorrect code generated on 32-bit x86.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved MinGW support. For gcc versions up to 4.6, fixed compilation
"                of DCAS on x86.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In x86 PIE code, asm blocks now preserve &lt;code&gt;&lt;span class="identifier"&gt;ebx&lt;/span&gt;&lt;/code&gt;
"                value.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This version fixes significant defects in &lt;code&gt;&lt;span class="identifier"&gt;websocket&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stream&lt;/span&gt;&lt;/code&gt;
"                which can lead to asserts or undefined behavior. Users are encouraged
"                to update to the latest Boost release.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                For a complete list of changes, please view the official &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
"                Notes&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/container_hash/"&gt;ContainerHash&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Extracted from the functional module to break a dependency cycle.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Moved headers to new location to reflect name change, the old include
"                paths will still work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string_view&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;variant&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;monostate&lt;/span&gt;&lt;/code&gt; where available.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added explicit support for &lt;code&gt;&lt;span class="identifier"&gt;vector&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, so that it will work with libc++
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/13501"&gt;#13501&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                More detail in the &lt;a href="https://www.boost.org/doc/html/hash/changes.html#hash.changes.boost_1_67_0"&gt;library
"                change log&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/62"&gt;#62&lt;/a&gt;/&lt;a href="https://github.com/boostorg/context/pull/64"&gt;PR#64&lt;/a&gt;: fix i386/macho routines to correctly
"                return transfer_t in EAX/EDX
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/65"&gt;#65&lt;/a&gt;: &lt;code&gt;&lt;span class="identifier"&gt;__sanitizer_finish_switch_fiber&lt;/span&gt;&lt;/code&gt;
"                should be called directly after context switch
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/66"&gt;#66&lt;/a&gt;: Clang on Windows : error: No best alternative for libs/context/build/asm_sources
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/73"&gt;#73&lt;/a&gt;: fixing C2492 for execution_context (v1)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                known bug: including all.hpp + &amp;lt;context-impl&amp;gt;ucontext/winfib
"                causes error 'forced_unwind: is not a member of boost::context::detail'
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated &lt;code&gt;&lt;span class="identifier"&gt;to_address&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;pointer_traits&lt;/span&gt;&lt;/code&gt;
"                to reflect the design adopted for C++2a in &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/p0653r2.html"&gt;P0653R2&lt;/a&gt;
"                (Glen Fernandes).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/coroutine2/"&gt;Coroutine2&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/coroutine2/issues/13"&gt;#13&lt;/a&gt;: Pull coroutine does not rethrow an exception if
"                it is thrown on the first entry
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/date_time/"&gt;DateTime&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed various year 2038 (32-bit) issues (&lt;a href="https://svn.boost.org/trac/boost/ticket/2818"&gt;#2818&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/2819"&gt;#2819&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/3487"&gt;#3487&lt;/a&gt;)
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/4543"&gt;#4543&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/8450"&gt;#8450&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/9158"&gt;#9158&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/9489"&gt;#9489&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/10570"&gt;#10570&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/12609"&gt;#12609&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a binary serialization regression introduced in 1.66.0 (&lt;a href="https://github.com/boostorg/date_time/issues/56"&gt;#56&lt;/a&gt;)
"                (&lt;a href="https://github.com/boostorg/date_time/pull/58"&gt;PR#58&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/date_time/pull/70"&gt;PR#70&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated the timezone database file (&lt;a href="https://svn.boost.org/trac/boost/ticket/4430"&gt;#4430&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/10087"&gt;#10087&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/date_time/pull/68"&gt;PR#68&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enhanced &lt;code&gt;&lt;span class="identifier"&gt;from_iso_string&lt;/span&gt;&lt;/code&gt;
"                so it can read output of &lt;code&gt;&lt;span class="identifier"&gt;to_iso_string&lt;/span&gt;&lt;/code&gt;
"                for special values (&lt;a href="https://svn.boost.org/trac/boost/ticket/1078"&gt;#1078&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/date_time/pull/69"&gt;PR#69&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed maximum supported year from 10000 to 9999 to resolve various
"                issues (&lt;a href="https://svn.boost.org/trac/boost/ticket/13159"&gt;#13159&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/12630"&gt;#12630&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/date_time/pull/71"&gt;PR#71&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;date_time&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;period_parser&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;delimiter_strings&lt;/span&gt;&lt;/code&gt; did nothing (&lt;a href="https://svn.boost.org/trac/boost/ticket/11142"&gt;#11142&lt;/a&gt;)
"                (&lt;a href="https://github.com/boostorg/date_time/pull/63"&gt;PR#63&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensure special values are not automatically translated to integral
"                types (&lt;a href="https://svn.boost.org/trac/boost/ticket/11168"&gt;#11168&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/date_time/pull/64"&gt;PR#64&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;int_adapter&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_signed&lt;/span&gt;&lt;/code&gt; should be const (&lt;a href="https://svn.boost.org/trac/boost/ticket/12363"&gt;#12363&lt;/a&gt;)
"                (&lt;a href="https://github.com/boostorg/date_time/pull/60"&gt;PR#60&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;date_time&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;time_input_facet&lt;/span&gt;&lt;/code&gt; throws when using
"                &lt;code&gt;&lt;span class="special"&gt;%&lt;/span&gt;&lt;span class="identifier"&gt;j&lt;/span&gt;&lt;/code&gt;
"                alone (&lt;a href="https://svn.boost.org/trac/boost/ticket/12910"&gt;#12910&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/date_time/pull/59"&gt;PR#59&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Time input facet is not able to parse &lt;code&gt;&lt;span class="special"&gt;%&lt;/span&gt;&lt;span class="identifier"&gt;e&lt;/span&gt;&lt;/code&gt; day (&lt;a href="https://svn.boost.org/trac/boost/ticket/13194"&gt;#13194&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/date_time/pull/54"&gt;PR#54&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved Github CI build environment for better project metrics and
"                quality (&lt;a href="https://github.com/boostorg/date_time/pull/52"&gt;PR#52&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/date_time/pull/72"&gt;PR#72&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed various compiler warnings (&lt;a href="https://svn.boost.org/trac/boost/ticket/3606"&gt;#3606&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/9882"&gt;#9882&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/date_time/pull/62"&gt;PR#62&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixes for calling functions on dirty &lt;code&gt;&lt;span class="identifier"&gt;GetLastError&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; &lt;a href="https://github.com/boostorg/dll/issues/16"&gt;#16&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fiber/"&gt;Fiber&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/128"&gt;#128&lt;/a&gt;: Assertion "! ctx-&amp;gt;ready_is_linked()" when
"                using condition_variable::wait_for
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/132"&gt;#132&lt;/a&gt;: fatal error: 'stdexception' file not found
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/141"&gt;#141&lt;/a&gt;: boost::fibers::async problem
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/146"&gt;#146&lt;/a&gt;: remove unecessary lock of remote-ready-queue spinlock
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/153"&gt;#153&lt;/a&gt;: docu: replace set_ready() by schedule()
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/154"&gt;#154&lt;/a&gt;: Document iterators on channels
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/155"&gt;#155&lt;/a&gt;: this_fiber is wrongly documented as being a member
"                of boost::fibers
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/156"&gt;#156&lt;/a&gt;: Many examples are using their own barrier.hpp
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/158"&gt;#158&lt;/a&gt;: add BOOST_FIBERS_DECL to work_stealing class
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/162"&gt;#162&lt;/a&gt;: remove use-coutner increment for timed wait ops
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/166"&gt;#166&lt;/a&gt;: remove assertion for wait_is_linked() in schedule()
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/167"&gt;#167&lt;/a&gt;: call shared_state::owner_destroyed() only if future
"                was created from
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/168"&gt;#168&lt;/a&gt;: fiber/doc/installing.qbk not not up to date
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix static initialization issue that caused a crash if path operations
"                were used before main() (&lt;a href="https://github.com/boostorg/filesystem/pull/62"&gt;PR#62&lt;/a&gt;, &lt;a href="https://github.com/boostorg/filesystem/pull/43"&gt;PR#43&lt;/a&gt;, &lt;a href="https://github.com/boostorg/filesystem/pull/50"&gt;PR#50&lt;/a&gt;,
"                &lt;a href="https://github.com/boostorg/filesystem/pull/59"&gt;PR#59&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fusion/"&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Switch to SFINAE in template parameters on &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;map&lt;/span&gt;&lt;/code&gt;
"                to fix compile error on newer MSVC 2017. (&lt;a href="https://github.com/boostorg/fusion/pull/164"&gt;PR#164&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix for compilers not compatible with CWG defect 945 on &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;vector&lt;/span&gt;&lt;/code&gt;. (&lt;a href="https://github.com/boostorg/fusion/pull/166"&gt;PR#166&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added limits precheck on sequence converter to make error message
"                clearer. (&lt;a href="https://github.com/boostorg/fusion/pull/168"&gt;PR#168&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Allow incomplete types in &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;tag_of&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_native_fusion_sequence&lt;/span&gt;&lt;/code&gt;. Note
"                that this changes no behaviour from previous release, but compliant
"                to TypeTraits's change. (&lt;a href="https://github.com/boostorg/fusion/pull/171"&gt;PR#171&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New map projection and SRS transformation representations (undocumented
"                      for now due to potential interface changes).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New densify() algorithm.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      No longer using std::iterator (thanks to Daniela Engert).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      No longer using allocator directly in the rtree. Replaced with
"                      boost::container::allocator_traits (thanks to Daniela Engert).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Default rtree allocator changed to boost::container::new_allocator
"                      to still support move semantics emulation in C++03 with boost::container::allocator_traits.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Area strategies interface changed. This is potentially a breaking
"                      change.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Radius or Sphere can be passed into spherical strategies.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added Point-Box and Box-Box spherical and geographic distance()
"                      strategies.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Simplify (multi)polygons will discard output rings of 2 points
"                      or (for closed polygons) 3 points, but it tries to avoid creating
"                      those
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Simplify (multi)polygons will omit empty interior rings or
"                      polygons from output
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved issues:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac10/ticket/13386"&gt;13386&lt;/a&gt;
"                      Workaround for some gcc compilers
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac10/ticket/13381"&gt;13381&lt;/a&gt;
"                      Compile error with matrix_transformer in Visual C++ 2015
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://svn.boost.org/trac10/ticket/13436"&gt;13436&lt;/a&gt;
"                      Incorrectness in boost::geometry::model::polygon documentation
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add missing strategy resolving in length() algorithm, affecting
"                      Variant support.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Simplify (multi)polygons now simplifies closing point
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changes in behavior
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Simplify (multi)polygons now usually rotates input rings before
"                      simplifying to select a non collinear point on its convex hull.
"                      This improves output.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/locale/"&gt;Locale&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support of &lt;code&gt;&lt;span class="identifier"&gt;unique_ptr&lt;/span&gt;&lt;/code&gt;
"                interface in addition to C++2003 &lt;code&gt;&lt;span class="identifier"&gt;auto_ptr&lt;/span&gt;&lt;/code&gt;
"                - in order to support C++2017, now you can use &lt;code&gt;&lt;span class="identifier"&gt;BOOST_LOCALE_HIDE_AUTO_PTR&lt;/span&gt;&lt;/code&gt;
"                definiton to remove &lt;code&gt;&lt;span class="identifier"&gt;auto_ptr&lt;/span&gt;&lt;/code&gt;
"                from the interfaces and prevent deprecated watnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed test problem with ICU &amp;gt;60.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix of solaris build
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed wired FreeBSD/clang issue on optimized build. Probably compiler
"                workaround
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added workaround for failing MSVC tests due to 932 codepage codecvt
"                issue
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs 6851, 12572, 12453
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed missing throw in case of failure in &lt;code&gt;&lt;span class="identifier"&gt;icu&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;date_time&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed build agains Boost.Thread v4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed Year of week instead of year ICU backend formatting
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed formatting test for ICU 56.1 and above
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved compatibility with C++17: use &lt;code&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
"                to work with allocators instead of directly accessing its members.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved compatibility with gcc 7 and later by updating library ABI
"                namespace definition.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added documentation for the "Append" config file parameter
"                for "TextFile" sinks. The parameter was supported previously,
"                only the documentation was missing.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/index.html"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add naive Monte Carlo integration support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add Chebyshev interpolation routines.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/index.html"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Elements with overloaded &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt; are now fully accepted (ticket
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/13307"&gt;#13307&lt;/a&gt;). Thanks to Daniel Frey for his updating &lt;a href="https://www.boost.org/libs/utility/operators.htm#deref"&gt;Boost.Operators&lt;/a&gt;
"                to help fix this issue.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Avoided usage of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator&lt;/span&gt;&lt;/code&gt;
"                members deprecated in C++17. Contributed by Daniela Engert.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multiprecision/index.html"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking Change:&lt;/strong&gt; When converting
"                a multiprecision integer to a narrower type, if the value is too
"                large (or negative) to fit in the smaller type, then the result is
"                either the maximum (or minimum) value of the target type. This was
"                always the intended behaviour, but was somewhat haphazardly enforced
"                before. If you really do want just the low order N bits of a value,
"                then you will need to mask these out prior to the case, for example:
"                &lt;code&gt;&lt;span class="keyword"&gt;static_cast&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword"&gt;unsigned&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;(~&lt;/span&gt;&lt;span class="keyword"&gt;static_cast&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword"&gt;unsigned&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;(&lt;/span&gt;&lt;span class="number"&gt;0&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt; &lt;span class="special"&gt;&amp;amp;&lt;/span&gt; &lt;span class="identifier"&gt;my_value&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;. Note that technically (to avoid
"                undefined behaviour) you should do the same thing with built in integer
"                types too. See &lt;a href="https://svn.boost.org/trac/boost/ticket/13109"&gt;#13109&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bug in conversion of decimal to rational types (zero needs special
"                handling), see &lt;a href="https://svn.boost.org/trac/boost/ticket/13148"&gt;#13148&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix conversion from cpp_bin_float to a wider built in integer type,
"                see &lt;a href="https://svn.boost.org/trac/boost/ticket/13301"&gt;#13301&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improve performance heurists used in cpp_bin_float exp function.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bug in floor/ceil and cpp_bin_float when the exponent type is
"                wider than an int, see &lt;a href="https://svn.boost.org/trac/boost/ticket/13264"&gt;#13264&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disable explicit conversion operator when the target type is already
"                constructible from this type, see &lt;a href="https://github.com/boostorg/multiprecision/issues/30"&gt;#30&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix support for changes new to MPIR-3.0, see &lt;a href="https://svn.boost.org/trac/boost/ticket/13124"&gt;#13124&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/optional/index.html"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issue &lt;a href="https://github.com/boostorg/optional/issues/46"&gt;#46&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;Wzero&lt;/span&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;as&lt;/span&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;null&lt;/span&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;pointer&lt;/span&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;constant&lt;/span&gt;&lt;/code&gt;
"                warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/phoenix/"&gt;Phoenix&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct documentation and example code. (&lt;a href="https://svn.boost.org/trac/boost/ticket/8187"&gt;#8187&lt;/a&gt;, &lt;a href="https://github.com/boostorg/phoenix/pull/56"&gt;PR#56&lt;/a&gt;,
"                &lt;a href="https://github.com/boostorg/phoenix/pull/57"&gt;PR#57&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug with initializing phoenix lazy from array types in C++11.
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/12733"&gt;#12733&lt;/a&gt;, &lt;a href="https://github.com/boostorg/phoenix/pull/58"&gt;PR#58&lt;/a&gt;, &lt;a href="https://github.com/boostorg/phoenix/pull/61"&gt;PR#61&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use proto subscript and assignment overload operators buildins to
"                fix compile error with some lambda experssions on recent MSVC. (&lt;a href="https://github.com/boostorg/phoenix/issues/62"&gt;#62&lt;/a&gt;,
"                &lt;a href="https://github.com/boostorg/phoenix/pull/64"&gt;PR#64&lt;/a&gt;, &lt;a href="https://github.com/boostorg/phoenix/pull/66"&gt;PR#66&lt;/a&gt;, &lt;a href="https://github.com/boostorg/phoenix/pull/67"&gt;PR#67&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove use of deprecated &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iteratror&lt;/span&gt;&lt;/code&gt;.
"                Thanks to Daniela Engert. (&lt;a href="https://github.com/boostorg/phoenix/pull/59"&gt;PR#59&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/python/"&gt;Python&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The library name now includes the version suffix of the Python version
"                used to compile it. For example, a variant compiled with Python 2.7
"                will produce library names &lt;code&gt;&lt;span class="identifier"&gt;boost_python27&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;boost_numpy27&lt;/span&gt;&lt;/code&gt;,
"                etc.. Combined with a related fix in Boost.Build, this means that
"                it is now possible to build variants for multiple Python versions
"                in a single build process.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/spirit/"&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit.X3:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;strong&gt;Breaking change:&lt;/strong&gt; Removed
"                      &lt;code&gt;&lt;span class="identifier"&gt;with_context&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/239"&gt;#239&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added noexcept to &lt;code&gt;&lt;span class="identifier"&gt;x3&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;variant&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="identifier"&gt;forward_ast&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/241"&gt;#241&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      CR+LF lines wrongly counted in &lt;code&gt;&lt;span class="identifier"&gt;error_handler&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;position&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; (&lt;a href="https://github.com/boostorg/spirit/issues/248"&gt;#248&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed &lt;code&gt;&lt;span class="identifier"&gt;unused_type&lt;/span&gt;&lt;/code&gt;
"                      attribute case in &lt;code&gt;&lt;span class="identifier"&gt;parse_into_container&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/266"&gt;#266&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed parsing into associative containers (&lt;a href="https://github.com/boostorg/spirit/issues/289"&gt;#289&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed overflow problem in &lt;code&gt;&lt;span class="identifier"&gt;uint_parser&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword"&gt;signed&lt;/span&gt;
"                      &lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/297"&gt;#297&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added VS2015 Update 3 support by using workarounds (&lt;a href="https://github.com/boostorg/spirit/issues/308"&gt;#308&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed include guard names collision with Qi (&lt;a href="https://github.com/boostorg/spirit/issues/313"&gt;#313&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added parsing into range (&lt;a href="https://github.com/boostorg/spirit/issues/316"&gt;#316&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/12928"&gt;#12928&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Changed iterator concept static assert from &lt;code&gt;&lt;span class="identifier"&gt;ForwardIterator&lt;/span&gt;&lt;/code&gt;
"                      to &lt;code&gt;&lt;span class="identifier"&gt;ReadableIteratorConcept&lt;/span&gt;&lt;/code&gt;
"                      &amp;amp;&amp;amp; &lt;code&gt;&lt;span class="identifier"&gt;ForwardTraversalConcept&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/320"&gt;#320&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Reenabled &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;map&lt;/span&gt;&lt;/code&gt;
"                      support (&lt;a href="https://github.com/boostorg/spirit/issues/330"&gt;#330&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed &lt;code&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"..."&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;attr&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"..."&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; to single item sequence (&lt;a href="https://github.com/boostorg/spirit/issues/337"&gt;#337&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Dereference a single item view instead of unwrapping sequence
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/340"&gt;#340&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Prevent &lt;code&gt;&lt;span class="identifier"&gt;parse_nan&lt;/span&gt;&lt;/code&gt;
"                      from dereferencing out of range iterator (&lt;a href="https://github.com/boostorg/spirit/issues/351"&gt;#351&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Use traits to test if container is empty (&lt;a href="https://github.com/boostorg/spirit/issues/355"&gt;#355&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit V2
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed keyword directives compilation on C++11 (&lt;a href="https://github.com/boostorg/spirit/issues/256"&gt;#256&lt;/a&gt;)
"                      (&lt;a href="https://svn.boost.org/trac/boost/ticket/11493"&gt;#11493&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed subrules compilation (&lt;a href="https://github.com/boostorg/spirit/issues/279"&gt;#279&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/spirit/issues/259"&gt;#259&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed subrules use after scope bug (&lt;a href="https://github.com/boostorg/spirit/issues/284"&gt;#284&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/5270"&gt;#5270&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed undefined behavior in sequential or operator. Underlying
"                      parsers order of execution was dependent on compiler (&lt;a href="https://github.com/boostorg/spirit/issues/310"&gt;#310&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Spirit was accidentally relaying on &lt;code&gt;&lt;span class="identifier"&gt;types&lt;/span&gt;&lt;/code&gt;
"                      typedef of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;/code&gt;.
"                      The typedef was removed in the new optional implementation
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/271"&gt;#271&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/12349"&gt;#12349&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed problems with &lt;code&gt;&lt;span class="identifier"&gt;BOOST_SPIRIT_NO_PREDEFINED_TERMINALS&lt;/span&gt;&lt;/code&gt;
"                      (&lt;code&gt;&lt;span class="identifier"&gt;attr_cast&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;confix&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;distinct&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;keywords&lt;/span&gt;&lt;/code&gt;,
"                      and &lt;code&gt;&lt;span class="identifier"&gt;flush_multi_pass&lt;/span&gt;&lt;/code&gt;)
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/314"&gt;#314&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/13311"&gt;#13311&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added missing copy assignment operator to &lt;code&gt;&lt;span class="identifier"&gt;hold_any&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/361"&gt;#361&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/8268"&gt;#8268&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit.Qi:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed alternate operator (&lt;a href="https://github.com/boostorg/spirit/issues/201"&gt;#201&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/spirit/issues/271"&gt;#271&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/12349"&gt;#12349&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed signed integer overflow in real parser (&lt;a href="https://github.com/boostorg/spirit/issues/245"&gt;#245&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed overflow problem in &lt;code&gt;&lt;span class="identifier"&gt;uint_parser&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword"&gt;signed&lt;/span&gt;
"                      &lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/297"&gt;#297&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed &lt;code&gt;&lt;span class="identifier"&gt;get_current_line&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;get_line_start&lt;/span&gt;&lt;/code&gt;,
"                      and added &lt;code&gt;&lt;span class="identifier"&gt;get_line_end&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/304"&gt;#304&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Permutations parser were always initializing optionals (&lt;a href="https://github.com/boostorg/spirit/issues/319"&gt;#319&lt;/a&gt;)
"                      (&lt;a href="https://svn.boost.org/trac/boost/ticket/12473"&gt;#12473&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Changed iterator concept static assert from &lt;code&gt;&lt;span class="identifier"&gt;ForwardIterator&lt;/span&gt;&lt;/code&gt;
"                      to &lt;code&gt;&lt;span class="identifier"&gt;ReadableIteratorConcept&lt;/span&gt;&lt;/code&gt;
"                      &amp;amp;&amp;amp; &lt;code&gt;&lt;span class="identifier"&gt;ForwardTraversalConcept&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/320"&gt;#320&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added assertations to real parsers to ensure that the &lt;code&gt;&lt;span class="identifier"&gt;parse_frac_n&lt;/span&gt;&lt;/code&gt; from user defined
"                      real policy does not return negative values and also to prevent
"                      static analyzers false-positives (&lt;a href="https://github.com/boostorg/spirit/issues/358"&gt;#358&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit.Karma:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed alternate operator (&lt;a href="https://github.com/boostorg/spirit/issues/271"&gt;#271&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed &lt;code&gt;&lt;span class="identifier"&gt;no_buffering_policy&lt;/span&gt;&lt;/code&gt;
"                      missing copy constructor (&lt;a href="https://github.com/boostorg/spirit/issues/261"&gt;#261&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The &lt;code&gt;&lt;span class="identifier"&gt;ostream_iterator&lt;/span&gt;&lt;/code&gt;
"                      was inheriting &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt;
"                      which is deprecated in C++17 (&lt;a href="https://github.com/boostorg/spirit/issues/345"&gt;#345&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit.Lex:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Store id as promoted type to allow out-of-enum values (&lt;a href="https://github.com/boostorg/spirit/issues/247"&gt;#247&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed C2001 'newline in constant' warning in generated lexers
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/324"&gt;#324&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/11540"&gt;#11540&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit.Classic:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed &lt;code&gt;&lt;span class="identifier"&gt;remove_reference&lt;/span&gt;&lt;/code&gt;
"                      usage without a namespace in Phoenix (&lt;a href="https://github.com/boostorg/spirit/issues/274"&gt;#274&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;complex&lt;/span&gt;&lt;/code&gt; usage without the
"                      include (&lt;a href="https://github.com/boostorg/spirit/issues/273"&gt;#273&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed compilation of &lt;code&gt;&lt;span class="identifier"&gt;match&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;
"                      &lt;span class="special"&gt;&amp;amp;&amp;gt;&lt;/span&gt;&lt;/code&gt; (&lt;a href="https://github.com/boostorg/spirit/issues/275"&gt;#275&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed compilation with &lt;code&gt;&lt;span class="identifier"&gt;BOOST_DISABLE_THREADS&lt;/span&gt;&lt;/code&gt;
"                      defined (&lt;a href="https://github.com/boostorg/spirit/issues/323"&gt;#323&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/12639"&gt;#12639&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Increment scanner through iterator policy (&lt;a href="https://github.com/boostorg/spirit/issues/336"&gt;#336&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/7371"&gt;#7371&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Removed deprecated in C++17 &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt;
"                      usage (&lt;a href="https://github.com/boostorg/spirit/issues/345"&gt;#345&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Async safe dumping into files on Windows OS was causing hangs on
"                some platforms and now is disabled &lt;a href="https://github.com/boostorg/stacktrace/issues/33"&gt;#33&lt;/a&gt;. Users are encouraged
"                to update to the latest Boost release.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/libs/container_hash/"&gt;ContainerHash&lt;/a&gt; library
"                is now used to reduce dependencies.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Minor fixes (including &lt;a href="https://github.com/boostorg/stacktrace/issues/31"&gt;#31&lt;/a&gt;, &lt;a href="https://github.com/boostorg/stacktrace/issues/38"&gt;#38&lt;/a&gt;, &lt;a href="https://github.com/boostorg/stacktrace/issues/39"&gt;#39&lt;/a&gt;,
"                &lt;a href="https://github.com/boostorg/stacktrace/issues/40"&gt;#40&lt;/a&gt;, &lt;a href="https://github.com/boostorg/stacktrace/issues/42"&gt;#42&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.test v3.7 see the &lt;a href="https://www.boost.org/doc/libs/1_67_0/libs/test/doc/html/boost_test/change_log.html"&gt;Changes
"                log&lt;/a&gt; for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Breaking changes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Adding test cases with the same name to the same test suite
"                      is now reported as an error. See the changes log for more details.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New feature:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Colour output on by default and available on Windows,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improved and clearer command line help
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;BOOST_AUTO_TEST_CASE_TEMPLATE&lt;/span&gt;&lt;/code&gt;
"                      now accepts a sequence of types in an &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;tuple&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes and pull requests:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Trac tickets: &lt;a href="https://svn.boost.org/trac/boost/ticket/12092"&gt;#12092&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12596"&gt;#12596&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12597"&gt;#12597&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12969"&gt;#12969&lt;/a&gt;,
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/13058"&gt;#13058&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13149"&gt;#13149&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13170"&gt;#13170&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Trac tickets: &lt;a href="https://svn.boost.org/trac/boost/ticket/13181"&gt;#13181&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13371"&gt;#13371&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13387"&gt;#13387&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13398"&gt;#13398&lt;/a&gt;,
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/13407"&gt;#13407&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13435"&gt;#13435&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13443"&gt;#13443&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Pull requests: &lt;a href="https://github.com/boostorg/test/issues/112"&gt;#112&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/118"&gt;#118&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/118"&gt;#118&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/121"&gt;#121&lt;/a&gt;,
"                      &lt;a href="https://github.com/boostorg/test/issues/122"&gt;#122&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/125"&gt;#125&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/127"&gt;#127&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_index/"&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/libs/container_hash/"&gt;ContainerHash&lt;/a&gt; library
"                is now used to reduce dependencies.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Minor fixes (including &lt;a href="https://github.com/boostorg/type_index/issues/17"&gt;#17&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_traits/"&gt;TypeTraits&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new traits &lt;code&gt;&lt;span class="identifier"&gt;detected&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;detected_or&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;is_detected&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;is_detected_convertible&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;is_detected_exact&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;is_complete&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added greatly improved code for detecting binary operators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add assertions for completeness to traits which require complete
"                types as arguments: this prevents various traits from giving eroneous
"                results from incomplete types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix minor issue with mpl compatibility, see &lt;a href="https://svn.boost.org/trac/boost/ticket/12212"&gt;#12212&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add macro to indicate when &lt;code&gt;&lt;span class="identifier"&gt;is_constructible&lt;/span&gt;&lt;/code&gt;
"                is fully implemented, see &lt;a href="https://svn.boost.org/trac/boost/ticket/12003"&gt;#12003&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update &lt;code&gt;&lt;span class="identifier"&gt;is_function&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;is_member_function_pointer&lt;/span&gt;&lt;/code&gt;
"                to work correctly with C++17 noexcept specifications.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add workaround for &lt;code&gt;&lt;span class="identifier"&gt;is_default_constructible&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;pair&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added fallback for &lt;code&gt;&lt;span class="identifier"&gt;is_nothrow_swappable&lt;/span&gt;&lt;/code&gt;
"                on pre-C++11 compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/utility/"&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking change:&lt;/strong&gt; &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;utility&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                header no longer includes &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;next&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;prior&lt;/span&gt;&lt;/code&gt; as they have been moved to
"                the iterator module. Instead include &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;next_prior&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"                Other uses of &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;utility&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; are discouraged, it's better
"                to use the header for the specific functionality instead.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/unordered/"&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Template deduction guides.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Standard conforming &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt;
"                specifications for &lt;code&gt;&lt;span class="identifier"&gt;swap&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;=&lt;/span&gt;&lt;/code&gt;
"                and node handles.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class="identifier"&gt;element_type&lt;/span&gt;&lt;/code&gt;
"                to iterators, so that &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;pointer_traits&lt;/span&gt;&lt;/code&gt;
"                will work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;piecewise_construct&lt;/span&gt;&lt;/code&gt; on recent Visual
"                C++ and Dinkumware libraries.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator_traits&lt;/span&gt;&lt;/code&gt; rather than the
"                boost iterator traits in order to remove dependency on Boost.Iterator.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Iterators no longer inherit from &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt;,
"                as it's deprecated (&lt;a href="https://github.com/boostorg/unordered/pull/7"&gt;PR#7&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                More detail in the &lt;a href="https://www.boost.org/doc/html/unordered/changes.html#unordered.changes.boost_1_67_0"&gt;library
"                change log&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/units/"&gt;Units&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix sqrt for scaled units &lt;a href="https://svn.boost.org/trac/boost/ticket/10270"&gt;#10270&lt;/a&gt; &lt;a href="https://github.com/boostorg/units/issues/27"&gt;#27&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add constexpr support &lt;a href="https://github.com/boostorg/units/issues/22"&gt;#22&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                minor documentation fixes
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/uuid/"&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking change:&lt;/strong&gt; random_generator
"                is no longer copyable (&lt;a href="https://github.com/boostorg/uuid/issues/61"&gt;#61&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Optimized random_generator to use OS-provided entropy directly (&lt;a href="https://github.com/boostorg/uuid/pull/53"&gt;PR#53&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Provide &lt;code&gt;&lt;span class="identifier"&gt;random_generator_mt19937&lt;/span&gt;&lt;/code&gt;
"                for bulk UUID generation
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Handle entropy acquisition errors instead of ignoring them
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for Windows UWP (&lt;a href="https://github.com/boostorg/uuid/issues/24"&gt;#24&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for CloudABI
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Substitute function arguments on compilers with variadic templates
"                support and do not generate substitution metafunctions using preprocessor
"                &lt;a href="https://github.com/boostorg/variant/issues/42"&gt;#42&lt;/a&gt;, &lt;a href="https://github.com/boostorg/variant/issues/46"&gt;#46&lt;/a&gt;. Many thanks to Nikita Kniazev for providing
"                an initial fix.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Perfect forwarding for passing visitor in apply_visitor &lt;a href="https://github.com/boostorg/variant/issues/40"&gt;#40&lt;/a&gt;,
"                &lt;a href="https://svn.boost.org/trac/boost/ticket/13288"&gt;#13288&lt;/a&gt;. Many thanks to Paweł Dac!
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Minor fixes (including &lt;a href="https://github.com/boostorg/variant/issues/41"&gt;#41&lt;/a&gt;, &lt;a href="https://github.com/boostorg/variant/issues/44"&gt;#44&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_67_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 4.0.1, 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 7.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 7.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 7.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1, 4.0.1, 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.7.2, 4.9.2, 5.4.0, 7.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 7.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.4.1, 6.3.0, 6.4.0, 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.2.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0, 7.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_67_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href="https://www.boost.org/users/people/beman_dawes.html"&gt;Beman Dawes&lt;/a&gt;, Daniel James,
"      Vladimir Prus and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Tue, 27 Apr 2021 03:13:52 +0000
-quickbook
"feed/history/boost_1_67_0.qbk
-update_count
=19
)
(feed/history/boost_1_68_0.qbk
-item
"<item><title>Version 1.68.0</title><link>https://www.boost.org/users/history/version_1_68_0.html</link><guid>https://www.boost.org/users/history/version_1_68_0.html</guid><pubDate>Thu, 09 Aug 2018 03:46:16 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_68_0.notes_for_windows_users"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Notes for Windows
"    users&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost.WinAPI has been updated to target Windows 7 by default, where possible.
"      In previous releases Windows Vista was the default.
"    &lt;/p&gt;
"    &lt;p&gt;
"      Boost.WinAPI is used internally as the Windows SDK abstraction layer in a number
"      of Boost libraries, including Boost.Beast, Boost.Chrono, Boost.DateTime, Boost.Dll,
"      Boost.Log, Boost.Process, Boost.Stacktrace, Boost.System, Boost.Thread and
"      Boost.UUID. To select the target Windows version define &lt;code&gt;&lt;span class="identifier"&gt;BOOST_USE_WINAPI_VERSION&lt;/span&gt;&lt;/code&gt;
"      to the numeric version similar to &lt;code&gt;&lt;span class="identifier"&gt;_WIN32_WINNT&lt;/span&gt;&lt;/code&gt;
"      while compiling Boost and user's code. For example:
"    &lt;/p&gt;
"&lt;pre&gt;    b2 release define=BOOST_USE_WINAPI_VERSION=0x0501 stage
"&lt;/pre&gt;
"    &lt;p&gt;
"      The list of Windows API version numbers can be seen on &lt;a href="https://msdn.microsoft.com/en-us/library/6sehtctf.aspx"&gt;this&lt;/a&gt;
"      page.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_68_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/yap/"&gt;YAP&lt;/a&gt;:&lt;/span&gt; An expression template library
"          for C++14 and later, from Zach Laine.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_68_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This version fixes a missing executor work guard in all composed
"                operations used in the implementation. Users who are experiencing
"                crashes related to asynchronous completion handlers are encouraged
"                to upgrade.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                For a complete list of changes, please view the official &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
"                Notes&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/78"&gt;#78&lt;/a&gt;: Linker error with &lt;code&gt;&lt;span class="identifier"&gt;context&lt;/span&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;impl&lt;/span&gt;&lt;span class="special"&gt;=&lt;/span&gt;&lt;span class="identifier"&gt;ucontext&lt;/span&gt;&lt;/code&gt;:
"                multiple definition of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;context&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;detail&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;current_rec&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/coroutine2/"&gt;Coroutine2&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/coroutine2/issues/14"&gt;#14&lt;/a&gt;: crash while stack unwinding
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/coroutine2/issues/18"&gt;#18&lt;/a&gt;: some guidance on why to use coroutine2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/coroutine2/issues/20"&gt;#20&lt;/a&gt;: failes to compile test in due to the error C2039
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/coroutine2/issues/22"&gt;#22&lt;/a&gt;: undefined behaviour documentation
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fiber/"&gt;Fiber&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/170"&gt;#170&lt;/a&gt;: buffered_channel::try_push has incorrect documentation
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/172: WIN64"&gt;#172: WIN64&lt;/a&gt;: 'invalid conversion from 'HANDLE' to
"                'std::thread::native_handle_type' errors for builds using mingw-w64
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/175"&gt;#175&lt;/a&gt;: throw exception "Operation not permitted"
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                NUMA support moved to extra library (fiber-numa); enabled via property
"                numa (numa=on)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fusion/"&gt;Fusion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a workaround for ambiguous call of &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;deque&lt;/span&gt;&lt;/code&gt;
"                constructor on GCC 4.4/c++0x (&lt;a href="https://github.com/boostorg/fusion/pull/178"&gt;PR#178&lt;/a&gt;, &lt;a href="https://github.com/boostorg/fusion/pull/178/commits/9de32721749b635ff3e04e690da89cf06602c122"&gt;commit&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a bug with C-style array (&lt;a href="https://github.com/boostorg/fusion/pull/177"&gt;PR#177&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;for_each&lt;/span&gt;&lt;/code&gt; signature to take functor
"                by value (&lt;a href="https://svn.boost.org/trac/boost/ticket/4427"&gt;#4427&lt;/a&gt;).
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      This may break existing code with non-copyable (non-movable)
"                      functor, but the implementation wasn't correct for a long time;
"                      the documantation was correct from the first. So, please make
"                      sure your usage.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed unintentional MPL placeholder substitution bug on &lt;code&gt;&lt;span class="identifier"&gt;fusion&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;transform&lt;/span&gt;&lt;/code&gt; (&lt;a href="https://svn.boost.org/trac/boost/ticket/5490"&gt;#5490&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Moved description, how to conform Fusion sequence as MPL sequence,
"                to mpl section (&lt;a href="https://svn.boost.org/trac/boost/ticket/4029"&gt;#4029&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added notes regarding IO facility for adapted type (&lt;a href="https://svn.boost.org/trac/boost/ticket/6091"&gt;#6091&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/469"&gt;469&lt;/a&gt;
"                      Horizontal grid shift (nadgrids) in SRS transformations (undocumented
"                      for now due to potential interface changes).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/478"&gt;478&lt;/a&gt;
"                      Box-Segment distance for spherical and geographic coordinate
"                      systems.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/487"&gt;487&lt;/a&gt;
"                      Missing combinations of geometries in distance for spherical
"                      and geographic cs
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/489"&gt;489&lt;/a&gt;
"                      Additional direct geodesic problem formulas for internal use
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved issues
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/470"&gt;470&lt;/a&gt;
"                      Assertion failure with short spherical and geographic segments.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/471"&gt;471&lt;/a&gt;
"                      Invalid envelope of spherical polygon
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/498"&gt;498&lt;/a&gt;
"                      Unexpected results with expand() and make_inverse() for spherical
"                      and geographic CS
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/504"&gt;504&lt;/a&gt;
"                      Unused parameter warnings.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/488"&gt;488&lt;/a&gt;
"                      Handle non-true-references in closing_iterator and ever_circling_range_iterator
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/495"&gt;495&lt;/a&gt;
"                      VxWorks 7 cross-compilation issue.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/gil/"&gt;GIL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The library now requires a C++11-compliant compiler.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New top-level all-in-one &lt;code&gt;&lt;span class="identifier"&gt;include&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;gil&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                      header (&lt;a href="https://github.com/boostorg/gil/pull/70"&gt;PR#70&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New Toolbox extension, &lt;a href="https://lists.boost.org/boost-announce/2011/01/0281.php"&gt;reviewed
"                      and accepted into Boost&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      IO extensions have been entirely rewritten as IO v2, &lt;a href="https://lists.boost.org/boost-announce/2011/01/0281.php"&gt;reviewed
"                      and accepted into Boost&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Documentation has been reformatted and updated.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      IO v1 extension has been replaced with IO v2.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/graph/"&gt;Graph&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Conditionally replace deprecated/removed C++98 &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;bind1st&lt;/span&gt;&lt;/code&gt;
"                by &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;bind&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;auto_ptr&lt;/span&gt;&lt;/code&gt;
"                by &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;unique_ptr&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;random_shuffle&lt;/span&gt;&lt;/code&gt;
"                by &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;shuffle&lt;/span&gt;&lt;/code&gt;. (&lt;a href="https://github.com/boostorg/graph/pull/89"&gt;PR#89&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix compiler error with release builds on VS2015 (&lt;a href="https://github.com/boostorg/graph/pull/84"&gt;PR#84&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix the Stanford GraphBase examples (&lt;a href="https://github.com/boostorg/graph/pull/87"&gt;PR#87&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix friend declarations for iterator_core_access (&lt;a href="https://github.com/boostorg/graph/pull/103"&gt;PR#103&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add missing &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; include (&lt;a href="https://github.com/boostorg/graph/pull/104"&gt;PR#104&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Avoid an unused variable warning (&lt;a href="https://github.com/boostorg/graph/pull/90"&gt;PR#90&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix some typos in documentation (&lt;a href="https://github.com/boostorg/graph/pull/88"&gt;PR#88&lt;/a&gt;, &lt;a href="https://github.com/boostorg/graph/pull/98"&gt;PR#98&lt;/a&gt;, &lt;a href="https://github.com/boostorg/graph/pull/102"&gt;PR#102&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix some issues in tests and examples (&lt;a href="https://github.com/boostorg/graph/pull/85"&gt;PR#85&lt;/a&gt;, &lt;a href="https://github.com/boostorg/graph/pull/105"&gt;PR#105&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lexical_cast/"&gt;Lexical Cast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixes for clang-tidy warnings &lt;a href="https://svn.boost.org/trac/boost/ticket/12092"&gt;#12092&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved support for VxWorks. (&lt;a href="https://github.com/boostorg/log/pull/39"&gt;PR#39&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Save and restore &lt;code&gt;&lt;span class="identifier"&gt;ebx&lt;/span&gt;&lt;/code&gt;
"                register on x86 PIE targets in the &lt;code&gt;&lt;span class="identifier"&gt;dump&lt;/span&gt;&lt;/code&gt;
"                stream manipulator implementation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for arbitrary precision complex valued quadrature and hence
"                contour integration
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improve performance of polynomial addition
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Continue to improve numerical integration routines, and in particular
"                add support for contour integrals.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improve accuracy of erfc function's rational approximations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/index.html"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Containers of moveable but non-copyable elements can now be serialized
"                (ticket &lt;a href="https://svn.boost.org/trac/boost/ticket/13478"&gt;#13478&lt;/a&gt;). Thanks to Sébastien Paris for the report.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;'s
"                default constructor is no longer &lt;code&gt;&lt;span class="keyword"&gt;explicit&lt;/span&gt;&lt;/code&gt;
"                (ticket &lt;a href="https://svn.boost.org/trac/boost/ticket/13518"&gt;#13518&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multiprecision"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support added for complex multiprecision numbers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed conversion to unsigned integer types to be truncating to
"                match standard defined behaviour.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct bug in MPFR string formatting.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix undefined behaviour in cpp_dec_float conversion from long long.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for Eigen interoperability.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                float128.hpp: Fix Intel on Windows build.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix type used in temporaries when expanding expression templates
"                containing mixed expressions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix infinite loop in gmp_float to fixed-point string conversion.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update the expression templates to issue static_asserts with better
"                error messages when you try and do something unsupported.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bug in cpp_int where incrementing to zero doesn't set the sign
"                correctly.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove erroneous use of std::move, and rely on NVRO instead.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix up support for changes to MPIR-3.0.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix various conversion errors in cpp_bin_float when the exponent
"                type is a &lt;code&gt;&lt;span class="keyword"&gt;long&lt;/span&gt; &lt;span class="keyword"&gt;long&lt;/span&gt;&lt;/code&gt;,
"                or else we're converting to an integer that is wider than we are.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix compatibility issue with GCC-8 caused by the introduction of
"                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;byte&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/optional/"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added member function &lt;code&gt;&lt;span class="identifier"&gt;has_value&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; for compatibility with &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;/code&gt; (&lt;a href="https://github.com/boostorg/optional/issues/52"&gt;issue
"                #52&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added member function &lt;code&gt;&lt;span class="identifier"&gt;map&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; for transforming &lt;code&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                into &lt;code&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;U&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                using a function of type &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;
"                &lt;span class="special"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="identifier"&gt;U&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added member function &lt;code&gt;&lt;span class="identifier"&gt;flat_map&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; for transforming &lt;code&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                into &lt;code&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;U&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                using a function of type &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;
"                &lt;span class="special"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="identifier"&gt;optonal&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;U&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for __ARM_ARCH macro. (from Tim Blechmann)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add detection for PTX architecture. (from Benjamin Worpitz)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add nvcc compiler detection. (from Benjamin Worpitz)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for detecting CUDA. (from Benjamin Worpitz)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove reference to obsolete BOOST_ARCH_AMD64. (from Peter Kolbus)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/program_options/"&gt;Program Options&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for multiple long names for an option, thanks to Eyal Rozenberg
"                (&lt;a href="https://github.com/boostorg/program_options/pull/53"&gt;PR#53&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/python/"&gt;Python&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes to correct autolink support (Windows) (&lt;a href="https://github.com/boostorg/python/issues/193"&gt;#193&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/rational/"&gt;Rational&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed undefined behavior in normalize() (&lt;a href="https://github.com/boostorg/rational/pull/19"&gt;PR#19&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/system/"&gt;System&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add constexpr to error_code and error_condition members under C++14
"                and above (&lt;a href="https://github.com/boostorg/system/pull/23"&gt;PR#23&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/signals/"&gt;Signals&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Removal Notice:&lt;/strong&gt; Boost.Signals will
"                be removed in the next release. Boost.Signals was deprecated in version
"                1.54.0. Transition to Boost.Signals2 now to avoid disruption.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/spirit/"&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit.X3:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Small list parser optimization (&lt;a href="https://github.com/boostorg/spirit/pull/368"&gt;PR#368&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Pass container attributes through sequence parser or unary
"                      ending down to a sequence parser (&lt;a href="https://github.com/boostorg/spirit/pull/370"&gt;PR#370&lt;/a&gt; &lt;a href="https://svn.boost.org/trac/boost/ticket/12085"&gt;#12085&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      More fine grained sequence attribute check message (&lt;a href="https://github.com/boostorg/spirit/pull/371"&gt;PR#371&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Removed redundant check in &lt;code&gt;&lt;span class="identifier"&gt;skip_over&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/spirit/pull/373"&gt;PR#373&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Workaround constexpr in noexcept VS2015 bug in entire &lt;code&gt;&lt;span class="identifier"&gt;x3&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;variant&lt;/span&gt;&lt;/code&gt; (&lt;a href="https://github.com/boostorg/spirit/pull/379"&gt;PR#379&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed calc4b example compilation (&lt;a href="https://github.com/boostorg/spirit/pull/384"&gt;PR#384&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Minor code improvements (&lt;a href="https://github.com/boostorg/spirit/pull/374"&gt;PR#374&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit.Qi:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed ADT support by permutation and sequence_or operator (&lt;a href="https://github.com/boostorg/spirit/pull/376"&gt;PR#376&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Specialize iterator_source for random access (&lt;a href="https://github.com/boostorg/spirit/pull/383"&gt;PR#383&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Removed redundant check in &lt;code&gt;&lt;span class="identifier"&gt;skip_over&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/spirit/pull/373"&gt;PR#373&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit.Karma:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed UB in &lt;code&gt;&lt;span class="identifier"&gt;get_absolute_value&lt;/span&gt;&lt;/code&gt;
"                      function (&lt;a href="https://github.com/boostorg/spirit/pull/246"&gt;PR#246&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed use after scope bug if ADT getter returns by value (&lt;a href="https://github.com/boostorg/spirit/pull/375"&gt;PR#375&lt;/a&gt; &lt;a href="https://svn.boost.org/trac/boost/ticket/6126"&gt;#6126&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit.Classic:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed a regression introduced in &lt;a href="https://github.com/boostorg/spirit/pull/336"&gt;PR#336&lt;/a&gt; (&lt;a href="https://github.com/boostorg/spirit/pull/386"&gt;PR#386&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Minor code improvements (&lt;a href="https://github.com/boostorg/spirit/pull/367"&gt;PR#367&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation on Solaris and other platforms that do qualify
"                address as const in &lt;code&gt;&lt;span class="identifier"&gt;dladdr&lt;/span&gt;&lt;/code&gt;
"                function (github 54).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Dropped dependency on Boost.LexicalCast.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.test v3.8 see the &lt;a href="https://www.boost.org/users/history/libs/test/doc/html/boost_test/change_log.html"&gt;Changes
"                log&lt;/a&gt; for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Breaking changes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The &lt;code&gt;&lt;span class="identifier"&gt;master_test_suite_t&lt;/span&gt;&lt;/code&gt;
"                      object is no more copyable
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New feature:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Dataset test case can now use command line parameters
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes and pull requests:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Trac tickets: &lt;a href="https://svn.boost.org/trac/boost/ticket/12095"&gt;#12095&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/12953"&gt;#12953&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13504"&gt;#13504&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13525"&gt;#13525&lt;/a&gt;,
"                      &lt;a href="https://svn.boost.org/trac/boost/ticket/13528"&gt;#13528&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Pull requests: &lt;a href="https://github.com/boostorg/test/pull/143"&gt;PR#143&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/145"&gt;PR#145&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_index/"&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Dropped dependency on Boost.MPL.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/uuid/"&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking change:&lt;/strong&gt; sha1 detail namespace
"                header redirection for backwards compatibility was removed (&lt;a href="https://github.com/boostorg/uuid/pull/69"&gt;PR#69&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for std::hash (&lt;a href="https://github.com/boostorg/uuid/pull/67"&gt;PR#67&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for move semantics on random generators (&lt;a href="https://github.com/boostorg/uuid/pull/74"&gt;PR#74&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Properly handle EINTR when acquiring entropy (&lt;a href="https://github.com/boostorg/uuid/pull/74"&gt;PR#74&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use getrandom(2) instead of getentropy(3) on linux (&lt;a href="https://github.com/boostorg/uuid/pull/75"&gt;PR#75&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_68_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 4.0.1, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_68_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Daniel James, Vladimir Prus, and Marshall Clow managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Tue, 27 Apr 2021 03:13:52 +0000
-quickbook
"feed/history/boost_1_68_0.qbk
-update_count
=10
)
(feed/history/boost_1_69_0.qbk
-item
"<item><title>Version 1.69.0</title><link>https://www.boost.org/users/history/version_1_69_0.html</link><guid>https://www.boost.org/users/history/version_1_69_0.html</guid><pubDate>Wed, 12 Dec 2018 02:58:32 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_69_0.notes_for_non_windows_users"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Notes for non-Windows
"    users&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      The Boost build system now supports visibilities. If you are building shared
"      libraries, they will use hidden visibility by default. As a result Boost shared
"      libraries become smaller, load faster and have less chances to get a symbol
"      collision.
"    &lt;/p&gt;
"    &lt;p&gt;
"      See &lt;a href="https://www.boost.org/build/manual/develop/index.html#bbv2.builtin.features.visibility"&gt;Boost.Build
"      visibility and local-visibility&lt;/a&gt; for more info.
"    &lt;/p&gt;
"    &lt;p&gt;
"      To disable that feature you can use use a command line &lt;code&gt;&lt;span class="special"&gt;./&lt;/span&gt;&lt;span class="identifier"&gt;b2&lt;/span&gt; &lt;span class="identifier"&gt;visibility&lt;/span&gt;&lt;span class="special"&gt;=&lt;/span&gt;&lt;span class="identifier"&gt;global&lt;/span&gt;&lt;/code&gt; to
"      build.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_69_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/safe_numerics/"&gt;Safe Numerics&lt;/a&gt;:&lt;/span&gt; A library
"          for guaranteed correct integer arithmetic for C++14 and later, from Robert
"          Ramey.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_69_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/any/"&gt;Any&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issue with visibility. Now &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;any&lt;/span&gt;&lt;/code&gt;
"                variables constructed in one shared library with hidden visibility
"                could be used and destroyed in other shared library with hidden visibility.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance: dropped some dependencies on other Boost libraries,
"                fixes for docs.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a problem with the detection of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;future&lt;/span&gt;&lt;/code&gt;
"                availability with libstdc++.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compile error in regex overload of &lt;code&gt;&lt;span class="identifier"&gt;read_until&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a timer heap corruption issue that can occur when moving a
"                cancelled timer.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed detection of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string_view&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string_view&lt;/span&gt;&lt;/code&gt; with newer clang/libc++.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed MSVC version detection for availability of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;invoke_result&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed the buffer sequence traits to test the new requirements, if
"                &lt;code&gt;&lt;span class="keyword"&gt;decltype&lt;/span&gt;&lt;/code&gt; is available.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an MSVC issue when building with exceptions disabled.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added SSL context options for TLS v1.3.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a compile-time test for TLS v1 support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed the macro used to test for TLS v1.2 support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Prevented global objects from being created once per thread on Windows.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a crash when using &lt;code&gt;&lt;span class="identifier"&gt;size&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;max_size&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span class="identifier"&gt;empty&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; on default-constructed resolver
"                results.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to move the return value in &lt;code&gt;&lt;span class="identifier"&gt;basic_resolver_results&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;begin&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; to avoid copying.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled move support for the Intel Compiler.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string_view&lt;/span&gt;&lt;/code&gt; detection issue when
"                using clang-cl.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed the handler tracking operation name for &lt;code&gt;&lt;span class="identifier"&gt;io_context&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;executor_type&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dispatch&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a buffer overflow that could occur when parsing an address
"                string with a 64-bit scope id.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added examples showing how to write composed operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added C++11 versions of the Timeouts, Timers, SOCKS4 and SSL examples.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed minor issues in documentation and examples.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/assign/"&gt;Assign&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add rvalue reference, perfect forwarding, and variadic template support
"                (&lt;a href="https://github.com/boostorg/assign/pull/6"&gt;PR#6&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/10477"&gt;#10477&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Avoid conversion to container's allocator (&lt;a href="https://github.com/boostorg/assign/pull/29"&gt;PR#29&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/5419"&gt;#5419&lt;/a&gt;)
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/7364"&gt;#7364&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This version fixes some issues in the examples, and provides a new
"                experimental socket which supports built-in timeouts on asynchronous
"                operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New CppCon 2018 &lt;a href="https://www.boost.org/doc/libs/master/libs/beast/doc/html/beast/examples.html#beast.examples.cppcon_2018"&gt;websocket
"                chat example&lt;/a&gt; and &lt;a href="https://www.youtube.com/watch?v=7FQwAjELMek"&gt;presentation
"                video&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                For a complete list of changes, please view the official &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
"                Notes&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/circular_buffer/"&gt;CircularBuffer&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use the empty base optimization for storing allocators that are empty
"                and not final (Glen Fernandes).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/concept_check/"&gt;Concept Check&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed dependency on mpl. (&lt;a href="https://github.com/boostorg/concept_check/pull/14"&gt;PR#14&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/85"&gt;#85&lt;/a&gt;: duplicate alias should be missing GCC alias
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/87"&gt;#87&lt;/a&gt;: the clang-win toolset (clang-cl.exe) uses masm from
"                the underlying msvc
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/90"&gt;#90&lt;/a&gt;: remove useless lines in Jamfile.v2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/91"&gt;#91&lt;/a&gt;: add .file section for *_elf_gas.S files
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;empty_value&lt;/span&gt;&lt;/code&gt;,
"                for library authors to conveniently leverage the Empty Base Optimization
"                to store objects of potentially empty types (Glen Fernandes). This
"                facility is now used in Boost.Beast, Boost.CircularBuffer, Boost.MultiArray,
"                and more.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;quick_exit&lt;/span&gt;&lt;/code&gt;
"                to provide the C++11 standard library facility &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;quick_exit&lt;/span&gt;&lt;/code&gt;
"                functionality (Peter Dimov).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reduced the number of statics in Lightweight Test, and employ lighter
"                abort behavior for MSVC compilers upon failure to call &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;report_errors&lt;/span&gt;&lt;/code&gt; (Glen Fernandes).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Resolved link issues with the smart library &lt;a href="https://github.com/boostorg/dll/issues/20"&gt;#20&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance: fixes for docs and tests.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dynamic_bitset/"&gt;Dynamic Bitset&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Performance improvements (over 2x in some cases). (&lt;a href="https://github.com/boostorg/dynamic_bitset/pull/26"&gt;PR#26&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added range-based set, reset, flip methods (&lt;a href="https://github.com/boostorg/dynamic_bitset/pull/27"&gt;PR#27&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fiber/"&gt;Fiber&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/181"&gt;#181&lt;/a&gt;: unbuffered_channel push not return
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/182"&gt;#182&lt;/a&gt;: Remove UTF-8 BOM at begining of the file
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/183"&gt;#183&lt;/a&gt;: Fix boost-install use; should only be issued once
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Don't use &lt;code&gt;&lt;span class="identifier"&gt;readdir_r&lt;/span&gt;&lt;/code&gt;
"                on Linux and Android since the &lt;code&gt;&lt;span class="identifier"&gt;readdir&lt;/span&gt;&lt;/code&gt;
"                function is already thread-safe. (&lt;a href="https://github.com/boostorg/filesystem/pull/68"&gt;PR#68&lt;/a&gt;, &lt;a href="https://github.com/boostorg/filesystem/issues/72"&gt;#72&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed crashes in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;copy&lt;/span&gt;&lt;/code&gt;
"                due to undefined behavior in the implementation. (&lt;a href="https://github.com/boostorg/filesystem/pull/71"&gt;PR#71&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed undefined behavior in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;directory_iterator&lt;/span&gt;&lt;/code&gt;
"                implementation. (&lt;a href="https://github.com/boostorg/filesystem/pull/77"&gt;PR#77&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation errors when using directory iterators with &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FOREACH&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed workarounds for older PGI C++ compiler versions to fix compilation
"                on the newer ones. (&lt;a href="https://github.com/boostorg/filesystem/pull/49"&gt;PR#49&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed MSVC warnings about narrowing conversions. (&lt;a href="https://github.com/boostorg/filesystem/pull/44"&gt;PR#44&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/flyweight/index.html"&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some issues in GCC related to Boost.MPL placeholder expression
"                handling.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/function/"&gt;Function&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed dependencies on mpl, test (&lt;a href="https://github.com/boostorg/function/pull/20"&gt;PR#20&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/function/pull/22"&gt;PR#22&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/486"&gt;PR#486&lt;/a&gt; Karney's solution of direct geodesic problem
"                      for internal use (thanks to Adeel Ahmad).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/490"&gt;PR#490&lt;/a&gt; Discrete Frechet and Hausdorff distance algorithms
"                      (thanks to Yaghyavardhan Singh Khangarot).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/496"&gt;PR#496&lt;/a&gt; New run-time and upgraded compile-time SRS
"                      transformation interfaces (undocumented for now due to potential
"                      interface changes).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved issues
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/520"&gt;#520&lt;/a&gt; Missing documentation for dsv().
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/521"&gt;#521&lt;/a&gt; Wrong documentation description for distance().
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/524"&gt;#524&lt;/a&gt; Fixed 'enumeration values not handled in switch'
"                      warnings.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/527"&gt;#527&lt;/a&gt; Workaround for VS 2017 (msvc-15).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/505"&gt;PR#505&lt;/a&gt; Fixed overflow in overlay algorithms (thanks
"                      to Dane Springmeyer).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/518"&gt;PR#518&lt;/a&gt; Fixed passing of temporaries in append() (thanks
"                      to xventura81).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/522"&gt;PR#522&lt;/a&gt; Support python3 in building documentation.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/gil/"&gt;GIL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Refactored library includes to &lt;code&gt;&lt;span class="preprocessor"&gt;#include&lt;/span&gt;
"                      &lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;gil&lt;/span&gt;&lt;span class="special"&gt;/...&amp;gt;&lt;/span&gt;&lt;/code&gt; structure (&lt;a href="https://github.com/boostorg/gil/pull/145"&gt;PR#145&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Header &lt;code&gt;&lt;span class="identifier"&gt;include&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;gil_all&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                      file as deprecated (&lt;a href="https://github.com/boostorg/gil/pull/145"&gt;PR#145&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Header &lt;code&gt;&lt;span class="identifier"&gt;include&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;gil_concepts&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                      file as deprecated (&lt;a href="https://github.com/boostorg/gil/pull/145"&gt;PR#145&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Header &lt;code&gt;&lt;span class="identifier"&gt;include&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;gil_config&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                      file as unnecessary (&lt;a href="https://github.com/boostorg/gil/pull/144"&gt;PR#144&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed &lt;code&gt;&lt;span class="identifier"&gt;point&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; divide and multiply to
"                      not to hardcode result as &lt;code&gt;&lt;span class="identifier"&gt;point&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword"&gt;double&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; (&lt;a href="https://github.com/boostorg/gil/pull/157"&gt;PR#157&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed conflict between &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;fill_n&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;range&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;fill_n&lt;/span&gt;&lt;/code&gt; (&lt;a href="https://github.com/boostorg/gil/pull/152"&gt;PR#152&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed issue with re-assignment of functor from &lt;code&gt;&lt;span class="identifier"&gt;for_each_pixel&lt;/span&gt;&lt;/code&gt; (&lt;a href="https://github.com/boostorg/gil/pull/139"&gt;PR#139&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed missing template keyword prior to dependent name &lt;code&gt;&lt;span class="identifier"&gt;axis_iterator&lt;/span&gt;&lt;/code&gt; (&lt;a href="https://github.com/boostorg/gil/pull/129"&gt;PR#129&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/integer/"&gt;Integer&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;pending&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;integer_log2&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; header is deprecated and will
"                be removed in future releases. Use &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;integer&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;integer_log2&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                instead.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/iostreams/"&gt;Iostreams&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove call to nonexistent member seekpos() of std::fpos (&lt;a href="https://github.com/boostorg/iostreams/pull/58"&gt;PR#58&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/iterator/"&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation problems with ambiguous unqualified calls to &lt;code&gt;&lt;span class="identifier"&gt;advance&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;distance&lt;/span&gt;&lt;/code&gt;
"                on iterators whose types involve types in the namespace &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;/code&gt;. (&lt;a href="https://github.com/boostorg/iterator/issues/43"&gt;#43&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lexical_cast/"&gt;LexicalCast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed sign-conversion warnings &lt;a href="https://svn.boost.org/trac/boost/ticket/8991"&gt;#8991&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance: dropped some dependencies on other Boost libraries,
"                fixed build system warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                General changes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Updated syslog sink backend to avoid using deprecated Boost.ASIO
"                      interfaces. (&lt;a href="https://github.com/boostorg/log/issues/59"&gt;#59&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed a possible incorrect estimation of the total size of
"                      rotated files in the target directory of a text file sink in
"                      some cases.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/logic/"&gt;Logic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking change:&lt;/strong&gt; Use explicit operator
"                bool when available (&lt;a href="https://github.com/boostorg/logic/pull/5"&gt;PR#5&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add LambertW functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update integration routines to support complex valued integrands
"                and contour integrals.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the derivative of the Barycentric rational approximation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Minor fixes to better support variable precision floating point types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed use of deprecated Boost.Endian in favour of Predef.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated continued fraction and series evaluation code to support
"                complex types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Prevent logic error leading to infinite loop in toms748_solve. See
"                &lt;a href="https://github.com/boostorg/math/issues/138"&gt;#138&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix mean and standard_deviation for extreme_value_distribution. See
"                &lt;a href="https://github.com/boostorg/math/issues/139"&gt;#139&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improve heuristics used in newton_raphson_iterate. See &lt;a href="https://github.com/boostorg/math/issues/145"&gt;#145&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix result of &lt;code&gt;&lt;span class="identifier"&gt;erf&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;NaN&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;. See &lt;a href="https://github.com/boostorg/math/issues/141 #141"&gt;#141 #141&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Big push to reduce GCC warnings. See &lt;a href="https://github.com/boostorg/math/issues/136 #136"&gt;#136 #136&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Refactor polynomial addition. See &lt;a href="https://github.com/boostorg/math/pull/132"&gt;PR#132&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix for vxWorks having a &lt;code&gt;&lt;span class="identifier"&gt;real&lt;/span&gt;&lt;/code&gt;
"                function in the global namespace. See &lt;a href="https://github.com/boostorg/math/pull/131"&gt;PR#131&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improve &lt;code&gt;&lt;span class="identifier"&gt;sinc&lt;/span&gt;&lt;/code&gt; approximations
"                and add better tests.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix typo in Student's T hypothesis testing documentation, see &lt;a href="https://github.com/boostorg/math/issues/143"&gt;#143&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/mp11/"&gt;Mp11&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented the &lt;code&gt;&lt;span class="identifier"&gt;mp_starts_with&lt;/span&gt;&lt;/code&gt;
"                facility (Glen Fernandes).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_array/"&gt;MultiArray&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improve C++11 allocator model support including: Support for C++11
"                minimal allocators, support for stateful allocators, using the allocator
"                for construction and destruction of the value type, and using the
"                empty base optimization for storing empty or stateless allocators
"                (Glen Fernandes).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Introduced an alternative &lt;a href="https://www.boost.org/libs/multi_index/doc/tutorial/key_extraction.html#key"&gt;terse
"                key specification syntax&lt;/a&gt; for C++17 compliant environments.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multiprecision/"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Big update to better support variable precision types so that the
"                precision of the result is always the largest of all the arguments.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for allocators that are &lt;code&gt;&lt;span class="identifier"&gt;final&lt;/span&gt;&lt;/code&gt;
"                in __cpp_int (Glen Fernandes).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed use of deprecated Boost.Endian in favour of Predef.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string_view&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed minor bug in constant initialization. See &lt;a href="https://github.com/boostorg/multiprecision/issues/67"&gt;#67&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Make assignment of non-finite value to &lt;code&gt;&lt;span class="identifier"&gt;cpp_int&lt;/span&gt;&lt;/code&gt;
"                a runtime errors. See &lt;a href="https://github.com/boostorg/multiprecision/issues/58"&gt;#58&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added typedefs for &lt;code&gt;&lt;span class="identifier"&gt;cpp_bin_float_oct&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;cpp_complex_oct&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Boost.PolyCollection-specific versions of algorithms &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;for_each_n&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;sample&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/pool/"&gt;Pool&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Replace boost::mutex use to avoid a dependency on Boost.Thread (&lt;a href="https://github.com/boostorg/pool/pull/23"&gt;PR#23&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/preprocessor/"&gt;Preprocessor&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Supports the new C++ standard conforming preprocessor in VC++ 14.1,
"                which is currently enabled by using the /experimental:preprocessor
"                switch, in Visual Studio 2017 15.8 on up.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/rational/"&gt;Rational&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add constexpr support (&lt;a href="https://github.com/boostorg/rational/pull/28"&gt;PR#28&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/rational/pull/32"&gt;PR#32&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/spirit/"&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit.X3:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Drop own FP routines in favor of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;math&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/392"&gt;#392&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/13531"&gt;#13531&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Missing visibility mark on exception types (&lt;a href="https://github.com/boostorg/spirit/issues/409"&gt;#409&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      to_utf8: Fixed wchar_t handling on Windows (&lt;a href="https://github.com/boostorg/spirit/issues/413"&gt;#413&lt;/a&gt;)
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/395"&gt;#395&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit V2
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Drop own FP routines in favor of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;math&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/392"&gt;#392&lt;/a&gt;) (&lt;a href="https://svn.boost.org/trac/boost/ticket/13531"&gt;#13531&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Missing visibility mark on exception types (&lt;a href="https://github.com/boostorg/spirit/issues/409"&gt;#409&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed transform_attribute ambiguity (&lt;a href="https://github.com/boostorg/spirit/issues/407"&gt;#407&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/spirit/issues/396"&gt;#396&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      to_utf8: Fixed wchar_t handling on Windows (&lt;a href="https://github.com/boostorg/spirit/issues/413"&gt;#413&lt;/a&gt;)
"                      (&lt;a href="https://github.com/boostorg/spirit/issues/395"&gt;#395&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Spirit.Classic:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Missing visibility mark on exception types (&lt;a href="https://github.com/boostorg/spirit/issues/409"&gt;#409&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;libbacktrace&lt;/span&gt;&lt;/code&gt; usage
"                was significantly improved. &lt;code&gt;&lt;span class="identifier"&gt;BOOST_STACKTRACE_USE_BACKTRACE&lt;/span&gt;&lt;/code&gt;
"                or &lt;code&gt;&lt;span class="identifier"&gt;boost_stacktrace_backtrace&lt;/span&gt;&lt;/code&gt;
"                users are encouraged to update:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Memory consumprion dropped down.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Stack capturing became faster by an order of magnitude.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;syminfo&lt;/span&gt;&lt;/code&gt; fallback
"                      enabled to provide information for visible symbols even without
"                      debug information (thanks to github user driesdeschout!)&lt;a href="https://github.com/boostorg/stacktrace/issues/60"&gt;#60&lt;/a&gt;,
"                      &lt;a href="https://github.com/boostorg/stacktrace/issues/61"&gt;#61&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Exact location of the &lt;code&gt;&lt;span class="identifier"&gt;backtrace&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;h&lt;/span&gt;&lt;/code&gt;
"                      header now can be specified via &lt;code&gt;&lt;span class="identifier"&gt;BOOST_STACKTRACE_BACKTRACE_INCLUDE_FILE&lt;/span&gt;&lt;/code&gt;,
"                      to allow &lt;code&gt;&lt;span class="identifier"&gt;backtrace&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;h&lt;/span&gt;&lt;/code&gt;
"                      header usage on platforms and compilers where that header is
"                      unreachable otherwise (for example Ubuntu Xenial + Clang) &lt;a href="https://github.com/boostorg/stacktrace/issues/59"&gt;#59&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Optimized stack capturing if &lt;code&gt;&lt;span class="identifier"&gt;max_depth&lt;/span&gt;&lt;/code&gt;
"                is set (thanks to Jan Eisenhauer for the PR!) &lt;a href="https://github.com/boostorg/stacktrace/issues/67"&gt;#67&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;to_string&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;const&lt;/span&gt; &lt;span class="identifier"&gt;stacktrace&lt;/span&gt;&lt;span class="special"&gt;&amp;amp;&lt;/span&gt; &lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;
"                functions for fast conversion of stacktraces to &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;/code&gt;
"                &lt;a href="https://github.com/boostorg/stacktrace/issues/57"&gt;#57&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance: updated docs &lt;a href="https://github.com/boostorg/stacktrace/issues/62"&gt;#62&lt;/a&gt;, tests updated.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/system/"&gt;System&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.System is now header-only. A stub library is still built for
"                compatibility, but linking to it is no longer necessary.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Even more functions have been marked &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The destructor of &lt;code&gt;&lt;span class="identifier"&gt;error_category&lt;/span&gt;&lt;/code&gt;
"                is now &lt;code&gt;&lt;span class="keyword"&gt;protected&lt;/span&gt;&lt;/code&gt; and
"                no longer &lt;code&gt;&lt;span class="keyword"&gt;virtual&lt;/span&gt;&lt;/code&gt;. This
"                is a potentially breaking change, but its impact is expected to be
"                limited.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;error_category&lt;/span&gt;&lt;/code&gt; now
"                has a constructor that accepts a 64 bit identifier, enabling distinct
"                category objects to compare equal.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The constructors of &lt;code&gt;&lt;span class="identifier"&gt;error_category&lt;/span&gt;&lt;/code&gt;
"                are now &lt;code&gt;&lt;span class="keyword"&gt;protected&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                A non-allocating, nonthrowing overload of &lt;code&gt;&lt;span class="identifier"&gt;message&lt;/span&gt;&lt;/code&gt;
"                has been added.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                A virtual function &lt;code&gt;&lt;span class="identifier"&gt;failed&lt;/span&gt;&lt;/code&gt;
"                has been added, allowing categories for which success is not synonymous
"                with 0.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The deprecated &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;system&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;throws&lt;/span&gt;&lt;/code&gt;
"                object has been removed.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;throws&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                is now deprecated and its use is discouraged.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The constructor of &lt;code&gt;&lt;span class="identifier"&gt;system_error&lt;/span&gt;&lt;/code&gt;
"                taking a single &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
"                argument is now &lt;code&gt;&lt;span class="keyword"&gt;explicit&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;system_error&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;code&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                now returns by value.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.test v3.9 see the &lt;a href="https://www.boost.org/users/history/libs/test/doc/html/boost_test/change_log.html"&gt;Changes
"                log&lt;/a&gt; for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New feature:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Official support of header-only variant of Boost.Test with
"                      multiple translation units.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Now possible to manually add a test case by specifying its
"                      name, with &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_CASE_NAME&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Better support of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;exception&lt;/span&gt;&lt;/code&gt;
"                      in the logs
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes and pull requests:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Trac tickets: &lt;a href="https://svn.boost.org/trac/boost/ticket/13380"&gt;#13380&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13625"&gt;#13625&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13637"&gt;#13637&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GitHub Issues: &lt;a href="https://github.com/boostorg/test/issues/149"&gt;#149&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/150"&gt;#150&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/156"&gt;#156&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/158"&gt;#158&lt;/a&gt;,
"                      &lt;a href="https://github.com/boostorg/test/issues/163"&gt;#163&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GitHub Pull Requests: &lt;a href="https://github.com/boostorg/test/pull/147"&gt;PR#147&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/148"&gt;PR#148&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/151"&gt;PR#151&lt;/a&gt;,
"                      &lt;a href="https://github.com/boostorg/test/pull/154"&gt;PR#154&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/161"&gt;PR#161&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_index/"&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix the regression and speed up parsing of the &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;type_traits&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                header by 30% (thanks to Nikita Kniazev for the PR!) &lt;a href="https://github.com/boostorg/type_index/issues/21"&gt;#21&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/utility/"&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for non-inheritable empty types to &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;compressed_pair&lt;/span&gt;&lt;/code&gt;
"                by avoiding the empty base optimization for types which are declared
"                as final (Glen Fernandes).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issue with visibility. Now &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;bad_visit&lt;/span&gt;&lt;/code&gt;
"                exception could cross the boundaries of shared library with hidden
"                visibility and could be catched in other shared library with hidden
"                visibility.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/yap/"&gt;YAP&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Minor changes to support MSVC++ version 14.15 (Visual Studio 2017
"                version 15.8).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Doc fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_69_0.discontinued_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Discontinued Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Signals (v1) is now removed. Its removal was announced in 1.68 and its
"          deprecation was announced in 1.54. Boost 1.68 is the last release that
"          provides this library. Users are encouraged to use Signals2 instead. The
"          Boost community thanks Douglas Gregor for his work on Signals which served
"          its users well and which also inspired Signals2.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_69_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 4.0.1, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_69_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Daniel James, Vladimir Prus, Marshall Clow and Michael Caisse managed this
"      release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Tue, 27 Apr 2021 03:13:52 +0000
-quickbook
"feed/history/boost_1_69_0.qbk
-update_count
=6
)
(feed/history/boost_1_70_0.qbk
-item
"<item><title>Version 1.70.0</title><link>https://www.boost.org/users/history/version_1_70_0.html</link><guid>https://www.boost.org/users/history/version_1_70_0.html</guid><pubDate>Fri, 12 Apr 2019 06:04:48 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_70_0.known_issues"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Known Issues&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      These are patches from library authors which were found too late to be fixed
"      in the release. Be careful as they have not been through the normal testing
"      process.
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Fix moved-from executor in idle ping timeout (&lt;a href="https://github.com/boostorg/beast/issues/1599"&gt;#1599&lt;/a&gt;)
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/patches/1_70_0/0001-beast-fix-moved-from-executor.patch"&gt;Beast
"                patch&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_70_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/outcome/"&gt;Outcome&lt;/a&gt;:&lt;/span&gt; A set of tools for reporting
"          and handling function failures in contexts where &lt;em&gt;directly&lt;/em&gt;
"          using C++ exception handling is unsuitable, from Niall Douglas.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/histogram/"&gt;Histogram&lt;/a&gt;:&lt;/span&gt; Fast and extensible
"          multi-dimensional histograms with convenient interface for C++14, from
"          Hans Dembinski.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_70_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This release includes a number of new features, bug fixes, performance
"                enhancements, and documentation improvements. Notable changes include:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added the ability to use custom I/O executors with I/O objects
"                      (such as sockets).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a new &lt;code&gt;&lt;span class="identifier"&gt;async_result&lt;/span&gt;&lt;/code&gt;
"                      form with an &lt;code&gt;&lt;span class="identifier"&gt;initiate&lt;/span&gt;&lt;/code&gt;
"                      static member function.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Updated the Coroutines TS support and promoted it to the &lt;code&gt;&lt;span class="identifier"&gt;asio&lt;/span&gt;&lt;/code&gt; namespace.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a new &lt;code&gt;&lt;span class="identifier"&gt;DynamicBuffer_v2&lt;/span&gt;&lt;/code&gt;
"                      concept which is CopyConstructible.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a new &lt;code&gt;&lt;span class="identifier"&gt;async_compose&lt;/span&gt;&lt;/code&gt;
"                      function that simplifies the implementation of user-defined
"                      asynchronous operations.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a &lt;code&gt;&lt;span class="identifier"&gt;make_strand&lt;/span&gt;&lt;/code&gt;
"                      helper function.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Relaxed the completion condition type requirements to only
"                      require move-constructibility rather than copy-constructibility.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a constructor for &lt;code&gt;&lt;span class="identifier"&gt;local&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_endpoint&lt;/span&gt;&lt;/code&gt;
"                      that takes a &lt;code&gt;&lt;span class="identifier"&gt;string_view&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added the noexcept qualifier to various functions.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a new &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_DISABLE_VISIBILITY&lt;/span&gt;&lt;/code&gt;
"                      configuration &lt;code&gt;&lt;span class="preprocessor"&gt;#define&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Enabled recycling of the memory used to type-erase a function
"                      object with the polymorphic executor.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Changed receive operations to return the correct number of
"                      bytes transferred when truncation (&lt;code&gt;&lt;span class="identifier"&gt;error&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;message_size&lt;/span&gt;&lt;/code&gt;)
"                      occurs on a datagram-oriented socket.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed calculation of absolute timeout when the backend uses
"                      &lt;code&gt;&lt;span class="identifier"&gt;pthread_cond_timedwait&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Changed the range-based asynchronous connect operation to deduce
"                      the &lt;code&gt;&lt;span class="identifier"&gt;EndpointSequence&lt;/span&gt;&lt;/code&gt;
"                      iterator type.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed &lt;code&gt;&lt;span class="identifier"&gt;buffer_sequence_begin&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="identifier"&gt;buffer_sequence_end&lt;/span&gt;&lt;/code&gt;
"                      to prevent implicit conversion.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Ensured SSL handshake errors are propagated to the peer before
"                      the local operation completes.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Suppressed the &lt;code&gt;&lt;span class="identifier"&gt;eof&lt;/span&gt;&lt;/code&gt;
"                      error on SSL shutdown as it actually indicates success.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a fallback error code for when we OpenSSL produces an
"                      &lt;code&gt;&lt;span class="identifier"&gt;SSL_ERROR_SYSCALL&lt;/span&gt;&lt;/code&gt;
"                      result without an associated error.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Changed composed asynchronous read and write operations to
"                      move buffer sequence objects.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed a macOS-specific warning about the deprecation of &lt;code&gt;&lt;span class="identifier"&gt;OSMemoryBarrier&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed compile errors that occur when using the composed read
"                      and write operations with MSVC 11.0.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improved &lt;code&gt;&lt;span class="identifier"&gt;dispatch&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;post&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;defer&lt;/span&gt;&lt;/code&gt; documentation.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed a Windows-specific memory leak that may occur when &lt;code&gt;&lt;span class="identifier"&gt;system_executor&lt;/span&gt;&lt;/code&gt; is used.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Consult the &lt;a href="https://www.boost.org/doc/libs/1_70_0/doc/html/boost_asio/history.html"&gt;Revision
"                History&lt;/a&gt; for further details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
"  &lt;strong&gt;BIG
"          Update!!!&lt;/strong&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Some APIs have changed.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/quickref.html"&gt;reference&lt;/a&gt;
"                shows a star ★ next to each new item.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Beast needs your help!
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Tell
"                      Us&lt;/a&gt; how you or your company use Beast
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Please &lt;a href="https://github.com/boostorg/beast/issues/new"&gt;report&lt;/a&gt;
"                      any bugs, feature requests, or general feedback
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Join the &lt;a href="https://cppalliance.org/slack/"&gt;&lt;strong&gt;C++ Slack Workspace&lt;/strong&gt;&lt;/a&gt; for free
"                      and chat with us in the #beast and #boost channels
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Don't forget to &lt;a href="https://github.com/boostorg/beast"&gt;star
"                      the repository&lt;/a&gt; ⭐!
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                More tutorials, code like the pros!
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/using_io/asio_refresher.html"&gt;Networking
"                      Refresher&lt;/a&gt; teaches you from the ground up.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Updated &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/using_io/writing_composed_operations/echo.html"&gt;Asynchronous
"                      Echo&lt;/a&gt; example
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Updated &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/using_io/writing_composed_operations/detect_ssl.html"&gt;&lt;strong&gt;Detect SSL&lt;/strong&gt;&lt;/a&gt; composed operation
"                      tutorial
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://www.boost.org/libs/beast/example/websocket/server/chat-multi"&gt;websocket-chat-multi&lt;/a&gt;
"                      threaded chat server with a JavaScript &lt;a href="https://www.boost.org/libs/beast/example/websocket/server/chat-multi/chat_client.html"&gt;browser
"                      client&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__basic_stream.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;basic_stream&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__tcp_stream.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;tcp_stream&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; offer:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Timeouts: &lt;code&gt;&lt;span class="identifier"&gt;async_read_some&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;async_write_some&lt;/span&gt;&lt;/code&gt;
"                      complete with &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__error.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;error&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;timeout&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; on expiration!
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Traffic-shaping policies &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__simple_rate_policy.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;simple&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__unlimited_rate_policy.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;unlimited&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;, or a user-defined
"                      &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/concepts/RatePolicy.html"&gt;&lt;em&gt;RatePolicy&lt;/em&gt;&lt;/a&gt;!
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Put the strand directly on the socket using &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2018/p1322r0.html"&gt;P1322R0&lt;/a&gt;,
"                      no more &lt;code&gt;&lt;span class="identifier"&gt;bind_executor&lt;/span&gt;&lt;/code&gt;
"                      at call sites!
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Base classes &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__async_base.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;async_base&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__stable_async_base.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;stable_async_base&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; and handle
"                all composed operation boilerplate for you.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/ref/boost__beast__ssl_stream.html"&gt;&lt;code&gt;&lt;span class="identifier"&gt;ssl_stream&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; provides a movable,
"                assignable SSL stream with a flat write optimization.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                All asynchronous operations use Asio's &lt;code&gt;&lt;span class="identifier"&gt;async_initiate&lt;/span&gt;&lt;/code&gt;
"                for efficient integration with Coroutines TS.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                ⚡ &lt;strong&gt;&lt;em&gt;faster compilation&lt;/em&gt;&lt;/strong&gt;,
"                define &lt;code&gt;&lt;span class="identifier"&gt;BOOST_BEAST_SEPARATE_COMPILATION&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="preprocessor"&gt;#include&lt;/span&gt; &lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;beast&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;src&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                in one of your .cpp files!
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
"                Notes&lt;/a&gt; for a complete list of changes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/91"&gt;#91&lt;/a&gt;: cleanup of stack if creating ucontext fails
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/97"&gt;#97&lt;/a&gt;: add missing BOST_CONTEXT_DECL in stack_context
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/98"&gt;#98&lt;/a&gt;: fix jump_i386_sysv_macho writing garbage to the x87
"                control word
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/coroutine2/"&gt;Coroutine2&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/coroutine2/issues/28"&gt;#28&lt;/a&gt;: don't crash on pthread_cancel
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New macro &lt;a href="https://www.boost.org/libs/dll/BOOST_DLL_USE_STD_FS.html"&gt;BOOST_DLL_USE_STD_FS&lt;/a&gt;.
"                Define it to &lt;code&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;/code&gt; to make
"                the Boost.DLL use C++17's &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;system_error&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt; (&lt;a href="https://github.com/boostorg/dll/issues/21"&gt;#21&lt;/a&gt;). Note that
"                exception types change from &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;system&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;system_error&lt;/span&gt;&lt;/code&gt;
"                to &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;system_error&lt;/span&gt;&lt;/code&gt;, so make sure to update
"                &lt;code&gt;&lt;span class="keyword"&gt;catch&lt;/span&gt;&lt;/code&gt;es.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Significant rewrite of the dynamic loadable detection and decoration
"                logic. More precise errors are now reported in case of loading failures.
"                Added &lt;code&gt;&lt;span class="identifier"&gt;shared_library&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;decorate&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; function that returns a decorated
"                path to the library without doing any platform related queries and
"                detections. Prefer using &lt;code&gt;&lt;span class="identifier"&gt;shared_library&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;load&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;shared_library&lt;/span&gt;&lt;/code&gt;
"                constructors for better results (many thanks to Loïc Touraine for
"                the work &lt;a href="https://github.com/boostorg/dll/pull/23"&gt;PR#23&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                CI hardening, docs updates, typos fixes, cleanups and many portability
"                fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dynamic_bitset/"&gt;Dynamic Bitset&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disabled hardware-assisted popcount (added in 1.69.0) on MSVC due
"                to undefined behavior on older CPUs. (&lt;a href="https://github.com/boostorg/dynamic_bitset/issues/33"&gt;#33&lt;/a&gt; &lt;a href="https://github.com/boostorg/dynamic_bitset/pull/35"&gt;PR#35&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fiber/"&gt;Fiber&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/191"&gt;#191&lt;/a&gt;: ignore unused argument warning
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/fiber/issues/196"&gt;#196&lt;/a&gt;: fix high contention on remote_ready_splk_
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a few instances of dereferencing &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;end&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;
"                implementation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed program termination in case of out of memory condition in directory
"                iterators constructors and operations accepting a reference to &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;. (&lt;a href="https://github.com/boostorg/filesystem/issues/58"&gt;#58&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed possible linking errors caused by missing definitions of static
"                members of &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;.
"                (&lt;a href="https://svn.boost.org/trac/boost/ticket/12759"&gt;#12759&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed possible use of uninitialized data in directory iterator increment
"                operation on Linux.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for movability to directory iterators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added file status query overloads for &lt;code&gt;&lt;span class="identifier"&gt;directory_entry&lt;/span&gt;&lt;/code&gt;.
"                This avoids a relatively expensive OS query when file status is requested
"                for a result of dereferencing a directory iterator. (&lt;a href="https://github.com/boostorg/filesystem/pull/55"&gt;PR#55&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reworked &lt;code&gt;&lt;span class="identifier"&gt;current_path&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;read_symlink&lt;/span&gt;&lt;/code&gt;
"                implementation to avoid possible memory exhaustion on broken or tampered
"                with filesystems. The functions now have an internal limit of the
"                path size they will accept from the OS, which is currently 16 MiB.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Increased the size of the internal buffer used by &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/integer/"&gt;Integer&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Extended Euclidean Algorithm and Modular Multiplicative Inverse
"                function. (Nick Thompson, &lt;a href="https://github.com/boostorg/integer/pull/11"&gt;PR#11&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added support for generating another log file name before collecting
"                      the file in the text file sink backend. This allows to combine
"                      appending to an existing log file with timestamps and file
"                      counters in log filenames, and, consequently, file collection
"                      in general.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add Lanczos smoothing derivatives
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Move &lt;code&gt;&lt;span class="identifier"&gt;numerical_differentiation&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                      from &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;math&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;tools&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;math&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;differentiation&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;finite_difference&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add mean, variance, skewness, kurtosis, median, Gini coefficient,
"                      and median absolute deviation to &lt;code&gt;&lt;span class="identifier"&gt;tools&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;univariate_statistics&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add correlation coefficients and covariance to &lt;code&gt;&lt;span class="identifier"&gt;tools&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;bivariate_statistics&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add absolute Gini coefficient, Hoyer sparsity, oracle SNR,
"                      and the &lt;em&gt;M&lt;/em&gt;[sub 2]&lt;em&gt;M&lt;/em&gt;[sub
"                      4] SNR estimator to &lt;code&gt;&lt;span class="identifier"&gt;tools&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;signal_statistics&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add total variation, l0, l1, l2, and sup norms, as well as
"                      corresponding distance functions to &lt;code&gt;&lt;span class="identifier"&gt;tools&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;norms&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add move constructors for polynomials, support complex coefficients,
"                      add &lt;code&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;prime&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;integrate&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                      methods.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add &lt;code&gt;&lt;span class="identifier"&gt;quadratic_roots&lt;/span&gt;&lt;/code&gt;
"                      to &lt;code&gt;&lt;span class="identifier"&gt;tools&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;roots&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add support for complex-valued functions to Newton's method
"                      in &lt;code&gt;&lt;span class="identifier"&gt;roots&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Add Catmull-Rom interpolator.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/mp11/"&gt;Mp11&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Renamed &lt;code&gt;&lt;span class="identifier"&gt;mp_invoke&lt;/span&gt;&lt;/code&gt;
"                to &lt;code&gt;&lt;span class="identifier"&gt;mp_invoke_q&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_similar&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_set_union&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;mp_set_intersection&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;mp_set_difference&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_not_fn&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_transform_first&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;mp_transform_second&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;mp_transform_third&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_filter&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_eval_if_not&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;mp_eval_or&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;mp_valid_q&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_back&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;mp_pop_back&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;size_type&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;difference_type&lt;/span&gt;&lt;/code&gt; are now defined
"                as the allocator's same-named types. This will not make any difference
"                in the vast majority of cases, but allows for some degree of control
"                of resulting internal structures via user-defined allocator types
"                (see issue &lt;a href="https://github.com/boostorg/multi_index/issues/17"&gt;#17&lt;/a&gt; for motivation). For the moment being,
"                this change is not documented in the reference section (i.e., it
"                has semi-official status).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multiprecision/"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix various conversion issues in the traits classes, check for compatibility
"                with Boost.Optional.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Prevent instantiation of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;numeric_limits&lt;/span&gt;&lt;/code&gt;
"                on any old type when checking for convertibility. See &lt;a href="https://github.com/boostorg/multiprecision/issues/98"&gt;#98&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update variable precision code to account for arbitrary precision
"                integers. See &lt;a href="https://github.com/boostorg/multiprecision/issues/103"&gt;#103&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for XML serialization archives.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bug in fixed precision iostream formatting in &lt;code&gt;&lt;span class="identifier"&gt;mpf_float&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;mpfr_float&lt;/span&gt;&lt;/code&gt;. See
"                &lt;a href="https://github.com/boostorg/multiprecision/issues/113"&gt;#113&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add more overloads for special functions which are better handled
"                natively by MPFR.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bug in generic &lt;code&gt;&lt;span class="identifier"&gt;exp&lt;/span&gt;&lt;/code&gt;
"                implementation which could cause invariant failure.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed generic conversion from float to integer to avoid undefined
"                behaviour. See &lt;a href="https://github.com/boostorg/multiprecision/issues/110"&gt;#110&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved handling of stateful allocators and allocator propagation
"                traits, after an error reported by Billy O'Neal (&lt;a href="https://github.com/boostorg/poly_collection/pull/9"&gt;PR#9&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a potentially serious bug with an internal cache structure.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/spirit/"&gt;Spirit&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed use of deprecated &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;detail&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                header. &lt;a href="https://github.com/boostorg/spirit/pull/432"&gt;PR#432&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                X3
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Integer parsers should now handle user defined types. &lt;a href="https://github.com/boostorg/spirit/pull/429"&gt;PR#429&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;&lt;span class="identifier"&gt;check_overflow&lt;/span&gt;&lt;/code&gt;
"                      trait default implementation now relies on &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;numeric_limits&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_bounded&lt;/span&gt;&lt;/code&gt;
"                      instead of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;integer_traits&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_integral&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Removed sequence into plain parsing. Now it triggers a compile
"                      time error instead of silently parsing the the sequence and
"                      taking the last value as a result. &lt;a href="https://github.com/boostorg/spirit/pull/439"&gt;PR#439&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed &lt;code&gt;&lt;span class="identifier"&gt;parse_rule&lt;/span&gt;&lt;/code&gt;
"                      instantiation with &lt;code&gt;&lt;span class="identifier"&gt;BOOST_SPIRIT_INSTANTIATE&lt;/span&gt;&lt;/code&gt;
"                      when:
"                      &lt;ul&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            A rule has no attribute. &lt;a href="https://github.com/boostorg/spirit/pull/455"&gt;PR#455&lt;/a&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            An actual attribute is not of type a rule was declared
"                            with. &lt;a href="https://github.com/boostorg/spirit/pull/456"&gt;PR#456&lt;/a&gt; &lt;a href="https://github.com/boostorg/spirit/issues/457"&gt;#457&lt;/a&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                      &lt;/ul&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      A &lt;strong&gt;huge&lt;/strong&gt; thanks goes out to
"                      &lt;a href="https://github.com/Xeverous"&gt;Xeverous&lt;/a&gt; for
"                      reporting a regression in &lt;a href="https://github.com/boostorg/spirit/issues/453"&gt;#453&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed unneded attribute synthesization and no-transformation
"                      attribute reference pass-through in rules. &lt;a href="https://github.com/boostorg/spirit/issues/444"&gt;#444&lt;/a&gt; &lt;a href="https://github.com/boostorg/spirit/pull/449"&gt;PR#449&lt;/a&gt; &lt;a href="https://github.com/boostorg/spirit/pull/452"&gt;PR#452&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Removed broken 1.0#INF parser. It was poorly documented and
"                      never worked. &lt;a href="https://github.com/boostorg/spirit/issues/415"&gt;#415&lt;/a&gt; &lt;a href="https://github.com/boostorg/spirit/pull/458"&gt;PR#458&lt;/a&gt; &lt;a href="https://svn.boost.org/trac/boost/ticket/8699"&gt;#8699&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The undocumented &lt;code&gt;&lt;span class="identifier"&gt;make_attribute&lt;/span&gt;&lt;/code&gt;
"                      trait was removed due to bugs &lt;a href="https://github.com/boostorg/spirit/pull/449"&gt;PR#449&lt;/a&gt;
"      and to simplify
"                      attribute transformation. &lt;a href="https://github.com/boostorg/spirit/pull/460"&gt;PR#460&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      If you were using it to workaround bugs in attribute transformation
"                      - they should not be needed anymore as of this release.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The integer value parser now respects &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;numeric_limits&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;digits10&lt;/span&gt;&lt;/code&gt;
"                      value. &lt;a href="https://github.com/boostorg/spirit/pull/469"&gt;PR#469&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed underflow check for a &lt;code&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;Min&lt;/span&gt; &lt;span class="special"&gt;%&lt;/span&gt;
"                      &lt;span class="identifier"&gt;Base&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;
"                      &lt;span class="special"&gt;==&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;/code&gt;
"                      corner case. &lt;a href="https://github.com/boostorg/spirit/pull/469"&gt;PR#469&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed an output value on overflow of IgnoreOverflowDigits=true
"                      integer parser. &lt;a href="https://github.com/boostorg/spirit/pull/470"&gt;PR#470&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Container attribute elements were copyied, but not moved. &lt;a href="https://github.com/boostorg/spirit/pull/472"&gt;PR#472&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Special handling of references in &lt;code&gt;&lt;span class="identifier"&gt;transform_attribute&lt;/span&gt;&lt;/code&gt;
"                      was removed. &lt;a href="https://github.com/boostorg/spirit/pull/480"&gt;PR#480&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                V2
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Macro name collisions and namespace conflicts with Boost.Endian
"                      were fixed. &lt;a href="https://github.com/boostorg/spirit/pull/349"&gt;PR#349&lt;/a&gt; &lt;a href="https://github.com/boostorg/spirit/pull/482"&gt;PR#482&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      utree
"                      &lt;ul&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            Fixed UB in tag getter due to left shift of negative
"                            value. &lt;a href="https://github.com/boostorg/spirit/pull/423"&gt;PR#423&lt;/a&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            Fixed double-conversion (&lt;code&gt;&lt;span class="identifier"&gt;spirit&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;
"                            &lt;span class="special"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;
"                            &lt;span class="special"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="identifier"&gt;spirit&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;/code&gt;).
"                            &lt;a href="https://github.com/boostorg/spirit/pull/462"&gt;PR#462&lt;/a&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                      &lt;/ul&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Qi
"                      &lt;ul&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            Added static asserts for rule skipper type problems.
"                            &lt;a href="https://github.com/boostorg/spirit/pull/427"&gt;PR#427&lt;/a&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            The &lt;code&gt;&lt;span class="identifier"&gt;check_overflow&lt;/span&gt;&lt;/code&gt;
"                            trait default implementation now relies on &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;numeric_limits&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_bounded&lt;/span&gt;&lt;/code&gt; instead
"                            of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;integer_traits&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_integral&lt;/span&gt;&lt;/code&gt;
"                            &lt;a href="https://github.com/boostorg/spirit/pull/429"&gt;PR#429&lt;/a&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            Integer parsers should now handle user defined types.
"                            &lt;a href="https://github.com/boostorg/spirit/pull/429"&gt;PR#429&lt;/a&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            &lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;&lt;span class="identifier"&gt;check_overflow&lt;/span&gt;&lt;/code&gt; trait
"                            default implementation now relies on &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;numeric_limits&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_bounded&lt;/span&gt;&lt;/code&gt;
"                            instead of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;integer_traits&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_integral&lt;/span&gt;&lt;/code&gt;.
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            Removed broken 1.0#INF parser. It was poorly documented
"                            and never worked. &lt;a href="https://github.com/boostorg/spirit/issues/415"&gt;#415&lt;/a&gt; &lt;a href="https://github.com/boostorg/spirit/pull/458"&gt;PR#458&lt;/a&gt; &lt;a href="https://svn.boost.org/trac/boost/ticket/8699"&gt;#8699&lt;/a&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            The undocumented &lt;code&gt;&lt;span class="identifier"&gt;make_attribute&lt;/span&gt;&lt;/code&gt;
"                            trait was merged into &lt;code&gt;&lt;span class="identifier"&gt;transform_attribute&lt;/span&gt;&lt;/code&gt;
"                            trait. &lt;a href="https://github.com/boostorg/spirit/pull/471"&gt;PR#471&lt;/a&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            The &lt;code&gt;&lt;span class="identifier"&gt;pre_transform&lt;/span&gt;&lt;/code&gt;,
"                            &lt;code&gt;&lt;span class="identifier"&gt;post_transform&lt;/span&gt;&lt;/code&gt;,
"                            and &lt;code&gt;&lt;span class="identifier"&gt;fail_transform&lt;/span&gt;&lt;/code&gt;
"                            utility functions were removed in favor of directly using
"                            &lt;code&gt;&lt;span class="identifier"&gt;pre&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;post&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;fail&lt;/span&gt;&lt;/code&gt; of the transform
"                            trait. &lt;a href="https://github.com/boostorg/spirit/pull/467"&gt;PR#467&lt;/a&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            The integer value parser now respects &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;numeric_limits&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;digits10&lt;/span&gt;&lt;/code&gt;
"                            value. &lt;a href="https://github.com/boostorg/spirit/pull/469"&gt;PR#469&lt;/a&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            Fixed underflow check for a &lt;code&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;Min&lt;/span&gt; &lt;span class="special"&gt;%&lt;/span&gt;
"                            &lt;span class="identifier"&gt;Base&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;
"                            &lt;span class="special"&gt;==&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;/code&gt;
"                            corner case. &lt;a href="https://github.com/boostorg/spirit/pull/469"&gt;PR#469&lt;/a&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            Fixed an output value on overflow of IgnoreOverflowDigits=true
"                            integer parser. &lt;a href="https://github.com/boostorg/spirit/pull/470"&gt;PR#470&lt;/a&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            Special handling of references in &lt;code&gt;&lt;span class="identifier"&gt;transform_attribute&lt;/span&gt;&lt;/code&gt;
"                            was removed. &lt;a href="https://github.com/boostorg/spirit/pull/480"&gt;PR#480&lt;/a&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                      &lt;/ul&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Lex
"                      &lt;ul&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            Fixed UB in default constructor of lexer with user specified
"                            token type. &lt;a href="https://github.com/boostorg/spirit/pull/420"&gt;PR#420&lt;/a&gt;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                      &lt;/ul&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Classic:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed &lt;code&gt;&lt;span class="identifier"&gt;position_iterator&lt;/span&gt;&lt;/code&gt;
"                      forming reference to local when the underlying iterator dereference
"                      operator returns a non-reference type. &lt;a href="https://github.com/boostorg/spirit/pull/422"&gt;PR#422&lt;/a&gt; &lt;a href="https://svn.boost.org/trac/boost/ticket/9737"&gt;#9737&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Build fix for iOS 32-bit ARM (many thanks to Ivan Ponomarev for providing
"                the fix &lt;a href="https://github.com/boostorg/stacktrace/pull/70"&gt;PR#70&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed multiple typos, warnings and updated the docs.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.test v3.10 see the &lt;a href="https://www.boost.org/libs/test/doc/html/boost_test/change_log.html"&gt;Changes
"                log&lt;/a&gt; for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Breaking changes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Boost.Test &lt;code&gt;&lt;span class="identifier"&gt;minimal&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                      is now showing a deprecation warning,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Change in floating point comparison may fail tests that were
"                      silently not using the floating point comparison logic prior
"                      to this release,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Internal API change to &lt;code&gt;&lt;span class="identifier"&gt;unit_test_log_formatter&lt;/span&gt;&lt;/code&gt;,
"                      see detailed change log,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New feature:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Floating point comparison has been extended to capture non-floating
"                      point and arithmetic operands: expressions like &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="number"&gt;3.0001&lt;/span&gt; &lt;span class="special"&gt;==&lt;/span&gt;
"                      &lt;span class="number"&gt;3&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;
"                      now use floating point support of Boost.Test,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Custom datasets are not required to declare the &lt;code&gt;&lt;span class="identifier"&gt;sample&lt;/span&gt;&lt;/code&gt; type field anymore,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Extending template test cases from &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;tuple&lt;/span&gt;&lt;/code&gt;
"                      to any variadic definition,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Windows support for timed tests,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Timed test on test-suites,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Removed dependency to Boost.Timer,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New macro &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_INFO_SCOPE&lt;/span&gt;&lt;/code&gt;
"                      for scoped context declaration,
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improved &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_CONTEXT&lt;/span&gt;&lt;/code&gt;
"                      syntax
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes and pull requests:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Trac tickets: &lt;a href="https://svn.boost.org/trac/boost/ticket/7397"&gt;#7397&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/9434"&gt;#9434&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13106"&gt;#13106&lt;/a&gt;, &lt;a href="https://svn.boost.org/trac/boost/ticket/13418"&gt;#13418&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GitHub Issues: &lt;a href="https://github.com/boostorg/test/issues/133"&gt;#133&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/138"&gt;#138&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/141"&gt;#141&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/157"&gt;#157&lt;/a&gt;,
"                      &lt;a href="https://github.com/boostorg/test/issues/160"&gt;#160&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/174"&gt;#174&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/176"&gt;#176&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/177"&gt;#177&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/180"&gt;#180&lt;/a&gt;,
"                      &lt;a href="https://github.com/boostorg/test/issues/181"&gt;#181&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/194"&gt;#194&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/196"&gt;#196&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/198"&gt;#198&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/199"&gt;#199&lt;/a&gt;,
"                      &lt;a href="https://github.com/boostorg/test/issues/202"&gt;#202&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/203"&gt;#203&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/204"&gt;#204&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GitHub Pull Requests: &lt;a href="https://github.com/boostorg/test/pull/171"&gt;PR#171&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/172"&gt;PR#172&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/182"&gt;PR#182&lt;/a&gt;,
"                      &lt;a href="https://github.com/boostorg/test/pull/183"&gt;PR#183&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/184"&gt;PR#184&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/190"&gt;PR#190&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/195"&gt;PR#195&lt;/a&gt;,
"                      &lt;a href="https://github.com/boostorg/test/pull/195"&gt;PR#195&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/197"&gt;PR#197&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/205"&gt;PR#205&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_index/"&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for the GHS C++ compiler added (many thanks to Brandon Castellano
"                for providing the patch &lt;a href="https://github.com/boostorg/type_index/pull/28"&gt;PR#28&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Optimized string and type comparisons (many thanks to Andrey Semashev
"                for providing the patch &lt;a href="https://github.com/boostorg/type_index/pull/23"&gt;PR#23&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed clang-win compilation (many thanks to Peter Dimov for providing
"                the patch &lt;a href="https://github.com/boostorg/type_index/pull/25"&gt;PR#25&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                CI hardening.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_traits/"&gt;TypeTraits&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added is_bounded_array and is_unbounded_array (Glen Fernandes).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added copy_reference and copy_cv_ref (Glen Fernandes).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved support for msvc with /clr option.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Misc compiler compatibility fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Many cleanups and internal improvements, many thanks to Nikita Kniazev
"                (&lt;a href="https://github.com/boostorg/variant/pull/55"&gt;PR#55&lt;/a&gt;, &lt;a href="https://github.com/boostorg/variant/pull/56"&gt;PR#56&lt;/a&gt;, &lt;a href="https://github.com/boostorg/variant/pull/57"&gt;PR#57&lt;/a&gt;) and Louis Dionne
"                (&lt;a href="https://github.com/boostorg/variant/pull/51"&gt;PR#51&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                CI hardening.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/numeric/ublas/"&gt;uBlas&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Addition of tensor framework (many thanks to Cem Bassoy &lt;a href="https://github.com/boostorg/ublas/pull/65"&gt;PR#65&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Addition of basic OpenCL support (many thanks to Fady Essam &lt;a href="https://github.com/boostorg/ublas/pull/59"&gt;PR#59&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Integration of basic benchmark suite (many thanks to Stefan Seefeld
"                &lt;a href="https://github.com/boostorg/ublas/pull/57"&gt;PR#57&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                CI integration and hardening
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_70_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 4.0.1, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_70_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Daniel James, Vladimir Prus, Marshall Clow and Michael Caisse managed this
"      release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Tue, 27 Apr 2021 03:13:52 +0000
-quickbook
"feed/history/boost_1_70_0.qbk
-update_count
=7
)
(feed/history/boost_1_71_0.qbk
-item
"<item><title>Version 1.71.0</title><link>https://www.boost.org/users/history/version_1_71_0.html</link><guid>https://www.boost.org/users/history/version_1_71_0.html</guid><pubDate>Mon, 19 Aug 2019 15:31:22 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_71_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant2/"&gt;Variant2&lt;/a&gt;:&lt;/span&gt; A never-valueless,
"          strong guarantee implementation of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;variant&lt;/span&gt;&lt;/code&gt;,
"          from Peter Dimov.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_71_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/align/"&gt;Align&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for any integral type in the integral versions of &lt;code&gt;&lt;span class="identifier"&gt;align_up&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;align_down&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Revised the implementation of &lt;code&gt;&lt;span class="identifier"&gt;aligned_allocator&lt;/span&gt;&lt;/code&gt;
"                to no longer require a specialization for &lt;code&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Define &lt;code&gt;&lt;span class="identifier"&gt;propagate_on_container_move_assignment&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;is_always_equal&lt;/span&gt;&lt;/code&gt;
"                in &lt;code&gt;&lt;span class="identifier"&gt;aligned_allocator&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved performance slightly by eliminating a redundant move construction
"                when completed handlers are dispatched.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Eliminated a compiler warning by annotating a &lt;code&gt;&lt;span class="keyword"&gt;case&lt;/span&gt;&lt;/code&gt;
"                fall-through in the free function &lt;code&gt;&lt;span class="identifier"&gt;connect&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; implementation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed the &lt;code&gt;&lt;span class="identifier"&gt;is_&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;span class="identifier"&gt;_buffer_sequence&lt;/span&gt;&lt;/code&gt; detection traits
"                for user-defined sequence types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some Windows-specific warnings about an incompatible pointer
"                cast when obtaining the &lt;code&gt;&lt;span class="identifier"&gt;CancelIoEx&lt;/span&gt;&lt;/code&gt;
"                entry point.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to automatically set the defaults when opening a serial port
"                on Windows.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the serial port &lt;code&gt;&lt;span class="identifier"&gt;get_option&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; member function to be const.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a name hiding issue with the WinRT stream-oriented socket backend's
"                &lt;code&gt;&lt;span class="identifier"&gt;shutdown&lt;/span&gt;&lt;/code&gt; function.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Applied a minor fix to the documentation for &lt;code&gt;&lt;span class="identifier"&gt;is_dynamic_buffer&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added some support for Haiku OS.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added wolfSSL compatability.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to require C++17 or later for coroutines TS support with
"                clang.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a doxygen generation problem in the tutorial.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured example programs are correctly incorporated into the documentation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/any/"&gt;Any&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Static initialization of the default constructed &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;any&lt;/span&gt;&lt;/code&gt;
"                is now possible.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed performance regression in assignment on a compilers without
"                move-semantics.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This version consists mostly of bug fixes and performance improvements.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Substantial work included for the split compilation mode, to reduce
"                compile time when defining &lt;code&gt;&lt;span class="identifier"&gt;BOOST_BEAST_SEPARATE_COMPILATION&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                We'd love to know how you or your company use Beast, consider adding
"                an item to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
"                and Individuals Using Beast&lt;/a&gt; list.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
"                Notes&lt;/a&gt; for a complete list of changes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/circular_buffer/"&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct doxygen generated reference to no longer show internal members.
"                (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Eliminate ubsan warning on &lt;code&gt;&lt;span class="identifier"&gt;add&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;sub&lt;/span&gt;&lt;/code&gt;. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix incorrect check in &lt;code&gt;&lt;span class="identifier"&gt;is_uninitialized&lt;/span&gt;&lt;/code&gt;.
"                (Niklas Fejes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/container/"&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/pull/47"&gt;GitHub
"                      #47: &lt;em&gt;"added alignment specification for small_vector"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/88"&gt;GitHub
"                      #88: &lt;em&gt;"Implement C++17 MoveAssignable requirements
"                      for self-move assignments"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/107"&gt;GitHub
"                      #107: &lt;em&gt;"Alignment ignored in resource_adaptor"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/pull/109"&gt;GitHub
"                      #109: &lt;em&gt;"Get rid of integer overflow in copy_move_algo.hpp
"                      (-fsanitize=integer)"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/pull/110"&gt;GitHub
"                      #110: &lt;em&gt;"Avoid gcc 9 deprecated copy warnings
"                      in new_allocator.hpp"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/112"&gt;GitHub
"                      #112: &lt;em&gt;"vector::resize() compilation error with
"                      msvc-10..12: data is not a member of boost::detail::aligned_storage"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/114"&gt;GitHub
"                      #114: &lt;em&gt;"Fix small_vector noexcept specification"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/116"&gt;GitHub
"                      #116: &lt;em&gt;"MSVC + boost 1.70 compilation error when
"                      windows.h is already included (detail/thread_mutex.hpp)"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/117"&gt;GitHub
"                      #117: &lt;em&gt;"flat_map/map::insert_or_assign with hint
"                      has wrong return types"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/118"&gt;GitHub
"                      #118: &lt;em&gt;"Non-unique inplace_set_difference used
"                      in in flat_tree_merge_unique and iterator invalidation in insert_unique"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/122"&gt;GitHub
"                      #122: &lt;em&gt;"Fix has_trivial_destructor_after_move"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/123"&gt;GitHub
"                      #123: &lt;em&gt;"With heterogeneous lookup, &lt;code&gt;&lt;span class="identifier"&gt;equal_range&lt;/span&gt;&lt;/code&gt; can result in
"                      a range with length greater than 1"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;deque&lt;/code&gt; can now
"                have options, using &lt;code&gt;deque_options&lt;/code&gt;.
"                The block size/bytes can be be specified.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;static_vector&lt;/code&gt;
"                can now have options, using &lt;code&gt;static_vector_options&lt;/code&gt;.
"                Alignment and throwing behaviour can be be specified.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;small_vector&lt;/code&gt;
"                can now have options, using &lt;code&gt;small_vector_options&lt;/code&gt;.
"                Alignment and growth factor can be be specified.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for RISC-V LP64D
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/72"&gt;#72&lt;/a&gt;: Fix ABI violation on ppc64 ELFv2
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/99"&gt;#99&lt;/a&gt;: cleanup of stack if creating ucontext fails
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/conversion/"&gt;Conversion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added functions &lt;code&gt;&lt;span class="identifier"&gt;alloc_construct&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;alloc_construct_n&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;alloc_destroy&lt;/span&gt;&lt;/code&gt;, and
"                &lt;code&gt;&lt;span class="identifier"&gt;alloc_destroy_n&lt;/span&gt;&lt;/code&gt; in
"                &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;alloc_construct&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; for allocator aware and exception
"                safe construction and destruction of objects and arrays. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added constexpr functions &lt;code&gt;&lt;span class="identifier"&gt;first_scalar&lt;/span&gt;&lt;/code&gt;
"                in &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;first_scalar&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; for obtaining a pointer to the
"                first scalar element of an array. Given a pointer of type &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt;
"                they return a pointer of type &lt;code&gt;&lt;span class="identifier"&gt;remove_all_extents_t&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;*&lt;/span&gt;&lt;/code&gt;. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added class template &lt;code&gt;&lt;span class="identifier"&gt;noinit_adaptor&lt;/span&gt;&lt;/code&gt;
"                in &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;noinit_adaptor&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; which is an allocator adaptor
"                that converts any allocator into one whose &lt;code&gt;&lt;span class="identifier"&gt;construct&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;ptr&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; performs default initialization
"                via placement new, and whose &lt;code&gt;&lt;span class="identifier"&gt;destroy&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;ptr&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; invokes the &lt;code&gt;&lt;span class="identifier"&gt;value_type&lt;/span&gt;&lt;/code&gt;
"                destructor directly. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added class template &lt;code&gt;&lt;span class="identifier"&gt;default_allocator&lt;/span&gt;&lt;/code&gt;
"                in &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;default_allocator&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, which can serve as a minimal
"                default allocator that has interface similar to C++20 &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator&lt;/span&gt;&lt;/code&gt;, supports configurations
"                with disabled exceptions and does not have &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;/code&gt;
"                as an associated namespace. The allocator uses &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;
"                &lt;span class="keyword"&gt;new&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;
"                &lt;span class="keyword"&gt;delete&lt;/span&gt;&lt;/code&gt; for allocation. (Glen
"                Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;uncaught_exceptions&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; header, added workarounds for
"                better compatibility with QNX SDP 7.0 when libc++/libc++abi libraries
"                are used. (Andrey Semashev, &lt;a href="https://github.com/boostorg/core/issues/59"&gt;#59&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;detail&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;sp_typeinfo&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; header is now marked as deprecated
"                and will be removed in a future release. &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;typeinfo&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                should be used instead. (Peter Dimov)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dynamic_bitset/"&gt;Dynamic Bitset&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled hardware-assisted popcount on MSVC (&lt;a href="https://github.com/boostorg/dynamic_bitset/pull/38"&gt;PR#38&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for boost::hash and std::hash (&lt;a href="https://github.com/boostorg/dynamic_bitset/pull/45"&gt;PR#45&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support copy-initialization with default constructor (&lt;a href="https://github.com/boostorg/dynamic_bitset/pull/48"&gt;PR#48&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/endian/"&gt;Endian&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clarified requirements on the value type template parameter
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for &lt;code&gt;&lt;span class="keyword"&gt;float&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="keyword"&gt;double&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;endian_load&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;endian_store&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated &lt;code&gt;&lt;span class="identifier"&gt;endian_reverse&lt;/span&gt;&lt;/code&gt;
"                to correctly support all non-&lt;code&gt;&lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;/code&gt;
"                integral types
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Moved deprecated names to the deprecated header &lt;code&gt;&lt;span class="identifier"&gt;endian&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/fiber/"&gt;Fiber&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                documentation for shared_work updated
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed incorrect &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
"                returned from directory iterator increment when &lt;code&gt;&lt;span class="identifier"&gt;readdir_r&lt;/span&gt;&lt;/code&gt;
"                is used.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                For &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;, fixed rvalue-aware
"                &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;/code&gt;
"                return type to return an rvalue instead of rvalue reference. This
"                fixes leaving a dangling reference in the user's code if the result
"                of &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;/code&gt;
"                is bound to a const reference. (&lt;a href="https://github.com/boostorg/filesystem/issues/110"&gt;#110&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixes for better compatibility with Windows CE. (&lt;a href="https://github.com/boostorg/filesystem/pull/24"&gt;PR#24&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added minimal support for CMake. (&lt;a href="https://github.com/boostorg/filesystem/pull/106"&gt;PR#106&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/flyweight/index.html"&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/histogram/index.html"&gt;Histogram&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Support for thread-safe storages and new thread-safe accumulators
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Support for compiling without exceptions/RTTI (increases performance
"                      by 10-20 %) (with Glen Fernandes)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Performance improvements for 1D and 2D histograms
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      boost::histogram::indexed now returns forward iterator range
"                      instead of input iterator range
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      boost::histogram::indexed_range::accessor is now non-copyable
"                      and acts like reference to cell value, making more algorithms
"                      from the C++ stdlib work
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      boost::histogram::algorithm::reduce with new slice option and
"                      option fusion
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      boost::histogram::algorithm::project accepts runtime indices
"                      for static histograms
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug Fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      boost::histogram::algorithm::reduce also works on histograms
"                      that have some axis types without reduction support
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      boost::histogram::axis::traits::update now works correctly
"                      for boost::histogram::axis::variant
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Other:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      100 % test coverage
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Reduced internal Boost dependencies
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improved documentation and examples
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Guaranteed no-throw moves for all builtin axis types
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Compile cleanly at higher warning levels
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/histogram/doc/html/histogram/history.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/iostreams/"&gt;IoStreams&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed processing of multi-stream files (&lt;a href="https://github.com/boostorg/iostreams/pull/87"&gt;PR#87&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for multi-threaded LZMA (&lt;a href="https://github.com/boostorg/iostreams/pull/95"&gt;PR#95&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/interprocess/"&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/interprocess/pull/85"&gt;GitHub
"                #85 (&lt;em&gt;"warning: Implicit conversion loses integer precision"&lt;/em&gt;)&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/interprocess/pull/86"&gt;GitHub
"                #86 (&lt;em&gt;"warning: Possible misuse of comma operator"&lt;/em&gt;)&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/intrusive/"&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/intrusive/pull/42"&gt;GitHub
"                #42: &lt;em&gt;Documentation does not describe treap priority_of_value
"                changes&lt;/em&gt;&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/intrusive/pull/43"&gt;GitHub
"                #43: &lt;em&gt;Fix tests with BOOST_INTRUSIVE_VARIADIC_TEMPLATES
"                enabled&lt;/em&gt;&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/intrusive/pull/45"&gt;GitHub
"                #45: &lt;em&gt;Disable variadic templates for MSVC-12 to avoid ICEs&lt;/em&gt;&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lexical_cast/"&gt;LexicalCast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added tests for &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;
"                conversions &lt;a href="https://github.com/boostorg/lexical_cast/issues/25"&gt;#25&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work, including &lt;a href="https://github.com/boostorg/lexical_cast/issues/28"&gt;#28&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improved support for C++17 &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string_view&lt;/span&gt;&lt;/code&gt;
"                      in &lt;code&gt;&lt;span class="identifier"&gt;basic_formatting_ostream&lt;/span&gt;&lt;/code&gt;.
"                      The string view can now participate in character code conversion
"                      on output.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added &lt;code&gt;&lt;span class="identifier"&gt;auto_newline&lt;/span&gt;&lt;/code&gt;
"                      formatter and stream manipulator. It can be used to ensure
"                      that formatted output always ends with a newline while avoiding
"                      duplicate newlines.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      In the output stream, text file and text multi-file sink backends
"                      added support for configuring behavior with regard to appending
"                      a trailing newline to every formatted log record. Use &lt;code&gt;&lt;span class="identifier"&gt;auto_newline_mode&lt;/span&gt;&lt;/code&gt; named parameter
"                      of the backend constructor or call the &lt;code&gt;&lt;span class="identifier"&gt;set_auto_newline_mode&lt;/span&gt;&lt;/code&gt;
"                      method on the sink backend.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;strong&gt;Note:&lt;/strong&gt; The default behavior
"                      with regard to trailing newlines added by sink backends has
"                      changed slightly compared to the previous Boost.Log releases.
"                      The backends will now only add a trailing newline if there
"                      isn't one in the formatted log message string already. In previous
"                      releases a newline was added unconditionally.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added support for passing arbitrary function objects in the
"                      &lt;code&gt;&lt;span class="identifier"&gt;filter&lt;/span&gt;&lt;/code&gt; and
"                      &lt;code&gt;&lt;span class="identifier"&gt;format&lt;/span&gt;&lt;/code&gt; named
"                      parameters to sink constructors and convenience functions for
"                      initializing sinks. For example, it is now possible to specify
"                      C++11 lambda functions directly in these parameters. (&lt;a href="https://github.com/boostorg/log/issues/63"&gt;#63&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      In the default filter and formatter factories used in filter
"                      and formatter parsers, added support for severity level attribute
"                      values of type &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;log&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;trivial&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;severity_level&lt;/span&gt;&lt;/code&gt;.
"                      For filters, the support is limited to attributes with "Severity"
"                      name.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed incorrect parsing of components of the rotated file names
"                      while scanning for files in the text file sink backend. If
"                      the file name pattern ended with a placeholder (for example,
"                      a file counter), the &lt;code&gt;&lt;span class="identifier"&gt;scan_for_files&lt;/span&gt;&lt;/code&gt;
"                      method would not find files matching that pattern in the target
"                      storage, leaving them unmanaged. In particular, such files
"                      would not be deleted to free target storage. (&lt;a href="https://github.com/boostorg/log/issues/78"&gt;#78&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Updated &lt;code&gt;&lt;span class="identifier"&gt;basic_formatting_ostream&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="identifier"&gt;basic_record_ostream&lt;/span&gt;&lt;/code&gt;
"                      to make it possible to overload stream output operators for
"                      pointers to user-defined types. User-defined &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/code&gt;
"                      overloads taking &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_ostream&lt;/span&gt;&lt;/code&gt;
"                      and a pointer argument should now be picked up by the compiler
"                      when the pointer is being written to one of Boost.Log streams.
"                      (&lt;a href="https://github.com/boostorg/log/issues/84"&gt;#84&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Catmull-Rom interpolator now works in C++11
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Cardinal quadratic B-spline interpolation
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Domain of elliptic integrals extended
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      sin_pi and cos_pi performance improvements
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Forward-mode automatic differentiation
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Vector valued barycentric rational interpolation
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Ooura's method for evaluation of Fourier integrals
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Multiple compatibility issues with Multiprecision fixed
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Lambert-W fixed on a rare architecture
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/metaparse/"&gt;Metaparse&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      In C++11 variadic template support for the following: &lt;code&gt;&lt;span class="identifier"&gt;sequence&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;one_of_c&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;one_of&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;repeated_one_of&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;repeated_one_of1&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;one_char_except_c&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;one_char_except&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;BOOST_METAPARSE_STRING&lt;/span&gt;&lt;/code&gt;
"                      does not use out of range character values as template arguments.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;any_of_c&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                      does not create empty array in C++14.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/move/"&gt;Move&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/move/issues/26"&gt;Git Issue
"                #26: &lt;em&gt;"Invalid iterator increment/decrement in the
"                last iteration of adaptive_sort_combine_blocks"&lt;/em&gt;&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_array/"&gt;Multi Array&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Simplify allocator support by using new &lt;code&gt;&lt;span class="identifier"&gt;alloc_construct_n&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;alloc_destroy_n&lt;/span&gt;&lt;/code&gt;
"                facilities from Core. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;a href="https://www.boost.org/libs/multi_index/doc/tutorial/key_extraction.html#x_mem_fun"&gt;variants
"                of &lt;code&gt;&lt;span class="identifier"&gt;const_mem_fun&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;mem_fun&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"                for differently qualified member functions (issue &lt;a href="https://github.com/boostorg/multi_index/issues/24"&gt;#24&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Terse &lt;a href="https://www.boost.org/libs/multi_index/doc/reference/key_extraction.html#key"&gt;&lt;code&gt;&lt;span class="identifier"&gt;key&lt;/span&gt;&lt;/code&gt;&lt;/a&gt; specification syntax
"                now correctly handles &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt;-specified
"                member functions (issue &lt;a href="https://github.com/boostorg/multi_index/issues/24"&gt;#24&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/outcome/"&gt;Outcome&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enhancements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/ned14/outcome/issues/184"&gt;#184&lt;/a&gt;
"                      As per request from Boost release managers, relocated &lt;code&gt;&lt;span class="identifier"&gt;version&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;revision&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                      into detail, and added the Boost licence boilerplate to the
"                      top of every source file which was missing one (I think). Also
"                      took the opportunity to run the licence restamping script over
"                      all Outcome, so copyright dates are now up to date.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/ned14/outcome/issues/185"&gt;#185&lt;/a&gt;
"                      Add FAQ item explaining issue #185, and why we will do nothing
"                      to fix it right now.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/ned14/outcome/issues/189"&gt;#189&lt;/a&gt;
"                      Refactored the &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_TRY&lt;/span&gt;&lt;/code&gt;
"                      implementation to use more clarified customisation points capable
"                      of accepting very foreign inputs. Removed the &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;expected&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt;
"                      &lt;span class="identifier"&gt;E&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                      specialisations, as those are no longer necessary. Fixed the
"                      documentation for the customisation points which previously
"                      claimed that they are ADL discovered, which they are not. Added
"                      a recipe describing how to add in support for foreign input
"                      types.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/ned14/outcome/issues/183"&gt;#183&lt;/a&gt;
"                      Added a separate &lt;code&gt;&lt;span class="identifier"&gt;motivation&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;plug_error_code&lt;/span&gt;&lt;/code&gt;
"                      specifically for Boost.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_VERSION_MINOR&lt;/span&gt;&lt;/code&gt;
"                      hadn't been updated to 1.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/ned14/outcome/issues/181"&gt;#181&lt;/a&gt;
"                      Fix issue #181 where Outcome didn't actually implement the
"                      strong swap guarantee, despite being documented as doing so.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/ned14/outcome/issues/190"&gt;#190&lt;/a&gt;
"                      Fix issue #190 in Boost edition where unit test suite was not
"                      runnable from the Boost release distro.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/ned14/outcome/issues/182"&gt;#182&lt;/a&gt;
"                      Fix issue #182 where &lt;code&gt;&lt;span class="identifier"&gt;trait&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_exception_ptr_available&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; was always true, thus causing
"                      much weirdness, like not printing diagnostics and trying to
"                      feed everything to &lt;code&gt;&lt;span class="identifier"&gt;make_exception_ptr&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/ned14/outcome/issues/192"&gt;#192&lt;/a&gt;
"                      Fix issue #192 where the &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_outcome_failure_exception_from_error&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; was being defined twice for
"                      translation units which combine standalone and Boost Outcome's.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/parameter/doc/html/index.html"&gt;Parameter&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Upgraded keyword generation macro &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_TEMPLATE_KEYWORD&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href="https://github.com/boostorg/parameter/pull/15"&gt;PR#15&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Moved keyword generation macro &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_NESTED_KEYWORD&lt;/span&gt;&lt;/code&gt;
"                from &lt;a href="https://www.boost.org/libs/accumulators/doc/html/index.html"&gt;Accumulators&lt;/a&gt;
"                to this library (&lt;a href="https://github.com/boostorg/parameter/pull/28"&gt;PR#28&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;reference_wrapper&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;ref&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href="https://github.com/boostorg/parameter/pull/16"&gt;PR#16&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Moved &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;parameter&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;required&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;parameter&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;/code&gt;,
"                and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;parameter&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;deduced&lt;/span&gt;&lt;/code&gt; metafunction definitions
"                to their own header files in directory boost/parameter (&lt;a href="https://github.com/boostorg/parameter/pull/18"&gt;PR#18&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for Boost.&lt;a href="https://www.boost.org/libs/parameter/doc/html/index.html"&gt;Parameter&lt;/a&gt;-enabled
"                function call operators (&lt;a href="https://github.com/boostorg/parameter/pull/20"&gt;PR#20&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for parameter category qualifiers "forward",
"                "consume", and "move_from" (current qualifiers
"                are "in", "out", and "in_out") (&lt;a href="https://github.com/boostorg/parameter/pull/21"&gt;PR#21&lt;/a&gt;)
"                (&lt;a href="https://github.com/boostorg/parameter/pull/23"&gt;PR#23&lt;/a&gt;) based on &lt;a href="http://www.modernescpp.com/index.php/c-core-guidelines-how-to-pass-function-parameters"&gt;http://www.modernescpp.com/index.php/c-core-guidelines-how-to-pass-function-parameters&lt;/a&gt;.
"                Added new usage syntax &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_NAME&lt;/span&gt;&lt;span class="special"&gt;((&lt;/span&gt;&lt;span class="identifier"&gt;object&lt;/span&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="special"&gt;),&lt;/span&gt; &lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt; &lt;span class="identifier"&gt;qualifier&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;tag&lt;/span&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="special"&gt;))&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_NAME&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;qualifier&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="special"&gt;))&lt;/span&gt;&lt;/code&gt;. (Existing code that uses qualifiers
"                directly and correctly with &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_FUNCTION&lt;/span&gt;&lt;/code&gt;
"                and other code generation macros should remain unaffected for now,
"                so no breaking changes.) The reason for the change in usage is to
"                enable applying of parameter category constraints to Boost.&lt;a href="https://www.boost.org/libs/parameter/doc/html/index.html"&gt;Parameter&lt;/a&gt;-enabled
"                functions and constructors invoked through argument composition.
"                (Otherwise, it is currently possible to use argument composition
"                to bypass parameter category constraints applied in &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_FUNCTION&lt;/span&gt;&lt;/code&gt; et. al.)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for perfect forwarding (&lt;a href="https://github.com/boostorg/parameter/pull/23"&gt;PR#23&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/parameter/pull/26"&gt;PR#26&lt;/a&gt;),
"                so that &lt;code&gt;&lt;span class="identifier"&gt;parameter&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;parameters&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; can accept non-&lt;code&gt;&lt;span class="keyword"&gt;const&lt;/span&gt;&lt;/code&gt;
"                rvalues. As a positive side effect, Boost.&lt;a href="https://www.boost.org/libs/parameter/doc/html/index.html"&gt;Parameter&lt;/a&gt;-enabled
"                functions and constructors are no longer bound by &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_MAX_ARITY&lt;/span&gt;&lt;/code&gt;
"                on compilers that support perfect forwarding. User code can now check
"                for this support by detecting the configuration macro &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_HAS_PERFECT_FORWARDING&lt;/span&gt;&lt;/code&gt;,
"                or manually turn off this support by defining the configuration macro
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_DISABLE_PERFECT_FORWARDING&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added metafunctions &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;parameter&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_argument_pack&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href="https://github.com/boostorg/parameter/pull/27"&gt;PR#27&lt;/a&gt;), &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;parameter&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;are_tagged_arguments&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href="https://github.com/boostorg/parameter/pull/52"&gt;PR#52&lt;/a&gt;), and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;parameter&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;result_of&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;compose&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href="https://github.com/boostorg/parameter/pull/75"&gt;PR#75&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added variadic function template &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;parameter&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;compose&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; which takes in named arguments
"                and returns them in an argument pack (&lt;a href="https://github.com/boostorg/parameter/pull/52"&gt;PR#52&lt;/a&gt;). For compilers
"                that do not support perfect forwarding, the configuration macro
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_COMPOSE_MAX_ARITY&lt;/span&gt;&lt;/code&gt;
"                determines the maximum number of arguments that &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;parameter&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;compose&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; can take in (&lt;a href="https://github.com/boostorg/parameter/pull/61"&gt;PR#61&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added code generation macros &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_BASIC_FUNCTION_CALL_OPERATOR&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_BASIC_CONST_FUNCTION_CALL_OPERATOR&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_NO_SPEC_FUNCTION&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_NO_SPEC_MEMBER_FUNCTION&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_NO_SPEC_CONST_MEMBER_FUNCTION&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_NO_SPEC_FUNCTION_CALL_OPERATOR&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_NO_SPEC_CONST_FUNCTION_CALL_OPERATOR&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_NO_SPEC_CONSTRUCTOR&lt;/span&gt;&lt;/code&gt;,
"                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_NO_SPEC_NO_BASE_CONSTRUCTOR&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href="https://github.com/boostorg/parameter/pull/52"&gt;PR#52&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for Boost.&lt;a href="https://www.boost.org/libs/mp11/doc/html/mp11.html"&gt;MP11&lt;/a&gt;
"                (&lt;a href="https://github.com/boostorg/parameter/pull/47"&gt;PR#47&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/parameter/pull/66"&gt;PR#66&lt;/a&gt;) (&lt;a href="https://github.com/boostorg/parameter/pull/70"&gt;PR#70&lt;/a&gt;). User code
"                can now check for this support by detecting the configuration macro
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_CAN_USE_MP11&lt;/span&gt;&lt;/code&gt;,
"                or manually turn off this support by defining the configuration macro
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PARAMETER_DISABLE_MP11_USAGE&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved support for parameter-dependent return types via SFINAE
"                (&lt;a href="https://github.com/boostorg/parameter/pull/73"&gt;PR#73&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/ptr_container/"&gt;PtrContainer&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix a ptr_vector regression introduced in 1.66.0 (&lt;a href="https://github.com/boostorg/ptr_container/pull/24"&gt;PR#24&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/smart_ptr/"&gt;SmartPtr&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added aliasing constructors to &lt;code&gt;&lt;span class="identifier"&gt;weak_ptr&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;weak_ptr&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;empty&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;enable_shared_from&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;shared_from&lt;/span&gt;&lt;/code&gt;, and
"                &lt;code&gt;&lt;span class="identifier"&gt;weak_from&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed output of &lt;code&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;source_line&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; for the default constructed &lt;code&gt;&lt;span class="identifier"&gt;frame&lt;/span&gt;&lt;/code&gt; with thread sanitizer builds
"                in C++98 mode.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed output of long strings from &lt;code&gt;&lt;span class="identifier"&gt;name&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; on MSVC &lt;a href="https://github.com/boostorg/stacktrace/issues/78"&gt;#78&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.test v3.11 see the &lt;a href="https://www.boost.org/users/history/libs/test/doc/html/boost_test/change_log.html"&gt;Changes
"                log&lt;/a&gt; for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Breaking changes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Boost.Test shows deprecation warnings if some very old headers
"                      as deprecated. If you encounter such warnings, please follow
"                      the indications: those headers will be removed in a future
"                      release.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New feature:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Now &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST&lt;/span&gt;&lt;/code&gt;
"                      can be used to compare abstract types
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes and pull requests:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GitHub Issues: &lt;a href="https://github.com/boostorg/test/issues/209"&gt;#209&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/218"&gt;#218&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GitHub Pull Requests: &lt;a href="https://github.com/boostorg/test/pull/219"&gt;PR#219&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/224"&gt;PR#224&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/utility/"&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented function template &lt;code&gt;&lt;span class="identifier"&gt;ostream_string&lt;/span&gt;&lt;/code&gt;
"                in &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;utility&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;ostream_string&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; to optimally write any kind of
"                string content to an output stream. It satisfies the requirements
"                of [ostream.formatted.reqmts]. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Optimized the stream output operators of &lt;code&gt;&lt;span class="identifier"&gt;basic_string_view&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;basic_string_ref&lt;/span&gt;&lt;/code&gt;
"                to write directly to the &lt;code&gt;&lt;span class="identifier"&gt;rdbuf&lt;/span&gt;&lt;/code&gt;
"                stream buffer. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/uuid/"&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking change:&lt;/strong&gt; MD5 name-based
"                uuid generation was corrected to be identical on all endian systems.
"                Define &lt;code&gt;&lt;span class="identifier"&gt;BOOST_UUID_COMPAT_PRE_1_71_MD5&lt;/span&gt;&lt;/code&gt;
"                to keep the result in a format compatible with 1.66 through 1.70.
"                This does not affect the default name-based uuid generation which
"                is based on SHA1. (&lt;a href="https://github.com/boostorg/uuid/pull/109"&gt;PR#109&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;apply_visitor&lt;/span&gt;&lt;/code&gt;
"                with variants passed by non const reference in &lt;a href="https://github.com/boostorg/variant/pull/68"&gt;PR#68&lt;/a&gt;. Many
"                thanks to Ed Catmur for providing the fix.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for std::hash (&lt;a href="https://github.com/boostorg/variant/pull/49"&gt;PR#49&lt;/a&gt;). Macro &lt;code&gt;&lt;span class="identifier"&gt;BOOST_VARIANT_DO_NOT_SPECIALIZE_STD_HASH&lt;/span&gt;&lt;/code&gt;
"                could be defined to avoid those specializations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added micro optimizations for binary size and performance by Nikita
"                Kniazev in &lt;a href="https://github.com/boostorg/variant/pull/63"&gt;PR#63&lt;/a&gt; and &lt;a href="https://github.com/boostorg/variant/pull/66"&gt;PR#66&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work, including &lt;a href="https://github.com/boostorg/variant/pull/64"&gt;PR#64&lt;/a&gt; by Nikita Kniazev and &lt;a href="https://github.com/boostorg/variant/pull/67"&gt;PR#67&lt;/a&gt; by
"                Hans Dembinski.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/yap/"&gt;YAP&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added an example showing how to make self-evaluating YAP expressions
"                (that is, expressions that don't need an explicit call to &lt;code&gt;&lt;span class="identifier"&gt;evaluate&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                or &lt;code&gt;&lt;span class="identifier"&gt;transform&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_71_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 4.0.1, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_71_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Marshall Clow and Michael Caisse managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Tue, 27 Apr 2021 03:13:52 +0000
-quickbook
"feed/history/boost_1_71_0.qbk
-update_count
=8
)
(feed/history/boost_1_72_0.qbk
-item
"<item><title>Version 1.72.0</title><link>https://www.boost.org/users/history/version_1_72_0.html</link><guid>https://www.boost.org/users/history/version_1_72_0.html</guid><pubDate>Wed, 11 Dec 2019 18:06:09 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_72_0.known_issues"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Known Issues&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      These are patches from library authors which were found too late to be fixed
"      in the release. Be careful as they have not been through the normal testing
"      process.
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Revert cease dependence on range
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/patches/1_72_0/0001-revert-cease-dependence-on-range.patch"&gt;Coroutine
"                patch&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_72_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the &lt;code&gt;&lt;span class="identifier"&gt;async_initiate&lt;/span&gt;&lt;/code&gt;
"                helper function to automatically deduce its return type, for C++11
"                or later.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed all asynchronous operations to use automatically deduced
"                return types, for C++14 or later.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Introduced concepts to support &lt;code&gt;&lt;span class="identifier"&gt;async_initiate&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the nested template type &lt;code&gt;&lt;span class="identifier"&gt;rebind_executor&lt;/span&gt;&lt;/code&gt;
"                to all I/O object types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the initiation function objects to report their associated
"                I/O executor via the nested type &lt;code&gt;&lt;span class="identifier"&gt;executor_type&lt;/span&gt;&lt;/code&gt;
"                and member function &lt;code&gt;&lt;span class="identifier"&gt;get_executor&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class="identifier"&gt;default_completion_token&lt;/span&gt;&lt;/code&gt;
"                trait, giving I/O executor types an associated default completion
"                token type for use with asynchronous operations. This trait is specialised
"                for the &lt;code&gt;&lt;span class="identifier"&gt;use_awaitable&lt;/span&gt;&lt;/code&gt;
"                completion token, for example, to allow asynchronous operations to
"                be used as follows: &lt;code&gt;&lt;span class="identifier"&gt;co_await&lt;/span&gt;
"                &lt;span class="identifier"&gt;socket&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;async_connect&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;my_endpoint&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added missing &lt;code&gt;&lt;span class="identifier"&gt;async_initiate&lt;/span&gt;&lt;/code&gt;
"                to the Windows-specific I/O objects' asynchronous operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured that the executor type is propagated to newly accepted sockets.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to require that &lt;code&gt;&lt;span class="identifier"&gt;Protocol&lt;/span&gt;&lt;/code&gt;
"                copy and move operations never throw.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to require that &lt;code&gt;&lt;span class="identifier"&gt;Endpoint&lt;/span&gt;&lt;/code&gt;
"                default constructor and move operations never throw.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt; qualifier
"                to protocol accessors.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt; qualifier
"                to socket move constructors.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed issues associated with opening serial ports on Windows:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Use the correct constant to initialise the RTS control flag.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Specify a default baud rate (9600).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a lost "outstanding work count" that can occur when
"                an asynchronous accept operation is automatically restarted.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Consult the &lt;a href="https://www.boost.org/doc/libs/1_72_0/doc/html/boost_asio/history.html"&gt;Revision
"                History&lt;/a&gt; for further details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a workaround for &lt;code&gt;&lt;span class="identifier"&gt;__float128&lt;/span&gt;&lt;/code&gt;
"                not being considered as a floating point type by some versions of
"                libstdc++.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved compatibility with clang-win compiler.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This is a maintenance update containing bug fixes, and updates to
"                use the new features delivered in Boost.Asio.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
"                and Individuals Using Beast&lt;/a&gt; list.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
"                Notes&lt;/a&gt; for a complete list of changes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/circular_buffer/"&gt;Circular Buffer&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix issue &lt;a href="https://github.com/boostorg/circular_buffer/issues/29"&gt;#29&lt;/a&gt;: &lt;code&gt;&lt;span class="identifier"&gt;max_size&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; now takes the allocator's &lt;code&gt;&lt;span class="identifier"&gt;max_size&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                into account. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                architecture s390x supported
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                execution_context removed
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/endian/"&gt;Endian&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Made &lt;code&gt;&lt;span class="identifier"&gt;endian_reverse&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;conditional_reverse&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;span class="identifier"&gt;_to_&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
"                on GCC and Clang
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added convenience load and store functions
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added floating point convenience typedefs
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a non-const overload of &lt;code&gt;&lt;span class="identifier"&gt;data&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;; changed its return type to &lt;code&gt;&lt;span class="keyword"&gt;unsigned&lt;/span&gt; &lt;span class="keyword"&gt;char&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;__int128&lt;/span&gt;&lt;/code&gt; support
"                to &lt;code&gt;&lt;span class="identifier"&gt;endian_reverse&lt;/span&gt;&lt;/code&gt;
"                when available
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a convenience header &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;endian&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Extracted &lt;code&gt;&lt;span class="identifier"&gt;filesystem_error&lt;/span&gt;&lt;/code&gt;
"                to &lt;code&gt;&lt;span class="identifier"&gt;exception&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;; &lt;code&gt;&lt;span class="identifier"&gt;file_status&lt;/span&gt;&lt;/code&gt;
"                and associated enums and functions to &lt;code&gt;&lt;span class="identifier"&gt;file_status&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;;
"                &lt;code&gt;&lt;span class="identifier"&gt;directory_entry&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;directory_iterator&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;
"                to &lt;code&gt;&lt;span class="identifier"&gt;directory&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Deprecated:&lt;/strong&gt; For backward compatibility
"                &lt;code&gt;&lt;span class="identifier"&gt;operations&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; still includes the new headers
"                &lt;code&gt;&lt;span class="identifier"&gt;exception&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;file_status&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;directory&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;, unless &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FILESYSTEM_NO_DEPRECATED&lt;/span&gt;&lt;/code&gt;
"                macro is defined. These implicit includes are considered deprecated
"                and will be removed in a future release. Users are encouraged to
"                include the new headers directly or include &lt;code&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The &lt;code&gt;&lt;span class="identifier"&gt;filesystem_error&lt;/span&gt;&lt;/code&gt;
"                exception is now implemented in the compiled library of Boost.Filesystem.
"                Users may need to add linking with Boost.Filesystem library in their
"                projects.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On POSIX.1-2008 platforms, use &lt;code&gt;&lt;span class="identifier"&gt;utimensat&lt;/span&gt;&lt;/code&gt;
"                instead of &lt;code&gt;&lt;span class="identifier"&gt;utime&lt;/span&gt;&lt;/code&gt;.
"                &lt;code&gt;&lt;span class="identifier"&gt;utime&lt;/span&gt;&lt;/code&gt; is declared
"                obsolete in POSIX.1-2008 and can be disabled e.g. in uClibc-ng. (&lt;a href="https://github.com/boostorg/filesystem/pull/115"&gt;PR#115&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;directory_iterator&lt;/span&gt;&lt;/code&gt;
"                is now left in the end state on memory allocation errors.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In &lt;code&gt;&lt;span class="identifier"&gt;directory_iterator&lt;/span&gt;&lt;/code&gt;
"                on POSIX systems, support for &lt;code&gt;&lt;span class="identifier"&gt;readdir&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;readdir_r&lt;/span&gt;&lt;/code&gt; has been reworked to
"                avoid memory allocations for &lt;code&gt;&lt;span class="identifier"&gt;dirent&lt;/span&gt;&lt;/code&gt;
"                structures when &lt;code&gt;&lt;span class="identifier"&gt;readdir&lt;/span&gt;&lt;/code&gt;
"                is used. This reduces memory consumption and eliminates the possibility
"                of buffer overruns in case if &lt;code&gt;&lt;span class="identifier"&gt;readdir&lt;/span&gt;&lt;/code&gt;
"                produces a very long directory name.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Windows, use Boost.WinAPI to select the target Windows version.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;directory_options&lt;/span&gt;&lt;/code&gt;
"                enum, which reflects the same named enum from C++20. The enum is
"                supported in &lt;code&gt;&lt;span class="identifier"&gt;directory_iterator&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;
"                to customize iteration behavior. In particular, the iterators now
"                support skipping directories that can't be opened due to insufficient
"                permissions. The &lt;code&gt;&lt;span class="identifier"&gt;symlink_option&lt;/span&gt;&lt;/code&gt;
"                enum is now deprecated and should be replaced with &lt;code&gt;&lt;span class="identifier"&gt;directory_options&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                By default, &lt;code&gt;&lt;span class="identifier"&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;
"                is now reset to the end state in case of errors, as required by C++20.
"                (&lt;a href="https://github.com/boostorg/filesystem/issues/112"&gt;#112&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;directory_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;pop_on_error&lt;/span&gt;&lt;/code&gt;
"                option, which configures &lt;code&gt;&lt;span class="identifier"&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;
"                so that it attempts to recover from iteration errors by repeatedly
"                invoking &lt;code&gt;&lt;span class="identifier"&gt;pop&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                until it succeeds or the end state is reached. (&lt;a href="https://github.com/boostorg/filesystem/issues/113"&gt;#113&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;directory_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;skip_dangling_symlinks&lt;/span&gt;&lt;/code&gt;
"                option, which configures &lt;code&gt;&lt;span class="identifier"&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;
"                so that it doesn't follow dangling directory symlinks and continues
"                iteration instead of reporting an error.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Deprecated:&lt;/strong&gt; The following members
"                of &lt;code&gt;&lt;span class="identifier"&gt;recursive_directory_iterator&lt;/span&gt;&lt;/code&gt;
"                are now marked as deprecated: &lt;code&gt;&lt;span class="identifier"&gt;level&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;no_push_pending&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;no_push_request&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;no_push&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;. Users are advised to replace their
"                use with the standard counterparts: &lt;code&gt;&lt;span class="identifier"&gt;depth&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;recursion_pending&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;disable_recursion_pending&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;. Note that &lt;code&gt;&lt;span class="identifier"&gt;recursion_pending&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; has the opposite meaning compared
"                to &lt;code&gt;&lt;span class="identifier"&gt;no_push_pending&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;no_push_request&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;. Deprecated methods will be removed
"                in a future release.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;lexically_relative&lt;/span&gt;&lt;/code&gt; (and any dependent
"                algorithms) to correctly handle empty, dot and dot-dot path elements
"                in its argument. The behavior is made closer to C++17 &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;lexically_relative&lt;/span&gt;&lt;/code&gt; in that empty
"                and dot path elements are ignored and dot-dot path elements are accounted
"                by decreasing the number of dot-dot path elements to generate in
"                the resulting relative path. (&lt;a href="https://github.com/boostorg/filesystem/issues/76"&gt;#76&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/functional/factory/"&gt;Functional/Factory&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Glen Fernandes rewrote the implementations of &lt;code&gt;&lt;span class="identifier"&gt;factory&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;value_factory&lt;/span&gt;&lt;/code&gt;
"                to provide the following features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Support r-value arguments when possible
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Support arbitrary number of arguments via variadic templates
"                      when possible
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Support allocators that are final
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Support allocators that use fancy pointers
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Support for disabled exceptions (&lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improved compilation times
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The following features have been removed:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Increasing limits for C++03 compilers through &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FUNCTIONAL_VALUE_FACTORY_MAX_ARITY&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Using &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;none_t&lt;/span&gt;&lt;/code&gt;
"                      in place of &lt;code&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;/code&gt;
"                      through &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FUNCTIONAL_FACTORY_SUPPORT_NONE_T&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/gil/"&gt;GIL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GSoC 2019: Lanczos resampling for image down scaling (&lt;a href="https://github.com/boostorg/gil/pull/309"&gt;PR#309&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GSoC 2019: Methods for binary thresholding, inverted binary
"                      thresholding and truncation thresholding (&lt;a href="https://github.com/boostorg/gil/pull/313"&gt;PR#313&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GSoC 2019: Otsu thresholding method (&lt;a href="https://github.com/boostorg/gil/pull/314"&gt;PR#314&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GSoC 2019: Adaptive thresholding using mean or gaussian-weighted
"                      sum of the neighbourhood area (&lt;a href="https://github.com/boostorg/gil/pull/315"&gt;PR#315&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GSoC 2019: Harris response calculation (corner detector without
"                      non-maximum filtering) (&lt;a href="https://github.com/boostorg/gil/pull/350"&gt;PR#350&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GSoC 2019: Hessian corner detector (&lt;a href="https://github.com/boostorg/gil/pull/364"&gt;PR#364&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GSoC 2019: Types for defining 2D kernel, &lt;code&gt;&lt;span class="identifier"&gt;kernel_2d&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="identifier"&gt;kernel_2d_fixed&lt;/span&gt;&lt;/code&gt;,
"                      in Numeric extension (&lt;a href="https://github.com/boostorg/gil/pull/361"&gt;PR#361&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GSoC 2019: Implementation of 2D convolution as new function
"                      &lt;code&gt;&lt;span class="identifier"&gt;convolve_2d&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/gil/pull/367"&gt;PR#367&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GSoC 2019: Box filtering using the average filter (&lt;a href="https://github.com/boostorg/gil/pull/383"&gt;PR#383&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GSoC 2019: Blur function based on normalized mean filter (&lt;a href="https://github.com/boostorg/gil/pull/383"&gt;PR#383&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GSoC 2019: Sobel and Scharr operators (&lt;a href="https://github.com/boostorg/gil/pull/392"&gt;PR#392&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GSoC 2019: Median filter to remove noise from image (&lt;a href="https://github.com/boostorg/gil/pull/393"&gt;PR#393&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Continued adding new test cases and significantly improved
"                      overall test coverage.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Documented purpose of &lt;code&gt;&lt;span class="identifier"&gt;cached_location_t&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/gil/pull/287"&gt;PR#287&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Function &lt;code&gt;&lt;span class="identifier"&gt;convolve_1d&lt;/span&gt;&lt;/code&gt;
"                      in Numeric extension for convenient use of &lt;code&gt;&lt;span class="identifier"&gt;convolve_rows&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="identifier"&gt;convolve_cols&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/gil/pull/347"&gt;PR#347&lt;/a&gt;) and &lt;a href="https://github.com/boostorg/gil/pull/367"&gt;PR#367&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Function &lt;code&gt;&lt;span class="identifier"&gt;extend_boundary&lt;/span&gt;&lt;/code&gt;
"                      in Numeric extension to perform image boundary extension (&lt;a href="https://github.com/boostorg/gil/pull/386"&gt;PR#386&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Project release notes maintained in Markdown file &lt;code&gt;&lt;span class="identifier"&gt;RELEASES&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;md&lt;/span&gt;&lt;/code&gt; (&lt;a href="https://github.com/boostorg/gil/pull/404"&gt;PR#404&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Move all tests, core features and extensions, inside &lt;code&gt;&lt;span class="identifier"&gt;test&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;/code&gt;
"                      directory (&lt;a href="https://github.com/boostorg/gil/pull/302"&gt;PR#302&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Replace Boost.MPL with Boost.MP11 (&lt;a href="https://github.com/boostorg/gil/pull/274"&gt;PR#274&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Removed use of Boost.TypeTraits (&lt;a href="https://github.com/boostorg/gil/pull/274"&gt;PR#274&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Dropped support for GCC &amp;lt;= 4.8 (&lt;a href="https://github.com/boostorg/gil/pull/296"&gt;PR#296&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Remove &lt;code&gt;&lt;span class="identifier"&gt;include&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;gil&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;version&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                      file as unused (&lt;a href="https://github.com/boostorg/gil/pull/403"&gt;PR#403&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Undetermined value of default-initialized channel and pixel
"                      objects (&lt;a href="https://github.com/boostorg/gil/pull/273"&gt;PR#273&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Undefined behaviour due to &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_trivially_default_constructible&lt;/span&gt;&lt;/code&gt;
"                      specializations (&lt;a href="https://github.com/boostorg/gil/pull/284"&gt;PR#284&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Crash when reading PNG files with an invalid header (&lt;a href="https://github.com/boostorg/gil/pull/385"&gt;PR#385&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Applied the Rule of Three for numerous types.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Removed uses of deprecated implicit definition of defaulted
"                      copy assignment operator or copy constructor.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/histogram/"&gt;Histogram&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Several new features and performance improvements, some bug-fixes
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the full &lt;a href="https://www.boost.org/libs/histogram/doc/html/histogram/history.html"&gt;Release
"                Notes&lt;/a&gt; for a complete list of changes
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved compatibility with clang-win compiler.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/mpi/"&gt;MPI&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Documentation clarifications.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed scatterv bug when using explicit input buffer offsets.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enable usage of MPI_Probe and friend with Intel MPI &amp;gt;= 2019.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Symbol visibility on Windows
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Hypergeometric functions 1F0, 0F1, 2F0, 1F1 and pFq.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Jacobi polynomial (and derivatives) evaluation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Gegenbauer polynomial (and derivatives) evaluation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Cardinal B-Splines (and derivatives) as polynomial functions
"                in their own right.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Cardinal Trigonometric Interpolation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new statistics sub-section.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added One Sample Student's T Test.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Anderson Darling test for normality.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Ljung Box test for auto-correlation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Runs test for random sequences.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The headers &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;math&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;tools&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;univariate_statistics&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;math&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;tools&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;bivariate_statistics&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;, have been deprecated in favor
"                of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;math&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;statistics&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;univariate_statistics&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;math&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;statistics&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;bivariate_statistics&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added The Empirical CDF distribution.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reworked the Sterling approximation used by multiprecision gamma
"                functions to be applicable to all the function that use the Lanczos
"                approximation at regular precision. Also extended Lanczos approximations
"                up to 100 decimal digit precision.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multiprecision/"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Big &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt; update
"                allows cpp_int and float128 arithmetic to be fully &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt; with gcc and clang 9 or
"                later, or any compiler supporting &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_constant_evaluated&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix bug in variable precision mpf_float which causes it to go into
"                a tailspin trying to select the correct precision - see https://github.com/boostorg/multiprecision/issues/164.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/outcome/"&gt;Outcome&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enhancements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Standalone outcome is now &lt;code&gt;&lt;span class="identifier"&gt;make&lt;/span&gt;
"                      &lt;span class="identifier"&gt;install&lt;/span&gt;&lt;/code&gt;-able, and
"                      cmake &lt;code&gt;&lt;span class="identifier"&gt;find_package&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; can find it. Note that you
"                      must separately install and &lt;code&gt;&lt;span class="identifier"&gt;find_package&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; Outcome's dependency, quickcpplib,
"                      else &lt;code&gt;&lt;span class="identifier"&gt;find_package&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; of Outcome will fail.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The git submodule mechanism used by standalone Outcome of specifying
"                      dependent libraries has been replaced with a cmake superbuild
"                      of dependencies mechanism instead. Upon cmake configure, an
"                      internal copy of quickcpplib will be git cloned, built and
"                      installed into the build directory from where an internal
"                      &lt;code&gt;&lt;span class="identifier"&gt;find_package&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; uses it. This breaks the
"                      use of the unconfigured Outcome repo as an implementation of
"                      Outcome, one must now do one of: 1. Add Outcome as subdirectory
"                      to cmake build. 2. Use cmake superbuild (i.e. &lt;code&gt;&lt;span class="identifier"&gt;ExternalProject_Add&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;)
"                      to build and install Outcome into a local installation. 3.
"                      Use one of the single header editions.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      For standalone Outcome, the current compiler is now checked
"                      for whether it will compile code containing C++ Concepts, and
"                      if it does, all cmake consumers of Outcome will enable C++
"                      Concepts. Set the cmake variable &lt;code&gt;&lt;span class="identifier"&gt;CXX_CONCEPTS_FLAGS&lt;/span&gt;&lt;/code&gt;
"                      to an empty string to prevent auto detection and enabling of
"                      C++ Concepts support occurring.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_TRY&lt;/span&gt;&lt;/code&gt;
"                      operation now hints to the compiler that operation will be
"                      successful. &lt;a href="https://wg21.link/P1886"&gt;P1886 &lt;strong&gt;Error speed benchmarking&lt;/strong&gt;&lt;/a&gt; showed
"                      that there is considerable gain in very small functions by
"                      hinting to the compiler whether the expression is expected
"                      to be successful or not. &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_TRY&lt;/span&gt;&lt;/code&gt;
"                      previously did not hint to the compiler at all, but now it
"                      does. A new suite of macros &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_TRY_FAILURE_LIKELY&lt;/span&gt;&lt;/code&gt;
"                      hint to the compiler that failure is expected. If you wish
"                      to return to the previously unhinted behaviour, define &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_TRY_LIKELY&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;expr&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;
"                      to &lt;code&gt;&lt;span class="special"&gt;(!!&lt;/span&gt;&lt;span class="identifier"&gt;expr&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/ned14/outcome/issues/199"&gt;#199&lt;/a&gt;
"                      Support for C++ Coroutines has been added. This comes in two
"                      parts, firstly there is now an &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_CO_TRY&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; operation suitable for performing
"                      the &lt;code&gt;&lt;span class="identifier"&gt;TRY&lt;/span&gt;&lt;/code&gt; operation
"                      from within a C++ Coroutine. Secondly, in the header &lt;code&gt;&lt;span class="identifier"&gt;outcome&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;coroutine_support&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; there are implementations
"                      of &lt;code&gt;&lt;span class="identifier"&gt;eager&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;OutcomeType&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="identifier"&gt;lazy&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;OutcomeType&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                      which let you more naturally and efficiently use &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span class="identifier"&gt;basic_outcome&lt;/span&gt;&lt;/code&gt; from within
"                      C++ Coroutines -- specifically, if the result or outcome will
"                      construct from an exception pointer, exceptions thrown in the
"                      coroutine return an errored or excepted result with the thrown
"                      exception instead of throwing the exception through the coroutine
"                      machinery (which in current compilers, has a high likelihood
"                      of blowing up the program). Both &lt;code&gt;&lt;span class="identifier"&gt;eager&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;lazy&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; can accept any &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;/code&gt; as well. Both have been
"                      tested and found working on VS2019 and clang 9.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/ned14/outcome/issues/210"&gt;#210&lt;/a&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;make_error_code&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;make_exception_ptr&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; are now additionally considered
"                      for compatible copy and move conversions for &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"                      This lets you construct a &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;E&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; into a &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, where &lt;code&gt;&lt;span class="identifier"&gt;E&lt;/span&gt;&lt;/code&gt;
"                      is a custom type which has implemented the ADL discovered free
"                      function &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;
"                      &lt;span class="identifier"&gt;make_error_code&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;E&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;,
"                      but is otherwise unrelated to &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;.
"                      The same availability applies for &lt;code&gt;&lt;span class="identifier"&gt;exception_ptr&lt;/span&gt;&lt;/code&gt;
"                      with &lt;code&gt;&lt;span class="identifier"&gt;make_exception_ptr&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; being the ADL discovered
"                      free function. &lt;code&gt;&lt;span class="identifier"&gt;basic_outcome&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; has less support for
"                      this than &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; in order to keep constructor
"                      count down, but it will accept via this mechanism conversions
"                      from &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;failure_type&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/ned14/outcome/issues/184"&gt;#184&lt;/a&gt;
"                      The detection of &lt;code&gt;&lt;span class="special"&gt;[[&lt;/span&gt;&lt;span class="identifier"&gt;nodiscard&lt;/span&gt;&lt;span class="special"&gt;]]&lt;/span&gt;&lt;/code&gt;
"                      support in the compiler was very mildly broken.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/preprocessor/"&gt;Preprocessor&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Topic added which discusses emptiness
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for the C++20 &lt;code&gt;&lt;span class="identifier"&gt;__VA_OPT__&lt;/span&gt;&lt;/code&gt;
"                construct
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PP_VARIADIC_HAS_OPT&lt;/span&gt;&lt;/code&gt;
"                      whether &lt;code&gt;&lt;span class="identifier"&gt;__VA_OPT__&lt;/span&gt;&lt;/code&gt;
"                      is supported at the C++20 level
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PP_CHECK_EMPTY&lt;/span&gt;&lt;/code&gt;
"                      test for emptiness using &lt;code&gt;&lt;span class="identifier"&gt;__VA_OPT__&lt;/span&gt;&lt;/code&gt;
"                      at the C++20 level
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;BOOST_PP_VA_OPT&lt;/span&gt;&lt;/code&gt;
"                      more flexible alternative to &lt;code&gt;&lt;span class="identifier"&gt;__VA_OPT__&lt;/span&gt;&lt;/code&gt;
"                      at the C++20 level
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/smart_ptr/"&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented &lt;code&gt;&lt;span class="identifier"&gt;allocate_unique&lt;/span&gt;&lt;/code&gt;
"                for scalars and arrays. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.test v3.12 see the &lt;a href="https://www.boost.org/libs/test/doc/html/boost_test/change_log.html"&gt;Changes
"                log&lt;/a&gt; for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New feature:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Support for C++17 &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string_view&lt;/span&gt;&lt;/code&gt;
"                      has been added.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Better diagnostic on &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;exception&lt;/span&gt;&lt;/code&gt;
"                      and no rtti mode (thanks to Mikhail Pilin / [pull_request 234])
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes and pull requests:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GitHub Issues: &lt;a href="https://github.com/boostorg/test/issues/206"&gt;#206&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/217"&gt;#217&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/223"&gt;#223&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/229"&gt;#229&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GitHub Pull Requests: &lt;a href="https://github.com/boostorg/test/pull/227"&gt;PR#227&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/231"&gt;PR#231&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/232"&gt;PR#232&lt;/a&gt;,
"                      &lt;a href="https://github.com/boostorg/test/pull/234"&gt;PR#234&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/vmd/"&gt;VMD&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_VMD_IS_EMPTY&lt;/span&gt;&lt;/code&gt;
"                updated to use &lt;code&gt;&lt;span class="identifier"&gt;__VA_OPT__&lt;/span&gt;&lt;/code&gt;
"                at the C++20 level has 100% reliability
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_72_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 4.0.1, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_72_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Marshall Clow and Michael Caisse managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Tue, 27 Apr 2021 03:13:52 +0000
-quickbook
"feed/history/boost_1_72_0.qbk
-update_count
=6
)
(feed/history/boost_1_73_0.qbk
-item
"<item><title>Version 1.73.0</title><link>https://www.boost.org/users/history/version_1_73_0.html</link><guid>https://www.boost.org/users/history/version_1_73_0.html</guid><pubDate>Tue, 28 Apr 2020 03:57:05 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_73_0.known_issues"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Known Issues&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      These are patches from library authors which were found too late to be fixed
"      in the release. Be careful as they have not been through the normal testing
"      process.
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Outcome &lt;code&gt;&lt;span class="identifier"&gt;status_code_domain&lt;/span&gt;&lt;/code&gt;
"          assertion removal
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/patches/1_73_0/0001-outcome-assert.patch"&gt;Outcome patch&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Beast and coroutines
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://www.boost.org/patches/1_73_0/0002-beast-coroutines.patch"&gt;Beast patch&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_73_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/nowide/"&gt;Nowide&lt;/a&gt;:&lt;/span&gt; Standard library functions
"          with UTF-8 API on Windows, from Artyom Beilis.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/static_string/"&gt;StaticString&lt;/a&gt;:&lt;/span&gt; A dynamically
"          resizable string of characters with compile-time fixed capacity and contiguous
"          embedded storage, from Vinnie Falco and Krystian Stasiowski
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_73_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/align/"&gt;Align&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update &lt;code&gt;&lt;span class="identifier"&gt;aligned_alloc&lt;/span&gt;&lt;/code&gt;
"                to support older mingw32.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/any/"&gt;Any&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Speedup compilation by not including &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;algorithm&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work, including CI hardening.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compatibility with C++20 concept syntax.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Marked the POSIX descriptor classes' move constructors as &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;host_name_verification&lt;/span&gt;&lt;/code&gt; class, which
"                is a drop-in replacement for &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;rfc2818_verification&lt;/span&gt;&lt;/code&gt;.
"                The &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;rfc2818_verification&lt;/span&gt;&lt;/code&gt; class has
"                been marked as deprecated. As a consequence of this change, SSL support
"                now depends on functions that were introduced in OpenSSL 1.0.2.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added an &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;context&lt;/span&gt;&lt;/code&gt; constructor to take ownership
"                of a native handle.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed C++ language version detection with &lt;tt&gt;gcc&lt;/tt&gt;
"                to use &lt;code&gt;&lt;span class="identifier"&gt;__cplusplus&lt;/span&gt;&lt;/code&gt;
"                macro.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a work counting issue in the asynchronous resolve operation
"                for endpoints.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed the &lt;code&gt;&lt;span class="identifier"&gt;strand&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; converting constructors and
"                assignment operators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured that resolvers are restarted correctly after a fork.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compatibility with the current NetBSD release.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed spurious handler requirement checks in some &lt;code&gt;&lt;span class="identifier"&gt;async_read&lt;/span&gt;&lt;/code&gt; overloads.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;context&lt;/span&gt;&lt;/code&gt; class to propagate non-EOF
"                errors from the &lt;code&gt;&lt;span class="identifier"&gt;add_certificate_authority&lt;/span&gt;&lt;/code&gt;
"                function.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a Windows-specific &lt;code&gt;&lt;span class="identifier"&gt;thread_pool&lt;/span&gt;&lt;/code&gt;
"                destructor hang that occurred when the pool had an associated I/O
"                object.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the &lt;tt&gt;select&lt;/tt&gt; reactor to recreate the "self
"                pipe trick" sockets on error. This addresses an issue on some
"                versions of Windows, where these sockets are discconected after a
"                system sleep.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a compile error in the buffered streams due to the lack of
"                reference collapsing in C++98.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the &lt;code&gt;&lt;span class="identifier"&gt;priority_scheduler&lt;/span&gt;&lt;/code&gt;
"                example to demonstrate calls to &lt;code&gt;&lt;span class="identifier"&gt;shutdown&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;destroy&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed some unnecessary null pointer checks.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed Windows platform detection to recognise TV titles as Windows
"                apps.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added some emscripten compatibility patches.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a compile error in the &lt;code&gt;&lt;span class="identifier"&gt;use_awaitable_t&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;as_default_on&lt;/span&gt;&lt;/code&gt;
"                function.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed all uses of the boost.bind placeholders to use the &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;placeholders&lt;/span&gt;&lt;/code&gt; namespace.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a potential compile error in the &lt;code&gt;&lt;span class="identifier"&gt;async_compose&lt;/span&gt;&lt;/code&gt;
"                implementation due to incorrect overload selection.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Suppressed some non-virtual destructor warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Various documentation fixes and improvements.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/assert/"&gt;Assert&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented C++20 &lt;code&gt;&lt;span class="identifier"&gt;atomic_ref&lt;/span&gt;&lt;/code&gt;.
"                See &lt;a href="https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref"&gt;docs&lt;/a&gt;
"                and especially the &lt;a href="https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_atomic_ref.caveats"&gt;caveats&lt;/a&gt;
"                section.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented &lt;code&gt;&lt;span class="identifier"&gt;atomic_flag&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;test&lt;/span&gt;&lt;/code&gt;
"                operation, which was introduced in C++20.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                should now take into account alignment requirements of &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;/code&gt;, which makes a difference if
"                those requirements are higher than that of the internal storage of
"                &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added static asserts enforcing the requirements on the value type
"                &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;/code&gt; used with &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;atomic_ref&lt;/span&gt;&lt;/code&gt;.
"                This should prohibit invalid types from being used as atomics.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved internal lock pool implementation. The pool is larger, and
"                lock selection accounts for atomic object alignment, which should
"                reduce the potential of thread contention.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed incorrect x86 code generated for &lt;code&gt;&lt;span class="identifier"&gt;bit_test_and_&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; operations on 8 and 16-bit arguments.
"                Other architectures are not affected.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a possible unaligned memory access in &lt;code&gt;&lt;span class="identifier"&gt;compare_exchange_&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; operations, if alignment requirements
"                of &lt;code&gt;&lt;span class="identifier"&gt;value_type&lt;/span&gt;&lt;/code&gt; are
"                less than that of the internal storage of &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; no longer includes &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atomic_flag&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;fences&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                and only defines the &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;/code&gt;
"                class template and related typedefs. Include the other headers explicitly
"                or use &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; to include all parts of Boost.Atomic.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;storage&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                accessor and associated &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;storage_type&lt;/span&gt;&lt;/code&gt;
"                type are deprecated. Instead, users are advised to use &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;value&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;value_type&lt;/span&gt;&lt;/code&gt;, respectively. Users
"                can define &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ATOMIC_SILENCE_STORAGE_DEPRECATION&lt;/span&gt;&lt;/code&gt;
"                to disable deprecation warnings for the time of transition. The deprecated
"                pieces will be removed in a future release.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed support for &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ATOMIC_DETAIL_HIGHLIGHT_OP_AND_TEST&lt;/span&gt;&lt;/code&gt;.
"                This macro was used as a helper for transition to the updated returned
"                values of &lt;code&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;span class="identifier"&gt;_and_test&lt;/span&gt;&lt;/code&gt;
"                operations in Boost.Atomic 1.67, which was released 2 years before
"                1.73.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This is a maintenance update.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Nested &lt;code&gt;&lt;span class="identifier"&gt;mutable_data_type&lt;/span&gt;&lt;/code&gt;
"                in Beast dynamic buffers is deprecated.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
"                and Individuals Using Beast&lt;/a&gt; list.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
"                Notes&lt;/a&gt; for a complete list of changes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/context/"&gt;Context&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/133"&gt;#133&lt;/a&gt;: IBM Z: Fix fcontext routines
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/132"&gt;#132&lt;/a&gt;: mips64/n64: .align 3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/131"&gt;#131&lt;/a&gt;: Use OSPLAT MIPS32/MIPS64 to set different ABI
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/context/issues/129"&gt;#129&lt;/a&gt;: Fix non-PIC in RISC-V assembly
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/conversion/"&gt;Conversion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;polymorphic_downcast&lt;/span&gt;&lt;/code&gt; for references
"                (thanks to Julien Delacroix for the patch).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Significant docs update.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/date_time/"&gt;date_time&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/date_time/issues/123"&gt;#123&lt;/a&gt;: Support constexpr in c++14 and above
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/date_time/issues/134"&gt;#134&lt;/a&gt;: Make date_time all inline. Users no longer need
"                to link the library for any functions. Library remains for build
"                compatibility.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/date_time/issues/132"&gt;#132&lt;/a&gt;: Deprecate support for legacy io and &lt;code&gt;&lt;span class="identifier"&gt;USE_DATE_TIME_PRE_1_33_FACET_IO&lt;/span&gt;&lt;/code&gt;
"                macro
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Misc documentation updates and bugfixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixes and tests for demangling in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;smart_library&lt;/span&gt;&lt;/code&gt;
"                (thanks to Ramil Gauss for &lt;a href="https://github.com/boostorg/dll/issues/35"&gt;#35&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Make UB sanitizers happy with &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;load_mode&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;type&lt;/span&gt;&lt;/code&gt;
"                &lt;a href="https://github.com/boostorg/dll/issues/30"&gt;#30&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ceased dependence on MPL improving compile times (thanks to Nikita
"                Kniazev for &lt;a href="https://github.com/boostorg/dll/issues/34"&gt;#34&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang and ICC on Windows fixes and CI support for those platforms
"                (thanks to Nikita Kniazev &lt;a href="https://github.com/boostorg/dll/issues/33"&gt;#33&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work, including CI hardening and tests improving.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dynamic_bitset/"&gt;Dynamic Bitset&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a portability issue in the definition of the maximum block
"                limit.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/flyweight/index.html"&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/650"&gt;PR#650&lt;/a&gt; Missing input combinations in &lt;code&gt;&lt;span class="identifier"&gt;intersection&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                      and introduction of tupled-output.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/671"&gt;PR#671&lt;/a&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;d3&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;point_xyz&lt;/span&gt;&lt;/code&gt;
"                      geometry model (thanks to Digvijay Janartha).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved issues
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/657"&gt;#657&lt;/a&gt; Incorrect definition of &lt;code&gt;&lt;span class="identifier"&gt;EPSG&lt;/span&gt;&lt;span class="special"&gt;:&lt;/span&gt;&lt;span class="number"&gt;3785&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/639"&gt;PR#639&lt;/a&gt; R-tree exception-safety improvement.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/668"&gt;PR#668&lt;/a&gt; Andoyer inverse formula fixed for close points.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/687"&gt;PR#687&lt;/a&gt; Fixed dangling reference in distance algorithm.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Deprecation
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/590"&gt;#590&lt;/a&gt; Support for C++03 has been deprecated and Geometry
"                      will require C++14 from Boost 1.75 onwards.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/gil/"&gt;GIL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added move constructor and move assignment operator to &lt;code&gt;&lt;span class="identifier"&gt;image&lt;/span&gt;&lt;/code&gt; class (&lt;a href="https://github.com/boostorg/gil/pull/457"&gt;PR#457&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New member function &lt;code&gt;&lt;span class="identifier"&gt;size&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class="identifier"&gt;any_image_view&lt;/span&gt;&lt;/code&gt;
"                      class (&lt;a href="https://github.com/boostorg/gil/pull/456"&gt;PR#456&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Replace Boost.Test with Boost.LightweightTest as the only test
"                      framework used in GIL (&lt;a href="https://github.com/boostorg/gil/pull/459"&gt;PR#459&lt;/a&gt;) and (&lt;a href="https://github.com/boostorg/gil/pull/464"&gt;PR#464&lt;/a&gt;). This
"                      also restructured the &lt;code&gt;&lt;span class="identifier"&gt;test&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;extension&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;io&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;/code&gt; sub-tree and targets in related
"                      &lt;code&gt;&lt;span class="identifier"&gt;Jamfile&lt;/span&gt;&lt;/code&gt;-s.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Removed remaining uses of Boost.MPL (&lt;a href="https://github.com/boostorg/gil/pull/459"&gt;PR#459&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Renamed all macros using &lt;code&gt;&lt;span class="identifier"&gt;BOOST_GIL_&lt;/span&gt;&lt;/code&gt;
"                      prefix (&lt;a href="https://github.com/boostorg/gil/pull/411"&gt;PR#411&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Renamed all CMake configuration options using &lt;code&gt;&lt;span class="identifier"&gt;BOOST_GIL_&lt;/span&gt;&lt;/code&gt; prefix (&lt;a href="https://github.com/boostorg/gil/pull/419"&gt;PR#419&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Removed &lt;code&gt;&lt;span class="identifier"&gt;extension&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;dynamic_image&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;reduce&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                      as unused and possibly unfinished (&lt;a href="https://github.com/boostorg/gil/pull/466"&gt;PR#466&lt;/a&gt;). An implementation
"                      attempt of techniques described in the paper &lt;a href="http://lubomir.org/academic/MinimizingCodeBloat.pdf"&gt;Efficient
"                      Run-Time Dispatching in Generic Programming with Minimal Code
"                      Bloat&lt;/a&gt; by Lubomir Bourdev, Jaakko Jarvi.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Removed direct dependency on Boost.MPL, Boost.System and Boost.Test.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Started removing public macros for compile-time configuration
"                      of I/O extension tests, i.e. &lt;code&gt;&lt;span class="identifier"&gt;BOOST_GIL_IO_TEST_ALLOW_READING_IMAGES&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_GIL_IO_TEST_ALLOW_WRITING_IMAGES&lt;/span&gt;&lt;/code&gt;.
"                      Instead, if a test target is built, it builds all its test
"                      cases unconditionally.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Avoid &lt;code&gt;&lt;span class="identifier"&gt;longjmp&lt;/span&gt;&lt;/code&gt;
"                      interaction during destruction of I/O extension objects (&lt;a href="https://github.com/boostorg/gil/pull/433"&gt;PR#433&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed missing alignment default value in constructor of &lt;code&gt;&lt;span class="identifier"&gt;image&lt;/span&gt;&lt;/code&gt; class (&lt;a href="https://github.com/boostorg/gil/pull/429"&gt;PR#429&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed segmentation fault when reading corrupted PNG file (&lt;a href="https://github.com/boostorg/gil/pull/414"&gt;PR#414&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed illegal initialization of return values in the old IOv1
"                      interface of I/O extension (&lt;a href="https://github.com/boostorg/gil/pull/409"&gt;PR#409&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Acknowledgements
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Samuel Debionne, Thiago Henrique Hüpner, Pranam Lashkari,
"                      Mateusz Loskot, Debabrata Mandal, Olzhas Zhumabek
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/histogram/"&gt;Histogram&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New features
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added &lt;code&gt;&lt;span class="identifier"&gt;crop&lt;/span&gt;&lt;/code&gt;
"                      command to &lt;code&gt;&lt;span class="identifier"&gt;reduce&lt;/span&gt;&lt;/code&gt;
"                      algorithm
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;slice&lt;/span&gt;&lt;/code&gt; command
"                      in &lt;code&gt;&lt;span class="identifier"&gt;reduce&lt;/span&gt;&lt;/code&gt; now
"                      works on &lt;code&gt;&lt;span class="identifier"&gt;category&lt;/span&gt;&lt;/code&gt;
"                      axis
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added &lt;code&gt;&lt;span class="identifier"&gt;count&lt;/span&gt;&lt;/code&gt;
"                      accumulator, can be used to add arbitrary metadata to each
"                      cell
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;sum&lt;/span&gt;&lt;/code&gt; algorithm
"                      gained a new argument to optionally sum only over inner bins
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Several fixes for bugs in corner cases
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enhanced documentation
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      How to use Boost.Histogram as a backend in an external API
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      More on how to use Boost.Histogram with custom accumulators
"                      and Boost.Accumulators
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      More on how to use &lt;code&gt;&lt;span class="identifier"&gt;reduce&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Updated benchmarks
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the &lt;a href="https://www.boost.org/libs/histogram/doc/html/histogram/history.html"&gt;full
"                changelog here&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/icl/"&gt;icl&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/icl/pull/23"&gt;PR#23&lt;/a&gt;: Remove references to date_time compiled library.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/icl/pull/17"&gt;PR#17&lt;/a&gt;: Fix forward decl lower and upper less equal.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Misc bugfixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/io/"&gt;IO&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Made all the IOS state saver classes non-copyable. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correctly handle error upon first read from the input stream when
"                reading a quoted string. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented &lt;code&gt;&lt;span class="identifier"&gt;ostream_joiner&lt;/span&gt;&lt;/code&gt;
"                for delimiter based joining. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Relocated &lt;code&gt;&lt;span class="identifier"&gt;ostream_string&lt;/span&gt;&lt;/code&gt;
"                from the Utility library to the IO library as &lt;code&gt;&lt;span class="identifier"&gt;ostream_put&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correctly handle stream width and fill in quoted output. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Optimize quoted output to write directly to the stream buffer. (Glen
"                Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Glen Fernandes became the maintainer of the IO library.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lexical_cast/"&gt;LexicalCast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work, including CI hardening and better workarounds for
"                broken standard libraries (thanks to Nikita Kniazev &lt;a href="https://github.com/boostorg/lexical_cast/issues/31"&gt;#31&lt;/a&gt;,
"                &lt;a href="https://github.com/boostorg/lexical_cast/issues/32"&gt;#32&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New Features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Default sink used in trivial logging, when no sinks are registered
"                      in the logging core, now automatically flushes output after
"                      each log record. (&lt;a href="https://github.com/boostorg/log/issues/103"&gt;#103&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;flush&lt;/span&gt;&lt;/code&gt; now performs a flush
"                      on the default sink used for trivial logging, when no sinks
"                      are registered.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a workaround for some syslog API implementations (e.g.
"                      glibc), which do not save the application identification string
"                      in &lt;code&gt;&lt;span class="identifier"&gt;openlog&lt;/span&gt;&lt;/code&gt;
"                      call. Such implementations could access already freed memory
"                      on each &lt;code&gt;&lt;span class="identifier"&gt;syslog&lt;/span&gt;&lt;/code&gt;
"                      call, resulting in undefined behavior. (&lt;a href="https://github.com/boostorg/log/issues/97"&gt;#97&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed that log file rotation on a specific day of month (e.g.
"                      &lt;code&gt;&lt;span class="identifier"&gt;rotation_at_time_point&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;gregorian&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;greg_day&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="special"&gt;))&lt;/span&gt;&lt;/code&gt;) could be silently ignored
"                      and not happen. (&lt;a href="https://github.com/boostorg/log/issues/98"&gt;#98&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed that &lt;code&gt;&lt;span class="identifier"&gt;text_file_backend&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;rotate_file&lt;/span&gt;&lt;/code&gt;
"                      could throw if there were no log records written yet and target
"                      file name pattern was set.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Ported various components of the library to &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
"                      to improve compatibility with C++20 allocators.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed compilation errors when building in MSYS2 Cygwin environment.
"                      (&lt;a href="https://github.com/boostorg/log/issues/102"&gt;#102&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                IMPORTANT: C++03 support is now deprecated and will be removed from
"                March 2021.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Cubic Hermite Interpolation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Modified Akima Interpolation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added PCHIP Interpolation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added Quintic Hermite Interpolation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added entropy to numerous distributions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Allow trivial quadrature case where the two end points are equal,
"                and in addition allow bounds to be interchanged.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix exp_sinh quadrature to work with complex types over a non-native
"                range.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix miscellaneous compiler warnings in factorial.hpp.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use std::chrono rather than boost::chrono in timed pFq calculations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove much of the old boost::mpl dependencies to improve constexpr
"                support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/mp11/"&gt;Mp11&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_unique_if&lt;/span&gt;&lt;/code&gt;
"                (contributed by Kris Jusiak)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_flatten&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_rotate_left&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;mp_rotate_right&lt;/span&gt;&lt;/code&gt; (contributed
"                by Duncan Barber)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_compose&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_power_set&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_partial_sum&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_iterate&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;
"                is now &lt;a href="https://en.cppreference.com/w/cpp/named_req/AllocatorAwareContainer"&gt;&lt;code&gt;&lt;span class="identifier"&gt;AllocatorAware&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Swapping of internal &lt;code&gt;&lt;span class="identifier"&gt;KeyFromValue&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;Compare&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;Hash&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;Pred&lt;/span&gt;&lt;/code&gt;
"                objects now selects the appropriate &lt;code&gt;&lt;span class="identifier"&gt;swap&lt;/span&gt;&lt;/code&gt;
"                function between &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;swap&lt;/span&gt;&lt;/code&gt;
"                and ADL candidates, in accordance with standard specifications in
"                &lt;strong&gt;[swappable.requirements]&lt;/strong&gt; (issue
"                &lt;a href="https://github.com/boostorg/multi_index/issues/29"&gt;#29&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Provided some internal copy constructors and assignment operators
"                whose default implicit definition is deprecated in C++11 onwards
"                (&lt;strong&gt;[depr.impldec]&lt;/strong&gt;), which was warned
"                about on some compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multiprecision/"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                IMPORTANT: Mark C++03 support as deprecated and due for removal in
"                2021.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Big update to cpp_int adds faster Karatsuba and Coomba multiplication
"                routines.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix conversion of gmp_rational to &lt;code&gt;&lt;span class="keyword"&gt;long&lt;/span&gt;
"                &lt;span class="keyword"&gt;double&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;__float128&lt;/span&gt;&lt;/code&gt;,
"                fixes #178.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix up libtommath support to function with the latest libtom releases.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix up some incompatibilities with the latest Intel C++ compiler.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix up &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt; arithmetic
"                support for latest MSVC release.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/outcome/"&gt;Outcome&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enhancements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Performance of Outcome-based code compiled by clang has been
"                      greatly improved. The previous implementation of Outcome's
"                      status bitfield confused clang's optimiser, which caused low
"                      quality codegen. Unlike most codegen issues, this was noticeably
"                      in empirical benchmarks of real world code, as was shown by
"                      &lt;a href="https://wg21.link/P1886"&gt;P1886 &lt;strong&gt;Error
"                      speed benchmarking&lt;/strong&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The safe part of the &lt;a href="https://github.com/ned14/outcome/tree/better_optimisation"&gt;&lt;code&gt;&lt;span class="identifier"&gt;better_optimisation&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"                      Outcome v2.2.0 future branch was merged to Outcome v2.1.3 which
"                      includes a new status bitfield implementation. This appears
"                      to not confuse clang's optimiser, and clang 9 produces code
"                      which routinely beats GCC 9's code for various canned use cases.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Installability is now CI tested per commit. Due to installability
"                      of standalone Outcome (e.g. &lt;code&gt;&lt;span class="identifier"&gt;make&lt;/span&gt;
"                      &lt;span class="identifier"&gt;install&lt;/span&gt;&lt;/code&gt;) breaking
"                      itself rather more frequently than is ideal, installability
"                      is now tested on CI per commit.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/ned14/outcome/issues/214"&gt;#214&lt;/a&gt;
"                      Newer Concepts implementing compilers were unhappy with the
"                      early check for destructibility of &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="identifier"&gt;E&lt;/span&gt;&lt;/code&gt;, so removed
"                      template constraints, falling back to static assert which runs
"                      later in the type instantiation sequence.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/ned14/outcome/issues/220"&gt;#220&lt;/a&gt;
"                      A false positive undefined behaviour sanitiser failure in some
"                      use cases of Experimental Outcome was worked around to avoid
"                      the failure message.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Suppressed a potential redundant move warning in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;poly_collection&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;for_each&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a bug by which elements were copied rather than moved in allocator-extended
"                move construction and move assigment between collections with non-propagating,
"                unequal allocators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Allocator-extended move construction no longer decays to allocator-extended
"                copy construction for the legacy version of libstdc++-v3 shipped
"                with GCC 4.8 (which can also be used by Clang).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added documentation on distribution of PDBs &lt;a href="https://github.com/boostorg/stacktrace/issues/55"&gt;#55&lt;/a&gt;, &lt;a href="https://github.com/boostorg/stacktrace/issues/47"&gt;#47&lt;/a&gt; (thanks
"                to emptyVoid and Roger Orr for information and to zlojvavan for testing).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed msvc-9 build
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work, including test fixes &lt;a href="https://github.com/boostorg/stacktrace/issues/86"&gt;#86&lt;/a&gt;, fixing typos
"                &lt;a href="https://github.com/boostorg/stacktrace/issues/84"&gt;#84&lt;/a&gt;, CI improvements and hardening, inspect tool fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/test/"&gt;Test&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.test v3.13 see the &lt;a href="https://www.boost.org/libs/test/doc/html/boost_test/change_log.html"&gt;Changes
"                log&lt;/a&gt; for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New feature: It is now possible to combine tolerance indication,
"                user message and collection comparison modifier in a single &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST&lt;/span&gt;&lt;/code&gt; expression. See change
"                logs for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes and pull requests:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GitHub Issues: &lt;a href="https://github.com/boostorg/test/issues/173"&gt;#173&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/179"&gt;#179&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/220"&gt;#220&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/221"&gt;#221&lt;/a&gt;,
"                      &lt;a href="https://github.com/boostorg/test/issues/235"&gt;#235&lt;/a&gt;
"      &lt;a href="https://github.com/boostorg/test/issues/237"&gt;#237&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/241"&gt;#241&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/245"&gt;#245&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/246"&gt;#246&lt;/a&gt;,
"                      &lt;a href="https://github.com/boostorg/test/issues/251"&gt;#251&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/253"&gt;#253&lt;/a&gt;
"      &lt;a href="https://github.com/boostorg/test/issues/254"&gt;#254&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/issues/263"&gt;#263&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Trac tickets: &lt;a href="https://svn.boost.org/trac/boost/ticket/11107"&gt;#11107&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      GitHub Pull Requests: &lt;a href="https://github.com/boostorg/test/pull/41"&gt;PR#41&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/114"&gt;PR#114&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/187"&gt;PR#187&lt;/a&gt;,
"                      &lt;a href="https://github.com/boostorg/test/pull/239"&gt;PR#239&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/247"&gt;PR#247&lt;/a&gt;
"      &lt;a href="https://github.com/boostorg/test/pull/252"&gt;PR#252&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/259"&gt;PR#259&lt;/a&gt;, &lt;a href="https://github.com/boostorg/test/pull/265"&gt;PR#265&lt;/a&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/throw_exception/"&gt;ThrowException&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added an overload of &lt;code&gt;&lt;span class="identifier"&gt;throw_exception&lt;/span&gt;&lt;/code&gt;
"                that takes a &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;/code&gt;
"                object.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                NOTE: Projects using &lt;code&gt;&lt;span class="identifier"&gt;BOOST_THROW_EXCEPTION&lt;/span&gt;&lt;/code&gt;
"                with exceptions disabled will need to add a definition of this new
"                overload.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/tti/"&gt;TTI&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added introspection of function templates for more recent C++ compilers
"                versions from gcc and vc++. as well as all versions of clang. Older
"                versions of vc++ before 14.0 and gcc prior to 4.8 may fail.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added specific introspection for elements of struct/class, enum,
"                and union types, which can be used for more fine-grained introspection
"                than the general 'type' introspection.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_index/"&gt;TypeIndex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work, including CI integration with inspect tool.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/utility/"&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The &lt;code&gt;&lt;span class="identifier"&gt;ostream_string&lt;/span&gt;&lt;/code&gt;
"                facility has moved from the Utility library to the IO library as
"                &lt;code&gt;&lt;span class="identifier"&gt;ostream_put&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed unused includes (thanks to Nikita Kniazev &lt;a href="https://github.com/boostorg/variant/issues/74"&gt;#74&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed zero-as-null-pointer-constat warnings (thanks to Bart Siwek
"                &lt;a href="https://github.com/boostorg/variant/issues/77"&gt;#77&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work, including typo fixes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant2/"&gt;Variant2&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;variant&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;...&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                is now trivial when all types in &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;...&lt;/span&gt;&lt;/code&gt; are trivial. This improves performance
"                by enabling it to be passed to, and returned from, functions in registers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/winapi/"&gt;WinAPI&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Headers in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;detail&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;winapi&lt;/span&gt;&lt;/code&gt;
"                are deprecated and will be removed in a future release.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Boost.WinAPI headers no longer include &lt;code&gt;&lt;span class="identifier"&gt;winerror&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;h&lt;/span&gt;&lt;/code&gt;.
"                Include &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;winapi&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;error_codes&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; to get Windows error codes.
"                (&lt;a href="https://github.com/boostorg/winapi/issues/81"&gt;#81&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_73_0.updated_tools"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/tools/build/"&gt;Build&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Includes release &lt;a href="https://github.com/boostorg/build/releases/tag/4.2.0"&gt;4.2.0&lt;/a&gt;
"                of B2.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                WARNING: Since version 4.0.0 B2 requires a capable C++11 compiler
"                to bootstrap. This is only needed to build B2 itself not to build
"                Boost for your use.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_73_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 4.0.1, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_73_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Sun, 12 Dec 2021 22:26:12 +0000
-quickbook
"feed/history/boost_1_73_0.qbk
-update_count
=7
)
(feed/history/boost_1_74_0.qbk
-item
"<item><title>Version 1.74.0</title><link>https://www.boost.org/users/history/version_1_74_0.html</link><guid>https://www.boost.org/users/history/version_1_74_0.html</guid><pubDate>Fri, 14 Aug 2020 05:02:54 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_74_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stl_interfaces/"&gt;STLInterfaces&lt;/a&gt;:&lt;/span&gt; A library
"          of CRTP bases to ease the writing of STL views, iterators, and sequence
"          containers, from Zach Laine.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_74_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added an implementation of the proposed standard executors (&lt;a href="http://wg21.link/P0443r13"&gt;P0443r13&lt;/a&gt;, &lt;a href="http://wg21.link/P1348r0"&gt;P1348r0&lt;/a&gt;,
"                and &lt;a href="http://wg21.link/P1393r0"&gt;P1393r0&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for the proposed standard executors to Asio's I/O facilities.
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The supplied executors now meet the requirements for the proposed
"                      standard executors. These classes also continue to meet the
"                      existing requirements for the Networking TS model of executors.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      All I/O objects, asynchronous operations, and utilities will
"                      interoperate with both new proposed standard executors, and
"                      with existing Networking TS executors.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The &lt;code&gt;&lt;span class="identifier"&gt;any_io_executor&lt;/span&gt;&lt;/code&gt;
"                      type alias has been introduced as the default runtime-polymorphic
"                      executor for all I/O objects. This defaults to the &lt;code&gt;&lt;span class="identifier"&gt;execution&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;any_executor&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                      template. If required for backward compatibility, &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT&lt;/span&gt;&lt;/code&gt;
"                      can be defined to use the old &lt;code&gt;&lt;span class="identifier"&gt;asio&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;executor&lt;/span&gt;&lt;/code&gt;
"                      polymorphic wrapper instead.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Support for the existing Networking TS model of executors can
"                      be disabled by defining &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_NO_TS_EXECUTORS&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added converting move construction and assignment to &lt;code&gt;&lt;span class="identifier"&gt;basic_waitable_timer&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled C++20 coroutine support when using &lt;tt&gt;gcc&lt;/tt&gt;
"                10.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added overloads of &lt;code&gt;&lt;span class="identifier"&gt;co_spawn&lt;/span&gt;&lt;/code&gt;
"                that launch an awaitable.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a new constructor overload to &lt;code&gt;&lt;span class="identifier"&gt;use_awaitable_t&lt;/span&gt;&lt;/code&gt;'s
"                default executor adapter, to enable conversion between executor types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for using &lt;code&gt;&lt;span class="identifier"&gt;detached_t&lt;/span&gt;&lt;/code&gt;
"                as a default completion token, by adding members &lt;code&gt;&lt;span class="identifier"&gt;as_default_on&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;as_default_on_t&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a move constructor to &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stream&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stream&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                write operations to linearise gather-write buffer sequences.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added compile-time detection of the deprecated &lt;code&gt;&lt;span class="identifier"&gt;asio_handler_invoke&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;asio_handler_allocate&lt;/span&gt;&lt;/code&gt;,
"                and &lt;code&gt;&lt;span class="identifier"&gt;asio_handler_deallocate&lt;/span&gt;&lt;/code&gt;
"                hooks, when &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_NO_DEPRECATED&lt;/span&gt;&lt;/code&gt;
"                is defined.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented a number of performance optimisations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added source location support to handler tracking.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented various improvements to the &lt;tt&gt;handlerviz.pl&lt;/tt&gt;
"                tool.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;tt&gt;handlerlive.pl&lt;/tt&gt; tool, which processes
"                handler tracking output to produce a list of "live" handlers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;tt&gt;handlertree.pl&lt;/tt&gt; tool, which filters handler
"                tracking output to include only those events in the tree that produced
"                the nominated handlers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added changes for clang-based Embarcadero C++ compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a deadlock that can occur when multiple threads concurrently
"                initialise the Windows I/O completion port backend.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;async_compose&lt;/span&gt;&lt;/code&gt;
"                to work with copyable handlers when passed by lvalue.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed completion signature deduction in &lt;code&gt;&lt;span class="identifier"&gt;co_spawn&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed a spurious &lt;code&gt;&lt;span class="identifier"&gt;Executor&lt;/span&gt;&lt;/code&gt;
"                base class from the &lt;code&gt;&lt;span class="identifier"&gt;executor_binder&lt;/span&gt;&lt;/code&gt;
"                implementation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Various fixes and improvements in the documentation and examples.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Consult the &lt;a href="https://www.boost.org/doc/libs/1_74_0/doc/html/boost_asio/history.html"&gt;Revision
"                History&lt;/a&gt; for further details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added missing &lt;code&gt;&lt;span class="keyword"&gt;const&lt;/span&gt;&lt;/code&gt;
"                qualifiers to some operations in &lt;code&gt;&lt;span class="identifier"&gt;atomic_ref&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for &lt;code&gt;&lt;span class="identifier"&gt;yield&lt;/span&gt;&lt;/code&gt;
"                instruction on ARMv8-A. The instruction is used internally in spin
"                loops to reduce CPU power consumption.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for C++20 &lt;a href="https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_wait_notify_ops"&gt;waiting
"                and notifying operations&lt;/a&gt;. The implementation includes generic
"                backend that involves the internal lock pool, as well as specialized
"                backends for Windows, Linux, FreeBSD, DragonFly BSD and NetBSD. Atomic
"                types provide a new method &lt;code&gt;&lt;span class="identifier"&gt;has_native_wait_notify&lt;/span&gt;&lt;/code&gt;,
"                a static boolean constant &lt;code&gt;&lt;span class="identifier"&gt;always_has_native_wait_notify&lt;/span&gt;&lt;/code&gt;
"                and a set of capability macros that allow to detect if the implementation
"                supports native waiting and notifying operations for a given type.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed internal representation of &lt;code&gt;&lt;span class="identifier"&gt;atomic_flag&lt;/span&gt;&lt;/code&gt;
"                to use 32-bit storage. This allows for more efficient waiting and
"                notifying operations on &lt;code&gt;&lt;span class="identifier"&gt;atomic_flag&lt;/span&gt;&lt;/code&gt;
"                on some platforms.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for build-time configuration of the internal lock pool
"                size. The user can define the &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ATOMIC_LOCK_POOL_SIZE_LOG2&lt;/span&gt;&lt;/code&gt;
"                macro to specify binary logarithm of the size of the lock pool. The
"                default value is 8, meaning that the size of the lock pool is 256,
"                up from 64 used in the previous release.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for a new set of atomic types dedicated for &lt;a href="https://www.boost.org/doc/html/atomic/interface.html#atomic.interface.interface_ipc"&gt;inter-process
"                communication&lt;/a&gt;: &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic_flag&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic_ref&lt;/span&gt;&lt;/code&gt;. Users are recommended
"                to port their code using non-IPC types for inter-process communication
"                to the new types. The new types provide the same set of operations
"                as their non-IPC counterparts, with the following differences:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Most operations have an added precondition that &lt;code&gt;&lt;span class="identifier"&gt;is_lock_free&lt;/span&gt;&lt;/code&gt; returns &lt;code&gt;&lt;span class="keyword"&gt;true&lt;/span&gt;&lt;/code&gt; for the given atomic object.
"                      The library will issue a compile time error if this precondition
"                      is known to be not satisfied at compile time.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      All provided operations are address-free, meaning that the
"                      atomic object (in case of &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic_ref&lt;/span&gt;&lt;/code&gt;
"                      - the referenced object) may be located in process-shared memory
"                      or mapped into the same process at multiple different addresses.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The new &lt;code&gt;&lt;span class="identifier"&gt;has_native_wait_notify&lt;/span&gt;&lt;/code&gt;
"                      operation and &lt;code&gt;&lt;span class="identifier"&gt;always_has_native_wait_notify&lt;/span&gt;&lt;/code&gt;
"                      constant indicate support for native inter-process waiting
"                      and notifying operations. When that support is not present,
"                      the operations are implemented with a busy loop, which is less
"                      efficient, but still is address-free. A separate set of capability
"                      macros is also provided to indicate this support.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new &lt;code&gt;&lt;span class="identifier"&gt;atomic_unsigned_lock_free&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;atomic_signed_lock_free&lt;/span&gt;&lt;/code&gt;
"                types introduced in C++20. The types indicate the atomic object type
"                for an unsigned or signed integer, respectively, that is lock-free
"                and preferably has native support for waiting and notifying operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new gcc assembler backends for ARMv8-A (for both AArch32 and
"                AArch64). The new backends are used to implement operations not supported
"                by compiler intrinsics (including 128-bit operations on AArch64)
"                and can also be used when compiler intrinsics are not available.
"                Both little and big endian targets are supported. AArch64 backend
"                supports extensions defined in ARMv8.1 and ARMv8.3.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for big endian targets in the legacy ARM backend based
"                on gcc assembler blocks (this backend is used on ARMv7 and older
"                targets). Previously, the backend assumed little endian memory layout,
"                which is significant for 64-bit operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved performance of seq_cst stores and thread fences on x86 by
"                using &lt;code&gt;&lt;span class="identifier"&gt;lock&lt;/span&gt;&lt;/code&gt;-prefixed
"                instructions instead of &lt;code&gt;&lt;span class="identifier"&gt;mfence&lt;/span&gt;&lt;/code&gt;.
"                This means that the operations no longer affect non-temporal stores,
"                which was also not guaranteed before. Use specialized instructions
"                and intrinsics to order non-temporal memory accesses.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed capability macros for 80-bit &lt;code&gt;&lt;span class="keyword"&gt;long&lt;/span&gt;
"                &lt;span class="keyword"&gt;double&lt;/span&gt;&lt;/code&gt; on x86 targets not
"                indicating lock-free operations even if 128-bit atomic operations
"                were available.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation of gcc asm blocks on Alpha targets.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In the gcc &lt;code&gt;&lt;span class="identifier"&gt;__sync&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; intrinsics backend, fixed that store
"                and load operations of large objects (larger than a pointer size)
"                could be non-atomic. The implementation currently assumes that small
"                objects can be stored with a single instruction atomically on all
"                modern architectures.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This update brings bug fixes and support for the following changes
"                changes in Boost.Asio:
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Beast supports &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_NO_DEPRECATED&lt;/span&gt;&lt;/code&gt;.
"                Define this to help identify areas of your Beast and Asio code which
"                use deprecated Asio interfaces.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Beast also supports &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_NO_TS_EXECUTORS&lt;/span&gt;&lt;/code&gt;.
"                Define this to identify uses of executors from the now potentially
"                outdated &lt;a href="https://cplusplus.github.io/networking-ts/draft.pdf"&gt;Networking
"                TS&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Asio will use the &lt;a href="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0443r11.html"&gt;Standard
"                Executors&lt;/a&gt; model by default. You can prevent this behaviour
"                by defining &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT&lt;/span&gt;&lt;/code&gt;
"                in which the Networking TS model will be used by default. Setting
"                this flag does not prevent a program from using executors from the
"                Standard Executors model explicitly.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
"                and Individuals Using Beast&lt;/a&gt; list.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
"                Notes&lt;/a&gt; for a complete list of changes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/bimap/"&gt;Bimap&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct allocator usage (fixes C++20 compilation). (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/config/"&gt;Config&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implement &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_CXX11_OVERRIDE&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_OVERRIDE&lt;/span&gt;&lt;/code&gt;.
"                (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented the allocator access utilities which provide a replacement
"                for &lt;code&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;
"                with individual traits and functions for each facility. They support
"                the C++11 allocator model when possible and provide a fallback for
"                C++98 compatibility. These are now used in Circular_Buffer, Wave,
"                Lockfree, Heap, Smart_Ptr, Dynamic_Bitset, Format, Bimap and more.
"                (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Multiple fixes for the &lt;code&gt;&lt;span class="identifier"&gt;library_info&lt;/span&gt;&lt;/code&gt;
"                work on empty shared objects.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Compilation fixes for C++98 and C++11 modes (&lt;a href="https://github.com/boostorg/dll/issues/28"&gt;#28&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixes for &lt;code&gt;&lt;span class="identifier"&gt;smart_library&lt;/span&gt;&lt;/code&gt;
"                manglings (thanks to XiaLiChao82 &lt;a href="https://github.com/boostorg/dll/issues/37"&gt;#37&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/endian/"&gt;Endian&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled scoped enumeration types in &lt;code&gt;&lt;span class="identifier"&gt;endian_reverse&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled &lt;code&gt;&lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="keyword"&gt;enum&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="keyword"&gt;float&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="keyword"&gt;double&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class="identifier"&gt;endian_reverse_inplace&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added an overload of &lt;code&gt;&lt;span class="identifier"&gt;endian_reverse_inplace&lt;/span&gt;&lt;/code&gt;
"                for arrays.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed compile-time checks for support for symlinks and hardlink
"                on Windows. Instead, a runtime check is used. (&lt;a href="https://github.com/boostorg/filesystem/pull/142"&gt;PR#142&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed handling of reparse points in &lt;code&gt;&lt;span class="identifier"&gt;canonical&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;read_symlink&lt;/span&gt;&lt;/code&gt;
"                on Windows. This also affects other algorithms that involve &lt;code&gt;&lt;span class="identifier"&gt;canonical&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;read_symlink&lt;/span&gt;&lt;/code&gt;
"                in their implementation. (&lt;a href="https://github.com/boostorg/filesystem/pull/100"&gt;PR#100&lt;/a&gt;, &lt;a href="https://github.com/boostorg/filesystem/issues/85"&gt;#85&lt;/a&gt;, &lt;a href="https://github.com/boostorg/filesystem/issues/99"&gt;#99&lt;/a&gt;,
"                &lt;a href="https://github.com/boostorg/filesystem/issues/123"&gt;#123&lt;/a&gt;, &lt;a href="https://github.com/boostorg/filesystem/issues/125"&gt;#125&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed that &lt;code&gt;&lt;span class="identifier"&gt;read_symlink&lt;/span&gt;&lt;/code&gt;
"                on Windows could potentially fail or cause failures elsewhere with
"                a sharing violation error, if the same symlink was opened concurrently.
"                (&lt;a href="https://github.com/boostorg/filesystem/issues/138"&gt;#138&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed that &lt;code&gt;&lt;span class="identifier"&gt;is_symlink&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;directory_entry&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; would always return &lt;code&gt;&lt;span class="keyword"&gt;false&lt;/span&gt;&lt;/code&gt;, even if the directory entry
"                actually referred to a symlink. (&lt;a href="https://github.com/boostorg/filesystem/pull/148"&gt;PR#148&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added missing status inspection operation overloads for &lt;code&gt;&lt;span class="identifier"&gt;directory_entry&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt; (e.g. &lt;code&gt;&lt;span class="identifier"&gt;is_directory&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;directory_entry&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt;
"                &lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;&amp;amp;)&lt;/span&gt;&lt;/code&gt;).
"                Removed incorrect &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt;
"                specifications for the overloads not taking the &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
"                arguments.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt; implementation
"                has been updated to perform checks on the source and target files,
"                as required by C++20 ([fs.op.copy.file]/4.1). In particular, the
"                operation will fail if the source or target file is not a regular
"                file or the source and target paths identify the same file.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt; on POSIX
"                systems will now also copy the source file permissions to the target
"                file, if the target file is overwritten.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
"                implementations based on &lt;code&gt;&lt;span class="identifier"&gt;sendfile&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;copy_file_range&lt;/span&gt;&lt;/code&gt;
"                system calls on Linux, which may improve file copying performance,
"                especially on network filesystems.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Deprecated:&lt;/strong&gt; The &lt;code&gt;&lt;span class="identifier"&gt;copy_option&lt;/span&gt;&lt;/code&gt;
"                enumeration that is used with the &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
"                operation is deprecated. As a replacement, the new enum &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;/code&gt; (note the trailing
"                's') has been added. The new enum contains values similar to the
"                &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;/code&gt; enum
"                from C++20. The old enum values are mapped onto the new enum. The
"                old enum will be removed in a future release.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;skip_existing&lt;/span&gt;&lt;/code&gt;
"                option, which allows &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
"                operation to succeed without overwriting the target file, if it exists.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;update_existing&lt;/span&gt;&lt;/code&gt;
"                option, which allows &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
"                operation to conditionally overwrite the target file, if it exists,
"                if its last write time is older than that of the replacement file.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
"                now returns &lt;code&gt;&lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;/code&gt;, which
"                indicates whether the file was copied.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New, breaking change:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;copy&lt;/span&gt;&lt;/code&gt; operation has been extended
"                and reworked to implement behavior specified in C++20 [fs.op.copy].
"                This includes support for &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;recursive&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;copy_symlinks&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;skip_symlinks&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;directories_only&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;create_symlinks&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;create_hard_links&lt;/span&gt;&lt;/code&gt; options. The
"                operation performs additional checks based on the specified options.
"                Applying &lt;code&gt;&lt;span class="identifier"&gt;copy&lt;/span&gt;&lt;/code&gt; to
"                a directory with default &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;/code&gt;
"                will now also copy files residing in that directory (but not nested
"                directories or files in those directories).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;create_directory&lt;/span&gt;&lt;/code&gt;
"                overload taking two paths. The second path is a path to an existing
"                directory, which is used as a source of permission attributes to
"                use in the directory to create.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Deprecated:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;copy_directory&lt;/span&gt;&lt;/code&gt;
"                operation has been deprecated in favor of the new &lt;code&gt;&lt;span class="identifier"&gt;create_directory&lt;/span&gt;&lt;/code&gt;
"                overload. Note that the two operations have reversed order of the
"                path arguments.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;equivalent&lt;/span&gt;&lt;/code&gt; on POSIX
"                systems now returns the actual error code from the OS if one of the
"                paths does not resolve to a file. Previously the function would return
"                an error code of 1. (&lt;a href="https://github.com/boostorg/filesystem/issues/141"&gt;#141&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;equivalent&lt;/span&gt;&lt;/code&gt; no longer
"                considers file size and last modification time in order to test whether
"                the two paths refer to the same file. These checks could result in
"                a false negative if the file was modified during the &lt;code&gt;&lt;span class="identifier"&gt;equivalent&lt;/span&gt;&lt;/code&gt; call.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;absolute&lt;/span&gt;&lt;/code&gt;
"                overloads taking &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
"                argument.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Operations that have &lt;code&gt;&lt;span class="identifier"&gt;current_path&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; as the default value of their arguments
"                and also have an &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
"                argument will use the &lt;code&gt;&lt;span class="identifier"&gt;current_path&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;&amp;amp;&lt;/span&gt; &lt;span class="identifier"&gt;ec&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; overload to obtain the current path,
"                so that its failure is reported via the &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
"                argument instead of an exception.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;space&lt;/span&gt;&lt;/code&gt; now initializes
"                the &lt;code&gt;&lt;span class="identifier"&gt;space_info&lt;/span&gt;&lt;/code&gt; structure
"                members to -1 values on error, as required by C++20 ([fs.op.space]/1).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;space&lt;/span&gt;&lt;/code&gt; on Windows
"                now accepts paths referring to arbitrary files, not only directories.
"                This is similar to POSIX systems and corresponds to the operation
"                description in C++20. (&lt;a href="https://github.com/boostorg/filesystem/issues/73"&gt;#73&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Added implementation of &lt;code&gt;&lt;span class="identifier"&gt;temp_directory_path&lt;/span&gt;&lt;/code&gt; for Windows
"                CE. (&lt;a href="https://github.com/boostorg/filesystem/pull/25"&gt;PR#25&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Improved compatibility with
"                &lt;a href="https://wasi.dev/"&gt;WASI&lt;/a&gt; platform. (&lt;a href="https://github.com/boostorg/filesystem/pull/144"&gt;PR#144&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Improved support for Embarcadero
"                compilers. (&lt;a href="https://github.com/boostorg/filesystem/pull/130"&gt;PR#130&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Added implementations of &lt;code&gt;&lt;span class="identifier"&gt;unique_path&lt;/span&gt;&lt;/code&gt; operation based on
"                &lt;code&gt;&lt;span class="identifier"&gt;getrandom&lt;/span&gt;&lt;/code&gt; (Linux),
"                &lt;code&gt;&lt;span class="identifier"&gt;arc4random_buf&lt;/span&gt;&lt;/code&gt; (OpenBSD/FreeBSD/CloudABI)
"                and BCrypt (Windows) system APIs.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Deprecated:&lt;/strong&gt; Auto-linking against
"                system libraries on Windows with MSVC-compatible compilers is deprecated
"                and will be removed in a future release. This affects users linking
"                against static library of Boost.Filesystem. Users are advised to
"                update their project build systems to either use a shared library
"                of Boost.Filesystem, or explicitly specify the dependencies of Boost.Filesystem
"                in the linker command line. Users of shared library of Boost.Filesystem
"                are not affected.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/flyweight/index.html"&gt;Flyweight&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/format/"&gt;Format&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct allocator usage (fixes C++20 compilation). (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/720"&gt;PR#720&lt;/a&gt; Additional R-tree constructors (thanks to
"                      Caian Benedicto).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Various improvements in buffer, set and relational operations.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved issues
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/709"&gt;#709&lt;/a&gt; memcpy called for object with no trivial copy-assignment.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/721"&gt;#721&lt;/a&gt; Compilation error in bgi::detail::rtree::visitors::insert.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/727"&gt;#727&lt;/a&gt; MSVC warning: conditional expression is constant.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/700"&gt;PR#700&lt;/a&gt; Missing cases for default strategies in distance
"                      algorithm.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/738"&gt;PR#738&lt;/a&gt; Longitudes out of range in direct geodesic
"                      formulas.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/gil/"&gt;GIL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added new constructor initializing &lt;code&gt;&lt;span class="identifier"&gt;any_image&lt;/span&gt;&lt;/code&gt;
"                      from r-value reference to any image (&lt;a href="https://github.com/boostorg/gil/pull/486"&gt;PR#486&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Implemented mechanism to reverse &lt;code&gt;&lt;span class="identifier"&gt;kernel_2d&lt;/span&gt;&lt;/code&gt;
"                      (&lt;a href="https://github.com/boostorg/gil/pull/489"&gt;PR#489&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      BREAKING: Replace Boost.Variant with Boost.Variant2 (&lt;a href="https://github.com/boostorg/gil/pull/474"&gt;PR#474&lt;/a&gt;)
"                      which completes removal on uses of Boost.MPL (missing from
"                      Boost 1.72.0 change added &lt;a href="https://github.com/boostorg/gil/pull/274"&gt;PR#274&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Use perfect forwarding from apply_operation to visit (&lt;a href="https://github.com/boostorg/gil/pull/491"&gt;PR#491&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      BREAKING: Removed dependency on Boost.Variant
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed invalid conversion from RGB8 to CMYK32 due to overflow
"                      (&lt;a href="https://github.com/boostorg/gil/pull/470"&gt;PR#470&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed &lt;code&gt;&lt;span class="identifier"&gt;image&lt;/span&gt;&lt;/code&gt;
"                      constructor from other image (&lt;a href="https://github.com/boostorg/gil/pull/477"&gt;PR#477&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed error &lt;code&gt;&lt;span class="identifier"&gt;plane_view_t&lt;/span&gt;&lt;/code&gt;
"                      is not a class or namespace name (&lt;a href="https://github.com/boostorg/gil/pull/481"&gt;PR#481&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed &lt;code&gt;&lt;span class="identifier"&gt;interleaved_view&lt;/span&gt;&lt;/code&gt;
"                      factory using &lt;code&gt;&lt;span class="identifier"&gt;point&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;ptrdiff_t&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; for dimension (&lt;a href="https://github.com/boostorg/gil/pull/487"&gt;PR#487&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed documentation replacing uses MPL with MP11 in tutorial
"                      (&lt;a href="https://github.com/boostorg/gil/pull/494"&gt;PR#494&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed missing header in &lt;code&gt;&lt;span class="identifier"&gt;numeric&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;kernel&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                      to make it self-contained (&lt;a href="https://github.com/boostorg/gil/pull/502"&gt;PR#502&lt;/a&gt;).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Acknowledgements
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Samuel Debionne, Pranam Lashkari, Mateusz Loskot, Debabrata
"                      Mandal
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/heap/"&gt;Heap&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct destruction of top node in &lt;code&gt;&lt;span class="identifier"&gt;skew_heap&lt;/span&gt;&lt;/code&gt;.
"                (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct and simplify allocator use. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/integer/"&gt;Integer&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation of &lt;code&gt;&lt;span class="identifier"&gt;gcd&lt;/span&gt;&lt;/code&gt;
"                in C++20 mode with clang 10.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved support for Embarcadero compilers. (&lt;a href="https://github.com/boostorg/integer/pull/21"&gt;PR#21&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/iterator/"&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;function_output_iterator&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; header is now deprecated. Users
"                should replace its inclusion with &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;function_output_iterator&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;.
"                (&lt;a href="https://github.com/boostorg/iterator/pull/51"&gt;PR#51&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved support for Embarcadero compilers. (&lt;a href="https://github.com/boostorg/iterator/pull/55"&gt;PR#55&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lexical_cast/"&gt;LexicalCast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed warnings on missing &lt;code&gt;&lt;span class="identifier"&gt;override&lt;/span&gt;&lt;/code&gt;
"                (thanks to EugeneZelenko &lt;a href="https://github.com/boostorg/lexical_cast/issues/35"&gt;#35&lt;/a&gt;, &lt;a href="https://github.com/boostorg/lexical_cast/issues/34"&gt;#34&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixes for the the Embarcadero compilers (thanks to Edward Diener).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The syslog sink backend now verifies the IP version of the
"                      local and target addresses set by user. The addresses must
"                      have the same IP version as was specified in the &lt;code&gt;&lt;span class="identifier"&gt;ip_version&lt;/span&gt;&lt;/code&gt; named parameter
"                      on the sink backend construction (by default, IPv4 is assumed).
"                      When an address is obtained as a result of host name resolution,
"                      only addresses with matching IP version are considered. (&lt;a href="https://github.com/boostorg/log/issues/119"&gt;#119&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New Features:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Move constructors and assignment operators of various components
"                      were marked &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a new &lt;code&gt;&lt;span class="identifier"&gt;range_manip&lt;/span&gt;&lt;/code&gt;
"                      stream manipulator that can be used for outputting elements
"                      of a range, optionally separated by a delimiter.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a new &lt;code&gt;&lt;span class="identifier"&gt;tuple_manip&lt;/span&gt;&lt;/code&gt;
"                      stream manipulator that can be used for outputting elements
"                      of a tuple or any other heterogeneous sequence, optionally
"                      separated by a delimiter.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a new &lt;code&gt;&lt;span class="identifier"&gt;optional_manip&lt;/span&gt;&lt;/code&gt;
"                      stream manipulator that can be used for outputting optionally
"                      present values.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/mp11/"&gt;Mp11&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved compilation performance of &lt;code&gt;&lt;span class="identifier"&gt;mp_with_index&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;N&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; for large &lt;code&gt;&lt;span class="identifier"&gt;N&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;tuple_transform&lt;/span&gt;&lt;/code&gt;
"                (contributed by Hans Dembinski.)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;a href="https://www.boost.org/libs/multi_index/doc/tutorial/basics.html#node_handling"&gt;node
"                extraction and insertion&lt;/a&gt; following the analogous interface
"                of associative containers as introduced in C++17. This feature has
"                also been extended to non key-based indices, in contrast to C++ standard
"                library sequence containers, which do not provide such functionality.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clarified documentation on read/write key extractors (issue &lt;a href="https://github.com/boostorg/multi_index/issues/32"&gt;#32&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/nowide/"&gt;Nowide&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The library now requires a C++11-compliant compiler and stdlib
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                LFS: Add support for files &amp;gt; 2 GB where the underlying system
"                supports it
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Generic UTF conversion functions are now available in the &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;nowide&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;utf&lt;/span&gt; &lt;span class="keyword"&gt;namespace&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for &lt;code&gt;&lt;span class="identifier"&gt;stat&lt;/span&gt;&lt;/code&gt;
"                with UTF-8 paths
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/outcome/"&gt;Outcome&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Announcements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The v2.1 branch is expected to be retired end of 2020, with
"                      the v2.2 branch becoming the default. You can use the future
"                      v2.2 branch now using &lt;a href="https://github.com/ned14/outcome/tree/better_optimisation"&gt;&lt;code&gt;&lt;span class="identifier"&gt;better_optimisation&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;.
"                      This branch has a number of major breaking changes to Outcome
"                      v2.1, see the front page for details.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enhancements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      BREAKING CHANGE &lt;code&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;/code&gt;
"                      results and outcomes no longer default construct types during
"                      explicit construction. Previously if you explicitly constructed
"                      a &lt;code&gt;&lt;span class="identifier"&gt;result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                      from a non-errored &lt;code&gt;&lt;span class="identifier"&gt;result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, it default constructed
"                      &lt;code&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;/code&gt;. This was
"                      found to cause unhelpful surprise, so it has been disabled.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New macro &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/span&gt;&lt;/code&gt;.
"                      The macro &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/span&gt;&lt;/code&gt;
"                      can be used to enable aliasing of older naming and features
"                      to newer naming and features when using a newer version of
"                      Outcome.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Concepts now have snake case style naming instead of camel
"                      case style. When Outcome was first implemented, it was thought
"                      that C++ 20 concepts were going to have camel case style. This
"                      was changed before the C++ 20 release, and Outcome's concepts
"                      have been renamed similarly. This won't break any code in Outcome
"                      v2.1, as compatibility aliases are provided. However code compiled
"                      against Outcome v2.2 will need to be upgraded, unless &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/span&gt;&lt;/code&gt;
"                      is set to &lt;code&gt;&lt;span class="number"&gt;210&lt;/span&gt;&lt;/code&gt; or
"                      lower.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Concepts now live in &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_V2_NAMESPACE&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;concepts&lt;/span&gt;&lt;/code&gt;
"                      namespace. Previously concepts lived in the &lt;code&gt;&lt;span class="identifier"&gt;convert&lt;/span&gt;&lt;/code&gt;
"                      namespace, now they live in their own namespace.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      New concepts &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;basic_outcome&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; added. End users were finding
"                      an unhelpful gap in between &lt;code&gt;&lt;span class="identifier"&gt;is_basic_result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;value_or_error&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; where they wanted a concept
"                      that matched types which were &lt;code&gt;&lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;/code&gt;,
"                      but not exactly one of those. Concepts filling that gap were
"                      added.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Operation &lt;code&gt;&lt;span class="identifier"&gt;TRY&lt;/span&gt;&lt;/code&gt;
"                      works differently from Outcome v2.2 onwards. This is a severely
"                      code breaking change which change the syntax of how one uses
"                      &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_TRY&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;. A regular expression suitable
"                      for upgrading code can be found in the list of changes between
"                      Outcome v2.1 and v2.2.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/ned14/outcome/issues/224"&gt;#224&lt;/a&gt;
"                      The clang Apple ships in Xcode 11.4 (currently the latest)
"                      has not been patched with the fixes to LLVM clang that fix
"                      &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_constructible&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt;
"                      &lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;)&lt;/span&gt;&lt;/code&gt;
"                      failing to compile which I originally submitted years ago.
"                      So give up waiting on Apple to fix their clang, add a workaround
"                      to Outcome.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Spare storage could not be used from within no-value policy
"                      classes. Due to an obvious brain fart when writing the code
"                      at the time, the spare storage APIs had the wrong prototype
"                      which prevented them working from within policy classes. Sorry.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed internal ambiguity problem between &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;type_erasure&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;any&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;any&lt;/span&gt;&lt;/code&gt; (issue &lt;a href="https://github.com/boostorg/poly_collection/issues/17"&gt;#17&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/smart_ptr/"&gt;SmartPtr&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;owner_equals&lt;/span&gt;&lt;/code&gt;
"                to &lt;code&gt;&lt;span class="identifier"&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;weak_ptr&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;local_shared_ptr&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;owner_hash_value&lt;/span&gt;&lt;/code&gt;
"                to &lt;code&gt;&lt;span class="identifier"&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;weak_ptr&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;owner_equal_to&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;owner_hash&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt; specializations for &lt;code&gt;&lt;span class="identifier"&gt;shared_ptr&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;local_shared_ptr&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt; support to, and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;equal_to&lt;/span&gt;&lt;/code&gt;
"                specializations for, &lt;code&gt;&lt;span class="identifier"&gt;weak_ptr&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a build error when compiled with &lt;code&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;fno&lt;/span&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;span class="identifier"&gt;exceptions&lt;/span&gt;&lt;/code&gt; (thanks to Jeremiah
"                Rodriguez &lt;a href="https://github.com/boostorg/stacktrace/issues/91"&gt;#91&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/system/"&gt;System&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; now returns &lt;code&gt;&lt;span class="identifier"&gt;failed&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;span class="identifier"&gt;value&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt; &lt;span class="special"&gt;!=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_traits/"&gt;Type_Traits&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented &lt;code&gt;&lt;span class="identifier"&gt;conjunction&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;disjunction&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;negation&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;is_trivially_copyable&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;is_scoped_enum&lt;/span&gt;&lt;/code&gt;, and
"                &lt;code&gt;&lt;span class="identifier"&gt;is_unscoped_enum&lt;/span&gt;&lt;/code&gt;.
"                (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant/"&gt;Variant&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed warnings on missing &lt;code&gt;&lt;span class="identifier"&gt;override&lt;/span&gt;&lt;/code&gt;
"                (thanks to EugeneZelenko &lt;a href="https://github.com/boostorg/variant/issues/78"&gt;#78&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixes for the the Embarcadero compilers (thanks to Edward Diener
"                &lt;a href="https://github.com/boostorg/variant/issues/79"&gt;#79&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated header locations to avoid warnings about using deprecated
"                headers (thanks to Andrey Semashev &lt;a href="https://github.com/boostorg/variant/issues/80"&gt;#80&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant2/"&gt;Variant2&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for derived types in &lt;code&gt;&lt;span class="identifier"&gt;visit&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved compilation performance for many (hundreds of) alternatives.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for &lt;code&gt;&lt;span class="identifier"&gt;visit&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;R&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/wave/"&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implement C++20 features for variadics, including &lt;code&gt;&lt;span class="identifier"&gt;__VA_OPT__&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href="https://github.com/boostorg/wave/pull/75"&gt;PR#75&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implement &lt;code&gt;&lt;span class="identifier"&gt;__has_include&lt;/span&gt;&lt;/code&gt;
"                (&lt;a href="https://github.com/boostorg/wave/pull/102"&gt;PR#102&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Introduce new sample: &lt;code&gt;&lt;span class="identifier"&gt;check_macro_naming&lt;/span&gt;&lt;/code&gt;,
"                useful with Boost itself (&lt;a href="https://github.com/boostorg/wave/pull/97"&gt;PR#97&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix compilation issue caused by &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator&lt;/span&gt;&lt;/code&gt;
"                member removal in C++20 (&lt;a href="https://github.com/boostorg/wave/pull/72"&gt;PR#72&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Repair Xpressive lexer and &lt;code&gt;&lt;span class="identifier"&gt;token_statistics&lt;/span&gt;&lt;/code&gt;
"                sample (&lt;a href="https://github.com/boostorg/wave/pull/79"&gt;PR#79&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Repair lexertl lexer (&lt;a href="https://github.com/boostorg/wave/pull/78"&gt;PR#78&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensure hooks are run on predefined macros as well (&lt;a href="https://github.com/boostorg/wave/pull/87"&gt;PR#87&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Various minor bug fixes
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                C++98/03 support is now deprecated and will be removed in 1.77
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/yap/"&gt;YAP&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation errors for placeholders; they now work in the general
"                case, and in particular work with yap::print().
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                constexpr all the YAP.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix printing of correct value category in yap::print().
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Doc clarification.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_74_0.updated_tools"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/tools/boostbook/"&gt;Boostbook&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Change encoding of generated documentation from US-ASCII to UTF-8.
"                (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_74_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 4.0.1, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_74_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Tue, 27 Apr 2021 03:13:52 +0000
-quickbook
"feed/history/boost_1_74_0.qbk
-update_count
=5
)
(feed/history/boost_1_75_0.qbk
-item
"<item><title>Version 1.75.0</title><link>https://www.boost.org/users/history/version_1_75_0.html</link><guid>https://www.boost.org/users/history/version_1_75_0.html</guid><pubDate>Fri, 11 Dec 2020 19:50:02 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_75_0.known_issues"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Known Issues&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost.Operators is currently &lt;strong&gt;incompatible with C++20&lt;/strong&gt;
"      compilers, which in some cases may manifest as an infinite recursion or infinite
"      loop in runtime when a comparison operator is called. The problem is caused
"      by the new operator rewriting behavior introduced in C++20. As a workaround,
"      users are advised to target C++17 or older C++ standard. More details can be
"      found in &lt;a href="https://github.com/boostorg/utility/issues/65"&gt;#65&lt;/a&gt;.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_75_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/json/"&gt;JSON&lt;/a&gt;:&lt;/span&gt; JSON parsing, serialization,
"          and DOM in C++11, from Vinnie Falco and Krystian Stasiowski.
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fast compilation requiring only C++11
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Easy and safe modern API with allocator support
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Compile without Boost, define &lt;code&gt;&lt;span class="identifier"&gt;BOOST_JSON_STANDALONE&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Optional header-only, without linking to a library
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/leaf/"&gt;LEAF&lt;/a&gt;:&lt;/span&gt; A lightweight error-handling
"          library for C++11, from Emil Dotchevski.
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Small single-header format, no dependencies.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Designed for maximum efficiency ("happy" path and "sad"
"                path).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                No dynamic memory allocations, even with heavy payloads.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                O(1) transport of arbitrary error types (independent of call stack
"                depth).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Can be used with or without exception handling.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/pfr/"&gt;PFR&lt;/a&gt;:&lt;/span&gt; Basic reflection without macro
"          or boilerplate code for user defined types, from Antony Polukhin.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_75_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled support for UNIX domain sockets on Windows.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added executor-converting construction and assignment to &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_resolver&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added compatibility between polymorphic executors and the (deprecated)
"                handler invocation hook.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;as_single&lt;/span&gt;&lt;/code&gt;
"                completion token adapter.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for &lt;code&gt;&lt;span class="identifier"&gt;MSG_NOSIGNAL&lt;/span&gt;&lt;/code&gt;
"                on more platforms by using &lt;code&gt;&lt;span class="identifier"&gt;_POSIX_VERSION&lt;/span&gt;&lt;/code&gt;
"                to detect whether it is supported.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the ability to compile using libpthread on Windows.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added workarounds for the Intel C++ compiler.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added more support for detecting and optimising for handlers that
"                have no custom executor.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reduced lock contention for timer cancellation on Windows.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reinstated a previously removed null-pointer check, as it had a measurable
"                impact on performance.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed the &lt;code&gt;&lt;span class="identifier"&gt;executor&lt;/span&gt;&lt;/code&gt;
"                concept to test for a const-qualified &lt;code&gt;&lt;span class="identifier"&gt;execute&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;any_executor&lt;/span&gt;&lt;/code&gt;
"                support for builds without RTTI support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed the &lt;code&gt;&lt;span class="identifier"&gt;thread_pool&lt;/span&gt;&lt;/code&gt;
"                unit test to work without RTTI support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed C++20 coroutines compatibility with clang on Windows.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some compatibility issues with Windows Runtime.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed shadow name warnings caused by addition of &lt;code&gt;&lt;span class="identifier"&gt;asio&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;query&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a "logical ‘or’ of equal expressions" warning
"                on linux.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a benign switch fallthrough warning.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added missing &lt;code&gt;&lt;span class="identifier"&gt;push&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;pop_options&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                includes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Suppressed zero-as-null-pointer-constant warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a comma-operator warning.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated the documentation to clarify when the &lt;tt&gt;select&lt;/tt&gt;
"                reactor is used on Windows.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed potential ambiguity caused by &lt;code&gt;&lt;span class="identifier"&gt;any_executor&lt;/span&gt;&lt;/code&gt;
"                comparisons and conversion.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added detection of non-experimental C++20 coroutines on MSVC 19.8.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compatibility with uClibc.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;strand&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                adaptation of Networking TS executors when targeting older C++ versions
"                or less conformant compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Consult the &lt;a href="https://www.boost.org/doc/libs/1_75_0/doc/html/boost_asio/history.html"&gt;Revision
"                History&lt;/a&gt; for further details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented SSE2 and SSE4.1 versions of address lookup algorithm,
"                which is used in the internal lock pool implementation. This may
"                improve performance of waiting and notifying operations in heavily
"                contended cases.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a possible compilation error on AArch64 targets caused by incorrect
"                instructions generated for bitwise (logical) operations with immediate
"                constants. (&lt;a href="https://github.com/boostorg/atomic/issues/41"&gt;#41&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This update brings bug fixes and support for the &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_ENBALE_HANDLER_TRACKING&lt;/span&gt;&lt;/code&gt;
"                compile flag from Boost.Asio:
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
"                and Individuals Using Beast&lt;/a&gt; list.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
"                Notes&lt;/a&gt; for a complete list of changes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/container/"&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                New &lt;code&gt;devector&lt;/code&gt;
"                container.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs/issues:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/152"&gt;#152&lt;/a&gt; Tree-based containers have troubles with move-only
"                      types.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/156"&gt;#156&lt;/a&gt; Compile error with vector.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/pull/157"&gt;PR#157&lt;/a&gt; Add missing include.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/159"&gt;#159&lt;/a&gt;: pmr::monotonic_buffer_resource crashes on
"                      large single allocations.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/160"&gt;#160&lt;/a&gt;: Usage of uses_allocator needs a remove_cvref_t.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/162"&gt;#162&lt;/a&gt;: small_vector on MSVC x86 call-by-value crash.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/161"&gt;#161&lt;/a&gt;: polymorphic_allocator(memory_resource*) non-standard
"                      extension causes headache.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/pull/163"&gt;PR#163&lt;/a&gt;: container_rebind for small_vector with
"                      options.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/165"&gt;#165&lt;/a&gt;: Link error with shared library and memory_resource
"                      inline members.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/pull/166"&gt;PR#166&lt;/a&gt;: Fix encoding error in copyright headers.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/pull/167"&gt;PR#167&lt;/a&gt;: error: the address of 'msg' will always
"                      evaluate as 'true' warning with GCC 4.4.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/169"&gt;#169&lt;/a&gt;: flood of warnings building dlmalloc_ext_2_8_6.c
"                      on clang11.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/endian/"&gt;Endian&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;endian_arithmetic&lt;/span&gt;&lt;/code&gt;
"                no longer inherits from &lt;code&gt;&lt;span class="identifier"&gt;endian_buffer&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                When &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ENDIAN_NO_CTORS&lt;/span&gt;&lt;/code&gt;
"                is defined, the unaligned &lt;code&gt;&lt;span class="identifier"&gt;endian_buffer&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;endian_arithmetic&lt;/span&gt;&lt;/code&gt;
"                are C++03 PODs, to enable use of &lt;code&gt;&lt;span class="identifier"&gt;__attribute__&lt;/span&gt;&lt;span class="special"&gt;((&lt;/span&gt;&lt;span class="identifier"&gt;packed&lt;/span&gt;&lt;span class="special"&gt;))&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;creation_time&lt;/span&gt;&lt;/code&gt;
"                operation, which allows to obtain file creation time. (Inspired by
"                &lt;a href="https://github.com/boostorg/filesystem/pull/134"&gt;PR#134&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The returned value of &lt;code&gt;&lt;span class="identifier"&gt;last_write_time&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;p&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;ec&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; operation in case of failure has
"                been changed to a minimal value representable by &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;time_t&lt;/span&gt;&lt;/code&gt;
"                instead of -1.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The returned value of &lt;code&gt;&lt;span class="identifier"&gt;hard_link_count&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;p&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;ec&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; operation in case of failure has
"                been changed to &lt;code&gt;&lt;span class="keyword"&gt;static_cast&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;uintmax_t&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;(-&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; instead of 0.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On POSIX systems, &lt;code&gt;&lt;span class="identifier"&gt;file_size&lt;/span&gt;&lt;/code&gt;
"                will now indicate error code &lt;code&gt;&lt;span class="identifier"&gt;errc&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;function_not_supported&lt;/span&gt;&lt;/code&gt;
"                if the path resolves to a non-regular file. Previously, &lt;code&gt;&lt;span class="identifier"&gt;errc&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;operation_not_permitted&lt;/span&gt;&lt;/code&gt; was reported.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Linux, many operations now use &lt;code&gt;&lt;span class="identifier"&gt;statx&lt;/span&gt;&lt;/code&gt;
"                system call internally, when possible, which allows to reduce the
"                amount of information queried from the filesystem and potentially
"                improve performance. The &lt;code&gt;&lt;span class="identifier"&gt;statx&lt;/span&gt;&lt;/code&gt;
"                system call was introduced in Linux kernel 4.11.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed &lt;code&gt;&lt;span class="keyword"&gt;const&lt;/span&gt;&lt;/code&gt;-qualification
"                from return types of some &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;
"                methods. This could prevent move construction and move assignment
"                at the call site in some cases. (&lt;a href="https://github.com/boostorg/filesystem/issues/160"&gt;#160&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On OpenBSD 4.4 and newer, use &lt;code&gt;&lt;span class="identifier"&gt;statvfs&lt;/span&gt;&lt;/code&gt;
"                system call to obtain filesystem space information. (Inspired by
"                &lt;a href="https://github.com/boostorg/filesystem/pull/162"&gt;PR#162&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Windows, &lt;code&gt;&lt;span class="identifier"&gt;space&lt;/span&gt;&lt;/code&gt;
"                now returns with an error if the provided path does not idendify
"                an existing file. (&lt;a href="https://github.com/boostorg/filesystem/issues/167"&gt;#167&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                WARNING: Following the deprecation notice of C++03 issued with Boost
"                1.73, from now on the Boost.Geometry requires a capable C++14 compiler.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/726"&gt;PR#726&lt;/a&gt; Umbrella strategies for area, envelope, expand
"                      (undocumented for now).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/733"&gt;PR#733&lt;/a&gt; Added example of adaptation of std::array&amp;lt;&amp;gt;
"                      to Point concept (thanks to Ben FrantzDale).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/745"&gt;PR#745&lt;/a&gt; constexpr added in geometries and arithmetic.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/747"&gt;PR#747&lt;/a&gt; Added optional traits::make (undocumented
"                      for now).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/748"&gt;PR#748&lt;/a&gt; Modernized usage of type traits.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/759"&gt;PR#759&lt;/a&gt; MPL_ASSERT replaced with standard static_assert.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/767"&gt;PR#767&lt;/a&gt; Modernized usage of tuple.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved issues
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/716"&gt;#716&lt;/a&gt; Dangling proxy references.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Various fixes in set operations and buffer.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/gil/"&gt;GIL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                BREAKING: In next release, we are going to drop support for GCC 5.
"                We may also change the required minimum C++ version from C++11 to
"                C++14.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/histogram/"&gt;Histogram&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This update brings
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Bug-fixes for corner-cases
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Small documentation improvements
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixes for new warnings from latest compilers and when compiling
"                      against the C++20 standard
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the full &lt;a href="https://www.boost.org/libs/histogram/doc/html/histogram/history.html"&gt;Release
"                Notes&lt;/a&gt; for a complete list of changes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/interprocess/"&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/issues/127"&gt;#127&lt;/a&gt;: static assertion failure with boost interprocess
"                      1.74 and basic_managed_shared_memory.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/intrusive/"&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/intrusive/pull/48"&gt;PR#48&lt;/a&gt;: MSVC "assignment within conditional"
"                      warning fix.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/intrusive/pull/49"&gt;PR#49&lt;/a&gt;: Fix empty control statement warnings.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/intrusive/issues/52"&gt;#52&lt;/a&gt;: Invalid casting in BOOST_INTRUSIVE_BSR_INTRINSIC.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Corrected the file counter that would be used in &lt;code&gt;&lt;span class="identifier"&gt;text_file_backend&lt;/span&gt;&lt;/code&gt; when generating
"                      the target file name (based on the pattern set by &lt;code&gt;&lt;span class="identifier"&gt;set_target_file_name_pattern&lt;/span&gt;&lt;/code&gt;
"                      method) when the log file is rotated. (&lt;a href="https://github.com/boostorg/log/issues/125"&gt;#125&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Replaced a volatile version counter in &lt;code&gt;&lt;span class="identifier"&gt;basic_sink_frontend&lt;/span&gt;&lt;/code&gt;
"                      with an atomic. (&lt;a href="https://github.com/boostorg/log/issues/128"&gt;#128&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      In the &lt;code&gt;&lt;span class="identifier"&gt;asynchronous_sink&lt;/span&gt;&lt;/code&gt;
"                      frontend, resolved a possible conflict between &lt;code&gt;&lt;span class="identifier"&gt;flush&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;run&lt;/span&gt;&lt;/code&gt;
"                      methods, if &lt;code&gt;&lt;span class="identifier"&gt;run&lt;/span&gt;&lt;/code&gt;
"                      is called from a user's thread instead of the internal dedicated
"                      thread spawned by the frontend. (&lt;a href="https://github.com/boostorg/log/issues/131"&gt;#131&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/move/"&gt;Move&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/move/issues/30"&gt;#30&lt;/a&gt;: (void) C-cast is a non-portable way of suppressing
"                      compiler warnings.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/mp11/"&gt;Mp11&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_pairwise_fold&lt;/span&gt;&lt;/code&gt;
"                (suggested by Barry Revzin)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed &lt;code&gt;&lt;span class="identifier"&gt;mp_invoke&lt;/span&gt;&lt;/code&gt;
"                (use &lt;code&gt;&lt;span class="identifier"&gt;mp_invoke_q&lt;/span&gt;&lt;/code&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/optional/"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;none&lt;/span&gt;&lt;/code&gt; is &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;-declared.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;a href="https://github.com/boostorg/optional/issues/78"&gt;issue
"                #78&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/outcome/"&gt;Outcome&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Announcements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      After a year and three major Boost releases announcing this
"                      upcoming change, this is the FINAL RELEASE of the v2.1 branch.
"                      From Boost 1.76 onwards, the v2.2 branch becomes the default.
"                      This branch has a number of major breaking changes to Outcome
"                      v2.1, see the documentation for details.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enhancements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      The ADL discovered event hooks have been replaced with policy-specified
"                      event hooks instead. This is due to brittleness (where hooks
"                      would quietly self-disable if somebody changed something),
"                      compiler bugs (a difference in compiler settings causes the
"                      wrong hooks, or some but not all hooks, to get discovered),
"                      and end user difficulty in using them at all. The policy-specified
"                      event hooks can be told to default to ADL discovered hooks
"                      for backwards compatibility: set &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_ENABLE_LEGACY_SUPPORT_FOR&lt;/span&gt;&lt;/code&gt;
"                      to less than &lt;code&gt;&lt;span class="number"&gt;220&lt;/span&gt;&lt;/code&gt;
"                      to enable emulation.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improve configuring &lt;code&gt;&lt;span class="identifier"&gt;OUTCOME_GCC6_CONCEPT_BOOL&lt;/span&gt;&lt;/code&gt;.
"                      Older GCCs had boolean based concepts syntax, whereas newer
"                      GCCs are standards conforming. However the precise logic of
"                      when to use legacy and conforming syntax was not well understood,
"                      which caused Outcome to fail to compile depending on what options
"                      you pass to GCC. The new logic always uses the legacy syntax
"                      if on GCC 8 or older, otherwise we use conforming syntax if
"                      and only if GCC is in C++ 20 mode or later. This hopefully
"                      will resolve the corner case build failures on GCC.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Boost.Outcome should now compile with &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
"                      defined. Thanks to Emil, maintainer of Boost.Exception, making
"                      a change for me, Boost.Outcome should now compile with C++
"                      exceptions globally disabled. You won't be able to use &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;exception_ptr&lt;/span&gt;&lt;/code&gt; as it can't
"                      be included if C++ exceptions are globally disabled.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/ned14/outcome/issues/236"&gt;#236&lt;/a&gt;
"                      In the Coroutine support the &lt;code&gt;&lt;span class="identifier"&gt;final_suspend&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; was not &lt;code&gt;&lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt;,
"                      despite being required to be so in the C++ 20 standard. This
"                      has been fixed, but only if your compiler implements &lt;code&gt;&lt;span class="identifier"&gt;noop_coroutine&lt;/span&gt;&lt;/code&gt;. Additionally,
"                      if &lt;code&gt;&lt;span class="identifier"&gt;noop_coroutine&lt;/span&gt;&lt;/code&gt;
"                      is available, we use the much more efficient coroutine handle
"                      returning variant of &lt;code&gt;&lt;span class="identifier"&gt;await_suspend&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; which should significantly
"                      improve codegen and context switching performance.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/polygon/"&gt;Polygon&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                C++20 fixes for &lt;code&gt;&lt;span class="identifier"&gt;event_comparison_type&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;vertex_equality_predicate_type&lt;/span&gt;&lt;/code&gt;,
"                and &lt;code&gt;&lt;span class="identifier"&gt;voronoi_predicates&lt;/span&gt;&lt;/code&gt;.
"                (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/preprocessor/"&gt;Preprocessor&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                When variadic data is empty in C++20 mode with __VA_OPT__ support
"                the variadic size has been corrected to be 0. This also means that
"                in this C++20 mode it is now valid to convert to and from empty arrays
"                and lists and variadic data. The end-user can read the "C++20
"                Support For Variadic Macros" part of the "variadic macros"
"                topic for more information about empty variadic data in the library.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The macro BOOST_PP_IS_STANDARD() has been added for identifying if
"                the currently used preprocessor is a C++ standard conforming preprocessor.
"                A number of preprocessors which generally work correctly with the
"                library but need various internal workarounds, including the currently
"                default VC++ preprocessor, are not considered C++ standard conforming
"                preprocessors. However most preprocessors, including among others
"                gcc, clang, and the new but currently non-default VC++ preprocessor
"                in VS2019, are C++ standard conforming preprocessors.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                For C++ standard conforming preprocessors a number of the limits
"                defined in the config/limits.hpp can now be changed to higher amounts
"                for a TU. The end-user should read the "limitations" topic
"                to understand how and which limits can be changed.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                For C++ standard conforming preprocessors, in order to allow the
"                maximum number of FOR and WHILE iterations, the beginning 'r' and
"                'd' iteration numbers in the user-defined macros start at 1 and not
"                2, as it did in previous releases. This could be a breaking change
"                if these iteration numbers are used in the user-defined macros (
"                they probably would not be ), but the change was necessary to fix
"                some arcane bugs when dealing with numerical/logical operations with
"                maximum numbers as well to allow the user-defined macros to be called
"                the correct possible maximum number of times. For non-C++ conforming
"                preprocessors, this change was not made because those non-conforming
"                C++ preprocessors generally have limitations which disallow the maximum
"                number of looping constructs to be run, and it was felt not to introduce
"                a possible breaking change to those more fragile preprocessors would
"                be better. It was also felt that besides fixing some arcane preprocessor
"                bugs and providing the possible maximum number of user-defined macro
"                invocations, this change could be made because it has never been
"                documented what the starting 'r' and 'd' iteration numbers actually
"                are but only that these numbers are incremented for each iteration.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The library has been upgraded to assume variadic macro support for
"                any compiler working with the library. Ostensibly this means that
"                the library is now a C++11 on up library, yet most of the major compilers,
"                including gcc, clang, and VC++, also support variadic macros in C++98/C++03
"                mode as long as strict compliance to C++98/C++03 is not turned on
"                when using one of those compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/rational/"&gt;Rational&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix Rational operators to not break under new C++20 &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;==&lt;/span&gt;&lt;/code&gt;
"                rewriting rules. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/signals2/"&gt;Signals2&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct C++ allocator model support to fix compilation in C++20 standards
"                mode. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/system/"&gt;System&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The platform-specific headers &lt;code&gt;&lt;span class="identifier"&gt;windows_error&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;linux_error&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class="identifier"&gt;cygwin_error&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                emit deprecation messages and are slated for removal.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The old names for &lt;code&gt;&lt;span class="identifier"&gt;generic_category&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;system_category&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; emit deprecation messages and are
"                slated for removal.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;failed&lt;/span&gt;&lt;/code&gt; is deprecated and is slated
"                for removal. &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt; &lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                for &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;/code&gt;
"                has been reverted to its old meaning of &lt;code&gt;&lt;span class="identifier"&gt;value&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt; &lt;span class="special"&gt;!=&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;/code&gt;. This is done for compatibility with
"                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;/code&gt; as the next release
"                is expected to improve interoperability with &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;system_error&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                even further. &lt;em&gt;Note that this does not
"                affect&lt;/em&gt; &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;failed&lt;/span&gt;&lt;/code&gt;,
"                which is still alive and well.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The overload of &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;message&lt;/span&gt;&lt;/code&gt;
"                that takes a buffer is deprecated and is slated for removal, for
"                the same reasons. &lt;em&gt;Note that this does
"                not affect&lt;/em&gt; &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;message&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/numeric/ublas/"&gt;uBLAS&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct C++ allocator model support to fix compilation in C++20 standards
"                mode. (Glen Fernandes and Conrad Poelman)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/vmd/"&gt;VMD&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The VMD number parsing has been upgraded to support the ability for
"                the end-user to change the number limits in the Preprocessor library.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The macro BOOST_VMD_IS_GENERAL_IDENTIFIER has been added to support
"                the parsing of input that represents a preprocessor token which matches
"                the VMD identifier syntax, without having to register the identifier
"                as a specific identifier.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/wave/"&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added new C++20 tokens, including the spaceship operator &amp;lt;=&amp;gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/wave/issues/94"&gt;#94&lt;/a&gt;: fix incorrect behavior of __LINE__ and __FILE__
"                      under rescanning
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_75_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 4.0.1, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0,
"                9.0.0, 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_75_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Fri, 03 Dec 2021 14:26:08 +0000
-quickbook
"feed/history/boost_1_75_0.qbk
-update_count
=6
)
(feed/history/boost_1_76_0.qbk
-item
"<item><title>Version 1.76.0</title><link>https://www.boost.org/users/history/version_1_76_0.html</link><guid>https://www.boost.org/users/history/version_1_76_0.html</guid><pubDate>Fri, 16 Apr 2021 21:05:27 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_76_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          No new libraries
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_76_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;scope_id_type&lt;/span&gt;&lt;/code&gt; type alias.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;port_type&lt;/span&gt;&lt;/code&gt; type alias.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt; specialisations for IP addresses.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt; specialisations for &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_endpoint&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Refactored SFINAE usage to improve compile times.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added friendship support to customisation points, and made most customisations
"                private.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed &lt;code&gt;&lt;span class="identifier"&gt;any_io_executor&lt;/span&gt;&lt;/code&gt;
"                to a "strong typedef"-style class.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;as_single&lt;/span&gt;&lt;/code&gt;
"                to work with handler hook deprecation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured pthread condition variable attributes are cleaned up on all
"                platforms.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clarified thread safety notes on sockets and descriptors.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured &lt;code&gt;&lt;span class="identifier"&gt;errno&lt;/span&gt;&lt;/code&gt; is
"                not overwritten if &lt;code&gt;&lt;span class="identifier"&gt;socket&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; fails on macOS/FreeBSD.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed work tracking for &lt;code&gt;&lt;span class="identifier"&gt;io_context&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;thread_pool&lt;/span&gt;&lt;/code&gt; executors
"                when move-assigned.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured internal &lt;code&gt;&lt;span class="identifier"&gt;call_stack&lt;/span&gt;&lt;/code&gt;
"                objects are accessed only from implementation files.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed I/O object move-assignment to ensure the executor is left in
"                a valid state.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed detection of compiler support for defaulted template argument
"                on functions with MSVC.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Prevented the &lt;code&gt;&lt;span class="identifier"&gt;blocking&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;always&lt;/span&gt;&lt;/code&gt;
"                property from being used with &lt;code&gt;&lt;span class="identifier"&gt;strand&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, as it did not produce the
"                correct semantics.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed deprecated file &lt;tt&gt;asio/impl/src.cpp&lt;/tt&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation with MSVC for ARM. (&lt;a href="https://github.com/boostorg/atomic/pull/49"&gt;PR#49&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This update brings minor bug fixes and revamped CI reporting.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
"                and Individuals Using Beast&lt;/a&gt; list.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
"                Notes&lt;/a&gt; for a complete list of changes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/bind/"&gt;Bind&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for using the standard C++11 placeholders with &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;bind&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;apply&lt;/span&gt;&lt;/code&gt; to use variadic templates
"                and perfect forwarding.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/continer/"&gt;Container&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added [[no-discard]] attribute in all containers to catch bugs related
"                to unused return values.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Replaced default standard exception classes with Boost.Container
"                own classes, reducing considerably the included files overhead. Example:
"                in MSVC 19 &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;container&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;vector&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                preprocessed file size reduces from 1,5MB to 930KB. If you still
"                want to use standard exception classes, you can define &lt;code&gt;&lt;span class="identifier"&gt;BOOST_CONTAINER_USE_STD_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
"                before using any Boost.Container class.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs/issues:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/102"&gt;GitHub
"                      #102: &lt;em&gt;"flat_map::insert ambiguous with initializer
"                      list &amp;amp; pairs that need to convert"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/139"&gt;GitHub
"                      #139: &lt;em&gt;"flat_map merge and iterators"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/141"&gt;GitHub
"                      #141: &lt;em&gt;"small_vector does not propagate no throw
"                      properties of move operation of contained type"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/164"&gt;GitHub
"                      #164: &lt;em&gt;"Compile error when using &lt;code&gt;&lt;span class="identifier"&gt;pmr&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;map&lt;/span&gt;&lt;/code&gt; with a &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;pair&lt;/span&gt;&lt;/code&gt;; works when using a
"                      &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;tuple&lt;/span&gt;&lt;/code&gt;"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/container/issues/171"&gt;GitHub
"                      #171: &lt;em&gt;"deque::clear() uses undefined behaviour"&lt;/em&gt;&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add implicit conversion between compatible reference wrappers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;cmath&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;, a portable implementation
"                of the floating point classification functions from &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;cmath&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;bit&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;, a portable implementation
"                of the C++20 standard header &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;bit&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_EQ&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_TEST_NE&lt;/span&gt;&lt;/code&gt; for
"                character types under C++20.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Revise allocator access utilities (now support VS2013, and no workarounds
"                use &lt;code&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;.)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;BREAKING CHANGE&lt;/strong&gt;: &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;import&lt;/span&gt;&lt;/code&gt;
"                was renamed to &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;import_symbol&lt;/span&gt;&lt;/code&gt;
"                to avoid collision with C++20 &lt;code&gt;&lt;span class="identifier"&gt;import&lt;/span&gt;&lt;/code&gt;
"                keyword.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated docs, including FAQ section.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated compatibility with WASI platform. (&lt;a href="https://github.com/boostorg/filesystem/pull/169"&gt;PR#169&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an exception being thrown by &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;remove_filename&lt;/span&gt;&lt;/code&gt;
"                if the path is "////". (&lt;a href="https://github.com/boostorg/filesystem/issues/176"&gt;#176&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;create_directories&lt;/span&gt;&lt;/code&gt;
"                disregarding errors from file status query operations issued internally.
"                This could result in incorrect error codes returned by &lt;code&gt;&lt;span class="identifier"&gt;create_directories&lt;/span&gt;&lt;/code&gt;. (&lt;a href="https://github.com/boostorg/filesystem/issues/182"&gt;#182&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/670"&gt;PR#670&lt;/a&gt; New IOs to_wkt() and from_wkt() (thanks to
"                      Baidyanath Kundu).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/756"&gt;PR#756&lt;/a&gt; Non cartesian and robust convex hulls.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/768"&gt;PR#768&lt;/a&gt; Umbrella strategies for relops, setops, index,
"                      buffer and more (undocumented for now).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/797"&gt;PR#797&lt;/a&gt; New azimuth() algorithm.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/801"&gt;PR#801&lt;/a&gt; Improved accuracy in geographic area computations.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/820"&gt;PR#820&lt;/a&gt; Parameter scale added to svg_mapper.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/808"&gt;PR#808&lt;/a&gt; Fixed compilation error with rtree serialization
"                      enabled (thanks to Tristan Carel).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/815"&gt;PR#815&lt;/a&gt; Fixed issue in buffer().
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Various fixes in set operations and buffer.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Breaking changes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Removed strategy convex_hull::graham_andrew.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/gil/"&gt;GIL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                BREAKING: In next release, we are going to drop support for GCC 5.
"                We will also change the required minimum C++ version from C++11 to
"                C++14.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/histogram/"&gt;Histogram&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This release contains critical fixes, please check that your results
"                are not affected.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/histogram/doc/html/histogram/history.html"&gt;Release
"                Notes&lt;/a&gt; for details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/intrusive/"&gt;Intrusive&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reduced compile-time dependencies:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;linear_slist_algorithms&lt;/span&gt;&lt;/code&gt;
"                      use a simple node_ptr instead of std::pair on return.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;list&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;slist&lt;/span&gt;&lt;/code&gt; use &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;
"                      &lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;
"                      &lt;span class="special"&gt;==&lt;/span&gt;&lt;/code&gt; instead of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;equal_to&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;less&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;a href="https://github.com/boostorg/intrusive/issues/54"&gt;GitHub
"                #54: &lt;em&gt;set.rbegin() looks like O(log(N))&lt;/em&gt;&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/interprocess/"&gt;Interprocess&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="keyword"&gt;wchar_t&lt;/span&gt;&lt;/code&gt; API support
"                for named resources in operating systems that offer native wide character
"                API (e.g. Windows). The following classes were updated with &lt;code&gt;&lt;span class="keyword"&gt;wchar_t&lt;/span&gt;&lt;/code&gt; name support:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;file_mapping&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;managed_mapped_file&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;managed_shared_memory&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;managed_windows_shared_memory&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;shared_memory_object&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;windows_shared_memory_object&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;file_lock&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;named_condition&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;named_condition_any&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;named_mutex&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;named_recursive_mutex&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;named_semaphore&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;named_sharable_mutex&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;named_upgradable_mutex&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;code&gt;&lt;span class="identifier"&gt;message_queue&lt;/span&gt;&lt;/code&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;BOOST_INTERPROCESS_FORCE_NATIVE_EMULATION&lt;/span&gt;&lt;/code&gt;
"                macro option to disable the use of generic emulation code for process
"                shared synchronization primitives instead of native POSIX or Winapi
"                functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/issues/76"&gt;GitHub
"                      #76 (&lt;em&gt;"Cygwin compilation errors"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/pull/83"&gt;GitHub
"                      #83 (&lt;em&gt;"Add BOOST_INTERPROCESS_FORCE_NATIVE_EMULATION
"                      option"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/pull/92"&gt;GitHub
"                      #92 (&lt;em&gt;"bufferstream: Correct MSVC compilation
"                      warning"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/pull/106"&gt;GitHub
"                      #106 (&lt;em&gt;"Use fallocate on truncate_file"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/issues/120"&gt;GitHub
"                      #120 (&lt;em&gt;"segment_manager customization"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/issues/122"&gt;GitHub
"                      #122 (&lt;em&gt;"Mark constructors/assignment/swap noexcept
"                      where possible"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/interprocess/issues/126"&gt;GitHub
"                      #126 (&lt;em&gt;"_ReadWriteBarrier is deprecated warning
"                      when compiling with clang-cl.exe"&lt;/em&gt;)&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/json/"&gt;JSON&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://cppalliance.org/pdf/C%20Plus%20Plus%20Alliance%20-%20Boost%20JSON%20Security%20Assessment%202020%20-%20Assessment%20Report%20-%2020210317.pdf"&gt;Security
"                Report&lt;/a&gt; from Bishop Fox.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                (&lt;a href="https://github.com/boostorg/json/issues/481"&gt;#481&lt;/a&gt;) Refactored &lt;code&gt;&lt;span class="identifier"&gt;value_from&lt;/span&gt;&lt;/code&gt;
"                implementation; user customizations are now always preferred over
"                library-provided overloads.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                (&lt;a href="https://github.com/boostorg/json/issues/484"&gt;#484&lt;/a&gt;) Fix imprecise parsing for some floating point numbers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                (&lt;a href="https://github.com/boostorg/json/issues/485"&gt;#485&lt;/a&gt;) Fix link errors in standalone mode, when used alongside
"                Boost.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                (&lt;a href="https://github.com/boostorg/json/issues/497"&gt;#497&lt;/a&gt;) Fix Boost.Build builds on GCC 4.8.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lexical_cast/"&gt;LexicalCast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Dropped dependency on Boost.Math (thanks to Peter Dimov &lt;a href="https://github.com/boostorg/lexical_cast/issues/37"&gt;#37&lt;/a&gt;,
"                &lt;a href="https://github.com/boostorg/lexical_cast/issues/39"&gt;#39&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixes for the CI and coverage (thanks to Sam Darwin from "The
"                C++ Alliance" &lt;a href="https://github.com/boostorg/lexical_cast/issues/38"&gt;#38&lt;/a&gt;, &lt;a href="https://github.com/boostorg/lexical_cast/issues/42"&gt;#42&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Corrected a formal race condition in the thread-safe log record
"                      queue implementation used in the &lt;code&gt;&lt;span class="identifier"&gt;unbounded_fifo_queue&lt;/span&gt;&lt;/code&gt;
"                      policy of the &lt;code&gt;&lt;span class="identifier"&gt;asynchronous_sink&lt;/span&gt;&lt;/code&gt;
"                      frontend. The race could be detected by TSAN, but it was not
"                      a real problem on most current CPU architectures and compilers.
"                      (&lt;a href="https://github.com/boostorg/log/issues/139"&gt;#139&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      When copying a logger with a channel attribute (e.g. &lt;code&gt;&lt;span class="identifier"&gt;channel_logger&lt;/span&gt;&lt;/code&gt;), the channel
"                      attribute is now deep-copied from the original logger. This
"                      means that modifying the channel in the new logger will no
"                      longer affect the original logger.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Replaced the use of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="keyword"&gt;void&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; in template parameters
"                      with a new tag type &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;log&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;use_std_allocator&lt;/span&gt;&lt;/code&gt;
"                      to silence libc++ warnings about the former being deprecated
"                      in C++17 and later. The tag indicates that the instantiated
"                      template should be using a specialization of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator&lt;/span&gt;&lt;/code&gt; internally to allocate
"                      dynamic memory, so the change has no functional effect. (&lt;a href="https://github.com/boostorg/log/issues/141"&gt;#141&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Boost.Log no longer defines &lt;code&gt;&lt;span class="identifier"&gt;__MSVCRT_VERSION__&lt;/span&gt;&lt;/code&gt;
"                      macro on MinGW and MinGW-w64. Defining this macro caused incompatibility
"                      with UCRT, which is available as an option in recent MinGW-w64.
"                      (&lt;a href="https://github.com/boostorg/log/pull/149"&gt;PR#149&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking Change:&lt;/strong&gt; C++03 support is
"                now removed, a C++11 or later conformant compiler is now required
"                to use this library.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;span class="link"&gt;Z-test&lt;/span&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added execution policy support to univariate and bivariate statistics:
"                enables parallel execution (requires C++17 and &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;execution&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Big update/improvement on CI testing.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bivariate statistics now have integer support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                T-Test now has integer support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Linear regression now has integer support.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct PDF of the beta distribution at the endpoints.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct use of Stirling's approximation in certain multiprecision
"                cases, fixes &lt;a href="https://github.com/boostorg/math/issues/396"&gt;#396&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Eliminate -Wimplicit-int-float-conversion on clang.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix some constexpr issues in quaternion/octonion.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Minor performance fix to tanh_sinh integration.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update hypergeometric functions internal scaling to allow for 64-bit
"                (long long) exponents with multiprecision types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/move/"&gt;Move&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;a href="https://github.com/boostorg/move/issues/35"&gt;Git Issue
"                #35: &lt;em&gt;"New nothrow move traits are incomplete"&lt;/em&gt;&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multiprecision/"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;BREAKING CHANGE&lt;/strong&gt;: Massive refactoring
"                and code simplification makes C++11 an absolute requirement.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use BOOST_TRY/CATCH in headers so code can be used in exception-free
"                environments.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct corner case in pow, fixes &lt;a href="https://github.com/boostorg/multiprecision/issues/277"&gt;#277&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct exception type thrown to match docs in lsb/msb: fixes &lt;a href="https://github.com/boostorg/multiprecision/issues/257"&gt;#257&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Allow moves and operators between related but different types (ie
"                types with the same allocator), fixes &lt;a href="https://github.com/boostorg/multiprecision/issues/278"&gt;#278&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/nowide/"&gt;Nowide&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix discarding of characters for text file streams when seek or sync
"                functions are used and newlines were converted (e.g. on Windows)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix potential use-after-free bug when reusing (via &lt;code&gt;&lt;span class="identifier"&gt;open&lt;/span&gt;&lt;/code&gt;) a file stream that has been
"                closed
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix potential invalid memory access when using a file stream that
"                has been moved or swapped to where the source had a put-back character
"                or was set to unbuffered mode
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix compatibility with ucrt runtime by not defining &lt;code&gt;&lt;span class="identifier"&gt;__MSVCRT_VERSION__&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Known issues: Read performance for text files is degraded. Binary
"                files and writing is unaffected.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/optional/"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed MSVC warning C4702.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/outcome/"&gt;Outcome&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Announcements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      BREAKING CHANGE: After a year and three major Boost releases
"                      announcing this upcoming change, this is the FIRST RELEASE
"                      of the v2.2 branch. This branch has a number of major breaking
"                      changes to the Outcome v2.1 which shipped in Boost 1.75 and
"                      earlier, see the documentation for details.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enhancements:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      VS2019.8 changed how to enable Coroutines, which caused Outcome
"                      to not compile on that compiler.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      If on C++ 20, we now use C++ 20 &lt;code&gt;&lt;span class="special"&gt;[[&lt;/span&gt;&lt;span class="identifier"&gt;likely&lt;/span&gt;&lt;span class="special"&gt;]]&lt;/span&gt;&lt;/code&gt;
"                      instead of compiler-specific markup to indicate when TRY has
"                      likely success or failure.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      BREAKING CHANGE: Previously the value of &lt;code&gt;&lt;span class="identifier"&gt;spare_storage&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="keyword"&gt;const&lt;/span&gt;
"                      &lt;span class="identifier"&gt;basic_result&lt;/span&gt;&lt;span class="special"&gt;|&lt;/span&gt;&lt;span class="identifier"&gt;basic_outcome&lt;/span&gt; &lt;span class="special"&gt;*)&lt;/span&gt;
"                      &lt;span class="keyword"&gt;noexcept&lt;/span&gt;&lt;/code&gt; was not propagated
"                      over &lt;code&gt;&lt;span class="identifier"&gt;BOOST_OUTCOME_TRY&lt;/span&gt;&lt;/code&gt;,
"                      which causes things like stack backtraces captured at the point
"                      of construction of an errored result to get dropped at every
"                      &lt;code&gt;&lt;span class="identifier"&gt;TRY&lt;/span&gt;&lt;/code&gt; point.
"                      This has been fixed by adding an optional &lt;code&gt;&lt;span class="identifier"&gt;spare_storage&lt;/span&gt;&lt;/code&gt;
"                      to &lt;code&gt;&lt;span class="identifier"&gt;success_type&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;failure_type&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;, as well as to &lt;code&gt;&lt;span class="keyword"&gt;auto&lt;/span&gt; &lt;span class="identifier"&gt;success&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;
"                      &lt;span class="special"&gt;&amp;amp;&amp;amp;,&lt;/span&gt; &lt;span class="special"&gt;...)&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="keyword"&gt;auto&lt;/span&gt; &lt;span class="identifier"&gt;failure&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;
"                      &lt;span class="special"&gt;&amp;amp;&amp;amp;,&lt;/span&gt; &lt;span class="special"&gt;...)&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Boost.Outcome should now compile with &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_EXCEPTIONS&lt;/span&gt;&lt;/code&gt;
"                      defined. Thanks to Emil, maintainer of Boost.Exception, making
"                      a change for me, Boost.Outcome should now compile with C++
"                      exceptions globally disabled. You won't be able to use &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;exception_ptr&lt;/span&gt;&lt;/code&gt; as it can't
"                      be included if C++ exceptions are globally disabled.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      BREAKING CHANGE &lt;a href="https://github.com/ned14/outcome/issues/244"&gt;#244&lt;/a&gt;
"                      It came as a shock to learn that &lt;code&gt;&lt;span class="identifier"&gt;BOOST_OUTCOME_TRY&lt;/span&gt;&lt;/code&gt;
"                      had been broken since the inception of this library for certain
"                      corner case code, which required a breaking change in how TRY
"                      works. See &lt;a href="https://boostorg.github.io/outcome/changelog.html"&gt;the
"                      changelog in the documentation for more detail&lt;/a&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/parameter/"&gt;Parameter&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a workaround for MSVC 2015 code miscompilation when an rvalue
"                was used as a default value of a named parameter of a function. (&lt;a href="https://github.com/boostorg/parameter/pull/109"&gt;PR#109&lt;/a&gt;,
"                &lt;a href="https://github.com/boostorg/log/issues/132"&gt;#132&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/pfr/"&gt;PFR&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed reflection of types with missing &lt;code&gt;&lt;span class="keyword"&gt;const&lt;/span&gt;&lt;/code&gt;
"                in SFINAE expressions in template constructor. Now reflection of
"                aggregates with &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;optional&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;chrono&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;duration&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;???&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; fields works on any
"                Standard Library implementation, even if LWG3050 is not fixed.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Comparison functions are now &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
"                &lt;a href="https://github.com/boostorg/pfr/issues/52"&gt;#52&lt;/a&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed numerous typos in docs (thanks to Phil Miller &lt;a href="https://github.com/boostorg/pfr/issues/63"&gt;#63&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/poly_collection/"&gt;PolyCollection&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Worked around &lt;a href="https://gcc.gnu.org/bugzilla/show_bug.cgi?id=95888"&gt;GCC
"                bug&lt;/a&gt; affecting GCC versions 9.3-10.2 (issue &lt;a href="https://github.com/boostorg/poly_collection/issues/20"&gt;#20&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Version 1.13
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class="identifier"&gt;ARCH_PPC_64&lt;/span&gt;&lt;/code&gt; predef.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix &lt;code&gt;&lt;span class="identifier"&gt;ARCH_WORD_BITS&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; redefinition warnings/errors.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class="identifier"&gt;ARCH_E2K&lt;/span&gt;&lt;/code&gt;, Elbrus
"                2000, architecture from Konstantin Ivlev.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix not handling recent C++ version that go above 10.x version.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Version 1.12
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Switch to using the endian.h header on OpenBSD. (Brad Smith)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix not handling recent versions of stdcxx that go above version
"                9.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix including sub-BSD OS headers directly causing redef warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add CI testing of direct inclusion of all headers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add CI testing on FreeBSD for clang and gcc.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class="identifier"&gt;WORD_BITS&lt;/span&gt;&lt;/code&gt; set
"                of predefs to detect the architecture word size. Initial implementation
"                inspired by submission from Mikhail Komarov.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add CI testing for Cygwin 32 and 64.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/property_tree/"&gt;PropertyTree&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Property Tree has a new maintainer.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix usage of deprecated Boost.Bind features.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Link to Wikipedia fixed.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use BOOST_OVERRIDE to fix GCC warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add extensive CI testing.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/regex/"&gt;Regex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Regex is now header only except in C++03 mode.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for C++03 is now deprecated.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The library can now be used "standalone" without the rest
"                of Boost being present.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/stacktrace/"&gt;Stacktrace&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Better support for pre-C++11 builds on clang &lt;a href="https://github.com/boostorg/stacktrace/issues/102"&gt;#102&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bigger warning for &lt;strong&gt;do not use boost::stacktrace::stacktrace
"                in signal handlers&lt;/strong&gt; &lt;a href="https://github.com/boostorg/stacktrace/issues/71"&gt;#71&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/type_traits/"&gt;TypeTraits&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix for Visual Studio managed code projects.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant2/"&gt;Variant2&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved generated code for the double buffered case.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_76_0.updated_tools"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/tools/build/"&gt;Build&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Includes release of &lt;a href="https://www.boost.org/tools/build/doc/html/#_version_4_4_1"&gt;B2
"                version 4.4.1&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_76_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 4.0.1, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0,
"                9.0.0, 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 5.4.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Boost's additional test compilers include:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.0, 3.8.1, 3.9.1, 4.0.1, 5.0.2, 6.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++0x: 3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.0, 3.1, 3.2, 3.3, 3.4, 4.0.1, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5.0, 3.6.0, 3.7.1, 3.8.0, 3.9.1, 4.0.0, 4.0.1, 5.0.2,
"                6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 5.0.2, 6.0.1, 7.0.0, 8.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.4.7, 4.5.3, 4.6.3, 4.9.4, 5.4.0, 5.5.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.4.7
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 4.9.4, 5.4.0, 6.4.0, 7.1.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 5.5.0, 6.3.0, 6.4.0, 7.1.0, 7.3.0, 8.0.1, 8.1.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Intel, C++14: 18.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 9.0.0, 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 9.1.0, 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++1z: 9.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++2a: 10.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 3.4.5, 4.1.2, 4.2.4, 4.3.3, 4.4.0, 4.5.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++0x: 4.6.4
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.1, 4.9.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.1.0, 5.2.0, 5.3.0, 6.1.0, 6.2.0, 6.3.0, 6.4.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.1.0, 7.2.0, 7.3.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 7.1, 8.0, 9.0, 10.0, 11.0, 12.0, 14.0, 14.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          FreeBSD:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++1z: 4.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_76_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Fri, 03 Dec 2021 14:26:08 +0000
-quickbook
"feed/history/boost_1_76_0.qbk
-update_count
=6
)
(feed/history/boost_1_77_0.qbk
-item
"<item><title>Version 1.77.0</title><link>https://www.boost.org/users/history/version_1_77_0.html</link><guid>https://www.boost.org/users/history/version_1_77_0.html</guid><pubDate>Wed, 11 Aug 2021 14:25:13 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_77_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/describe/"&gt;Describe&lt;/a&gt;:&lt;/span&gt; A C++14 reflection
"          library, from Peter Dimov. Provides macros for describing enumerators and
"          struct/class members, and primitives for querying this information.
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lambda2/"&gt;Lambda2&lt;/a&gt;:&lt;/span&gt; A C++14, dependency-free,
"          single header lambda library, from Peter Dimov. Allows simple function
"          objects to be constructed via expressions such as &lt;code&gt;&lt;span class="identifier"&gt;_1&lt;/span&gt;
"          &lt;span class="special"&gt;+&lt;/span&gt; &lt;span class="number"&gt;5&lt;/span&gt;&lt;/code&gt;,
"          &lt;code&gt;&lt;span class="identifier"&gt;_1&lt;/span&gt; &lt;span class="special"&gt;%&lt;/span&gt;
"          &lt;span class="number"&gt;2&lt;/span&gt; &lt;span class="special"&gt;==&lt;/span&gt; &lt;span class="number"&gt;0&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;_1&lt;/span&gt;
"          &lt;span class="special"&gt;&amp;gt;&lt;/span&gt; &lt;span class="identifier"&gt;_2&lt;/span&gt;&lt;/code&gt;,
"          or &lt;code&gt;&lt;span class="identifier"&gt;_1&lt;/span&gt; &lt;span class="special"&gt;==&lt;/span&gt;
"          &lt;span class="char"&gt;' '&lt;/span&gt; &lt;span class="special"&gt;||&lt;/span&gt; &lt;span class="identifier"&gt;_1&lt;/span&gt; &lt;span class="special"&gt;==&lt;/span&gt; &lt;span class="char"&gt;'\t'&lt;/span&gt;&lt;/code&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_77_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/any/"&gt;Any&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;anys&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_any&lt;/span&gt;&lt;/code&gt; - a data type with customizable
"                Small Object Optimization whose instances can hold instances of any
"                type that satisfies ValueType requirements (many thanks to Ruslan
"                Arutyunyan @rarutyun). If you are not sure that you really need it,
"                then use &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;any&lt;/span&gt;&lt;/code&gt; instead.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Started using GithubActions CI for additional testing
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for cancellation of individual asynchronous operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class="identifier"&gt;associator&lt;/span&gt;&lt;/code&gt;
"                trait, used to generically forward associators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed all asynchronous operations implemented in Asio to invoke
"                their completion handlers as rvalue references.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for asynchronous operations with multiple completion
"                signatures.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;||&lt;/span&gt;&lt;/code&gt;
"                for &lt;code&gt;&lt;span class="identifier"&gt;awaitable&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;,
"                to allow coroutines to be trivially awaited in parallel.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;as_tuple&lt;/span&gt;&lt;/code&gt;
"                completion token adapter.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;append&lt;/span&gt;&lt;/code&gt;
"                completion token adapter.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;prepend&lt;/span&gt;&lt;/code&gt;
"                completion token adapter.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;deferred&lt;/span&gt;&lt;/code&gt;
"                completion token, whicih allows deferred execution of asynchronous
"                operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;parallel_group&lt;/span&gt;&lt;/code&gt;
"                class and &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;make_parallel_group&lt;/span&gt;&lt;/code&gt;
"                function.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;promise&lt;/span&gt;&lt;/code&gt;,
"                which allows eager execution and synchronisation of asynchronous
"                operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;coro&lt;/span&gt;&lt;/code&gt;
"                class template, a C++20 coroutine primitive with the ability to combine
"                both asynchronous waiting (&lt;code&gt;&lt;span class="identifier"&gt;co_await&lt;/span&gt;&lt;/code&gt;)
"                and yielding (&lt;code&gt;&lt;span class="identifier"&gt;co_yield&lt;/span&gt;&lt;/code&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added move assignment to &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stream&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed &lt;code&gt;&lt;span class="identifier"&gt;co_spawn&lt;/span&gt;&lt;/code&gt;
"                to &lt;code&gt;&lt;span class="identifier"&gt;dispatch&lt;/span&gt;&lt;/code&gt; the coroutine's
"                initial step to the executor.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled additional optimisations for &lt;code&gt;&lt;span class="identifier"&gt;any_executor&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;any_io_executor&lt;/span&gt;&lt;/code&gt;
"                when used with asynchronous operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class="identifier"&gt;nodiscard&lt;/span&gt;&lt;/code&gt;
"                attribute to &lt;code&gt;&lt;span class="identifier"&gt;awaitable&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Increased the number of cached slots in the default recycling allocator.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the default allocator behaviour to respect alignment requirements,
"                to support over-aligned types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured the result strings are always initialised in reverse name
"                resolution.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed recursive template instantiation issues in &lt;code&gt;&lt;span class="identifier"&gt;use_awaitable_t&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;executor_with_default&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed the &lt;code&gt;&lt;span class="identifier"&gt;any_io_executor&lt;/span&gt;&lt;/code&gt;
"                equality operators to correctly return a result based on the target
"                executor.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;strand&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                to avoid using a potentially moved-from executor.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Ensured &lt;tt&gt;gcc&lt;/tt&gt; tests are not used for &lt;tt&gt;clang&lt;/tt&gt;
"                when detecting compiler features.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disabled coroutines support for the &lt;tt&gt;clang&lt;/tt&gt; shipped
"                with MSVC.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compatibility with recent LibreSSL when &lt;code&gt;&lt;span class="identifier"&gt;OPENSSL_NO_SSL_INTERN&lt;/span&gt;&lt;/code&gt;
"                is defined.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;posix&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_stream_descriptor&lt;/span&gt;&lt;/code&gt; move operations
"                to work with non-defaulted executors.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Consult the &lt;a href="https://www.boost.org/doc/libs/1_77_0/doc/html/boost_asio/history.html"&gt;Revision
"                History&lt;/a&gt; for further details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;make_atomic_ref&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;make_ipc_atomic_ref&lt;/span&gt;&lt;/code&gt;
"                factory functions for constructing atomic reference objects.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added C++17 template argument deduction guides for &lt;code&gt;&lt;span class="identifier"&gt;atomic_ref&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic_ref&lt;/span&gt;&lt;/code&gt;
"                to allow omitting template arguments when they can be deduced from
"                constructor arguments.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This maintenance update brings minor bug fixes and updated CI reporting.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
"                and Individuals Using Beast&lt;/a&gt; list.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
"                Notes&lt;/a&gt; for a complete list of changes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/conversion/"&gt;Conversion&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;implicit_cast&lt;/span&gt;&lt;/code&gt; is now &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt; (&lt;a href="https://github.com/boostorg/conversion/issues/25"&gt;#25&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed broken links (&lt;a href="https://github.com/boostorg/conversion/pull/23"&gt;PR#23&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Started using GithubActions CI for additional testing
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;uncaught_exceptions&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; has been modified for compatibility
"                with Mac OS 10.4 and older. (&lt;a href="https://github.com/boostorg/core/pull/92"&gt;PR#92&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                More runtime checks for malformed ELFs in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;library_info&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;library_info&lt;/span&gt;&lt;/code&gt; use info from &lt;code&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;dynsym&lt;/span&gt;&lt;/code&gt;
"                ELF section if &lt;code&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;symtab&lt;/span&gt;&lt;/code&gt;
"                is empty or missing
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                List protected ELF symbols in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;dll&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;library_info&lt;/span&gt;&lt;/code&gt;
"                as they are available for import (&lt;a href="https://github.com/boostorg/dll/issues/50"&gt;#50&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove unneeded convert from &lt;code&gt;&lt;span class="keyword"&gt;wchar_t&lt;/span&gt;&lt;/code&gt;
"                to char on POSIX environment, thanks to Vladislav Shchapov (&lt;a href="https://github.com/boostorg/dll/pull/49"&gt;PR#49&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Started using GithubAction CI for additional testing
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Introducing Boost.Filesystem v4.&lt;/strong&gt;
"                This new version of the library removes all deprecated features of
"                v3 and also makes a number of breaking API changes intended to make
"                Boost.Filesystem more compatible with std::filesystem introduced
"                in C++17. The differences are described in the release notes and
"                documentation using &lt;strong&gt;v3&lt;/strong&gt; and &lt;strong&gt;v4&lt;/strong&gt; tags and are also summarised in a separate
"                section. Users can select Boost.Filesystem version by defining &lt;code&gt;&lt;span class="identifier"&gt;BOOST_FILESYSTEM_VERSION&lt;/span&gt;&lt;/code&gt; macro
"                to either 3 or 4 when compiling their code. There is no need to separately
"                compile Boost.Filesystem for each library version - a single binary
"                supports both v3 and v4. Users should avoid using both v3 and v4
"                in the same application as this can lead to subtle bugs. Currently,
"                v3 is the default. In a future release v4 will become the default,
"                and eventually v3 will be removed. v4 is functional, but it is still
"                a work in progress and there may be breaking API changes in the future.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;v4:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;filename&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stem&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;extension&lt;/span&gt;&lt;/code&gt;
"                no longer consider root name or root directory of the path as a filename
"                if the path only consists of those components. For example, on Windows
"                &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"C:"&lt;/span&gt;&lt;span class="special"&gt;).&lt;/span&gt;&lt;span class="identifier"&gt;filename&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                used to return "C:" and &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"C:\\"&lt;/span&gt;&lt;span class="special"&gt;).&lt;/span&gt;&lt;span class="identifier"&gt;filename&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; used to return "\" and
"                both will return an empty path now. (&lt;a href="https://github.com/boostorg/filesystem/issues/88"&gt;#88&lt;/a&gt;, &lt;a href="https://github.com/boostorg/filesystem/issues/194"&gt;#194&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;v4:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stem&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;extension&lt;/span&gt;&lt;/code&gt; no longer treat a filename
"                that starts with a dot and has no other dots as an extension. Filenames
"                starting with a dot are commonly treated as filenames with an empty
"                extension. The leading dot is used to indicate a hidden file on most
"                UNIX-like systems. (&lt;a href="https://github.com/boostorg/filesystem/issues/88"&gt;#88&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Improved support for various
"                path prefixes on Windows. Added support for local device prefix ("\\.\")
"                and experimental support for NT path prefix ("\??\"). The
"                prefixes will be included in the root name of a path. Note that using
"                the prefixes with Boost.Filesystem v3 can lead to surprising results
"                (e.g. &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"\\\\.\\"&lt;/span&gt;&lt;span class="special"&gt;).&lt;/span&gt;&lt;span class="identifier"&gt;stem&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;
"                &lt;span class="special"&gt;==&lt;/span&gt; &lt;span class="string"&gt;"\\\\"&lt;/span&gt;&lt;/code&gt;).
"                It is recommended to use the prefixes only with Boost.Filesystem
"                v4.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reworked &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;lexically_normal&lt;/span&gt;&lt;/code&gt; implementation
"                to eliminate some cases of duplicate dot (".") elements
"                in the normalized paths.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Added runtime detection of
"                the &lt;code&gt;&lt;span class="identifier"&gt;statx&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;getrandom&lt;/span&gt;&lt;/code&gt; system calls on Linux.
"                This can be useful if the syscall is present at compile time but
"                fails with &lt;code&gt;&lt;span class="identifier"&gt;ENOSYS&lt;/span&gt;&lt;/code&gt;
"                at run time (for example, in Docker containers that restrict the
"                syscall, even if available on the host). (&lt;a href="https://github.com/boostorg/filesystem/issues/172"&gt;#172&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Added support for disabling
"                usage of various system APIs at library build time. This can be useful
"                when a certain API is detected as present by the library configuration
"                scripts but must not be used for some reason (for example, when runtime
"                detection does not work on the target system). See the description
"                of configuration macros in the library documentationfor for more
"                details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;synchronize_data&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;copy_options&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;synchronize&lt;/span&gt;&lt;/code&gt;
"                options for the &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
"                operation. These options allow to synchronize the written data and
"                attributes with the permanent storage. These options are expensive
"                in terms of performance, but allow to ensure reliability of the copied
"                data. Note that &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
"                performed implicit data synchronization on POSIX systems since Boost.Filesystem
"                1.74.0. This release adds support for more platforms and disables
"                data synchronization by default while allowing the caller to explicitly
"                request it. (&lt;a href="https://github.com/boostorg/filesystem/issues/186"&gt;#186&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added handling of &lt;code&gt;&lt;span class="identifier"&gt;EINTR&lt;/span&gt;&lt;/code&gt;
"                error code on POSIX systems for some system calls issued internally.
"                In particular, &lt;code&gt;&lt;span class="identifier"&gt;EINTR&lt;/span&gt;&lt;/code&gt;
"                could have been ignored on &lt;code&gt;&lt;span class="identifier"&gt;close&lt;/span&gt;&lt;/code&gt;,
"                which on HP-UX would result in a leaked file descriptor.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In the &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
"                implementations based on Linux &lt;code&gt;&lt;span class="identifier"&gt;sendfile&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;copy_file_range&lt;/span&gt;&lt;/code&gt;
"                system calls, added handling of error codes indicating that a particular
"                filesystem does not support the system call and fall back to the
"                generic &lt;code&gt;&lt;span class="identifier"&gt;read&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;write&lt;/span&gt;&lt;/code&gt; loop. This should fix &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt; failing on &lt;a href="https://www.ecryptfs.org/"&gt;eCryptFS&lt;/a&gt;
"                and possibly other filesystems. (&lt;a href="https://github.com/boostorg/filesystem/issues/184"&gt;#184&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The &lt;code&gt;&lt;span class="identifier"&gt;copy_file_range&lt;/span&gt;&lt;/code&gt;
"                system call is now used since Linux kernel 4.5, whereas previously
"                it was only enabled since 5.3. The &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
"                implementation will fall back to &lt;code&gt;&lt;span class="identifier"&gt;sendfile&lt;/span&gt;&lt;/code&gt;
"                or &lt;code&gt;&lt;span class="identifier"&gt;read&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;write&lt;/span&gt;&lt;/code&gt; loop if &lt;code&gt;&lt;span class="identifier"&gt;copy_file_range&lt;/span&gt;&lt;/code&gt;
"                fails to copy a given file across filesystems.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt; implementations
"                based on Linux &lt;code&gt;&lt;span class="identifier"&gt;sendfile&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;copy_file_range&lt;/span&gt;&lt;/code&gt;
"                system calls will not be used on filesystems that are known to contain
"                files with generated content. These system calls are incompatible
"                with such files, and copying them would result in zero-sized files.
"                The generic &lt;code&gt;&lt;span class="identifier"&gt;read&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;write&lt;/span&gt;&lt;/code&gt; loop will be used instead.
"                Currently, the blacklisted filesystems are: procfs, sysfs, tracefs
"                and debugfs.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In the &lt;code&gt;&lt;span class="identifier"&gt;copy_file&lt;/span&gt;&lt;/code&gt;
"                implementation based on &lt;code&gt;&lt;span class="identifier"&gt;read&lt;/span&gt;&lt;/code&gt;/&lt;code&gt;&lt;span class="identifier"&gt;write&lt;/span&gt;&lt;/code&gt; loop, increased the maximum
"                size of the buffer used for temporary storage and take into account
"                the target filesystem block size for more optimal performance.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Windows CE, calling &lt;code&gt;&lt;span class="identifier"&gt;current_path&lt;/span&gt;&lt;/code&gt;
"                to obtain the current path for a process will now fail with an error
"                instead of returning successfully with a root path. This platform
"                does not support current directory. Changing the current path was
"                already failing similarly in previous releases of Boost.Filesystem.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In &lt;code&gt;&lt;span class="identifier"&gt;canonical&lt;/span&gt;&lt;/code&gt;, fixed
"                the check for a symlink referencing a directory above root, if an
"                earlier symlink was resolved to an absolute path with a different
"                root from the original path.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In &lt;code&gt;&lt;span class="identifier"&gt;canonical&lt;/span&gt;&lt;/code&gt;, added
"                a limit for the maximum number of symlinks that can be resolved during
"                the call. The limit is currently at least 40 symlinks.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Windows, &lt;code&gt;&lt;span class="identifier"&gt;canonical&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;weakly_canonical&lt;/span&gt;&lt;/code&gt;
"                will now use &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;preferred_separator&lt;/span&gt;&lt;/code&gt;
"                for the root directory separator in the resulting paths. This fixes
"                "file not found" errors caused by Windows API not handling
"                generic separators in UNC paths and paths that start with the Win32
"                filesystem prefix ("\\?\"). (&lt;a href="https://github.com/boostorg/filesystem/issues/87"&gt;#87&lt;/a&gt;, &lt;a href="https://github.com/boostorg/filesystem/issues/187"&gt;#187&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;New:&lt;/strong&gt; Added &lt;code&gt;&lt;span class="identifier"&gt;weakly_canonical&lt;/span&gt;&lt;/code&gt;
"                overloads taking &lt;code&gt;&lt;span class="identifier"&gt;base&lt;/span&gt;&lt;/code&gt;
"                path as an argument.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Windows, &lt;code&gt;&lt;span class="identifier"&gt;weakly_canonical&lt;/span&gt;&lt;/code&gt;
"                no longer fails with an error if the input path contains elements
"                that do not exist in the filesystem but are cancelled by a subsequent
"                dot-dot ("..") element. For example, &lt;code&gt;&lt;span class="identifier"&gt;weakly_canonical&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"C:\\a\\.."&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; would previously fail if "C:\a"
"                directory did not exist. (&lt;a href="https://github.com/boostorg/filesystem/issues/201"&gt;#201&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In &lt;code&gt;&lt;span class="identifier"&gt;read_symlink&lt;/span&gt;&lt;/code&gt; on
"                Windows, corrected reparse point handling. The operation would return
"                an empty path for some mount points (for example, created by &lt;a href="https://www.box.com/"&gt;Box&lt;/a&gt; cloud storage driver) and
"                directory junction points that had empty print names. The new implementation
"                now parses substitute name of the reparse point and attempts to reconstruct
"                a Win32 path from it. (&lt;a href="https://github.com/boostorg/filesystem/issues/187"&gt;#187&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Windows, file streams provided in &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;fstream&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                will use wide character paths on libc++ versions 7.0 and higher,
"                when the standard library supports opening files with wide character
"                paths. (&lt;a href="https://github.com/boostorg/filesystem/issues/181"&gt;#181&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Windows, creating symlinks should no longer require elevated privileges,
"                if Windows is configured in &lt;a href="https://docs.microsoft.com/en-us/windows/apps/get-started/enable-your-device-for-development"&gt;Developer
"                mode&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                With some compilers, global objects used internally in Boost.Filesystem
"                are now destroyed after user's global destructors are called. This
"                allows to call Boost.Filesystem methods during the program termination
"                stage. In particular, this concerns the path locale that is used
"                for character code conversion and can be installed by calling &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;imbue&lt;/span&gt;&lt;/code&gt;. The supported compilers
"                include MSVC, GCC and Clang, as well as other compilers that support
"                customizing program initialization order through &lt;code&gt;&lt;span class="preprocessor"&gt;#pragma&lt;/span&gt;
"                &lt;span class="identifier"&gt;section&lt;/span&gt;&lt;/code&gt; (for MSVC-compatible
"                compilers) or &lt;code&gt;&lt;span class="identifier"&gt;__attribute__&lt;/span&gt;
"                &lt;span class="special"&gt;((&lt;/span&gt;&lt;span class="identifier"&gt;init_priority&lt;/span&gt;&lt;span class="special"&gt;))&lt;/span&gt;&lt;/code&gt; (for GCC-compatible compilers).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/812"&gt;PR#812&lt;/a&gt; Umbrella strategies for distance and comparable_distance
"                      (undocumented for now).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/840"&gt;PR#840&lt;/a&gt; Umbrella strategies for various algorithms
"                      (undocumented for now).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/850"&gt;PR#850&lt;/a&gt; Introduced DynamicGeometry and GeometryCollection
"                      concepts and support in some algorithms (undocumented for now).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/855"&gt;PR#855&lt;/a&gt; Various improvements related to strategies.
"                      Default strategies are now included with algorithms.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved issues
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/865"&gt;#865&lt;/a&gt; Exception thrown in rtree serialization.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/439"&gt;#439&lt;/a&gt; Invalid box spherical area computation.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/838"&gt;#838&lt;/a&gt; Invalid result of union_().
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/851"&gt;#851&lt;/a&gt; Invalid geographic disjoint segment/box result.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/861"&gt;#861&lt;/a&gt; Invalid result of intersection().
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/832"&gt;PR#832&lt;/a&gt; Fixed box spherical and geographic area computation.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/853"&gt;PR#853&lt;/a&gt; Fixed geographic disjoint segment/box.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/866"&gt;PR#866&lt;/a&gt; Fixed serialization of rtree containing lesser
"                      number of elements in root node than minimum.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/886"&gt;PR#886&lt;/a&gt; Fixed knn rtree query bug causing it to be
"                      slow for big k.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Various fixes in set operations and buffer.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/json/"&gt;JSON&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;value_to&lt;/span&gt;&lt;/code&gt; supports
"                &lt;code&gt;&lt;span class="identifier"&gt;TupleLike&lt;/span&gt;&lt;/code&gt; types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;value_to&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;value_from&lt;/span&gt;&lt;/code&gt; support &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;array&lt;/span&gt;&lt;/code&gt; and similar types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implicit conversion operator from &lt;code&gt;&lt;span class="identifier"&gt;string&lt;/span&gt;&lt;/code&gt;
"                to &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;string_view&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;/code&gt; specializations for json types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed allocation errors in &lt;code&gt;&lt;span class="identifier"&gt;object&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;key_value_pair&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed crash when constructing &lt;code&gt;&lt;span class="identifier"&gt;array&lt;/span&gt;&lt;/code&gt;
"                from a pair of iterators that form an empty range.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lexical_cast/"&gt;LexicalCast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed assignment to an int of a floating point value that is out
"                of representable range for int.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Started using GithubActions CI for additional testing
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation for riscv32 target. (&lt;a href="https://github.com/boostorg/log/pull/150"&gt;PR#150&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/mp11/"&gt;Mp11&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;mp_intersperse&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;mp_split&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;mp_join&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/nowide/"&gt;Nowide&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Allow for usage of &lt;code&gt;&lt;span class="identifier"&gt;iostream&lt;/span&gt;&lt;/code&gt;
"                classes before &lt;code&gt;&lt;span class="identifier"&gt;main&lt;/span&gt;&lt;/code&gt;
"                (best effort, works for most environments)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix initialization of &lt;code&gt;&lt;span class="identifier"&gt;rdbuf&lt;/span&gt;&lt;/code&gt;
"                in &lt;code&gt;&lt;span class="identifier"&gt;cin&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;cout&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;cerr&lt;/span&gt;&lt;/code&gt; for redirected input/output
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix corner case in &lt;code&gt;&lt;span class="identifier"&gt;cin&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;unget&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; after using &lt;code&gt;&lt;span class="identifier"&gt;putback&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix possibly delayed &lt;code&gt;&lt;span class="identifier"&gt;close&lt;/span&gt;&lt;/code&gt;
"                of &lt;code&gt;&lt;span class="identifier"&gt;filebuf&lt;/span&gt;&lt;/code&gt; after
"                move assignment
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improve performance of &lt;code&gt;&lt;span class="identifier"&gt;utf8_codecvt&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/pfr/"&gt;PFR&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                A MurMur Hash based implementation of hash_combine() is now used
"                to reduce collisions count and improve quality of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;pfr&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;hash_value&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual Studio 2017 now supported in C++14 mode (thanks to Denis Mikhailov
"                aka @denzor200)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Issues found by inspect tool were fixed
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed some warnings, including removal of extra semicolons in include/boost/pfr/detail/fields_count.hpp
"                (&lt;a href="https://github.com/boostorg/pfr/issues/72"&gt;#72&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a compile time assert for inherited types (thanks to Denis
"                Mikhailov aka @denzor200)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reflection of aggregates with non movable fields is now possible
"                if guaranteed copy elision is on
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed spelling issues
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Started using GithubActions CI for additional testing
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/property_tree/"&gt;PropertyTree&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This is a maintenance release.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Extend compiler coverage in CI.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix Boost compatibility for CMakeLists.txt.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/system/"&gt;System&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The conversion operator from &lt;code&gt;&lt;span class="identifier"&gt;error_category&lt;/span&gt;&lt;/code&gt;
"                to &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_category&lt;/span&gt;&lt;/code&gt; has been improved
"                and no longer requires &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;map&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;
"                or &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;mutex&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The comparison operators of &lt;code&gt;&lt;span class="identifier"&gt;error_category&lt;/span&gt;&lt;/code&gt;
"                are now inline friends instead of member functions (a side effect
"                of the previous change.)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;/code&gt; now
"                defers calling &lt;code&gt;&lt;span class="identifier"&gt;generic_category&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; to avoid instantiating the object
"                until it's actually needed.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;failed&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;message&lt;/span&gt;&lt;/code&gt;
"                have been undeprecated, and &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;
"                &lt;span class="keyword"&gt;bool&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                now once again returns &lt;code&gt;&lt;span class="identifier"&gt;failed&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The system category now doesn't call &lt;code&gt;&lt;span class="identifier"&gt;generic_category&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, to avoid instantiating the object.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The return value of &lt;code&gt;&lt;span class="identifier"&gt;default_error_condition&lt;/span&gt;&lt;/code&gt;
"                changes in some cases into an &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;/code&gt;
"                from the generic category, instead of from the system category. This
"                happens on POSIX when the input &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
"                is from the system category and does not correspond to any &lt;code&gt;&lt;span class="identifier"&gt;errc_t&lt;/span&gt;&lt;/code&gt; value.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The interoperability of &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt; has been improved substantially.
"                It is now possible to construct &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;system&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;
"                from &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;, and it's possible to
"                pass &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;system&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt; to functions taking
"                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;&amp;amp;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                A stream insertion operator for &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;/code&gt;
"                has been added.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/uuid/"&gt;Uuid&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;to_chars&lt;/span&gt;&lt;/code&gt; for
"                writing uuid strings without allocating (&lt;a href="https://github.com/boostorg/uuid/pull/116"&gt;PR#116&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_77_0.updated_tools"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/tools/build/"&gt;Build&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Includes release of &lt;a href="https://www.boost.org/tools/build/doc/html/#_version_4_6_1"&gt;B2
"                version 4.6.1&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_77_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.4, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++20: 11.0.0, 12.0.0, 13.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.6.3, 11
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 11
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++20: 8.0.1, 9.1.0, 10, 11
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 11.0.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 11.0.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 11.0.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 11.0.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++20: 11.0.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_77_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Sun, 13 Mar 2022 23:26:06 +0000
-quickbook
"feed/history/boost_1_77_0.qbk
-update_count
=7
)
(feed/history/boost_1_78_0.qbk
-item
"<item><title>Version 1.78.0</title><link>https://www.boost.org/users/history/version_1_78_0.html</link><guid>https://www.boost.org/users/history/version_1_78_0.html</guid><pubDate>Wed, 08 Dec 2021 03:45:49 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_78_0.known_issues"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Known Issues&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      These are patches from library authors which were found too late to be fixed
"      in the release.
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Boost.Build silently skips installation of library headers and binaries
"          in some cases, see &lt;a href="https://github.com/bfgroup/b2/issues/104"&gt;#104&lt;/a&gt;.
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed in &lt;a href="https://github.com/bfgroup/b2/pull/113"&gt;PR#113&lt;/a&gt;,
"                &lt;a href="https://www.boost.org/patches/1_78_0/0001-b2-fix-install.patch"&gt;patch&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Boost.Atomic fails to build when targeting UWP, see &lt;a href="https://github.com/boostorg/atomic/issues/54"&gt;#54&lt;/a&gt;. &lt;a href="https://www.boost.org/patches/1_78_0/0002-atomic-fix-uwp-build.patch"&gt;Patch&lt;/a&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_78_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          No new libraries.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_78_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added an io_uring backend that may optionally be used for all I/O
"                objects, including sockets, timers, and posix descriptors.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for files, with new new classes for stream-oriented
"                and random-access files. This feature currently supports I/O completion
"                ports on Windows, and io_uring on Linux.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for portable pipes on POSIX and Windows (when I/O completion
"                ports are available).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for registered buffers, which are optimised when using
"                the io_uring backend.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added experimental support for channels, that may be used to send
"                and queue completions as messages.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Implemented improvements to &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;coro&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disabled &lt;code&gt;&lt;span class="identifier"&gt;aligned_alloc&lt;/span&gt;&lt;/code&gt;
"                on &lt;tt&gt;clang&lt;/tt&gt; when using an MSVC runtime.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed to use a faster implementation for &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;network_v4&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;canonical&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added template specialisations for common uses to improve compile
"                time.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Reduced the size of &lt;code&gt;&lt;span class="identifier"&gt;io_context&lt;/span&gt;&lt;/code&gt;
"                executors to a single pointer.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Increased the small object buffer size for &lt;code&gt;&lt;span class="identifier"&gt;execution&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;any_executor&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;any_io_executor&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed multi-signature handling when variadic templates are disabled.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compatibility with new versions of &lt;tt&gt;gcc&lt;/tt&gt; and
"                &lt;tt&gt;clang&lt;/tt&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation on Solaris.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed defence against Qt-defined macros when building with MSVC.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved error messages emitted by &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;/code&gt;
"                facilities.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;bind_executor&lt;/span&gt;&lt;/code&gt;
"                compatibility with completion tokens.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed build errors when &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT&lt;/span&gt;&lt;/code&gt;
"                is defined.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added missing move assignment operator to &lt;code&gt;&lt;span class="identifier"&gt;awaitable&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed an access violation when using coroutines with MSVC, due to
"                incorrect alignment of allocated memory.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a cleanup issue in &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;parallel_group&lt;/span&gt;&lt;/code&gt;
"                that occured when the execution context was shut down with parallel
"                operations still pending.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added clarifications to the documentation on concurrency hints.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added documentation on error handling techniques for C++20 coroutines.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed various warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Consult the &lt;a href="https://www.boost.org/doc/libs/1_78_0/doc/html/boost_asio/history.html"&gt;Revision
"                History&lt;/a&gt; for further details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/assert/"&gt;Assert&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;to_string&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Use process-local futex operations on Android for non-IPC waiting
"                and notifying operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for Linux targets that only define &lt;code&gt;&lt;span class="identifier"&gt;SYS_futex_time64&lt;/span&gt;&lt;/code&gt;
"                syscall, such as riscv32.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a workaround for incorrect result of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;alignment_of&lt;/span&gt;&lt;/code&gt;
"                on clang 8 for 64-bit types on 32-bit x86 targets.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a ulock backend for waiting and notifying operations on Darwin
"                systems since Mac OS 10.12, iOS 10.0, tvOS 10.0 or watchOS 3.0.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Windows, corrected discrepancy between &lt;tt&gt;&lt;em&gt;atomic-type&lt;/em&gt;::always_has_native_wait_notify&lt;/tt&gt;
"                and the corresponding capability macros when targeting Windows 8
"                or later. The library will now directly use &lt;code&gt;&lt;span class="identifier"&gt;WaitOnAddress&lt;/span&gt;&lt;/code&gt;
"                and related APIs from public headers and therefore require user to
"                link with &lt;code&gt;&lt;span class="identifier"&gt;synchronization&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;lib&lt;/span&gt;&lt;/code&gt;
"                if the user requires Windows 8 or later by defining &lt;code&gt;&lt;span class="identifier"&gt;BOOST_USE_WINAPI_VERSION&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;_WIN32_WINNT&lt;/span&gt;&lt;/code&gt; or similar macros.
"                The library is linked automatically on compilers that support auto-linking
"                (e.g. MSVC).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for types with padding bits, except unions, on compilers
"                that provide a way to clear the padding bits. This feature is supported
"                by gcc 11 and MSVC 14.2 (compiler version 19.27) and newer, as well
"                as other compilers supporting similar intrinsics. On compilers that
"                don't allow to clear the padding bits, types with padding are still
"                generally not supported with the exception of 80-bit &lt;code&gt;&lt;span class="keyword"&gt;long&lt;/span&gt; &lt;span class="keyword"&gt;double&lt;/span&gt;&lt;/code&gt;
"                on x86 targets. A new &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ATOMIC_NO_CLEAR_PADDING&lt;/span&gt;&lt;/code&gt;
"                capability macro is defined to indicate when clearing the padding
"                is not supported.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Initializing constructors of &lt;code&gt;&lt;span class="identifier"&gt;atomic_ref&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic_ref&lt;/span&gt;&lt;/code&gt;
"                no longer use atomic instructions to clear the padding bits in the
"                referenced object. This reduces the cost of the atomic reference
"                construction.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Initializing constructors of &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic&lt;/span&gt;&lt;/code&gt; are
"                now &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt; for enums,
"                classes and floating point types. For classes and floating point
"                types, the constructors are &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
"                if the compiler supports &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;bit_cast&lt;/span&gt;&lt;/code&gt;, the type has no padding
"                bytes and no padding is required to implement native atomic operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In accordance with C++20, default constructors of &lt;code&gt;&lt;span class="identifier"&gt;atomic&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;ipc_atomic&lt;/span&gt;&lt;/code&gt; now
"                perform value initialization of the contained object. For types without
"                a user-defined default constructor, this means the default-constructed
"                atomic will be zero-initialized.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a workaround for compilation error on AIX caused by the assembler
"                tool not supporting numeric labels. (&lt;a href="https://github.com/boostorg/atomic/pull/50"&gt;PR#50&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a workaround for compilation error with Visual Studio 2015
"                prior to Update 3. (&lt;a href="https://github.com/boostorg/atomic/issues/52"&gt;#52&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/doc/html/atomic/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                This maintenance update brings minor bug fixes and updated CI reporting.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed security vulnerability CVE-2016-9840 in zlib implementation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed WebSocket permessage_deflate implementation. This should result
"                in an increase in compression performance when using Beast WebSockets.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Removed the test stream and test framework's dependency on RTTI.
"                You can now use our handy test stream to check your embedded asynchronous
"                communications code!
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
"                and Individuals Using Beast&lt;/a&gt; list.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
"                Notes&lt;/a&gt; for a complete list of changes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a generic implementation to &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;cmath&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;,
"                enabled when &lt;code&gt;&lt;span class="identifier"&gt;BOOST_CORE_USE_GENERIC_CMATH&lt;/span&gt;&lt;/code&gt;
"                is defined or when the platform does not provide the necessary facilities
"                in &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;cmath&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;type_name&lt;/span&gt;&lt;/code&gt;, a utility function that
"                returns the name of a type as a string.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;span&lt;/span&gt;&lt;/code&gt;, a C++11 implementation of
"                C++20's &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;span&lt;/span&gt;&lt;/code&gt; (Glen Fernandes).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/describe/"&gt;Describe&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;has_describe_enumerators&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;has_describe_bases&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;has_describe_members&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;enum_to_string&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;enum_from_string&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added relational and stream insertion operators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;descriptor_by_name&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;descriptor_by_pointer&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/dll/"&gt;DLL&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed missing #include, thanks to Denis Blank (&lt;a href="https://github.com/boostorg/dll/pull/54"&gt;PR#54&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Dropped TravisCI in favor of GithubAction CI
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;v4:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;filename&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt; no longer return an implicit
"                trailing dot (".") element if the path ends with a directory
"                separator. Instead, an empty path is returned, similar to C++17 std::filesystem.
"                This also affects other methods that are defined in terms of iterators
"                or filename, such as &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stem&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;compare&lt;/span&gt;&lt;/code&gt; or &lt;code&gt;&lt;span class="identifier"&gt;lexicographical_compare&lt;/span&gt;&lt;/code&gt;.
"                For example, &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"a/b/"&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt; &lt;span class="special"&gt;==&lt;/span&gt; &lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="string"&gt;"a/b/."&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;
"                no longer holds true. (&lt;a href="https://github.com/boostorg/filesystem/issues/193"&gt;#193&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;v4:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;lexically_normal&lt;/span&gt;&lt;/code&gt;
"                no longer produce a trailing dot (".") element and omits
"                a directory separator after a trailing dot-dot ("..") element
"                in the normalized paths.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;v4:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;
"                append operations now consider root name and root directory in the
"                appended path. If the appended path is absolute, or root name is
"                present and differs from the source path, the resulting path is equivalent
"                to the appended path. If root directory is present, the result is
"                the root directory and relative path rebased on top of the root name
"                of the source path. Otherwise, the behavior is similar to v3. (&lt;a href="https://github.com/boostorg/filesystem/issues/214"&gt;#214&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;lexically_normal&lt;/span&gt;&lt;/code&gt; now converts directory
"                separators to preferred separators in the root name of the normalized
"                paths.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Optimized overloads of &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;assign&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;append&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;concat&lt;/span&gt;&lt;/code&gt;
"                and the corresponding operators to avoid unnecessary path copying
"                and reduce the amount of code redundancy.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On POSIX systems, fixed &lt;code&gt;&lt;span class="identifier"&gt;absolute&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;p&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;base&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; returning a path with root name
"                &lt;code&gt;&lt;span class="identifier"&gt;base&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;root_name&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                if &lt;code&gt;&lt;span class="identifier"&gt;p&lt;/span&gt;&lt;/code&gt; starts with
"                a root directory. In such a case &lt;code&gt;&lt;span class="identifier"&gt;p&lt;/span&gt;&lt;/code&gt;
"                is already an absolute path and should be returned as is.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;create_directories&lt;/span&gt;&lt;/code&gt;
"                no longer reports an error if the input path consists entirely of
"                dot (".") and dot-dot ("..") elements. The implementation
"                is no longer using recursion internally and therefore is better protected
"                from stack overflow on extremely long paths.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Windows, &lt;code&gt;&lt;span class="identifier"&gt;remove&lt;/span&gt;&lt;/code&gt;
"                now supports deleting read-only files. The operation will attempt
"                to reset the read-only attribute prior to removal. Note that this
"                introduces a possibility of the read-only attribute being left unset,
"                if the operation fails and the original value of the attribute fails
"                to be restored. This also affects &lt;code&gt;&lt;span class="identifier"&gt;remove_all&lt;/span&gt;&lt;/code&gt;.
"                (&lt;a href="https://github.com/boostorg/filesystem/issues/216"&gt;#216&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;remove_all&lt;/span&gt;&lt;/code&gt; now returns
"                &lt;code&gt;&lt;span class="keyword"&gt;static_cast&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;
"                &lt;span class="identifier"&gt;uintmax_t&lt;/span&gt; &lt;span class="special"&gt;&amp;gt;(-&lt;/span&gt;&lt;span class="number"&gt;1&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;
"                in case of error, similar to C++17 std::filesystem.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed a linking error about unresolved references to Boost.ContainerHash
"                functions when user's code includes &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                but not &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;container_hash&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;hash&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; and the compiler is set to
"                preserve unused inline functions. (&lt;a href="https://github.com/boostorg/filesystem/issues/215"&gt;#215&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a workaround for MSVC and compatible compilers eliminating
"                path globals cleanup in release builds. This could lead to a memory
"                leak if Boost.Filesystem shared library was repeatedly loaded and
"                unloaded in the process. (&lt;a href="https://github.com/boostorg/filesystem/issues/217"&gt;#217&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/894"&gt;PR#894&lt;/a&gt; Optimization and refactoring of rtree queries.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/913"&gt;PR#913&lt;/a&gt; DynamicGeometry and GeometryCollection support
"                      in various algorithms (undocumented for now).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/922"&gt;PR#922&lt;/a&gt; DynamicGeometry and GeometryCollection support
"                      in distance (undocumented for now).
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved issues
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/867"&gt;#867&lt;/a&gt; Poor performance of rtree query iterator with
"                      nearest predicate for big k.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/870"&gt;#870&lt;/a&gt; Compilation error in boost::geometry::self_turns.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/896"&gt;#896&lt;/a&gt; Assertion failure in get_turns with BOOST_GEOMETRY_NO_ROBUSTNESS.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/906"&gt;PR#906&lt;/a&gt; Invalid result of buffer on macos-11 with
"                      clang-12.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/921"&gt;PR#921&lt;/a&gt; Compilation errors with c++20 (various compilers)
"                      and gcc-5.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Various fixes in set operations and buffer.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/json/"&gt;JSON&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Standalone mode of the library is deprecated.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Allow external libraries to forward declare &lt;code&gt;&lt;span class="identifier"&gt;value_to&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;value_from&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed signed integer overflow in number parsing.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for &lt;code&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;Zc&lt;/span&gt;&lt;span class="special"&gt;:&lt;/span&gt;&lt;span class="identifier"&gt;implicitNoexcept&lt;/span&gt;&lt;span class="special"&gt;-&lt;/span&gt;&lt;/code&gt; on MSVC.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/lambda2/"&gt;Lambda2&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added special cases in &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; when the first argument is
"                a stream, to allow &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;cout&lt;/span&gt;
"                &lt;span class="special"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="identifier"&gt;_1&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;-&amp;gt;*&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;first&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;second&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                General changes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Updated detection of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;codecvt&lt;/span&gt;&lt;/code&gt;
"                      specializations for &lt;code&gt;&lt;span class="keyword"&gt;char16_t&lt;/span&gt;&lt;/code&gt;
"                      and &lt;code&gt;&lt;span class="keyword"&gt;char32_t&lt;/span&gt;&lt;/code&gt; for
"                      compatibility with C++17 and later. (&lt;a href="https://github.com/boostorg/log/pull/159"&gt;PR#159&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added support for C++17 &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;byte&lt;/span&gt;&lt;/code&gt;
"                      type to receive methods of the inter-process message queue.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      On Windows, when building the library for Windows 8 or later,
"                      the library will use &lt;code&gt;&lt;span class="identifier"&gt;nt62&lt;/span&gt;&lt;/code&gt;
"                      tag in the version namespace to denote the target OS ABI. For
"                      example, the version namespace could be named as &lt;code&gt;&lt;span class="identifier"&gt;v2_mt_nt62&lt;/span&gt;&lt;/code&gt;. This name will
"                      be part of all symbols exported by the library. Use the &lt;code&gt;&lt;span class="identifier"&gt;BOOST_USE_WINAPI_VERSION&lt;/span&gt;&lt;/code&gt;
"                      macro consistenly when building Boost and your code to request
"                      the minimum target Windows version.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Improved performance of SSSE3 and AVX2 implementations of the
"                      &lt;code&gt;&lt;span class="identifier"&gt;dump&lt;/span&gt;&lt;/code&gt; stream
"                      manipulator.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added support for CMake build system. Only library build is
"                      supported at this moment, Boost.Build is still used for running
"                      tests.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed a race condition on POSIX systems in &lt;code&gt;&lt;span class="identifier"&gt;reliable_message_queue&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;open_or_create&lt;/span&gt;&lt;/code&gt;
"                      or the equivalent constructor. Multiple threads or processes
"                      calling &lt;code&gt;&lt;span class="identifier"&gt;open_or_create&lt;/span&gt;&lt;/code&gt;
"                      concurrently with sending or receiving messages from the same
"                      queue could end up corrupting the queue contents and potentially
"                      crashing the process. (&lt;a href="https://github.com/boostorg/log/issues/162"&gt;#162&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a workaround for &lt;code&gt;&lt;span class="identifier"&gt;b2&lt;/span&gt;
"                      &lt;span class="identifier"&gt;install&lt;/span&gt;&lt;/code&gt; failing on
"                      Windows because of missing &lt;code&gt;&lt;span class="identifier"&gt;boost_log_setup&lt;/span&gt;&lt;/code&gt;
"                      library if &lt;code&gt;&lt;span class="identifier"&gt;BOOST_LOG_WITHOUT_SETTINGS_PARSERS&lt;/span&gt;&lt;/code&gt;
"                      is defined. (&lt;a href="https://github.com/boostorg/log/issues/164"&gt;#164&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/math/"&gt;Math&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for cubic roots.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for &lt;code&gt;&lt;span class="keyword"&gt;constexpr&lt;/span&gt;&lt;/code&gt;
"                versions of various standard library math routines.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for Bezier polynomials.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improve worst-case tanh-sinh integration performance.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disable inadvertant use of integral types in integration routines.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Minor update for erf approximations when the result is with 2ulp
"                of 1.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Allow Bernoulli code to be used on platforms with no atomic integers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improve the mode of the non-central Chi Squared distribution.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improve certain edge cases for &amp;lt;cstdfloat&amp;gt; complex-valued elementary
"                functions, see &lt;a href="https://github.com/boostorg/math/issues/507"&gt;#507&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;contains&lt;/span&gt;&lt;/code&gt; to
"                key-based indices (issue &lt;a href="https://github.com/boostorg/multi_index/issues/35"&gt;#35&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;merge&lt;/span&gt;&lt;/code&gt; operations
"                to key-based indices. The functionality goes beyond the standard
"                specification for (unordered) associative containers in a number
"                of ways, most notably:
"              &lt;/div&gt;
"              &lt;ul&gt;
"                &lt;li&gt;
"                  &lt;div&gt;
"                    The source index can be of any type, including non key-based
"                    indices.
"                  &lt;/div&gt;
"                &lt;/li&gt;
"                &lt;li&gt;
"                  &lt;div&gt;
"                    Partial merge is provided: for instance, &lt;code&gt;&lt;span class="identifier"&gt;x&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;merge&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;y&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt;&lt;span class="identifier"&gt;first&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt;&lt;span class="identifier"&gt;last&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt; merges only the elements of
"                    &lt;code&gt;&lt;span class="identifier"&gt;y&lt;/span&gt;&lt;/code&gt; within [&lt;code&gt;&lt;span class="identifier"&gt;first&lt;/span&gt;&lt;/code&gt;,&lt;code&gt;&lt;span class="identifier"&gt;last&lt;/span&gt;&lt;/code&gt;).
"                  &lt;/div&gt;
"                &lt;/li&gt;
"              &lt;/ul&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Previous versions of &lt;code&gt;&lt;span class="identifier"&gt;splice&lt;/span&gt;&lt;/code&gt;
"                for sequenced and random access indices were destructive, i.e. elements
"                were copy-inserted into the destination and then erased from the
"                source. Now, &lt;code&gt;&lt;span class="identifier"&gt;splice&lt;/span&gt;&lt;/code&gt;
"                is based on node transfer much as &lt;code&gt;&lt;span class="identifier"&gt;merge&lt;/span&gt;&lt;/code&gt;
"                in key-based indices, and has been similarly extended to accept source
"                indices of any type: in fact, &lt;code&gt;&lt;span class="identifier"&gt;splice&lt;/span&gt;&lt;/code&gt;
"                can be regarded as a frontend to the same functionality provided
"                by &lt;code&gt;&lt;span class="identifier"&gt;merge&lt;/span&gt;&lt;/code&gt; in key-based
"                indices. For reasons of backwards compatibility, the destructive
"                behavior of &lt;code&gt;&lt;span class="identifier"&gt;splice&lt;/span&gt;&lt;/code&gt;
"                has been retained in the case that the source and destination containers
"                have unequal allocators.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                The fact has been documented that index iterator types do only depend
"                on &lt;code&gt;&lt;span class="identifier"&gt;node_type&lt;/span&gt;&lt;/code&gt; and
"                the position of the index in its &lt;code&gt;&lt;span class="identifier"&gt;multi_index_container&lt;/span&gt;&lt;/code&gt;,
"                (except for hashed indices, where uniqueness/non-uniqueness is also
"                a dependency). This has implications on the validity of iterators
"                to elements transferred by &lt;code&gt;&lt;span class="identifier"&gt;merge&lt;/span&gt;&lt;/code&gt;
"                or &lt;code&gt;&lt;span class="identifier"&gt;splice&lt;/span&gt;&lt;/code&gt;. This property
"                is a variant of what has been called &lt;a href="https://wg21.link/n2980"&gt;SCARY
"                iterators&lt;/a&gt; in the C++ standard mailing lists. SCARYness is
"                currently (August 2021) not mandated for standard containers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Iterator SCARYness is now also preserved in &lt;a href="https://www.boost.org/libs/multi_index/doc/tutorial/debug.html#safe_mode"&gt;safe
"                mode&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multiprecision/"&gt;Multiprecision&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Rework rational_adaptor to remove dependency on Boost.Rational and
"                improve performance.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix issue with type_traits and clang, see &lt;a href="https://github.com/boostorg/multiprecision/issues/383"&gt;#383&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed buggy Lehmer's GCD routine, see &lt;a href="https://github.com/boostorg/multiprecision/issues/370"&gt;#370&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix mpc_complex constructors so that lossy conversions are explicit,
"                see &lt;a href="https://github.com/boostorg/multiprecision/issues/363"&gt;#363&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct miscellaneous configuration issues (Intel intrinsic usage
"                and Apple clang).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct some iostream operators for unsigned char types.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Correct mpq_rational conversions to integer types, see &lt;a href="https://github.com/boostorg/multiprecision/issues/342"&gt;#342&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/nowide/"&gt;Nowide&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Breaking Change: &lt;code&gt;&lt;span class="identifier"&gt;do_unshift&lt;/span&gt;&lt;/code&gt;
"                for the UTF-32 specialization of &lt;code&gt;&lt;span class="identifier"&gt;utf8_codecvt&lt;/span&gt;&lt;/code&gt;
"                now correctly returns &lt;code&gt;&lt;span class="identifier"&gt;noconv&lt;/span&gt;&lt;/code&gt;
"                instead of &lt;code&gt;&lt;span class="identifier"&gt;ok&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Remove unnecessary branch in &lt;code&gt;&lt;span class="identifier"&gt;utf8_codecvt&lt;/span&gt;&lt;/code&gt;
"                for UTF-16 output
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Suppress deprecation warnings in MSVC when using &lt;code&gt;&lt;span class="identifier"&gt;utf8_codecvt&lt;/span&gt;&lt;/code&gt;
"                with unicode char types
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix possible double-free when setting a custom buffer (&lt;code&gt;&lt;span class="identifier"&gt;setbuf&lt;/span&gt;&lt;/code&gt;) after &lt;code&gt;&lt;span class="identifier"&gt;filebuf&lt;/span&gt;&lt;/code&gt;
"                already allocated an internal buffer
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/pfr/"&gt;PFR&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added missing &lt;code&gt;&lt;span class="preprocessor"&gt;#include&lt;/span&gt;
"                &lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;memory&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; for inclusion of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;addressof&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed -Wzero-length-array warning when dealing with empty aggregates
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation on msvc compilers &amp;lt;= 1920 (thanks to Alexey
"                Romanov aka @alexey-romanov)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added basic CMakeLists.txt support (thanks to @pdimov aka Peter Dimov)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Multiple improvements for docs, including links to https://github.com/apolukhin/pfr_non_boost
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added misc/strip_boost_namespace.sh script to remove &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_&lt;/span&gt;&lt;/code&gt; prefixes
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Version 1.13.1
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix spelling of "epoch".
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add missing parenthesis in sparc.h (from tkoecker).
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update documentation to use Rouge code styling and Amber general
"                style.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/regex/"&gt;Regex&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Breaking Change:&lt;/strong&gt; Change \B to be
"                the opposite of \b as per Perl behaviour.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Change w32_regex_traits.hpp so that windows.h is no longer included.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fxed fuzzing related issues &lt;a href="https://github.com/boostorg/regex/issues/151"&gt;#151&lt;/a&gt;,
"                &lt;a href="https://github.com/boostorg/regex/issues/152"&gt;#152&lt;/a&gt;,
"                &lt;a href="https://github.com/boostorg/regex/issues/153"&gt;#153&lt;/a&gt;,
"                &lt;a href="https://github.com/boostorg/regex/issues/156"&gt;#156&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/system/"&gt;System&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for source locations to &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;to_string&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;error_condition&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;to_string&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;what&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;system_error&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;what&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                now contains the source location, if present.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;,&lt;/span&gt; &lt;span class="identifier"&gt;E&lt;/span&gt; &lt;span class="special"&gt;=&lt;/span&gt; &lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;,
"                a class holding either a value or an error, defined in &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;system&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;result&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/utility/"&gt;Utility&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Library documentation converted to QuickBook (thanks to Alan de Freitas,
"                &lt;a href="https://github.com/boostorg/utility/pull/79"&gt;PR#79&lt;/a&gt;).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant2/"&gt;Variant2&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;variant2&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;unsafe_get&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;I&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;visit_by_index&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_78_0.updated_tools"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/tools/build/"&gt;Build&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Includes release of &lt;a href="https://www.boost.org/tools/build/doc/html/#_version_4_7_2"&gt;B2
"                version 4.7.2&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_78_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.4, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++20: 11.0.0, 12.0.0, 13.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.6.3, 11
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 11
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++20: 8.0.1, 9.1.0, 10, 11
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 11.0.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 11.0.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 11.0.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 11.0.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++20: 11.0.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_78_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Sun, 13 Mar 2022 23:26:06 +0000
-quickbook
"feed/history/boost_1_78_0.qbk
-update_count
=7
)
(feed/history/boost_1_79_0.qbk
-item
"<item><title>Version 1.79.0</title><link>https://www.boost.org/users/history/version_1_79_0.html</link><guid>https://www.boost.org/users/history/version_1_79_0.html</guid><pubDate>Wed, 13 Apr 2022 14:22:59 +0000</pubDate><description>
"
"
"  &lt;div id="version_1_79_0.known_issues"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Known Issues&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      These are patches from library authors which were found too late to be fixed
"      in the release.
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Boost.JSON &lt;code&gt;&lt;span class="identifier"&gt;array&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;erase&lt;/span&gt;&lt;/code&gt; can segfault, see &lt;a href="https://github.com/boostorg/json/issues/692"&gt;#692&lt;/a&gt;.
"          &lt;a href="https://www.boost.org/patches/1_79_0/0001-json-array-erase-relocate.patch"&gt;Patch&lt;/a&gt;.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_79_0.new_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;New Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          No new libraries.
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_79_0.updated_libraries"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Libraries&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/asio/"&gt;Asio&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;bind_allocator&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;file_base&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;sync_all_on_write&lt;/span&gt;&lt;/code&gt; flag.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added missing implementation of &lt;code&gt;&lt;span class="identifier"&gt;basic_file&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;release&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added per-operation cancellation support to signal sets.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Exposed &lt;code&gt;&lt;span class="identifier"&gt;recycling_allocator&lt;/span&gt;&lt;/code&gt;
"                as part of the public interface.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added the &lt;code&gt;&lt;span class="identifier"&gt;nodiscard&lt;/span&gt;&lt;/code&gt;
"                attribute to a number of functions.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added OpenSSL 3.0 compatibility.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for adopting an existing &lt;code&gt;&lt;span class="identifier"&gt;SSL&lt;/span&gt;&lt;span class="special"&gt;*&lt;/span&gt;&lt;/code&gt; into an &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stream&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled &lt;code&gt;&lt;span class="identifier"&gt;executor_work_guard&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; in all build configurations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled movable socket iostreams when using clang.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;bind_cancellation_slot&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;bind_executor&lt;/span&gt;&lt;/code&gt;
"                compatibility with legacy completion tokens.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;associator&lt;/span&gt;&lt;/code&gt;
"                specialisations for &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;append&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;prepend&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;associated_allocator&lt;/span&gt;&lt;/code&gt;
"                primary template.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;tt&gt;io_uring&lt;/tt&gt; implementations of &lt;code&gt;&lt;span class="identifier"&gt;async_receive_from&lt;/span&gt;&lt;/code&gt; for sockets
"                and &lt;code&gt;&lt;span class="identifier"&gt;write_some_at&lt;/span&gt;&lt;/code&gt;
"                for files.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;tt&gt;io_uring&lt;/tt&gt; feature detection.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;coro&lt;/span&gt;&lt;/code&gt;'s
"                per-operation cancellation.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed memory management in &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;promise&lt;/span&gt;&lt;/code&gt;'s
"                type-erased completion handlers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed move &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;=&lt;/span&gt;&lt;/code&gt; implementation for &lt;code&gt;&lt;span class="identifier"&gt;ssl&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stream&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;code&gt;&lt;span class="identifier"&gt;any_io_executor&lt;/span&gt;&lt;/code&gt;
"                implementation to work when both &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_USE_TS_EXECUTOR_AS_DEFAULT&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ASIO_SEPARATE_COMPILATION&lt;/span&gt;&lt;/code&gt;
"                are defined.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed implementation of &lt;code&gt;&lt;span class="identifier"&gt;basic_socket&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;at_mark&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; when using the &lt;code&gt;&lt;span class="identifier"&gt;sockatmark&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; system call.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the recycling allocator to use the default alignment as the
"                minimum alignment for allocations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a workaround for apparent coroutine codegen bug with Apple's
"                clang.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Windows, changed the file support to open files using the same
"                sharing mode as &lt;code&gt;&lt;span class="identifier"&gt;fopen&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Linux, fixed UNIX domain sockets implementation to correctly handle
"                &lt;code&gt;&lt;span class="identifier"&gt;EAGAIN&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed implementation of &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_channel&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;reset&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_concurrent_channel&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;reset&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed potential undefined behaviour in the &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;promise&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed the &lt;code&gt;&lt;span class="identifier"&gt;co_spawn&lt;/span&gt;&lt;/code&gt;
"                implementation to dispatch cancellation signals through the executor
"                in some circumstances.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed various header inclusion issues.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed various warnings.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                A number of documentation enhancements, including:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added an overview of Asio's asynchronous model.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Reworked reference and requirements documentation in terms
"                      of asynchronous model.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Updated documentation for &lt;code&gt;&lt;span class="identifier"&gt;dispatch&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;post&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class="identifier"&gt;defer&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Documented per-operation cancellation for serial ports.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Clarified the non-concurrency guarantees made for allocators.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Reverted the &lt;code&gt;&lt;span class="identifier"&gt;io_context&lt;/span&gt;&lt;/code&gt;
"                      reference documentation to use &lt;code&gt;&lt;span class="identifier"&gt;executor_work_guard&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added more detailed reference documentation to &lt;code&gt;&lt;span class="identifier"&gt;make_strand&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;make_work_guard&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;address_v4&lt;/span&gt;&lt;/code&gt;,
"                      &lt;code&gt;&lt;span class="identifier"&gt;ip&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;address_v6&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_channel&lt;/span&gt;&lt;/code&gt;, and &lt;code&gt;&lt;span class="identifier"&gt;experimental&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_concurrent_channel&lt;/span&gt;&lt;/code&gt;.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Re-arranged and extended the Overview documentation to cover
"                      recently added features.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a C++11 example showing file descriptor passing over local
"                sockets.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added C++14 examples of wrapping callback-based APIs in asynchronous
"                operations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Consult the &lt;a href="https://www.boost.org/doc/libs/1_79_0/doc/html/boost_asio/history.html"&gt;Revision
"                History&lt;/a&gt; for further details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/assert/"&gt;Assert&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;span class="special"&gt;().&lt;/span&gt;&lt;span class="identifier"&gt;file_name&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;span class="special"&gt;().&lt;/span&gt;&lt;span class="identifier"&gt;function_name&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt; now return &lt;code&gt;&lt;span class="string"&gt;""&lt;/span&gt;&lt;/code&gt;
"                instead of &lt;code&gt;&lt;span class="string"&gt;"(unknown)"&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a &lt;code&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;/code&gt;
"                constructor from &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed &lt;code&gt;&lt;span class="identifier"&gt;BOOST_CURRENT_LOCATION&lt;/span&gt;&lt;/code&gt;
"                to more closely match the behavior of &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;current&lt;/span&gt;&lt;span class="special"&gt;()&lt;/span&gt;&lt;/code&gt;, such as being usable at top level
"                or as a default function argument.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/atomic/"&gt;Atomic&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation for Universal Windows Platform (UWP). (&lt;a href="https://github.com/boostorg/atomic/issues/54"&gt;#54&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;BOOST_ATOMIC_NO_DARWIN_ULOCK&lt;/span&gt;&lt;/code&gt;
"                configuration macro. The macro affects compilation on Darwin systems
"                and disables &lt;code&gt;&lt;span class="identifier"&gt;ulock&lt;/span&gt;&lt;/code&gt;-based
"                implementation of waiting and notifying operations. This may be useful
"                to comply with Apple App Store requirements. (&lt;a href="https://github.com/boostorg/atomic/issues/55"&gt;#55&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/beast/"&gt;Beast&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added missing include for file_body test.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed WebSocket handshake response on failure.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed open append mode for &lt;code&gt;&lt;span class="identifier"&gt;file_posix&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;file_win32&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed file open with append/append_existing flag on Windows
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed clang-cl UTF8 path handling for &lt;code&gt;&lt;span class="identifier"&gt;file_win32&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;file_stdio&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added ARM64 builds to drone CI.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed async_base documentation link.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added tests for file open in append/append_existing mode.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated CI to include gcc 11, clang 12, msvc 14.3.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added individual tests to CMake workflow.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                We'd love to know how you or your company use Beast, consider adding
"                an entry to the &lt;a href="https://github.com/boostorg/beast/wiki/Companies-and-Individuals-Using-Beast"&gt;Companies
"                and Individuals Using Beast&lt;/a&gt; list.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See the full &lt;a href="https://www.boost.org/libs/beast/doc/html/beast/release_notes.html"&gt;Release
"                Notes&lt;/a&gt; for a complete list of changes.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/core/"&gt;Core&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Made &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;pointer_traits&lt;/span&gt;&lt;/code&gt; SFINAE friendly,
"                addressing LWG3545. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt; that uses the
"                individual allocator access traits. This implementation supports
"                C++03 and above. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Updated the allocator access traits to support most of the C++11
"                allocator model in C++03. (Glen Fernandes)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt; is deprecated and will be removed
"                in a future release. The header defines &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt;
"                template, which is equivalent to &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt;
"                in &lt;code&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; header. However, since &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt; is itself deprecated in
"                C++17, users are advised to remove &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt;
"                or &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;iterator&lt;/span&gt;&lt;/code&gt; use from their code.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;core&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;verbose_terminate_handler&lt;/span&gt;&lt;/code&gt;, a utility
"                function intended to be passed to &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;set_terminate&lt;/span&gt;&lt;/code&gt;
"                that prints information about the uncaught exception to &lt;code&gt;&lt;span class="identifier"&gt;stderr&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/describe/"&gt;Describe&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Enabled unions in &lt;code&gt;&lt;span class="identifier"&gt;BOOST_DESCRIBE_STRUCT&lt;/span&gt;&lt;/code&gt;
"                and updated examples to check &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;is_union&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added example of defining a &lt;code&gt;&lt;span class="identifier"&gt;fmtlib&lt;/span&gt;&lt;/code&gt;
"                class formatter.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added example of defining a &lt;code&gt;&lt;span class="identifier"&gt;fmtlib&lt;/span&gt;&lt;/code&gt;
"                enum formatter.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added example of printing pointers to members.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/filesystem/"&gt;Filesystem&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;v3:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;replace_extension&lt;/span&gt;&lt;/code&gt;
"                now works in terms of &lt;strong&gt;v3&lt;/strong&gt; definition
"                of &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;extension&lt;/span&gt;&lt;/code&gt; rather than &lt;strong&gt;v4&lt;/strong&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed compilation of path appending and concatenation operators with
"                arguments of types convertible to &lt;code&gt;&lt;span class="identifier"&gt;path&lt;/span&gt;&lt;/code&gt;
"                or compatible string type. (&lt;a href="https://github.com/boostorg/filesystem/issues/223"&gt;#223&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On POSIX systems that support &lt;code&gt;&lt;span class="identifier"&gt;fdopendir&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;O_NOFOLLOW&lt;/span&gt;&lt;/code&gt; and
"                on Windows, &lt;code&gt;&lt;span class="identifier"&gt;remove_all&lt;/span&gt;&lt;/code&gt;
"                is now protected against &lt;a href="https://www.cve.org/CVERecord?id=CVE-2022-21658"&gt;CVE-2022-21658&lt;/a&gt;.
"                The vulnerability is a race condition that allows a third party process
"                to replace a directory that is being concurrently processed by &lt;code&gt;&lt;span class="identifier"&gt;remove_all&lt;/span&gt;&lt;/code&gt; with a directory symlink
"                and cause &lt;code&gt;&lt;span class="identifier"&gt;remove_all&lt;/span&gt;&lt;/code&gt;
"                to follow the symlink and remove files in the linked directory instead
"                of removing the symlink itself. (&lt;a href="https://github.com/boostorg/filesystem/issues/224"&gt;#224&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Windows, in &lt;code&gt;&lt;span class="identifier"&gt;remove&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;remove_all&lt;/span&gt;&lt;/code&gt; implementation,
"                use POSIX semantics for file removal, when supported by the OS (Windows
"                10 1709 and later). When POSIX semantics is supported, the file name
"                is removed from the filesystem namespace as soon as the file is marked
"                for deletion, even if it is still open and in use. With legacy Windows
"                semantics, the file name remains present in the the filesystem namespace
"                until the last file handle to the file is closed, which allows the
"                file marked for deletion to be opened and prevents creating new files
"                with the same name. (&lt;a href="https://github.com/boostorg/filesystem/issues/216"&gt;#216&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Windows, &lt;code&gt;&lt;span class="identifier"&gt;remove&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;remove_all&lt;/span&gt;&lt;/code&gt; now
"                support deleting read-only directories. Support for removing read-only
"                non-directory files was added previously.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Windows, &lt;code&gt;&lt;span class="identifier"&gt;directory_iterator&lt;/span&gt;&lt;/code&gt;
"                internal implementation has been reworked to better utilize modern
"                Windows APIs, which may improve performance while handling symlinks.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Windows, initialize internal WinAPI function pointers early, if
"                possible, to allow Boost.Filesystem operations to be invoked in global
"                constructors. This is only supported on MSVC, GCC, Clang and compatible
"                compilers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                On Windows, &lt;code&gt;&lt;span class="identifier"&gt;resize_file&lt;/span&gt;&lt;/code&gt;
"                should no longer fail with an error if the file to be resized is
"                opened.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Disabled use of the &lt;code&gt;&lt;span class="identifier"&gt;statx&lt;/span&gt;&lt;/code&gt;
"                syscall on Android prior to 11.0 (API version 30). The syscall is
"                blacklisted by seccomp and causes process termination in runtime.
"                (&lt;a href="https://github.com/boostorg/filesystem/issues/229"&gt;#229&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Deprecated:&lt;/strong&gt; &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;string_file&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                header is deprecated and will be removed in a future release. The
"                header is no longer included by &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;/&lt;/span&gt;&lt;span class="identifier"&gt;filesystem&lt;/span&gt;&lt;span class="special"&gt;.&lt;/span&gt;&lt;span class="identifier"&gt;hpp&lt;/span&gt;&lt;/code&gt;
"                by default. Users are advised to implement the functionality themselves
"                or migrate to other implementations.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;strong&gt;Deprecated:&lt;/strong&gt; Windows CE support is
"                deprecated and will be removed in a future release. Windows CE has
"                been untested for many years and is likely non-functional.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/geometry/"&gt;Geometry&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Major change
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/977"&gt;PR#977&lt;/a&gt; Rescaling is turned off by default. This avoids
"                      many related bugs in set operations and buffer.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improvements
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/961"&gt;PR#961&lt;/a&gt; Added Web Mercator projection.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/966"&gt;PR#966&lt;/a&gt; More efficient cartesian distance strategy
"                      used in simplify.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Solved issues
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/956"&gt;#956&lt;/a&gt; Result of simplify algorithm with incorrect
"                      closure.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/962"&gt;#962&lt;/a&gt; Runtime error in R-tree deserialization due
"                      to load factor.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/issues/971"&gt;#971&lt;/a&gt; R-tree insertion time impacted by use of long
"                      double on ARM platforms.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bugfixes
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/936"&gt;PR#936&lt;/a&gt; Envelope of polygon containing pole.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/948"&gt;PR#948&lt;/a&gt; Spherical and geographic envelope for near
"                      meridian segments.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/geometry/pull/974"&gt;PR#974&lt;/a&gt; Spheroidal normalization utilities for NaN
"                      coordinates.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Various fixes in set operations and buffer.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/integer/"&gt;Integer&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Optimized &lt;code&gt;&lt;span class="identifier"&gt;integer_log2&lt;/span&gt;&lt;/code&gt;
"                implementation to use bit operations internally. This allows to employ
"                bit instructions available on most modern CPUs. (&lt;a href="https://github.com/boostorg/integer/issues/31"&gt;#31&lt;/a&gt;)
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/io/"&gt;IO&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;io&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_nullbuf&lt;/span&gt;&lt;/code&gt;, a null stream buffer,
"                and &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;basic_onullstream&lt;/span&gt;&lt;/code&gt;, a null output
"                stream (Glen Fernandes).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/iterator/"&gt;Iterator&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                In &lt;code&gt;&lt;span class="identifier"&gt;counting_iterator&lt;/span&gt;&lt;/code&gt;,
"                added support for built-in 128-bit integer types supported by gcc
"                and clang and compatible compilers on some target platforms.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Silenced gcc warnings about deprecated implicit copy assignment operator
"                in &lt;code&gt;&lt;span class="identifier"&gt;counting_iterator&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/json/"&gt;JSON&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Standalone mode of the library is removed. Users who wish to continue
"                using standalone JSON can switch to &lt;a href="https://github.com/CPPAlliance/standalone-json.git"&gt;the
"                C++ Alliance fork&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt; overloads.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;/code&gt; to &lt;code&gt;&lt;span class="identifier"&gt;error_codes&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add support for JSON Pointer.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Naturally grow string during serialization.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/leaf/"&gt;LEAF&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Support for FreeRTOS and other embedded platforms
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved diagnostic information
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved configuration macros
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                BOOST_LEAF_CHECK using statement expressions under __GNUC__
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed symbol demangling bug
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/log/"&gt;Log&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                General changes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      In &lt;code&gt;&lt;span class="identifier"&gt;text_file_backend&lt;/span&gt;&lt;/code&gt;,
"                      added support for appending to a previously written log file,
"                      when file rotation is used and log file names use file counters.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;strong&gt;Breaking change:&lt;/strong&gt; The &lt;code&gt;&lt;span class="identifier"&gt;file_collector&lt;/span&gt;&lt;/code&gt; interface
"                      has changed:
"                      &lt;ul&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            &lt;code&gt;&lt;span class="identifier"&gt;scan_for_files&lt;/span&gt;&lt;/code&gt;
"                            method returns a &lt;code&gt;&lt;span class="identifier"&gt;scan_result&lt;/span&gt;&lt;/code&gt;
"                            structure that contains information collected during
"                            the scan;
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                        &lt;li&gt;
"                          &lt;div&gt;
"                            &lt;code&gt;&lt;span class="identifier"&gt;is_in_storage&lt;/span&gt;&lt;/code&gt;
"                            method added for testing if a path refers to a file within
"                            the target storage directory.
"                          &lt;/div&gt;
"                        &lt;/li&gt;
"                      &lt;/ul&gt;
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Added a new &lt;code&gt;&lt;span class="identifier"&gt;invoke_manip&lt;/span&gt;&lt;/code&gt;
"                      stream manipulator that can be used for injecting user's function
"                      into a stream output expression.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Bug fixes:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      Fixed file counter being set to zero if the user calls &lt;code&gt;&lt;span class="identifier"&gt;text_file_backend&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;scan_for_files&lt;/span&gt;&lt;/code&gt; multiple times,
"                      and the second and the following calls don't find any new files.
"                      (&lt;a href="https://github.com/boostorg/log/issues/179"&gt;#179&lt;/a&gt;)
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                See &lt;a href="https://www.boost.org/libs/log/doc/html/log/changelog.html"&gt;changelog&lt;/a&gt;
"                for more details.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/multi_index/"&gt;Multi-index Containers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved the efficiency of &lt;code&gt;&lt;span class="identifier"&gt;count&lt;/span&gt;&lt;/code&gt;
"                operations in ranked indices from &lt;code&gt;&lt;span class="identifier"&gt;O&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;log&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;n&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt; &lt;span class="special"&gt;+&lt;/span&gt; &lt;span class="identifier"&gt;count&lt;/span&gt;&lt;span class="special"&gt;)&lt;/span&gt;&lt;/code&gt;
"                to &lt;code&gt;&lt;span class="identifier"&gt;O&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;log&lt;/span&gt;&lt;span class="special"&gt;(&lt;/span&gt;&lt;span class="identifier"&gt;n&lt;/span&gt;&lt;span class="special"&gt;))&lt;/span&gt;&lt;/code&gt;.
"                Contributed by Damian Sawicki.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Maintenance work.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/nowide/"&gt;Nowide&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix compilation issues on some platforms (e.g. GCC 11 on MinGW-w64
"                and Cygwin)
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fix missing include when using &lt;code&gt;&lt;span class="identifier"&gt;BOOST_USE_WINDOWS_H&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;WIN32_LEAN_AND_MEAN&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add sanity check when using &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;nowide&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stat&lt;/span&gt;&lt;/code&gt;
"                with &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;nowide&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;stat_t&lt;/span&gt;&lt;/code&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/optional/"&gt;Optional&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;a href="https://github.com/boostorg/optional/issues/98"&gt;issue
"                #98&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed &lt;a href="https://github.com/boostorg/optional/issues/92"&gt;issue
"                #92&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added support for &lt;code&gt;&lt;span class="identifier"&gt;BOOST_NO_IOSTREAM&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Now aligned storage uses &lt;code&gt;&lt;span class="keyword"&gt;unsigned&lt;/span&gt;
"                &lt;span class="keyword"&gt;char&lt;/span&gt;&lt;/code&gt; rather than &lt;code&gt;&lt;span class="keyword"&gt;char&lt;/span&gt;&lt;/code&gt; to avoid UB.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Now using cv-unqualified &lt;code&gt;&lt;span class="identifier"&gt;value_type&lt;/span&gt;&lt;/code&gt;
"                with placement &lt;code&gt;&lt;span class="keyword"&gt;new&lt;/span&gt;&lt;/code&gt; to
"                avoid UB.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/predef/"&gt;Predef&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Version 1.14.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Add detection of LoongArch (from Zhang Na).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/qvm/"&gt;QVM&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added constexpr under C++17
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Improved single header distribution
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/smart_ptr/"&gt;Smart Pointers&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;get_allocator_pointer&lt;/span&gt;&lt;/code&gt; to obtain
"                the Allocator pointer from the result of &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocate_unique&lt;/span&gt;&lt;/code&gt;
"                (Glen Fernandes).
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/system/"&gt;System&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added a &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;source_location&lt;/span&gt;&lt;/code&gt; parameter to &lt;code&gt;&lt;span class="identifier"&gt;throw_exception_from_error&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;throw_exception_from_error&lt;/span&gt;&lt;/code&gt;
"                overloads for &lt;code&gt;&lt;span class="identifier"&gt;errc&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;errc_t&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;error_code&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;errc&lt;/span&gt;&lt;/code&gt;,
"                &lt;code&gt;&lt;span class="identifier"&gt;std&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;exception_ptr&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;result&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&lt;/span&gt;&lt;span class="identifier"&gt;T&lt;/span&gt;&lt;span class="special"&gt;&amp;gt;::&lt;/span&gt;&lt;span class="identifier"&gt;value&lt;/span&gt;&lt;/code&gt; now automatically supplies
"                &lt;code&gt;&lt;span class="identifier"&gt;BOOST_CURRENT_LOCATION&lt;/span&gt;&lt;/code&gt;
"                to &lt;code&gt;&lt;span class="identifier"&gt;throw_exception_from_error&lt;/span&gt;&lt;/code&gt;
"                via a default argument.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added an &lt;code&gt;&lt;span class="identifier"&gt;errc&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;make_error_code&lt;/span&gt;&lt;/code&gt; overload taking
"                a source location.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/throw_exception/"&gt;ThrowException&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;throw_with_location&lt;/span&gt;&lt;/code&gt;, a more lightweight
"                alternative of &lt;code&gt;&lt;span class="identifier"&gt;BOOST_THROW_EXCEPTION&lt;/span&gt;&lt;/code&gt;
"                for programs that do not use Boost.Exception.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/unordered/"&gt;Unordered&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                All containers have been updated to support heterogeneous &lt;code&gt;&lt;span class="identifier"&gt;count&lt;/span&gt;&lt;/code&gt;, &lt;code&gt;&lt;span class="identifier"&gt;equal_range&lt;/span&gt;&lt;/code&gt;
"                and &lt;code&gt;&lt;span class="identifier"&gt;find&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                All containers now implement the member function &lt;code&gt;&lt;span class="identifier"&gt;contains&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                &lt;code&gt;&lt;span class="identifier"&gt;erase_if&lt;/span&gt;&lt;/code&gt; has been
"                implemented for all containers.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                All containers have been updated to support heterogeneous &lt;code&gt;&lt;span class="identifier"&gt;erase&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class="identifier"&gt;extract&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Changed behavior of &lt;code&gt;&lt;span class="identifier"&gt;reserve&lt;/span&gt;&lt;/code&gt;
"                to eagerly allocate.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Various warning fixes in the test suite.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update code to internally use &lt;code&gt;&lt;span class="identifier"&gt;boost&lt;/span&gt;&lt;span class="special"&gt;::&lt;/span&gt;&lt;span class="identifier"&gt;allocator_traits&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Switch to Fibonacci hashing.
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Update documentation to be written in AsciiDoc instead of QuickBook.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/variant2/"&gt;Variant2&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Added &lt;code&gt;&lt;span class="keyword"&gt;operator&lt;/span&gt;&lt;span class="special"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;/code&gt;
"                for &lt;code&gt;&lt;span class="identifier"&gt;monostate&lt;/span&gt;&lt;/code&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/libs/wave/"&gt;Wave&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                C++11 now required for building Wave itself
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Fixed bugs:
"                &lt;ul&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/wave/issues/135"&gt;#135&lt;/a&gt;: Comma operators in array subscripts are deprecated
"                      in C++20
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/wave/issues/137"&gt;#137&lt;/a&gt;: Simple unknown directive =&amp;gt; found_unknown_directive
"                      is not called, stripped of pound.
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/wave/issues/138"&gt;#138&lt;/a&gt;: Empty ifdef block does not emit line directive
"                      for missing whitespace
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/wave/issues/143"&gt;#143&lt;/a&gt;: Parsing __has_include() fails with trailing tokens
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/wave/issues/145"&gt;#145&lt;/a&gt;: Sanitizer complains about reset_version()
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                  &lt;li&gt;
"                    &lt;div&gt;
"                      &lt;a href="https://github.com/boostorg/wave/issues/147"&gt;#147&lt;/a&gt;: bitwise operations between different enumeration
"                      types are deprecated
"                    &lt;/div&gt;
"                  &lt;/li&gt;
"                &lt;/ul&gt;
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_79_0.updated_tools"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Updated Tools&lt;/span&gt;&lt;/h3&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          &lt;span class="library"&gt;&lt;a href="https://www.boost.org/tools/build/"&gt;Build&lt;/a&gt;:&lt;/span&gt;
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Includes release of &lt;a href="https://www.boost.org/tools/build/doc/html/#_version_4_8_2"&gt;B2
"                version 4.8.2&lt;/a&gt;.
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_79_0.compilers_tested"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Compilers Tested&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Boost's primary test compilers are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Linux:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang: 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 12.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++11: 3.4, 11.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++14: 3.5, 3.6, 3.7, 3.8, 3.9, 4.0, 5.0, 12.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++17: 6.0.1, 7.0.0, 8.0.0, 9.0.0, 10.0.0, 11.0.0, 12.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Clang, C++20: 11.0.0, 12.0.0, 13.0.0
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC: 4.6.3, 11
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++11: 4.7.3, 4.8.5, 11
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++14: 5.4.0, 6.4.0, 7.3.0, 8.0.1, 9.1.0, 11
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++17: 7.3.0, 8.0.1, 9.1.0, 11
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                GCC, C++20: 8.0.1, 9.1.0, 10, 11
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          OS X:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang: 11.0.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++11: 11.0.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++14: 11.0.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++17: 11.0.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Apple Clang, C++20: 11.0.3
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;div&gt;
"          Windows:
"          &lt;ul&gt;
"            &lt;li&gt;
"              &lt;div&gt;
"                Visual C++: 10.0, 11.0, 12.0, 14.0, 14.1, 14.2
"              &lt;/div&gt;
"            &lt;/li&gt;
"          &lt;/ul&gt;
"        &lt;/div&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"  &lt;/div&gt;
"  &lt;div id="version_1_79_0.acknowledgements"&gt;
"    &lt;h3&gt;&lt;span class="link"&gt;Acknowledgements&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Marshall Clow, Michael Caisse and Glen Fernandes managed this release.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Thu, 14 Apr 2022 01:18:18 +0000
-quickbook
"feed/history/boost_1_79_0.qbk
-update_count
=5
)
(feed/history/unversioned.qbk
-item
"<item><title>Old Versions</title><pubDate>Tue, 14 Dec 1999 12:00:00 GMT</pubDate><boostbook:purpose>&lt;span class=&quot;brief&quot;&gt;&lt;span class=&quot;purpose&quot;&gt;
"      Early releases of boost without version numbers.
"    &lt;/span&gt;&lt;/span&gt;</boostbook:purpose><description>&lt;div class=&quot;description&quot;&gt;
"  
"  
"  &lt;div id=&quot;old_versions.14_dec_1999&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;14 Dec 1999&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;/boost/operators.hpp&quot;&gt;Operators.hpp&lt;/a&gt; &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;documentation&lt;/a&gt;
"      improved.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;old_versions.13_dec_1999&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;13 Dec 1999&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Added iterator operators and helpers to &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;header
"      operators.hpp&lt;/a&gt;, together with an iterator test program. This header
"      is maturing into something really useful for building arithmetic or iterator
"      user-defined types, so look it over even if you browsed one of the earlier
"      versions.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;old_versions.11_dec_1999&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;11 Dec 1999&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Added next() and prior() to &lt;a href=&quot;/libs/utility/utility.htm&quot;&gt;header utility.hpp&lt;/a&gt;.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;old_versions.8_dec_1999&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;8 Dec 1999&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Minor improvements to the &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;smart pointer&lt;/a&gt;
"      library: &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;==&lt;/span&gt;&lt;/code&gt;,
"      &lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;special&quot;&gt;!=&lt;/span&gt;&lt;/code&gt;,
"      and specializations for &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;/code&gt; and
"      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;less&lt;/span&gt;&lt;/code&gt; now provided.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;old_versions.18_nov_1999&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;18 Nov 1999&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Minor improvements made to the &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;Operator
"      templates&lt;/a&gt;.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;old_versions.15_nov_1999&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;15 Nov 1999&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;a href=&quot;/libs/utility/operators.htm&quot;&gt;Operator templates&lt;/a&gt; have been
"      added to the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt; library.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;old_versions.11_oct_1999&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;11 Oct 1999&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Minor &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;smart pointer&lt;/a&gt; library
"      and &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt; changes to improve portability.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;old_versions.26_sep_1999&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;26 Sep 1999&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Minor updates to several libraries: * &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;polymorphic_downcast&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; in the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt;
"      library &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt; header now works for
"      multiple inheritance cases. * &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;shared_array&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt; functions added in the &lt;a href=&quot;/libs/smart_ptr/index.html&quot;&gt;smart
"      pointer&lt;/a&gt; library. * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/boost/timer.hpp&quot;&gt;timer.hpp&lt;/a&gt;&lt;/span&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;elapsed_max&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;elapsed_min&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;()&lt;/span&gt;&lt;/code&gt;
"      functions added to the &lt;a href=&quot;/libs/timer/index.html&quot;&gt;timer&lt;/a&gt; library.
"      * &lt;span class=&quot;library&quot;&gt;&lt;a href=&quot;/libs/integer/index.html&quot;&gt;integer&lt;/a&gt;&lt;/span&gt; library bin_ubin.hpp
"      changes to eliminate compiler warning messages. * &lt;a href=&quot;/boost/config.hpp&quot;&gt;config.hpp&lt;/a&gt;
"      minor changes to aid library developers. No impact on library users.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;old_versions.3_sep_1999&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;3 Sep 1999&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      The cast functions in the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt;
"      library were considerably simplified.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;old_versions.1_sep_1999&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;1 Sep 1999&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      The cast functions initially in &lt;a href=&quot;/boost/utility.hpp&quot;&gt;utility.hpp&lt;/a&gt;
"      have been moved to &lt;a href=&quot;/boost/cast.hpp&quot;&gt;cast.hpp&lt;/a&gt;, still in
"      the &lt;a href=&quot;/libs/utility/index.html&quot;&gt;utility&lt;/a&gt; library.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;old_versions.1_sep_1999&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;1 Sep 1999&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      The category &amp;quot;Experimental&amp;quot; has been added to the &lt;a href=&quot;/libs/libraries.htm&quot;&gt;library&lt;/a&gt;
"      page. The &lt;a href=&quot;/libs/integer/index.html&quot;&gt;integer&lt;/a&gt; library is
"      the first entry.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;p&gt;
"    ...And the remainder are lost to the mists of time (for now, anyway)....
"  &lt;/p&gt;
"&lt;/div&gt;</description></item>
-last_modified
@Tue, 14 Dec 1999 12:00:00 +0000
-quickbook
"feed/history/unversioned.qbk
)
(feed/news/locale_1_53_0.qbk
-item
"<item><title>Boost.Locale security notice</title><link>http://www.boost.org/users/news/boost_locale_security_notice.html</link><guid>http://www.boost.org/users/news/boost_locale_security_notice.html</guid><pubDate>Fri, 1 Feb 2013 02:08:31 -0800</pubDate><description>
"
"
"  &lt;p&gt;
"    Boost.Locale library in Boost 1.48 to 1.52 including has a security flaw.
"  &lt;/p&gt;
"  &lt;p&gt;
"    &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utf&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;utf_traits&lt;/span&gt;&lt;/code&gt;
"    accepted some invalid UTF-8 sequences.
"  &lt;/p&gt;
"  &lt;p&gt;
"    Applications that used these functions for UTF-8 input validation could expose
"    themselves to security threats as invalid UTF-8 sequece would be considered as
"    valid.
"  &lt;/p&gt;
"  &lt;p&gt;
"    This bug is fixed in upcoming Boost 1.53.
"  &lt;/p&gt;
"  &lt;p&gt;
"    For more details see: &lt;a href=&quot;https://svn.boost.org/trac/boost/ticket/7743&quot;&gt;#7743&lt;/a&gt;
"  &lt;/p&gt;
"  &lt;p&gt;
"    Users who can't upgrade to the latest versions may apply the following patch
"    to fix the problem.
"  &lt;/p&gt;
"  &lt;p&gt;
"    &lt;a href=&quot;http://cppcms.com/files/locale/boost_locale_utf.patch&quot;&gt;http://cppcms.com/files/locale/boost_locale_utf.patch&lt;/a&gt;
"  &lt;/p&gt;
"</description></item>
-last_modified
@Fri, 01 Feb 2013 10:08:31 +0000
-quickbook
"feed/news/locale_1_53_0.qbk
)
(feed/news/moving_to_jfrog.qbk
-item
"<item><title>Boost has moved downloads to JFrog Artifactory</title><link>https://www.boost.org/users/news/boost_has_moved_downloads_to_jfr.html</link><guid>https://www.boost.org/users/news/boost_has_moved_downloads_to_jfr.html</guid><pubDate>Thu, 29 Apr 2021 11:00:00 -0700</pubDate><description>
"
"
"  &lt;p&gt;
"    The service that Boost uses to serve up its releases, Bintray.com is being retired
"    by JFrog on the 1st of May. Fortunately for Boost, they have a new service, called
"    JFrog.Arifactory, which we have transitioned to.
"  &lt;/p&gt;
"  &lt;p&gt;
"    For the users of Boost, the only difference is that there is a new URL to download
"    releases and snapshots.
"  &lt;/p&gt;
"  &lt;p&gt;
"    Instead of: &lt;a href="https://dl.bintray.com/boostorg/release/"&gt;https://dl.bintray.com/boostorg/release/&lt;/a&gt;
"    you should use &lt;a href="https://boostorg.jfrog.io/artifactory/main/release/"&gt;https://boostorg.jfrog.io/artifactory/main/release/&lt;/a&gt;
"    to retrieve boost releases.
"  &lt;/p&gt;
"  &lt;p&gt;
"    Note: The pre-1.64 Boost releases are still available via Sourceforge.
"  &lt;/p&gt;
"  &lt;p&gt;
"    Thank you to JFrog for all your past and current support.
"  &lt;/p&gt;
"</description></item>
-last_modified
@Wed, 05 May 2021 21:43:41 +0000
-quickbook
"feed/news/moving_to_jfrog.qbk
-update_count
=4
)
(feed/news/old_compilers.qbk
-item
"<item><title>Old compilers</title><link>http://www.boost.org/users/news/old_compilers.html</link><guid>http://www.boost.org/users/news/old_compilers.html</guid><pubDate>Mon, 5 Aug 2013 21:00:07 BST</pubDate><description>
"
"
"  &lt;p&gt;
"    I just sent an email to user list asking if anyone is using old compilers, I'll
"    repeat it here:
"  &lt;/p&gt;
"  &lt;blockquote&gt;
"    &lt;p&gt;
"      Hello all,
"    &lt;/p&gt;
"    &lt;p&gt;
"      There has been some discussion on the development list about dropping all support
"      for old C++ compilers. This will allow us to remove a lot of workarounds and
"      simplify the code but before doing so it's a good idea to find out if anyone
"      is still using them. Using boost with these compilers will cause a compile
"      error in the config library (you can work round that using a custom configuration,
"      but it's unlikely you'll be able to get much to work). The currently proposed
"      versions for removing support are:
"    &lt;/p&gt;
"    &lt;ul&gt;
"      &lt;li&gt;
"        &lt;p&gt;
"          Digital Mars 8.40 and earlier
"        &lt;/p&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;p&gt;
"          Visual C++ 7.0 and earlier
"        &lt;/p&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;p&gt;
"          GCC 3.2 and earlier
"        &lt;/p&gt;
"      &lt;/li&gt;
"      &lt;li&gt;
"        &lt;p&gt;
"          Intel C++ 5.0 and earlier
"        &lt;/p&gt;
"      &lt;/li&gt;
"    &lt;/ul&gt;
"    &lt;p&gt;
"      Which is, I think, a very cautious list. There's also a good chance that we
"      might want to remove support for Borland C++ 5.x. Is there anyone still using
"      those compilers?
"    &lt;/p&gt;
"    &lt;p&gt;
"      Just to be clear, this doesn't mean we'll be fully supporting all compilers
"      later than these. Old compilers such as Visual C++ 7.1 and gcc 3.4 won't have
"      a config error and we won't deliberately remove support, but support will be
"      patchy. Many libraries (especially new ones) don't support those compilers,
"      and we also don't have any formal testing for them, so if a new change breaks
"      something, it might not be noticed.
"    &lt;/p&gt;
"    &lt;p&gt;
"      If you are still using compilers which are a little more recent than the ones
"      listed above, it might still be worth mentioning in case we consider removing
"      support for them in the future.
"    &lt;/p&gt;
"    &lt;p&gt;
"      Thanks in advance for any response,
"    &lt;/p&gt;
"    &lt;p&gt;
"      Daniel James
"    &lt;/p&gt;
"  &lt;/blockquote&gt;
"  &lt;p&gt;
"    &lt;strong&gt;Update:&lt;/strong&gt; I had a few responses, but none were
"    opposed to this change, so I made it in trunk a little while ago. It should be
"    included in the next release.
"  &lt;/p&gt;
"  &lt;p&gt;
"    There was some concern that we would remove support for later compilers (e.g.
"    Visual Studio 2008, aka. Visual C++ 9.0). We have no such plans, this change
"    is only for very old compilers. As always support across Boost libraries is not
"    uniform, but most library authors do try to support as wide a range of compilers
"    as is feasible.
"  &lt;/p&gt;
"</description></item>
-last_modified
@Mon, 05 Aug 2013 20:00:07 +0000
-quickbook
"feed/news/old_compilers.qbk
)
(feed/news/result_of_1_52_0.qbk
-item
"<item><title>A Special Note for Boost 1.52.0 and Higher</title><link>http://www.boost.org/users/news/a_special_note_for_boost_1_52_0_and_higher.html</link><guid>http://www.boost.org/users/news/a_special_note_for_boost_1_52_0_and_higher.html</guid><pubDate>Tue  6 Nov 2012 09:27:25 GMT</pubDate><description>
"
"
"  &lt;p&gt;
"    Starting with Boost 1.52.0, the &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt;
"    component defaults to an implementation that uses the C++11 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;
"    keyword to deduce the return type of callables on compilers with strong &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt; support. As &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt;
"    is a key piece of library infrastructure, we at Boost have found this change
"    to be moderately disruptive. You should be aware of the issue when making the
"    decision to upgrade from an older version of Boost.
"  &lt;/p&gt;
"  &lt;div id=&quot;a_special_note_for_boost_1_52_0_and_higher.why_the_change_was_made&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Why
"    the Change Was Made&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; has been changed to use &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt; to make it more consistent with
"      &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; (when sufficient compiler support
"      is available). Also, the use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;
"      should help to improve compile times and increase the accuracy of the type
"      computation.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;a_special_note_for_boost_1_52_0_and_higher.who_is_affected&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Who
"    is Affected&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      If you use a compiler with sufficiently bug-free &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt;
"      support (including &lt;a href=&quot;http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2011/n3276.pdf&quot;&gt;N3276&lt;/a&gt;),
"      then you will get the new behavior. At the time of writing (Nov 4, 2012), the
"      only compiler in that category is Clang 3.1, but as other compilers improve,
"      this will change.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;a_special_note_for_boost_1_52_0_and_higher.what_problems_can_the_change_cause_&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;What
"    Problems Can the Change Cause?&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      The use of &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt; in &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt; can result in a different type
"      being computed than with the now-obsolete TR1 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt;
"      protocol. This will often be the case for incorrectly written TR1-style function
"      objects that misreport their result types. This is unfortunately too common.
"      But it can even happen for some correctly written function objects.
"    &lt;/p&gt;
"  &lt;/div&gt;
"  &lt;div id=&quot;a_special_note_for_boost_1_52_0_and_higher.where_can_i_learn_more_&quot;&gt;
"    &lt;h3&gt;&lt;span class=&quot;link&quot;&gt;Where
"    Can I Learn More?&lt;/span&gt;&lt;/h3&gt;
"    &lt;p&gt;
"      Please see the documentation for &lt;a href=&quot;http://www.boost.org/doc/libs/1_52_0/libs/utility/utility.htm#result_of&quot;&gt;&lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;boost&lt;/span&gt;&lt;span class=&quot;special&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt;&lt;/a&gt;
"      to understand the differences between TR1 &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt;
"      and &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;decltype&lt;/span&gt;&lt;/code&gt; &lt;code&gt;&lt;span class=&quot;identifier&quot;&gt;result_of&lt;/span&gt;&lt;/code&gt;, and to find out how you can write
"      your code to accommodate both.
"    &lt;/p&gt;
"  &lt;/div&gt;
"</description></item>
-last_modified
@Tue, 06 Nov 2012 09:27:25 +0000
-quickbook
"feed/news/result_of_1_52_0.qbk
)
